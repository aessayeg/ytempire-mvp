{
  "meta": {
    "instanceId": "ytempire-instance"
  },
  "nodes": [
    {
      "parameters": {},
      "id": "webhook-trigger",
      "name": "Video Generation Request",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "video-generation-webhook"
    },
    {
      "parameters": {
        "functionCode": "// Extract and validate video generation request\nconst requestData = $input.first().json;\n\n// Validate required fields\nif (!requestData.channelId || !requestData.topic) {\n  throw new Error('Missing required fields: channelId and topic');\n}\n\n// Prepare data for processing\nreturn {\n  channelId: requestData.channelId,\n  topic: requestData.topic,\n  userId: requestData.userId,\n  requestId: requestData.requestId || Date.now().toString(),\n  timestamp: new Date().toISOString(),\n  status: 'processing',\n  costs: {\n    estimated: 0,\n    actual: 0,\n    budget: 3.00\n  }\n};"
      },
      "id": "validate-request",
      "name": "Validate Request",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [460, 300]
    },
    {
      "parameters": {
        "url": "={{$env.YTEMPIRE_API_URL}}/api/v1/videos/{{$json.requestId}}/status",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{$env.YTEMPIRE_API_KEY}}"
            },
            {
              "name": "Content-Type", 
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "status",
              "value": "={{$json.status}}"
            },
            {
              "name": "stage",
              "value": "content_generation"
            },
            {
              "name": "timestamp",
              "value": "={{$json.timestamp}}"
            }
          ]
        }
      },
      "id": "update-status-start",
      "name": "Update Status - Start",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [680, 300]
    },
    {
      "parameters": {
        "url": "={{$env.YTEMPIRE_API_URL}}/api/v1/ai/generate-content",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{$env.YTEMPIRE_API_KEY}}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "topic",
              "value": "={{$json.topic}}"
            },
            {
              "name": "channelId", 
              "value": "={{$json.channelId}}"
            },
            {
              "name": "requestId",
              "value": "={{$json.requestId}}"
            },
            {
              "name": "maxCost",
              "value": "1.50"
            }
          ]
        }
      },
      "id": "generate-content",
      "name": "Generate Content",
      "type": "n8n-nodes-base.httpRequest", 
      "typeVersion": 3,
      "position": [900, 300]
    },
    {
      "parameters": {
        "url": "={{$env.YTEMPIRE_API_URL}}/api/v1/ai/synthesize-voice",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{$env.YTEMPIRE_API_KEY}}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "script",
              "value": "={{$json.script}}"
            },
            {
              "name": "voiceId",
              "value": "={{$json.voiceId || 'default'}}"
            },
            {
              "name": "requestId",
              "value": "={{$('Validate Request').first().json.requestId}}"
            },
            {
              "name": "maxCost",
              "value": "1.00"
            }
          ]
        }
      },
      "id": "synthesize-voice",
      "name": "Synthesize Voice",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "url": "={{$env.YTEMPIRE_API_URL}}/api/v1/ai/generate-visuals", 
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{$env.YTEMPIRE_API_KEY}}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "script",
              "value": "={{$('Generate Content').first().json.script}}"
            },
            {
              "name": "images",
              "value": "={{$('Generate Content').first().json.images}}"
            },
            {
              "name": "requestId",
              "value": "={{$('Validate Request').first().json.requestId}}"
            },
            {
              "name": "maxCost",
              "value": "0.50"
            }
          ]
        }
      },
      "id": "generate-visuals",
      "name": "Generate Visuals", 
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [1120, 500]
    },
    {
      "parameters": {
        "functionCode": "// Wait for both voice and visuals to complete\nconst voiceData = $('Synthesize Voice').first().json;\nconst visualData = $('Generate Visuals').first().json;\nconst originalRequest = $('Validate Request').first().json;\n\n// Combine results\nreturn {\n  requestId: originalRequest.requestId,\n  channelId: originalRequest.channelId,\n  audioUrl: voiceData.audioUrl,\n  visualsUrl: visualData.visualsUrl,\n  script: voiceData.script || visualData.script,\n  metadata: {\n    duration: voiceData.duration,\n    costs: {\n      content: $('Generate Content').first().json.cost || 0,\n      voice: voiceData.cost || 0,\n      visuals: visualData.cost || 0\n    }\n  },\n  status: 'ready_for_compilation'\n};"
      },
      "id": "combine-assets",
      "name": "Combine Assets",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1340, 400]
    },
    {
      "parameters": {
        "url": "={{$env.YTEMPIRE_API_URL}}/api/v1/videos/compile",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization", 
              "value": "Bearer {{$env.YTEMPIRE_API_KEY}}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "requestId",
              "value": "={{$json.requestId}}"
            },
            {
              "name": "audioUrl",
              "value": "={{$json.audioUrl}}"
            },
            {
              "name": "visualsUrl", 
              "value": "={{$json.visualsUrl}}"
            },
            {
              "name": "metadata",
              "value": "={{$json.metadata}}"
            }
          ]
        }
      },
      "id": "compile-video",
      "name": "Compile Video",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [1560, 400]
    },
    {
      "parameters": {
        "url": "={{$env.YTEMPIRE_API_URL}}/api/v1/youtube/upload",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{$env.YTEMPIRE_API_KEY}}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "videoUrl",
              "value": "={{$json.videoUrl}}"
            },
            {
              "name": "channelId",
              "value": "={{$('Combine Assets').first().json.channelId}}"
            },
            {
              "name": "metadata",
              "value": "={{$('Combine Assets').first().json.metadata}}"
            },
            {
              "name": "requestId",
              "value": "={{$('Combine Assets').first().json.requestId}}"
            }
          ]
        }
      },
      "id": "upload-to-youtube",
      "name": "Upload to YouTube",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [1780, 400]
    },
    {
      "parameters": {
        "url": "={{$env.YTEMPIRE_API_URL}}/api/v1/videos/{{$('Combine Assets').first().json.requestId}}/complete",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{$env.YTEMPIRE_API_KEY}}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "youtubeVideoId",
              "value": "={{$json.youtubeVideoId}}"
            },
            {
              "name": "finalCosts",
              "value": "={{$json.costs}}"
            },
            {
              "name": "status",
              "value": "completed"
            },
            {
              "name": "completedAt",
              "value": "={{new Date().toISOString()}}"
            }
          ]
        }
      },
      "id": "complete-workflow",
      "name": "Complete Workflow",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [2000, 400]
    },
    {
      "parameters": {
        "functionCode": "// Error handler for failed workflow\nconst error = $input.first().json;\nconst originalRequest = $('Validate Request').first().json;\n\n// Log error details\nconsole.error('Workflow failed:', {\n  requestId: originalRequest?.requestId,\n  error: error,\n  timestamp: new Date().toISOString()\n});\n\n// Return error response\nreturn {\n  requestId: originalRequest?.requestId,\n  status: 'failed',\n  error: error.message || 'Unknown error occurred',\n  timestamp: new Date().toISOString()\n};"
      },
      "id": "error-handler",
      "name": "Error Handler",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1120, 700]
    },
    {
      "parameters": {
        "url": "={{$env.YTEMPIRE_API_URL}}/api/v1/videos/{{$json.requestId}}/error",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{$env.YTEMPIRE_API_KEY}}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "error",
              "value": "={{$json.error}}"
            },
            {
              "name": "status",
              "value": "failed"
            },
            {
              "name": "timestamp",
              "value": "={{$json.timestamp}}"
            }
          ]
        }
      },
      "id": "notify-error",
      "name": "Notify Error",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [1340, 700]
    }
  ],
  "connections": {
    "Video Generation Request": {
      "main": [
        [
          {
            "node": "Validate Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Request": {
      "main": [
        [
          {
            "node": "Update Status - Start",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Status - Start": {
      "main": [
        [
          {
            "node": "Generate Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Content": {
      "main": [
        [
          {
            "node": "Synthesize Voice",
            "type": "main",
            "index": 0
          },
          {
            "node": "Generate Visuals",
            "type": "main", 
            "index": 0
          }
        ]
      ]
    },
    "Synthesize Voice": {
      "main": [
        [
          {
            "node": "Combine Assets",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Visuals": {
      "main": [
        [
          {
            "node": "Combine Assets",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine Assets": {
      "main": [
        [
          {
            "node": "Compile Video",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Compile Video": {
      "main": [
        [
          {
            "node": "Upload to YouTube",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload to YouTube": {
      "main": [
        [
          {
            "node": "Complete Workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Handler": {
      "main": [
        [
          {
            "node": "Notify Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2025-01-10T00:00:00.000Z",
      "updatedAt": "2025-01-10T00:00:00.000Z",
      "id": "ytempire-workflow",
      "name": "YTEmpire Video Generation"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2025-01-10T00:00:00.000Z",
  "versionId": "1"
}