# Docker Compose for Production Environment
# Owner: DevOps Engineer

version: '3.9'

services:
  # PostgreSQL Database with Replication
  postgres:
    image: postgres:16-alpine
    container_name: ytempire_postgres
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.utf8"
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
    ports:
      - "127.0.0.1:5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backup:/backup
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - ytempire_prod
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G

  # Redis Cache with Persistence
  redis:
    image: redis:7-alpine
    container_name: ytempire_redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - ytempire_prod
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M

  # Backend API
  backend:
    image: ytempire/backend:${VERSION:-latest}
    container_name: ytempire_backend
    environment:
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      SECRET_KEY: ${SECRET_KEY}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      ENVIRONMENT: production
      LOG_LEVEL: info
      CORS_ORIGINS: ${CORS_ORIGINS}
      SENTRY_DSN: ${SENTRY_DSN}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ELEVENLABS_API_KEY: ${ELEVENLABS_API_KEY}
      YOUTUBE_API_KEYS: ${YOUTUBE_API_KEYS}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      S3_BUCKET_NAME: ${S3_BUCKET_NAME}
    ports:
      - "127.0.0.1:8000:8000"
    volumes:
      - ./data/uploads:/app/uploads
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - ytempire_prod
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '2'
          memory: 1G

  # Frontend
  frontend:
    image: ytempire/frontend:${VERSION:-latest}
    container_name: ytempire_frontend
    environment:
      NODE_ENV: production
      VITE_API_URL: ${API_URL}
    ports:
      - "127.0.0.1:3000:80"
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - ytempire_prod
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M

  # Celery Worker
  celery-worker:
    image: ytempire/backend:${VERSION:-latest}
    container_name: ytempire_celery_worker
    environment:
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      SECRET_KEY: ${SECRET_KEY}
      ENVIRONMENT: production
      LOG_LEVEL: info
      C_FORCE_ROOT: "true"
    volumes:
      - ./data/uploads:/app/uploads
      - ./data/temp:/app/temp
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
    restart: always
    command: celery -A app.core.celery_app worker --loglevel=info --concurrency=4
    networks:
      - ytempire_prod
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '2'
          memory: 2G

  # Celery Beat Scheduler
  celery-beat:
    image: ytempire/backend:${VERSION:-latest}
    container_name: ytempire_celery_beat
    environment:
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      SECRET_KEY: ${SECRET_KEY}
      ENVIRONMENT: production
    volumes:
      - ./data/celerybeat:/app/celerybeat
    depends_on:
      - postgres
      - redis
    restart: always
    command: celery -A app.core.celery_app beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    networks:
      - ytempire_prod
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: ytempire_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
      - ./static:/usr/share/nginx/html/static
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
    restart: always
    networks:
      - ytempire_prod
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 256M

  # Prometheus Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: ytempire_prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "127.0.0.1:9090:9090"
    restart: always
    networks:
      - ytempire_prod
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: ytempire_grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "127.0.0.1:3001:3000"
    restart: always
    networks:
      - ytempire_prod
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M

  # N8N Workflow Automation
  n8n:
    image: n8nio/n8n:latest
    container_name: ytempire_n8n
    environment:
      N8N_BASIC_AUTH_ACTIVE: "true"
      N8N_BASIC_AUTH_USER: ${N8N_USER}
      N8N_BASIC_AUTH_PASSWORD: ${N8N_PASSWORD}
      N8N_HOST: ${N8N_HOST}
      N8N_PORT: 5678
      N8N_PROTOCOL: https
      WEBHOOK_URL: ${N8N_WEBHOOK_URL}
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: postgres
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_DATABASE: n8n
      DB_POSTGRESDB_USER: ${DB_USER}
      DB_POSTGRESDB_PASSWORD: ${DB_PASSWORD}
    ports:
      - "127.0.0.1:5678:5678"
    volumes:
      - n8n_data:/home/node/.n8n
    depends_on:
      - postgres
    restart: always
    networks:
      - ytempire_prod
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  n8n_data:
  nginx_logs:

networks:
  ytempire_prod:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16