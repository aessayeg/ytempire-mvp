# HAProxy configuration for YTEmpire load balancing and scaling
global
    daemon
    maxconn 4096
    log stdout local0 info
    
    # SSL/TLS configuration
    ssl-default-bind-ciphers ECDHE+AESGCM:ECDHE+CHACHA20:DHE+AESGCM:DHE+CHACHA20:!aNULL:!SHA1:!AESCCM
    ssl-default-bind-options no-sslv3 no-tlsv10 no-tlsv11
    ssl-default-server-ciphers ECDHE+AESGCM:ECDHE+CHACHA20:DHE+AESGCM:DHE+CHACHA20:!aNULL:!SHA1:!AESCCM
    ssl-default-server-options no-sslv3 no-tlsv10 no-tlsv11

defaults
    mode http
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms
    option httplog
    option dontlognull
    option http-server-close
    option forwardfor
    option redispatch
    retries 3
    
    # Health checks
    option httpchk GET /health
    http-check expect status 200

# Statistics interface
stats enable
stats uri /haproxy-stats
stats refresh 30s
stats admin if TRUE

# Frontend for HTTP traffic
frontend ytempire_frontend
    bind *:80
    bind *:443 ssl crt /etc/ssl/certs/ytempire.pem
    
    # Redirect HTTP to HTTPS
    redirect scheme https if !{ ssl_fc }
    
    # Request rate limiting
    stick-table type ip size 100k expire 30s store http_req_rate(10s),http_err_rate(10s)
    http-request track-sc0 src
    http-request deny if { sc_http_req_rate(0) gt 100 }
    
    # Security headers
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains"
    http-response set-header X-Frame-Options "DENY"
    http-response set-header X-Content-Type-Options "nosniff"
    http-response set-header X-XSS-Protection "1; mode=block"
    
    # Route based on path
    acl is_api path_beg /api/
    acl is_websocket path_beg /ws/
    acl is_metrics path_beg /metrics
    acl is_health path_beg /health
    
    # Use appropriate backend
    use_backend api_backend if is_api
    use_backend websocket_backend if is_websocket
    use_backend metrics_backend if is_metrics
    use_backend health_backend if is_health
    default_backend frontend_backend

# API Backend
backend api_backend
    balance roundrobin
    option httpchk GET /health
    
    # Dynamic server scaling
    server-template api- 1-10 backend:8000 check inter 2s rise 2 fall 3
    
    # Advanced load balancing
    hash-type consistent
    
    # Connection limits per server
    default-server maxconn 100

# WebSocket Backend
backend websocket_backend
    balance source
    option httpchk GET /health
    
    # Sticky sessions for WebSocket
    cookie SERVERID insert nocache
    
    server-template ws- 1-5 backend:8000 check inter 2s cookie ws

# Frontend Static Files Backend
backend frontend_backend
    balance roundrobin
    option httpchk GET /
    
    server-template frontend- 1-5 frontend:80 check inter 5s

# Metrics Backend
backend metrics_backend
    balance roundrobin
    option httpchk GET /health
    
    server-template metrics- 1-3 metrics_collector:8000 check inter 5s

# Health Check Backend
backend health_backend
    balance roundrobin
    
    server-template health- 1-2 backend:8000 check inter 2s

# Advanced backend for Celery workers (internal)
backend celery_backend
    balance leastconn
    option httpchk GET /health
    
    # Celery workers don't typically expose HTTP, this is for monitoring
    server-template celery- 1-10 celery_worker:8080 check inter 10s

# Listen section for TCP load balancing (database connections)
listen postgres_proxy
    bind *:5433
    mode tcp
    balance leastconn
    
    # PostgreSQL health check
    option tcp-check
    tcp-check connect port 5432
    
    # Connection to PgBouncer instances
    server-template pg- 1-3 pgbouncer:5432 check

# Redis proxy
listen redis_proxy
    bind *:6380
    mode tcp
    balance first
    
    # Redis health check
    option tcp-check
    tcp-check send AUTH\ redis_pass\r\n
    tcp-check expect string +OK
    tcp-check send PING\r\n
    tcp-check expect string +PONG
    
    server-template redis- 1-3 redis:6379 check

# Global server-state management
server-state-file /var/lib/haproxy/server-state
load-server-state-from-file global

# Automatic server template expansion based on service discovery
# This allows HAProxy to automatically discover new backend instances
resolvers docker
    nameserver dns1 127.0.0.11:53
    resolve_retries 3
    timeout resolve 2s
    timeout retry 1s
    accepted_payload_size 8192

# Error pages
errorfile 400 /etc/haproxy/errors/400.http
errorfile 403 /etc/haproxy/errors/403.http
errorfile 408 /etc/haproxy/errors/408.http
errorfile 500 /etc/haproxy/errors/500.http
errorfile 502 /etc/haproxy/errors/502.http
errorfile 503 /etc/haproxy/errors/503.http
errorfile 504 /etc/haproxy/errors/504.http