name: YTEmpire CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: false
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  REDIS_VERSION: '7-alpine'
  POSTGRES_VERSION: '15-alpine'
  COVERAGE_THRESHOLD: 95

jobs:
  # ============================================================================
  # Code Quality Checks
  # ============================================================================
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better analysis
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Set up Node
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    # Python Linting & Type Checking
    - name: Python Code Quality
      run: |
        cd backend
        pip install black flake8 mypy bandit safety
        echo "::group::Black Formatting Check"
        black --check app/ tests/
        echo "::endgroup::"
        echo "::group::Flake8 Linting"
        flake8 app/ tests/ --max-line-length=120 --extend-ignore=E203,W503
        echo "::endgroup::"
        echo "::group::MyPy Type Checking"
        mypy app/ --ignore-missing-imports
        echo "::endgroup::"
    
    # Security Scanning
    - name: Security Scan - Python
      run: |
        cd backend
        echo "::group::Bandit Security Scan"
        bandit -r app/ -ll
        echo "::endgroup::"
        echo "::group::Safety Dependency Check"
        safety check --json
        echo "::endgroup::"
    
    # Frontend Linting
    - name: Frontend Code Quality
      run: |
        cd frontend
        npm ci
        echo "::group::ESLint Check"
        npm run lint
        echo "::endgroup::"
        echo "::group::TypeScript Check"
        npm run typecheck
        echo "::endgroup::"
    
    # License Compliance
    - name: License Check
      uses: fossa-contrib/fossa-action@v3
      continue-on-error: true
      with:
        api-key: ${{ secrets.FOSSA_API_KEY }}
    
    # SAST Scanning
    - name: Run Semgrep SAST
      uses: returntocorp/semgrep-action@v2
      with:
        config: auto
        generateSarif: true
    
    - name: Upload SARIF
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: semgrep.sarif

  # ============================================================================
  # Backend Testing
  # ============================================================================
  backend-test:
    name: Backend Tests - Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    needs: [code-quality]
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: ytempire
          POSTGRES_PASSWORD: admin
          POSTGRES_DB: ytempire_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:${{ env.REDIS_VERSION }}
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        cd backend
        pip install --upgrade pip setuptools wheel
        pip install -r requirements.txt
        pip install -r requirements-test.txt
    
    - name: Setup Test Environment
      run: |
        cd backend
        # Copy test environment if it exists
        if [ -f .env.test ]; then
          cp .env.test .env
        fi
    
    - name: Run Unit Tests
      env:
        DATABASE_URL: postgresql+asyncpg://ytempire:admin@localhost:5432/ytempire_db
        POSTGRES_USER: ytempire
        POSTGRES_PASSWORD: admin
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_DB: ytempire_db
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test_secret_key_for_ci
        ENVIRONMENT: testing
      run: |
        cd backend
        pytest tests/unit/ -v --cov=app --cov-report=xml --cov-report=term-missing --junit-xml=test-results/junit.xml
    
    - name: Run Integration Tests
      env:
        DATABASE_URL: postgresql+asyncpg://ytempire:admin@localhost:5432/ytempire_db
        POSTGRES_USER: ytempire
        POSTGRES_PASSWORD: admin
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_DB: ytempire_db
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test_secret_key_for_ci
        ENVIRONMENT: testing
      run: |
        cd backend
        pytest tests/integration/ -v --cov=app --cov-append --cov-report=xml --cov-report=term-missing
    
    - name: Check Coverage Threshold
      run: |
        cd backend
        coverage report --fail-under=${{ env.COVERAGE_THRESHOLD }}
    
    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-${{ matrix.python-version }}
        fail_ci_if_error: false
    
    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-test-results-${{ matrix.python-version }}
        path: backend/test-results/

  # ============================================================================
  # Frontend Testing
  # ============================================================================
  frontend-test:
    name: Frontend Tests - Node ${{ matrix.node-version }}
    runs-on: ubuntu-latest
    needs: [code-quality]
    strategy:
      matrix:
        node-version: ['18', '20']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Cache node modules
      uses: actions/cache@v4
      with:
        path: frontend/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run Unit Tests
      run: |
        cd frontend
        npm run test:unit -- --coverage --reporters=default --reporters=jest-junit
      env:
        CI: true
    
    - name: Run Component Tests
      run: |
        cd frontend
        npm run test:components -- --coverage
      env:
        CI: true
    
    - name: Check Coverage Threshold
      run: |
        cd frontend
        npx nyc check-coverage --lines ${{ env.COVERAGE_THRESHOLD }}
    
    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-${{ matrix.node-version }}
        fail_ci_if_error: false
    
    - name: Build Production Bundle
      run: |
        cd frontend
        npm run build
      env:
        VITE_API_URL: https://api.ytempire.com
    
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build-${{ matrix.node-version }}
        path: frontend/dist/

  # ============================================================================
  # E2E Testing
  # ============================================================================
  e2e-test:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: ytempire
          POSTGRES_PASSWORD: admin
          POSTGRES_DB: ytempire_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:${{ env.REDIS_VERSION }}
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Set up Node
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install Backend
      run: |
        cd backend
        pip install -r requirements.txt
        pip install -r requirements-test.txt
    
    - name: Install Frontend
      run: |
        cd frontend
        npm ci
        npx playwright install chromium
    
    - name: Start Services
      env:
        DATABASE_URL: postgresql+asyncpg://ytempire:admin@localhost:5432/ytempire_db
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test_secret_key_for_e2e
        ENVIRONMENT: testing
      run: |
        cd backend
        alembic upgrade head
        uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        cd ../frontend
        npm run dev &
        sleep 10
    
    - name: Run E2E Tests
      run: |
        cd frontend
        npm run test:e2e
    
    - name: Upload E2E Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-results
        path: |
          frontend/test-results/
          frontend/playwright-report/

  # ============================================================================
  # Performance Testing
  # ============================================================================
  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [backend-test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up K6
      run: |
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
    
    - name: Start Test Environment
      run: |
        docker-compose -f docker-compose.test.yml up -d
        sleep 30
    
    - name: Run Load Tests
      run: |
        k6 run tests/performance/k6-performance-tests.js --out json=test-results/k6-results.json
    
    - name: Analyze Performance Results
      run: |
        python scripts/analyze_performance.py test-results/k6-results.json
    
    - name: Upload Performance Results
      uses: actions/upload-artifact@v4
      with:
        name: performance-test-results
        path: test-results/

  # ============================================================================
  # Docker Build & Push
  # ============================================================================
  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    if: github.event_name == 'push'
    permissions:
      contents: read
      packages: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=sha,prefix={{branch}}-
    
    - name: Build and Push Backend
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}-backend
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_DATE=${{ github.event.repository.updated_at }}
          VCS_REF=${{ github.sha }}
    
    - name: Build and Push Frontend
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}-frontend
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_DATE=${{ github.event.repository.updated_at }}
          VCS_REF=${{ github.sha }}
          VITE_API_URL=${{ secrets.VITE_API_URL }}

  # ============================================================================
  # Security Scanning
  # ============================================================================
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.event_name == 'push'
    permissions:
      contents: read
      security-events: write
    
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ghcr.io/${{ github.repository }}:${{ github.ref_name }}-backend
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
    
    - name: Upload Trivy results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  # ============================================================================
  # Deploy to Staging
  # ============================================================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-build, e2e-test, security-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment:
      name: staging
      url: https://staging.ytempire.com
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Staging
      run: |
        echo "Deploying to staging environment"
        ./scripts/deploy_staging.sh
      env:
        STAGING_HOST: ${{ secrets.STAGING_HOST }}
        STAGING_SSH_KEY: ${{ secrets.STAGING_SSH_KEY }}
        DOCKER_IMAGE_TAG: ${{ github.sha }}
    
    - name: Run Smoke Tests
      run: |
        ./scripts/smoke_tests.sh staging
    
    - name: Notify Deployment
      uses: 8398a7/action-slack@v4
      with:
        status: ${{ job.status }}
        text: 'Staging deployment completed for ${{ github.sha }}'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()

  # ============================================================================
  # Summary Report
  # ============================================================================
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, e2e-test, performance-test]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Generate Test Report
      run: |
        echo "## Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Backend Tests" >> $GITHUB_STEP_SUMMARY
        echo "✅ Unit Tests Passed" >> $GITHUB_STEP_SUMMARY
        echo "✅ Integration Tests Passed" >> $GITHUB_STEP_SUMMARY
        echo "✅ Coverage Threshold Met (${COVERAGE_THRESHOLD}%)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Frontend Tests" >> $GITHUB_STEP_SUMMARY
        echo "✅ Component Tests Passed" >> $GITHUB_STEP_SUMMARY
        echo "✅ Build Successful" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### E2E Tests" >> $GITHUB_STEP_SUMMARY
        echo "✅ All scenarios passed" >> $GITHUB_STEP_SUMMARY
    
    - name: Comment PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '✅ All tests passed! Coverage threshold met.'
          })