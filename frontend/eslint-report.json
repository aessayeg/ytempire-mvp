
> frontend@0.0.0 lint
> eslint . --format=json

[{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\.storybook\\main.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\.storybook\\preview.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\eslint.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\jest.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\postcss.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Accessibility\\AccessibleButton.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":64,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":64,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1658,1661],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1658,1661],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { forwardRef } from 'react';\nimport { Button, Tooltip } from '@mui/material';\nimport type { ButtonProps } from '@mui/material';\nimport { getAriaProps } from '../../utils/accessibility';\n\ninterface AccessibleButtonProps extends ButtonProps {\n  ariaLabel?: string;\n  ariaDescribedBy?: string;\n  ariaExpanded?: boolean;\n  ariaPressed?: boolean;\n  tooltip?: string;\n  keyboardShortcut?: string;\n  role?: string;\n}\n\nexport const AccessibleButton = forwardRef<HTMLButtonElement, AccessibleButtonProps>(\n  (\n    {\n      ariaLabel,\n      ariaDescribedBy,\n      ariaExpanded,\n      ariaPressed,\n      tooltip,\n      keyboardShortcut,\n      role,\n      disabled,\n      children,\n      onClick,\n      ...props\n    },\n    ref\n  ) => {\n    const ariaProps = getAriaProps({\n      label: ariaLabel || (typeof children === 'string' ? children : undefined),\n      describedBy: ariaDescribedBy,\n      expanded: ariaExpanded,\n      disabled,\n      role,\n    });\n\n    // Handle keyboard shortcuts\n    React.useEffect(() => {\n      if (!keyboardShortcut || disabled) return;\n\n      const handleKeyDown = (e: KeyboardEvent) => {\n        const keys = keyboardShortcut.toLowerCase().split('+');\n        const isMatch = keys.every((key) => {\n          switch (key) {\n            case 'ctrl':\n              return e.ctrlKey;\n            case 'alt':\n              return e.altKey;\n            case 'shift':\n              return e.shiftKey;\n            case 'meta':\n              return e.metaKey;\n            default:\n              return e.key.toLowerCase() === key;\n          }\n        });\n\n        if (isMatch) {\n          e.preventDefault();\n          onClick?.(e as any);\n        }\n      };\n\n      document.addEventListener('keydown', handleKeyDown);\n      return () => document.removeEventListener('keydown', handleKeyDown);\n    }, [keyboardShortcut, disabled, onClick]);\n\n    const button = (\n      <Button\n        ref={ref}\n        disabled={disabled}\n        onClick={onClick}\n        {...ariaProps}\n        {...props}\n        aria-pressed={ariaPressed}\n      >\n        {children}\n      </Button>\n    );\n\n    if (tooltip) {\n      const tooltipTitle = keyboardShortcut\n        ? `${tooltip} (${keyboardShortcut})`\n        : tooltip;\n\n      return (\n        <Tooltip title={tooltipTitle} arrow>\n          <span>{button}</span>\n        </Tooltip>\n      );\n    }\n\n    return button;\n  }\n);\n\nAccessibleButton.displayName = 'AccessibleButton';","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Accessibility\\FocusTrap.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":2,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":99,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":99,"endColumn":32}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useRef } from 'react';\nimport { getFocusableElements } from '../../utils/accessibility';\n\ninterface FocusTrapProps {\n  children: React.ReactNode;\n  active?: boolean;\n  returnFocus?: boolean;\n  initialFocus?: string;\n  finalFocus?: string;\n  allowEscape?: boolean;\n}\n\nexport const FocusTrap: React.FC<FocusTrapProps> = ({\n  children,\n  active = true,\n  returnFocus = true,\n  initialFocus,\n  finalFocus,\n  allowEscape = false,\n}) => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const previousFocusRef = useRef<HTMLElement | null>(null);\n\n  useEffect(() => {\n    if (!active || !containerRef.current) return;\n\n    // Store previous focus\n    if (returnFocus) {\n      previousFocusRef.current = document.activeElement as HTMLElement;\n    }\n\n    const container = containerRef.current;\n    const focusableElements = getFocusableElements(container);\n    \n    if (focusableElements.length === 0) return;\n\n    const firstElement = focusableElements[0];\n\n    // Set initial focus\n    if (initialFocus) {\n      const initialElement = container.querySelector(initialFocus) as HTMLElement;\n      initialElement?.focus();\n    } else {\n      firstElement?.focus();\n    }\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.key === 'Escape' && allowEscape) {\n        previousFocusRef.current?.focus();\n        return;\n      }\n\n      if (e.key !== 'Tab') return;\n\n      // Refresh focusable elements (they might have changed)\n      const currentFocusableElements = getFocusableElements(container);\n      const currentFirst = currentFocusableElements[0];\n      const currentLast = currentFocusableElements[currentFocusableElements.length - 1];\n\n      if (e.shiftKey) {\n        if (document.activeElement === currentFirst) {\n          e.preventDefault();\n          currentLast?.focus();\n        }\n      } else {\n        if (document.activeElement === currentLast) {\n          e.preventDefault();\n          currentFirst?.focus();\n        }\n      }\n    };\n\n    // Add event listener\n    container.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      container.removeEventListener('keydown', handleKeyDown);\n      \n      // Return focus\n      if (returnFocus && previousFocusRef.current) {\n        if (finalFocus) {\n          const finalElement = document.querySelector(finalFocus) as HTMLElement;\n          finalElement?.focus();\n        } else {\n          previousFocusRef.current.focus();\n        }\n      }\n    };\n  }, [active, returnFocus, initialFocus, finalFocus, allowEscape]);\n\n  return (\n    <div ref={containerRef} data-focus-trap={active}>\n      {children}\n    </div>\n  );\n};\n\n// Hook for managing focus\nexport const useFocusManagement = () => {\n  const focusHistory = useRef<HTMLElement[]>([]);\n\n  const pushFocus = (element?: HTMLElement) => {\n    const current = element || (document.activeElement as HTMLElement);\n    focusHistory.current.push(current);\n  };\n\n  const popFocus = () => {\n    const previous = focusHistory.current.pop();\n    if (previous && document.body.contains(previous)) {\n      previous.focus();\n    }\n  };\n\n  const clearFocusHistory = () => {\n    focusHistory.current = [];\n  };\n\n  const focusElement = (selector: string) => {\n    const element = document.querySelector(selector) as HTMLElement;\n    if (element) {\n      pushFocus();\n      element.focus();\n    }\n  };\n\n  const focusFirst = (container?: HTMLElement) => {\n    const root = container || document.body;\n    const focusableElements = getFocusableElements(root);\n    if (focusableElements[0]) {\n      pushFocus();\n      focusableElements[0].focus();\n    }\n  };\n\n  const focusLast = (container?: HTMLElement) => {\n    const root = container || document.body;\n    const focusableElements = getFocusableElements(root);\n    const lastElement = focusableElements[focusableElements.length - 1];\n    if (lastElement) {\n      pushFocus();\n      lastElement.focus();\n    }\n  };\n\n  return {\n    pushFocus,\n    popFocus,\n    clearFocusHistory,\n    focusElement,\n    focusFirst,\n    focusLast,\n  };\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Accessibility\\ScreenReaderAnnouncer.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":2,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":31,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":31,"endColumn":33},{"ruleId":"react-refresh/only-export-components","severity":2,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":93,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":93,"endColumn":25}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport { Box } from '@mui/material';\n\ninterface Announcement {\n  id: string;\n  message: string;\n  priority: 'polite' | 'assertive';\n}\n\nclass AnnouncementManager {\n  private listeners: ((announcement: Announcement) => void)[] = [];\n  \n  announce(message: string, priority: 'polite' | 'assertive' = 'polite') {\n    const announcement: Announcement = {\n      id: Date.now().toString(),\n      message,\n      priority,\n    };\n    \n    this.listeners.forEach((listener) => listener(announcement));\n  }\n  \n  subscribe(listener: (announcement: Announcement) => void) {\n    this.listeners.push(listener);\n    return () => {\n      this.listeners = this.listeners.filter((l) => l !== listener);\n    };\n  }\n}\n\nexport const announcementManager = new AnnouncementManager();\n\nexport const ScreenReaderAnnouncer: React.FC = () => {\n  const [announcements, setAnnouncements] = useState<Announcement[]>([]);\n  \n  useEffect(() => {\n    const unsubscribe = announcementManager.subscribe((announcement) => {\n      setAnnouncements((prev) => [...prev, announcement]);\n      \n      // Remove announcement after 1 second\n      setTimeout(() => {\n        setAnnouncements((prev) => prev.filter((a) => a.id !== announcement.id));\n      }, 1000);\n    });\n    \n    return unsubscribe;\n  }, []);\n  \n  return (\n    <>\n      <Box\n        component=\"div\"\n        role=\"status\"\n        aria-live=\"polite\"\n        aria-atomic=\"true\"\n        sx={{\n          position: 'absolute',\n          left: '-10000px',\n          width: '1px',\n          height: '1px',\n          overflow: 'hidden',\n        }}\n      >\n        {announcements\n          .filter((a) => a.priority === 'polite')\n          .map((a) => a.message)\n          .join('. ')}\n      </Box>\n      \n      <Box\n        component=\"div\"\n        role=\"alert\"\n        aria-live=\"assertive\"\n        aria-atomic=\"true\"\n        sx={{\n          position: 'absolute',\n          left: '-10000px',\n          width: '1px',\n          height: '1px',\n          overflow: 'hidden',\n        }}\n      >\n        {announcements\n          .filter((a) => a.priority === 'assertive')\n          .map((a) => a.message)\n          .join('. ')}\n      </Box>\n    </>\n  );\n};\n\n// Hook for using announcements\nexport const useAnnounce = () => {\n  return {\n    announce: (message: string, priority: 'polite' | 'assertive' = 'polite') => {\n      announcementManager.announce(message, priority);\n    },\n    announcePolite: (message: string) => {\n      announcementManager.announce(message, 'polite');\n    },\n    announceAssertive: (message: string) => {\n      announcementManager.announce(message, 'assertive');\n    },\n  };\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Accessibility\\SkipNavigation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Accessibility\\index.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":2,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":5,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":5,"endColumn":22},{"ruleId":"react-refresh/only-export-components","severity":2,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":6,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":6,"endColumn":14},{"ruleId":"react-refresh/only-export-components","severity":2,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":8,"column":21,"nodeType":"Identifier","messageId":"namedExport","endLine":8,"endColumn":39},{"ruleId":"react-refresh/only-export-components","severity":2,"message":"This rule can't verify that `export *` only exports components.","line":11,"column":1,"nodeType":"ExportAllDeclaration","messageId":"exportAll","endLine":11,"endColumn":43}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export { AccessibleButton } from './AccessibleButton';\nexport { SkipNavigation } from './SkipNavigation';\nexport { \n  ScreenReaderAnnouncer, \n  announcementManager, \n  useAnnounce \n} from './ScreenReaderAnnouncer';\nexport { FocusTrap, useFocusManagement } from './FocusTrap';\n\n// Re-export accessibility utilities\nexport * from '../../utils/accessibility';","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Analytics\\AnalyticsDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'startOfMonth' is defined but never used.","line":72,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":72,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'endOfMonth' is defined but never used.","line":72,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":72,"endColumn":51}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport Grid from '@mui/material/Grid2';\nimport {\n  Box,\n  Card,\n  CardContent,\n  CardHeader,\n  Typography,\n  Button,\n  Select,\n  MenuItem,\n  FormControl,\n  InputLabel,\n  Chip,\n  Avatar,\n  LinearProgress,\n  Tabs,\n  Tab,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TableSortLabel,\n  ToggleButton,\n  ToggleButtonGroup,\n  useTheme,\n} from '@mui/material';\nimport {\n  TrendingUp,\n  TrendingDown,\n  AttachMoney,\n  Visibility,\n  ThumbUp,\n  Comment,\n  PlayCircle,\n  Download,\n  Refresh,\n  CompareArrows,\n  BarChart as BarChartIcon,\n  ShowChart,\n  Timeline,\n  YouTube,\n} from '@mui/icons-material';\nimport {\n  LineChart,\n  Line,\n  AreaChart,\n  Area,\n  BarChart,\n  Bar,\n  PieChart,\n  Pie,\n  Cell,\n  ComposedChart,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip as RechartsTooltip,\n  Legend,\n  ResponsiveContainer,\n  RadarChart,\n  PolarGrid,\n  PolarAngleAxis,\n  PolarRadiusAxis,\n  Radar,\n  Scatter,\n  ScatterChart,\n  ZAxis,\n} from 'recharts';\nimport { format, subDays, startOfMonth, endOfMonth, parseISO } from 'date-fns';\n\ninterface RevenueData {\n  date: string;\n  revenue: number;\n  adRevenue: number;\n  membershipRevenue: number;\n  sponsorshipRevenue: number;\n  views: number;\n  rpm: number;\n}\n\ninterface VideoPerformance {\n  id: string;\n  title: string;\n  thumbnail: string;\n  publishDate: Date;\n  views: number;\n  watchTime: number;\n  likes: number;\n  comments: number;\n  shares: number;\n  ctr: number;\n  avd: number;\n  revenue: number;\n  impressions: number;\n  retention: number[];\n}\n\ninterface ChannelComparison {\n  channelId: string;\n  channelName: string;\n  subscribers: number;\n  totalViews: number;\n  totalRevenue: number;\n  avgViews: number;\n  avgEngagement: number;\n  videosPublished: number;\n  growthRate: number;\n  health: number;\n}\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: number;\n  value: number;\n}\n\nconst TabPanel: React.FC<TabPanelProps> = ({ children, value, index }) => {\n  return (\n    <div hidden={value !== index}>\n      {value === index && <Box sx={{ py: 3 }}>{children}</Box>}\n    </div>\n  );\n};\n\nexport const AnalyticsDashboard: React.FC = () => {\n  const theme = useTheme();\n  const [tabValue, setTabValue] = useState(0);\n  const [timeRange, setTimeRange] = useState('7d');\n  const [chartType, setChartType] = useState<'line' | 'bar' | 'area'>('line');\n  const [comparisonMode, setComparisonMode] = useState(false);\n\n  // Mock data - replace with API calls\n  const [revenueData, setRevenueData] = useState<RevenueData[]>([]);\n  const [videoPerformance, setVideoPerformance] = useState<VideoPerformance[]>([]);\n  const [channelComparison, setChannelComparison] = useState<ChannelComparison[]>([]);\n\n  useEffect(() => {\n    // Generate mock revenue data\n    const days = timeRange === '7d' ? 7 : timeRange === '30d' ? 30 : 90;\n    const revenue = Array.from({ length: days }, (_, i) => {\n      const date = subDays(new Date(), days - 1 - i);\n      const baseRevenue = 100 + Math.random() * 50;\n      return {\n        date: format(date, 'yyyy-MM-dd'),\n        revenue: baseRevenue,\n        adRevenue: baseRevenue * 0.6,\n        membershipRevenue: baseRevenue * 0.25,\n        sponsorshipRevenue: baseRevenue * 0.15,\n        views: Math.floor(5000 + Math.random() * 10000),\n        rpm: 3 + Math.random() * 2,\n      };\n    });\n    setRevenueData(revenue);\n\n    // Generate mock video performance data\n    const videos: VideoPerformance[] = Array.from({ length: 20 }, (_, i) => ({\n      id: `video-${i}`,\n      title: `Video Title ${i + 1}: Amazing Content That Gets Views`,\n      thumbnail: `/thumbnail-${i}.jpg`,\n      publishDate: subDays(new Date(), Math.floor(Math.random() * 30)),\n      views: Math.floor(1000 + Math.random() * 50000),\n      watchTime: Math.floor(100 + Math.random() * 5000),\n      likes: Math.floor(50 + Math.random() * 2000),\n      comments: Math.floor(10 + Math.random() * 500),\n      shares: Math.floor(5 + Math.random() * 200),\n      ctr: 2 + Math.random() * 8,\n      avd: 30 + Math.random() * 40,\n      revenue: 10 + Math.random() * 200,\n      impressions: Math.floor(10000 + Math.random() * 100000),\n      retention: Array.from({ length: 10 }, () => 100 - Math.random() * 50),\n    }));\n    setVideoPerformance(videos);\n\n    // Generate mock channel comparison data\n    const channels: ChannelComparison[] = [\n      {\n        channelId: 'ch1',\n        channelName: 'Tech Insights Daily',\n        subscribers: 125000,\n        totalViews: 8500000,\n        totalRevenue: 15000,\n        avgViews: 25000,\n        avgEngagement: 4.5,\n        videosPublished: 342,\n        growthRate: 12.5,\n        health: 92,\n      },\n      {\n        channelId: 'ch2',\n        channelName: 'AI Explained',\n        subscribers: 89000,\n        totalViews: 5200000,\n        totalRevenue: 9800,\n        avgViews: 18000,\n        avgEngagement: 5.2,\n        videosPublished: 289,\n        growthRate: 15.3,\n        health: 88,\n      },\n      {\n        channelId: 'ch3',\n        channelName: 'Future Tech',\n        subscribers: 67000,\n        totalViews: 3100000,\n        totalRevenue: 6500,\n        avgViews: 12000,\n        avgEngagement: 3.8,\n        videosPublished: 258,\n        growthRate: 8.7,\n        health: 75,\n      },\n      {\n        channelId: 'ch4',\n        channelName: 'Coding Masters',\n        subscribers: 234000,\n        totalViews: 12000000,\n        totalRevenue: 28000,\n        avgViews: 35000,\n        avgEngagement: 6.1,\n        videosPublished: 342,\n        growthRate: 18.9,\n        health: 95,\n      },\n    ];\n    setChannelComparison(channels);\n\n    setLoading(false);\n  }, [timeRange]);\n\n  // Calculate summary metrics\n  const totalRevenue = revenueData.reduce((sum, d) => sum + d.revenue, 0);\n  const totalViews = revenueData.reduce((sum, d) => sum + d.views, 0);\n  const avgRPM = totalViews > 0 ? (totalRevenue / totalViews) * 1000 : 0;\n  const revenueGrowth = revenueData.length > 1\n    ? ((revenueData[revenueData.length - 1].revenue - revenueData[0].revenue) / revenueData[0].revenue) * 100\n    : 0;\n\n  // Chart colors\n  const COLORS = [\n    theme.palette.primary.main,\n    theme.palette.secondary.main,\n    theme.palette.success.main,\n    theme.palette.warning.main,\n    theme.palette.error.main,\n    theme.palette.info.main,\n  ];\n\n  // Revenue breakdown for pie chart\n  const revenueBreakdown = [\n    { name: 'Ad Revenue', value: totalRevenue * 0.6, percentage: 60 },\n    { name: 'Memberships', value: totalRevenue * 0.25, percentage: 25 },\n    { name: 'Sponsorships', value: totalRevenue * 0.15, percentage: 15 },\n  ];\n\n  // Channel comparison radar data\n  const radarData = channelComparison.map(channel => ({\n    channel: channel.channelName,\n    subscribers: (channel.subscribers / 250000) * 100,\n    views: (channel.avgViews / 40000) * 100,\n    engagement: (channel.avgEngagement / 10) * 100,\n    revenue: (channel.totalRevenue / 30000) * 100,\n    growth: (channel.growthRate / 20) * 100,\n    health: channel.health,\n  }));\n\n  const renderRevenueTab = () => (\n    <Grid container spacing={3}>\n      {/* Summary Cards */}\n      <Grid size={{ xs: 12, sm: 6, md: 3 }}>\n        <Card>\n          <CardContent>\n            <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n              <Avatar sx={{ bgcolor: 'success.main', mr: 2 }}>\n                <AttachMoney />\n              </Avatar>\n              <Box>\n                <Typography variant=\"h4\" fontWeight=\"bold\">\n                  ${totalRevenue.toFixed(2)}\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  Total Revenue\n                </Typography>\n              </Box>\n            </Box>\n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n              {revenueGrowth > 0 ? (\n                <TrendingUp color=\"success\" fontSize=\"small\" />\n              ) : (\n                <TrendingDown color=\"error\" fontSize=\"small\" />\n              )}\n              <Typography\n                variant=\"body2\"\n                color={revenueGrowth > 0 ? 'success.main' : 'error.main'}\n              >\n                {revenueGrowth > 0 ? '+' : ''}{revenueGrowth.toFixed(1)}% vs previous period\n              </Typography>\n            </Box>\n          </CardContent>\n        </Card>\n      </Grid>\n\n      <Grid size={{ xs: 12, sm: 6, md: 3 }}>\n        <Card>\n          <CardContent>\n            <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n              <Avatar sx={{ bgcolor: 'primary.main', mr: 2 }}>\n                <Visibility />\n              </Avatar>\n              <Box>\n                <Typography variant=\"h4\" fontWeight=\"bold\">\n                  {(totalViews / 1000).toFixed(1)}K\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  Total Views\n                </Typography>\n              </Box>\n            </Box>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              Avg per day: {(totalViews / revenueData.length).toFixed(0)}\n            </Typography>\n          </CardContent>\n        </Card>\n      </Grid>\n\n      <Grid size={{ xs: 12, sm: 6, md: 3 }}>\n        <Card>\n          <CardContent>\n            <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n              <Avatar sx={{ bgcolor: 'warning.main', mr: 2 }}>\n                <Timeline />\n              </Avatar>\n              <Box>\n                <Typography variant=\"h4\" fontWeight=\"bold\">\n                  ${avgRPM.toFixed(2)}\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  Average RPM\n                </Typography>\n              </Box>\n            </Box>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              Revenue per 1000 views\n            </Typography>\n          </CardContent>\n        </Card>\n      </Grid>\n\n      <Grid size={{ xs: 12, sm: 6, md: 3 }}>\n        <Card>\n          <CardContent>\n            <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n              <Avatar sx={{ bgcolor: 'info.main', mr: 2 }}>\n                <BarChartIcon />\n              </Avatar>\n              <Box>\n                <Typography variant=\"h4\" fontWeight=\"bold\">\n                  ${(totalRevenue / revenueData.length).toFixed(2)}\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  Daily Average\n                </Typography>\n              </Box>\n            </Box>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              Based on {timeRange} data\n            </Typography>\n          </CardContent>\n        </Card>\n      </Grid>\n\n      {/* Revenue Chart */}\n      <Grid size={{ xs: 12, md: 8 }}>\n        <Card>\n          <CardHeader\n            title=\"Revenue Trend\"\n            action={\n              <ToggleButtonGroup\n                value={chartType}\n                exclusive\n                onChange={(e, v) => v && setChartType(v)}\n                size=\"small\"\n              >\n                <ToggleButton value=\"line\">\n                  <ShowChart />\n                </ToggleButton>\n                <ToggleButton value=\"bar\">\n                  <BarChartIcon />\n                </ToggleButton>\n                <ToggleButton value=\"area\">\n                  <Timeline />\n                </ToggleButton>\n              </ToggleButtonGroup>\n            }\n          />\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={400}>\n              {chartType === 'line' ? (\n                <LineChart data={revenueData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"date\" tickFormatter={(date) => format(parseISO(date), 'MM/dd')} />\n                  <YAxis />\n                  <RechartsTooltip\n                    labelFormatter={(date) => format(parseISO(date), 'PPP')}\n                    formatter={(value: number) => `$${value.toFixed(2)}`}\n                  />\n                  <Legend />\n                  <Line type=\"monotone\" dataKey=\"revenue\" stroke={COLORS[0]} name=\"Total Revenue\" strokeWidth={2} />\n                  <Line type=\"monotone\" dataKey=\"adRevenue\" stroke={COLORS[1]} name=\"Ad Revenue\" />\n                  <Line type=\"monotone\" dataKey=\"membershipRevenue\" stroke={COLORS[2]} name=\"Memberships\" />\n                  <Line type=\"monotone\" dataKey=\"sponsorshipRevenue\" stroke={COLORS[3]} name=\"Sponsorships\" />\n                </LineChart>\n              ) : chartType === 'bar' ? (\n                <BarChart data={revenueData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"date\" tickFormatter={(date) => format(parseISO(date), 'MM/dd')} />\n                  <YAxis />\n                  <RechartsTooltip\n                    labelFormatter={(date) => format(parseISO(date), 'PPP')}\n                    formatter={(value: number) => `$${value.toFixed(2)}`}\n                  />\n                  <Legend />\n                  <Bar dataKey=\"adRevenue\" stackId=\"a\" fill={COLORS[1]} name=\"Ad Revenue\" />\n                  <Bar dataKey=\"membershipRevenue\" stackId=\"a\" fill={COLORS[2]} name=\"Memberships\" />\n                  <Bar dataKey=\"sponsorshipRevenue\" stackId=\"a\" fill={COLORS[3]} name=\"Sponsorships\" />\n                </BarChart>\n              ) : (\n                <AreaChart data={revenueData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"date\" tickFormatter={(date) => format(parseISO(date), 'MM/dd')} />\n                  <YAxis />\n                  <RechartsTooltip\n                    labelFormatter={(date) => format(parseISO(date), 'PPP')}\n                    formatter={(value: number) => `$${value.toFixed(2)}`}\n                  />\n                  <Legend />\n                  <Area type=\"monotone\" dataKey=\"adRevenue\" stackId=\"1\" stroke={COLORS[1]} fill={COLORS[1]} name=\"Ad Revenue\" />\n                  <Area type=\"monotone\" dataKey=\"membershipRevenue\" stackId=\"1\" stroke={COLORS[2]} fill={COLORS[2]} name=\"Memberships\" />\n                  <Area type=\"monotone\" dataKey=\"sponsorshipRevenue\" stackId=\"1\" stroke={COLORS[3]} fill={COLORS[3]} name=\"Sponsorships\" />\n                </AreaChart>\n              )}\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n      </Grid>\n\n      {/* Revenue Breakdown Pie Chart */}\n      <Grid size={{ xs: 12, md: 4 }}>\n        <Card>\n          <CardHeader title=\"Revenue Breakdown\" />\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <PieChart>\n                <Pie\n                  data={revenueBreakdown}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  labelLine={false}\n                  label={(entry) => `${entry.percentage}%`}\n                  outerRadius={100}\n                  fill=\"#8884d8\"\n                  dataKey=\"value\"\n                >\n                  {revenueBreakdown.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                  ))}\n                </Pie>\n                <RechartsTooltip formatter={(value: number) => `$${value.toFixed(2)}`} />\n              </PieChart>\n            </ResponsiveContainer>\n            \n            <Box sx={{ mt: 2 }}>\n              {revenueBreakdown.map((item, index) => (\n                <Box key={item.name} sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\n                  <Box\n                    sx={{\n                      width: 12,\n                      height: 12,\n                      borderRadius: '50%',\n                      bgcolor: COLORS[index % COLORS.length],\n                      mr: 1,\n                    }}\n                  />\n                  <Typography variant=\"body2\" sx={{ flex: 1 }}>\n                    {item.name}\n                  </Typography>\n                  <Typography variant=\"body2\" fontWeight=\"bold\">\n                    ${(item.value).toFixed(2)}\n                  </Typography>\n                </Box>\n              ))}\n            </Box>\n          </CardContent>\n        </Card>\n      </Grid>\n\n      {/* RPM Trend */}\n      <Grid size={12}>\n        <Card>\n          <CardHeader title=\"RPM Trend\" />\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={200}>\n              <LineChart data={revenueData}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"date\" tickFormatter={(date) => format(parseISO(date), 'MM/dd')} />\n                <YAxis />\n                <RechartsTooltip\n                  labelFormatter={(date) => format(parseISO(date), 'PPP')}\n                  formatter={(value: number) => `$${value.toFixed(2)}`}\n                />\n                <Line type=\"monotone\" dataKey=\"rpm\" stroke={theme.palette.primary.main} name=\"RPM\" strokeWidth={2} dot={false} />\n              </LineChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n      </Grid>\n    </Grid>\n  );\n\n  const renderVideoPerformanceTab = () => (\n    <Grid container spacing={3}>\n      {/* Top Performing Videos Table */}\n      <Grid size={12}>\n        <Card>\n          <CardHeader\n            title=\"Video Performance Metrics\"\n            action={\n              <Button startIcon={<Download />} variant=\"outlined\" size=\"small\">\n                Export\n              </Button>\n            }\n          />\n          <CardContent>\n            <TableContainer>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Video</TableCell>\n                    <TableCell align=\"right\">\n                      <TableSortLabel active direction=\"desc\">\n                        Views\n                      </TableSortLabel>\n                    </TableCell>\n                    <TableCell align=\"right\">Watch Time (hrs)</TableCell>\n                    <TableCell align=\"right\">CTR %</TableCell>\n                    <TableCell align=\"right\">AVD %</TableCell>\n                    <TableCell align=\"right\">Engagement</TableCell>\n                    <TableCell align=\"right\">Revenue</TableCell>\n                    <TableCell align=\"right\">Performance</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {videoPerformance.slice(0, 10).map((video) => {\n                    const engagementRate = ((video.likes + video.comments + video.shares) / video.views) * 100;\n                    const performanceScore = (video.ctr * 0.3 + video.avd * 0.3 + engagementRate * 0.2 + (video.revenue / 100) * 0.2) * 10;\n                    \n                    return (\n                      <TableRow key={video.id}>\n                        <TableCell>\n                          <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\n                            <Avatar variant=\"rounded\" sx={{ width: 60, height: 34 }}>\n                              <PlayCircle />\n                            </Avatar>\n                            <Box>\n                              <Typography variant=\"body2\" noWrap sx={{ maxWidth: 300 }}>\n                                {video.title}\n                              </Typography>\n                              <Typography variant=\"caption\" color=\"text.secondary\">\n                                {format(video.publishDate, 'MMM dd, yyyy')}\n                              </Typography>\n                            </Box>\n                          </Box>\n                        </TableCell>\n                        <TableCell align=\"right\">\n                          <Typography variant=\"body2\" fontWeight=\"bold\">\n                            {video.views.toLocaleString()}\n                          </Typography>\n                        </TableCell>\n                        <TableCell align=\"right\">\n                          {(video.watchTime / 60).toFixed(1)}\n                        </TableCell>\n                        <TableCell align=\"right\">\n                          <Chip\n                            label={`${video.ctr.toFixed(1)}%`}\n                            size=\"small\"\n                            color={video.ctr > 5 ? 'success' : video.ctr > 3 ? 'warning' : 'error'}\n                          />\n                        </TableCell>\n                        <TableCell align=\"right\">\n                          <Chip\n                            label={`${video.avd.toFixed(0)}%`}\n                            size=\"small\"\n                            color={video.avd > 50 ? 'success' : video.avd > 30 ? 'warning' : 'error'}\n                          />\n                        </TableCell>\n                        <TableCell align=\"right\">\n                          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                            <ThumbUp fontSize=\"small\" />\n                            <Typography variant=\"caption\">{video.likes}</Typography>\n                            <Comment fontSize=\"small\" />\n                            <Typography variant=\"caption\">{video.comments}</Typography>\n                          </Box>\n                        </TableCell>\n                        <TableCell align=\"right\">\n                          <Typography variant=\"body2\" fontWeight=\"bold\" color=\"success.main\">\n                            ${video.revenue.toFixed(2)}\n                          </Typography>\n                        </TableCell>\n                        <TableCell align=\"right\">\n                          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                            <LinearProgress\n                              variant=\"determinate\"\n                              value={Math.min(100, performanceScore)}\n                              sx={{ width: 60, height: 6 }}\n                              color={performanceScore > 70 ? 'success' : performanceScore > 40 ? 'warning' : 'error'}\n                            />\n                            <Typography variant=\"caption\">\n                              {performanceScore.toFixed(0)}\n                            </Typography>\n                          </Box>\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })}\n                </TableBody>\n              </Table>\n            </TableContainer>\n          </CardContent>\n        </Card>\n      </Grid>\n\n      {/* Performance Distribution Charts */}\n      <Grid size={{ xs: 12, md: 6 }}>\n        <Card>\n          <CardHeader title=\"Views vs Revenue Correlation\" />\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <ScatterChart>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"views\" name=\"Views\" />\n                <YAxis dataKey=\"revenue\" name=\"Revenue\" />\n                <ZAxis dataKey=\"engagement\" range={[50, 400]} />\n                <RechartsTooltip cursor={{ strokeDasharray: '3 3' }} />\n                <Scatter\n                  name=\"Videos\"\n                  data={videoPerformance.map(v => ({\n                    views: v.views,\n                    revenue: v.revenue,\n                    engagement: (v.likes + v.comments) / v.views * 100,\n                  }))}\n                  fill={theme.palette.primary.main}\n                />\n              </ScatterChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n      </Grid>\n\n      <Grid size={{ xs: 12, md: 6 }}>\n        <Card>\n          <CardHeader title=\"Engagement Metrics Distribution\" />\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <BarChart\n                data={[\n                  { range: '0-10%', videos: videoPerformance.filter(v => v.ctr < 2).length },\n                  { range: '2-4%', videos: videoPerformance.filter(v => v.ctr >= 2 && v.ctr < 4).length },\n                  { range: '4-6%', videos: videoPerformance.filter(v => v.ctr >= 4 && v.ctr < 6).length },\n                  { range: '6-8%', videos: videoPerformance.filter(v => v.ctr >= 6 && v.ctr < 8).length },\n                  { range: '8%+', videos: videoPerformance.filter(v => v.ctr >= 8).length },\n                ]}\n              >\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"range\" />\n                <YAxis />\n                <RechartsTooltip />\n                <Bar dataKey=\"videos\" fill={theme.palette.primary.main} name=\"Number of Videos\" />\n              </BarChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n      </Grid>\n    </Grid>\n  );\n\n  const renderChannelComparisonTab = () => (\n    <Grid container spacing={3}>\n      {/* Channel Comparison Table */}\n      <Grid size={12}>\n        <Card>\n          <CardHeader\n            title=\"Channel Performance Comparison\"\n            action={\n              <FormControlLabel\n                control={\n                  <Switch\n                    checked={comparisonMode}\n                    onChange={(e) => setComparisonMode(e.target.checked)}\n                  />\n                }\n                label=\"Compare Mode\"\n              />\n            }\n          />\n          <CardContent>\n            <TableContainer>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Channel</TableCell>\n                    <TableCell align=\"right\">Subscribers</TableCell>\n                    <TableCell align=\"right\">Total Views</TableCell>\n                    <TableCell align=\"right\">Avg Views</TableCell>\n                    <TableCell align=\"right\">Revenue</TableCell>\n                    <TableCell align=\"right\">Engagement</TableCell>\n                    <TableCell align=\"right\">Growth Rate</TableCell>\n                    <TableCell align=\"right\">Health Score</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {channelComparison.map((channel) => (\n                    <TableRow key={channel.channelId}>\n                      <TableCell>\n                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                          <Avatar sx={{ bgcolor: 'primary.main', width: 32, height: 32 }}>\n                            <YouTube fontSize=\"small\" />\n                          </Avatar>\n                          <Typography variant=\"body2\" fontWeight=\"medium\">\n                            {channel.channelName}\n                          </Typography>\n                        </Box>\n                      </TableCell>\n                      <TableCell align=\"right\">\n                        {(channel.subscribers / 1000).toFixed(1)}K\n                      </TableCell>\n                      <TableCell align=\"right\">\n                        {(channel.totalViews / 1000000).toFixed(1)}M\n                      </TableCell>\n                      <TableCell align=\"right\">\n                        {(channel.avgViews / 1000).toFixed(1)}K\n                      </TableCell>\n                      <TableCell align=\"right\">\n                        <Typography variant=\"body2\" fontWeight=\"bold\" color=\"success.main\">\n                          ${channel.totalRevenue.toLocaleString()}\n                        </Typography>\n                      </TableCell>\n                      <TableCell align=\"right\">\n                        <Chip\n                          label={`${channel.avgEngagement.toFixed(1)}%`}\n                          size=\"small\"\n                          color={channel.avgEngagement > 5 ? 'success' : channel.avgEngagement > 3 ? 'warning' : 'error'}\n                        />\n                      </TableCell>\n                      <TableCell align=\"right\">\n                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n                          {channel.growthRate > 0 ? (\n                            <TrendingUp color=\"success\" fontSize=\"small\" />\n                          ) : (\n                            <TrendingDown color=\"error\" fontSize=\"small\" />\n                          )}\n                          <Typography\n                            variant=\"body2\"\n                            color={channel.growthRate > 0 ? 'success.main' : 'error.main'}\n                          >\n                            {channel.growthRate > 0 ? '+' : ''}{channel.growthRate.toFixed(1)}%\n                          </Typography>\n                        </Box>\n                      </TableCell>\n                      <TableCell align=\"right\">\n                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                          <LinearProgress\n                            variant=\"determinate\"\n                            value={channel.health}\n                            sx={{ width: 60, height: 6 }}\n                            color={channel.health > 80 ? 'success' : channel.health > 60 ? 'warning' : 'error'}\n                          />\n                          <Typography variant=\"caption\">\n                            {channel.health}%\n                          </Typography>\n                        </Box>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </TableContainer>\n          </CardContent>\n        </Card>\n      </Grid>\n\n      {/* Channel Comparison Radar Chart */}\n      <Grid size={{ xs: 12, md: 6 }}>\n        <Card>\n          <CardHeader title=\"Channel Performance Radar\" />\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={400}>\n              <RadarChart data={radarData}>\n                <PolarGrid />\n                <PolarAngleAxis dataKey=\"channel\" />\n                <PolarRadiusAxis angle={90} domain={[0, 100]} />\n                {channelComparison.map((channel, index) => (\n                  <Radar\n                    key={channel.channelId}\n                    name={channel.channelName}\n                    dataKey={channel.channelName.toLowerCase().replace(/\\s+/g, '')}\n                    stroke={COLORS[index % COLORS.length]}\n                    fill={COLORS[index % COLORS.length]}\n                    fillOpacity={0.3}\n                  />\n                ))}\n                <Legend />\n              </RadarChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n      </Grid>\n\n      {/* Channel Growth Comparison */}\n      <Grid size={{ xs: 12, md: 6 }}>\n        <Card>\n          <CardHeader title=\"Channel Growth Comparison\" />\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={400}>\n              <BarChart\n                data={channelComparison}\n                layout=\"horizontal\"\n              >\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis type=\"number\" />\n                <YAxis dataKey=\"channelName\" type=\"category\" width={100} />\n                <RechartsTooltip />\n                <Legend />\n                <Bar dataKey=\"growthRate\" fill={theme.palette.primary.main} name=\"Growth Rate %\" />\n                <Bar dataKey=\"health\" fill={theme.palette.success.main} name=\"Health Score\" />\n              </BarChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n      </Grid>\n\n      {/* Revenue per Channel */}\n      <Grid size={12}>\n        <Card>\n          <CardHeader title=\"Revenue Distribution by Channel\" />\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <ComposedChart data={channelComparison}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"channelName\" />\n                <YAxis yAxisId=\"left\" />\n                <YAxis yAxisId=\"right\" orientation=\"right\" />\n                <RechartsTooltip />\n                <Legend />\n                <Bar yAxisId=\"left\" dataKey=\"totalRevenue\" fill={theme.palette.primary.main} name=\"Total Revenue ($)\" />\n                <Line yAxisId=\"right\" type=\"monotone\" dataKey=\"videosPublished\" stroke={theme.palette.secondary.main} name=\"Videos Published\" />\n              </ComposedChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n      </Grid>\n    </Grid>\n  );\n\n  return (\n    <Box>\n      {/* Header */}\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\n        <Typography variant=\"h4\" fontWeight=\"bold\">\n          Analytics Dashboard\n        </Typography>\n        <Box sx={{ display: 'flex', gap: 2 }}>\n          <FormControl size=\"small\" sx={{ minWidth: 120 }}>\n            <InputLabel>Time Range</InputLabel>\n            <Select\n              value={timeRange}\n              onChange={(e) => setTimeRange(e.target.value)}\n              label=\"Time Range\"\n            >\n              <MenuItem value=\"7d\">Last 7 Days</MenuItem>\n              <MenuItem value=\"30d\">Last 30 Days</MenuItem>\n              <MenuItem value=\"90d\">Last 90 Days</MenuItem>\n            </Select>\n          </FormControl>\n          <Button startIcon={<Refresh />} variant=\"outlined\">\n            Refresh\n          </Button>\n          <Button startIcon={<Download />} variant=\"contained\">\n            Export Report\n          </Button>\n        </Box>\n      </Box>\n\n      {/* Tabs */}\n      <Tabs value={tabValue} onChange={(e, v) => setTabValue(v)} sx={{ mb: 3 }}>\n        <Tab label=\"Revenue Analytics\" icon={<AttachMoney />} iconPosition=\"start\" />\n        <Tab label=\"Video Performance\" icon={<PlayCircle />} iconPosition=\"start\" />\n        <Tab label=\"Channel Comparison\" icon={<CompareArrows />} iconPosition=\"start\" />\n      </Tabs>\n\n      {/* Tab Panels */}\n      <TabPanel value={tabValue} index={0}>\n        {renderRevenueTab()}\n      </TabPanel>\n      <TabPanel value={tabValue} index={1}>\n        {renderVideoPerformanceTab()}\n      </TabPanel>\n      <TabPanel value={tabValue} index={2}>\n        {renderChannelComparisonTab()}\n      </TabPanel>\n    </Box>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Analytics\\CompetitiveAnalysisDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":6,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'LinearProgress' is defined but never used.","line":26,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Tooltip' is defined but never used.","line":28,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'List' is defined but never used.","line":39,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ListItem' is defined but never used.","line":40,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ListItemText' is defined but never used.","line":41,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ListItemAvatar' is defined but never used.","line":42,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":42,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ListItemSecondaryAction' is defined but never used.","line":43,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":43,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Divider' is defined but never used.","line":44,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":44,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CircularProgress' is defined but never used.","line":45,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":45,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'YouTubeIcon' is defined but never used.","line":54,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":54,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MoneyIcon' is defined but never used.","line":56,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":56,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'VideoIcon' is defined but never used.","line":58,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":58,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ViewIcon' is defined but never used.","line":59,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":59,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'LikeIcon' is defined but never used.","line":60,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":60,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CommentIcon' is defined but never used.","line":61,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":61,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ShareIcon' is defined but never used.","line":62,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":62,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'WarningIcon' is defined but never used.","line":64,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":64,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CheckIcon' is defined but never used.","line":65,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":65,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SearchIcon' is defined but never used.","line":66,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":66,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'LineChart' is defined but never used.","line":70,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":70,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Line' is defined but never used.","line":71,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":71,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ScatterChart' is defined but never used.","line":79,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":79,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Scatter' is defined but never used.","line":80,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":80,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Cell' is defined but never used.","line":87,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":87,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'searchQuery' is assigned a value but never used.","line":190,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":190,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setSearchQuery' is assigned a value but never used.","line":190,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":190,"endColumn":37},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":276,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":276,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7259,7262],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7259,7262],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":311,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":311,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8605,8608],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8605,8608],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":29,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Competitive Analysis Dashboard\n * Provides insights into competitor performance and market positioning\n */\n\nimport React, { useState, useEffect, useMemo } from 'react';\nimport {\n  Box,\n  Paper,\n  Checkbox,\n  Typography,\n  Grid,\n  Card,\n  CardContent,\n  Button,\n  TextField,\n  IconButton,\n  Chip,\n  Avatar,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  LinearProgress,\n  Rating,\n  Tooltip,\n  Alert,\n  AlertTitle,\n  Tabs,\n  Tab,\n  Select,\n  MenuItem,\n  FormControl,\n  InputLabel,\n  Stack,\n  Badge,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemAvatar,\n  ListItemSecondaryAction,\n  Divider,\n  CircularProgress\n} from '@mui/material';\nimport {\n  TrendingUp as TrendingUpIcon,\n  TrendingDown as TrendingDownIcon,\n  Add as AddIcon,\n  Delete as DeleteIcon,\n  Refresh as RefreshIcon,\n  Info as InfoIcon,\n  YouTube as YouTubeIcon,\n  Speed as SpeedIcon,\n  AttachMoney as MoneyIcon,\n  Group as GroupIcon,\n  VideoLibrary as VideoIcon,\n  Visibility as ViewIcon,\n  ThumbUp as LikeIcon,\n  Comment as CommentIcon,\n  Share as ShareIcon,\n  Analytics as AnalyticsIcon,\n  Warning as WarningIcon,\n  CheckCircle as CheckIcon,\n  Search as SearchIcon,\n  Download as DownloadIcon\n} from '@mui/icons-material';\nimport {\n  LineChart,\n  Line,\n  BarChart,\n  Bar,\n  RadarChart,\n  PolarGrid,\n  PolarAngleAxis,\n  PolarRadiusAxis,\n  Radar,\n  ScatterChart,\n  Scatter,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip as ChartTooltip,\n  Legend,\n  ResponsiveContainer,\n  Cell,\n  Area,\n  AreaChart\n} from 'recharts';\nimport { format, subDays } from 'date-fns';\n\n// Types\ninterface Competitor {\n  id: string;\n  channelName: string;\n  channelId: string;\n  thumbnailUrl: string;\n  subscriberCount: number;\n  videoCount: number;\n  viewCount: number;\n  category: string;\n  country: string;\n  joinedDate: Date;\n  isTracking: boolean;\n  lastUpdated: Date;\n}\n\ninterface CompetitorMetrics {\n  channelId: string;\n  avgViews: number;\n  avgLikes: number;\n  avgComments: number;\n  engagementRate: number;\n  uploadFrequency: number; // videos per week\n  estimatedRevenue: number;\n  growthRate: number; // % per month\n  contentQualityScore: number; // 0-100\n  audienceRetention: number; // percentage\n  clickThroughRate: number;\n}\n\ninterface MarketInsight {\n  trend: string;\n  impact: 'high' | 'medium' | 'low';\n  description: string;\n  recommendedAction: string;\n}\n\ninterface ContentGap {\n  topic: string;\n  competitorsCovering: number;\n  potentialViews: number;\n  difficulty: 'easy' | 'medium' | 'hard';\n  recommendedApproach: string;\n}\n\nconst MOCK_COMPETITORS: Competitor[] = [\n  {\n    id: '1',\n    channelName: 'TechVision Pro',\n    channelId: 'UC_channel1',\n    thumbnailUrl: 'https://via.placeholder.com/50',\n    subscriberCount: 1250000,\n    videoCount: 542,\n    viewCount: 125000000,\n    category: 'Technology',\n    country: 'US',\n    joinedDate: new Date('2019-03-15'),\n    isTracking: true,\n    lastUpdated: new Date()\n  },\n  {\n    id: '2',\n    channelName: 'Digital Insights',\n    channelId: 'UC_channel2',\n    thumbnailUrl: 'https://via.placeholder.com/50',\n    subscriberCount: 850000,\n    videoCount: 312,\n    viewCount: 75000000,\n    category: 'Technology',\n    country: 'UK',\n    joinedDate: new Date('2020-01-10'),\n    isTracking: true,\n    lastUpdated: new Date()\n  },\n  {\n    id: '3',\n    channelName: 'Future Tech Today',\n    channelId: 'UC_channel3',\n    thumbnailUrl: 'https://via.placeholder.com/50',\n    subscriberCount: 2100000,\n    videoCount: 723,\n    viewCount: 310000000,\n    category: 'Technology',\n    country: 'US',\n    joinedDate: new Date('2018-06-20'),\n    isTracking: true,\n    lastUpdated: new Date()\n  }\n];\n\nexport const CompetitiveAnalysisDashboard: React.FC = () => {\n  // State\n  const [competitors, setCompetitors] = useState<Competitor[]>(MOCK_COMPETITORS);\n  const [selectedCompetitors, setSelectedCompetitors] = useState<string[]>(['1', '2']);\n  const [currentTab, setCurrentTab] = useState(0);\n  const [timeRange, setTimeRange] = useState('30d');\n  const [isLoading, setIsLoading] = useState(false);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [newCompetitorUrl, setNewCompetitorUrl] = useState('');\n\n  // Mock data generation\n  const competitorMetrics = useMemo<Record<string, CompetitorMetrics>>(() => {\n    const metrics: Record<string, CompetitorMetrics> = {};\n    competitors.forEach(comp => {\n      metrics[comp.id] = {\n        channelId: comp.channelId,\n        avgViews: Math.floor(comp.viewCount / comp.videoCount),\n        avgLikes: Math.floor(comp.viewCount / comp.videoCount * 0.05),\n        avgComments: Math.floor(comp.viewCount / comp.videoCount * 0.002),\n        engagementRate: 5.2 + Math.random() * 3,\n        uploadFrequency: 2 + Math.random() * 3,\n        estimatedRevenue: Math.floor(comp.viewCount * 0.002),\n        growthRate: 5 + Math.random() * 15,\n        contentQualityScore: 70 + Math.random() * 25,\n        audienceRetention: 40 + Math.random() * 30,\n        clickThroughRate: 3 + Math.random() * 7\n      };\n    });\n    return metrics;\n  }, [competitors]);\n\n  const marketInsights: MarketInsight[] = [\n    {\n      trend: 'AI-generated content gaining traction',\n      impact: 'high',\n      description: 'Competitors are increasingly using AI for content creation',\n      recommendedAction: 'Differentiate with unique human insights and storytelling'\n    },\n    {\n      trend: 'Short-form content outperforming',\n      impact: 'high',\n      description: 'Videos under 60 seconds seeing 2x engagement',\n      recommendedAction: 'Create YouTube Shorts versions of main content'\n    },\n    {\n      trend: 'Tutorial content saturated',\n      impact: 'medium',\n      description: 'Market oversaturated with basic tutorials',\n      recommendedAction: 'Focus on advanced topics and case studies'\n    }\n  ];\n\n  const contentGaps: ContentGap[] = [\n    {\n      topic: 'Quantum Computing Basics',\n      competitorsCovering: 1,\n      potentialViews: 250000,\n      difficulty: 'hard',\n      recommendedApproach: 'Create beginner-friendly series with animations'\n    },\n    {\n      topic: 'Web3 Development Tools',\n      competitorsCovering: 2,\n      potentialViews: 180000,\n      difficulty: 'medium',\n      recommendedApproach: 'Hands-on tutorials with real projects'\n    },\n    {\n      topic: 'AI Ethics Discussion',\n      competitorsCovering: 0,\n      potentialViews: 150000,\n      difficulty: 'easy',\n      recommendedApproach: 'Interview series with experts'\n    }\n  ];\n\n  // Generate comparison chart data\n  const comparisonData = useMemo(() => {\n    const selected = competitors.filter(c => selectedCompetitors.includes(c.id));\n    return selected.map(comp => ({\n      name: comp.channelName,\n      subscribers: comp.subscriberCount / 1000,\n      views: comp.viewCount / 1000000,\n      videos: comp.videoCount,\n      engagement: competitorMetrics[comp.id]?.engagementRate || 0,\n      revenue: competitorMetrics[comp.id]?.estimatedRevenue / 1000 || 0\n    }));\n  }, [competitors, selectedCompetitors, competitorMetrics]);\n\n  // Generate radar chart data for competitive positioning\n  const radarData = useMemo(() => {\n    const metrics = ['Content Quality', 'Upload Frequency', 'Engagement', 'Growth Rate', 'Revenue', 'Retention'];\n    return metrics.map(metric => {\n      const dataPoint: any = { metric };\n      selectedCompetitors.forEach(compId => {\n        const comp = competitors.find(c => c.id === compId);\n        const compMetrics = competitorMetrics[compId];\n        if (comp && compMetrics) {\n          switch (metric) {\n            case 'Content Quality':\n              dataPoint[comp.channelName] = compMetrics.contentQualityScore;\n              break;\n            case 'Upload Frequency':\n              dataPoint[comp.channelName] = compMetrics.uploadFrequency * 20;\n              break;\n            case 'Engagement':\n              dataPoint[comp.channelName] = compMetrics.engagementRate * 10;\n              break;\n            case 'Growth Rate':\n              dataPoint[comp.channelName] = compMetrics.growthRate * 5;\n              break;\n            case 'Revenue':\n              dataPoint[comp.channelName] = Math.min(100, compMetrics.estimatedRevenue / 1000);\n              break;\n            case 'Retention':\n              dataPoint[comp.channelName] = compMetrics.audienceRetention;\n              break;\n          }\n        }\n      });\n      return dataPoint;\n    });\n  }, [competitors, selectedCompetitors, competitorMetrics]);\n\n  // Generate trend data\n  const trendData = useMemo(() => {\n    return Array.from({ length: 30 }, (_, i) => {\n      const date = subDays(new Date(), 30 - i);\n      const dataPoint: any = { date: format(date, 'MMM dd') };\n      \n      selectedCompetitors.forEach(compId => {\n        const comp = competitors.find(c => c.id === compId);\n        if (comp) {\n          // Simulate growth trend\n          const baseValue = comp.subscriberCount / 1000;\n          const growth = (i / 30) * (competitorMetrics[compId]?.growthRate || 5) / 100;\n          dataPoint[comp.channelName] = Math.floor(baseValue * (1 - 0.1 + growth));\n        }\n      });\n      \n      return dataPoint;\n    });\n  }, [competitors, selectedCompetitors, competitorMetrics]);\n\n  // Add competitor\n  const addCompetitor = () => {\n    if (!newCompetitorUrl) return;\n    \n    // Extract channel ID from URL (mock implementation)\n    const newCompetitor: Competitor = {\n      id: Date.now().toString(),\n      channelName: 'New Competitor',\n      channelId: 'UC_new',\n      thumbnailUrl: 'https://via.placeholder.com/50',\n      subscriberCount: Math.floor(Math.random() * 1000000),\n      videoCount: Math.floor(Math.random() * 500),\n      viewCount: Math.floor(Math.random() * 100000000),\n      category: 'Technology',\n      country: 'US',\n      joinedDate: new Date(),\n      isTracking: false,\n      lastUpdated: new Date()\n    };\n    \n    setCompetitors([...competitors, newCompetitor]);\n    setNewCompetitorUrl('');\n  };\n\n  // Remove competitor\n  const removeCompetitor = (id: string) => {\n    setCompetitors(competitors.filter(c => c.id !== id));\n    setSelectedCompetitors(selectedCompetitors.filter(cId => cId !== id));\n  };\n\n  // Toggle competitor selection\n  const toggleCompetitorSelection = (id: string) => {\n    if (selectedCompetitors.includes(id)) {\n      setSelectedCompetitors(selectedCompetitors.filter(cId => cId !== id));\n    } else {\n      setSelectedCompetitors([...selectedCompetitors, id]);\n    }\n  };\n\n  // Refresh data\n  const refreshData = async () => {\n    setIsLoading(true);\n    // Simulate API call\n    await new Promise(resolve => setTimeout(resolve, 1500));\n    setIsLoading(false);\n  };\n\n  // Export data\n  const exportData = () => {\n    const data = {\n      competitors: competitors.filter(c => selectedCompetitors.includes(c.id)),\n      metrics: selectedCompetitors.map(id => ({ id, ...competitorMetrics[id] })),\n      insights: marketInsights,\n      gaps: contentGaps,\n      exportDate: new Date().toISOString()\n    };\n    \n    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `competitive_analysis_${format(new Date(), 'yyyy-MM-dd')}.json`;\n    a.click();\n  };\n\n  return (\n    <Box sx={{ p: 3 }}>\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\n        <Typography variant=\"h4\">Competitive Analysis</Typography>\n        <Stack direction=\"row\" spacing={2}>\n          <Button\n            variant=\"outlined\"\n            startIcon={<RefreshIcon />}\n            onClick={refreshData}\n            disabled={isLoading}\n          >\n            Refresh\n          </Button>\n          <Button\n            variant=\"outlined\"\n            startIcon={<DownloadIcon />}\n            onClick={exportData}\n          >\n            Export\n          </Button>\n        </Stack>\n      </Box>\n\n      {/* Key Metrics Summary */}\n      <Grid container spacing={3} sx={{ mb: 3 }}>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\n                <GroupIcon color=\"primary\" sx={{ mr: 1 }} />\n                <Typography color=\"textSecondary\" variant=\"body2\">\n                  Tracked Competitors\n                </Typography>\n              </Box>\n              <Typography variant=\"h4\">{competitors.length}</Typography>\n              <Typography variant=\"body2\" color=\"success.main\">\n                {competitors.filter(c => c.isTracking).length} active\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        \n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\n                <TrendingUpIcon color=\"success\" sx={{ mr: 1 }} />\n                <Typography color=\"textSecondary\" variant=\"body2\">\n                  Market Position\n                </Typography>\n              </Box>\n              <Typography variant=\"h4\">#4</Typography>\n              <Typography variant=\"body2\" color=\"success.main\">\n                ↑ 2 positions this month\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        \n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\n                <SpeedIcon color=\"warning\" sx={{ mr: 1 }} />\n                <Typography color=\"textSecondary\" variant=\"body2\">\n                  Performance Gap\n                </Typography>\n              </Box>\n              <Typography variant=\"h4\">-15%</Typography>\n              <Typography variant=\"body2\" color=\"textSecondary\">\n                vs. top competitor\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        \n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\n                <InfoIcon color=\"info\" sx={{ mr: 1 }} />\n                <Typography color=\"textSecondary\" variant=\"body2\">\n                  Content Gaps\n                </Typography>\n              </Box>\n              <Typography variant=\"h4\">{contentGaps.length}</Typography>\n              <Typography variant=\"body2\" color=\"info.main\">\n                Opportunities identified\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n\n      {/* Tabs */}\n      <Tabs value={currentTab} onChange={(e, v) => setCurrentTab(v)} sx={{ mb: 3 }}>\n        <Tab label=\"Competitors\" />\n        <Tab label=\"Comparison\" />\n        <Tab label=\"Market Insights\" />\n        <Tab label=\"Content Gaps\" />\n        <Tab label=\"Trends\" />\n      </Tabs>\n\n      {/* Competitors Tab */}\n      {currentTab === 0 && (\n        <>\n          {/* Add Competitor */}\n          <Paper sx={{ p: 2, mb: 3 }}>\n            <Stack direction=\"row\" spacing={2}>\n              <TextField\n                fullWidth\n                placeholder=\"Enter YouTube channel URL or ID\"\n                value={newCompetitorUrl}\n                onChange={(e) => setNewCompetitorUrl(e.target.value)}\n                size=\"small\"\n              />\n              <Button\n                variant=\"contained\"\n                startIcon={<AddIcon />}\n                onClick={addCompetitor}\n                disabled={!newCompetitorUrl}\n              >\n                Add Competitor\n              </Button>\n            </Stack>\n          </Paper>\n\n          {/* Competitors List */}\n          <TableContainer component={Paper}>\n            <Table>\n              <TableHead>\n                <TableRow>\n                  <TableCell padding=\"checkbox\">\n                    <Checkbox\n                      indeterminate={\n                        selectedCompetitors.length > 0 && \n                        selectedCompetitors.length < competitors.length\n                      }\n                      checked={selectedCompetitors.length === competitors.length}\n                      onChange={(e) => {\n                        if (e.target.checked) {\n                          setSelectedCompetitors(competitors.map(c => c.id));\n                        } else {\n                          setSelectedCompetitors([]);\n                        }\n                      }}\n                    />\n                  </TableCell>\n                  <TableCell>Channel</TableCell>\n                  <TableCell align=\"right\">Subscribers</TableCell>\n                  <TableCell align=\"right\">Videos</TableCell>\n                  <TableCell align=\"right\">Total Views</TableCell>\n                  <TableCell align=\"right\">Engagement</TableCell>\n                  <TableCell align=\"right\">Growth</TableCell>\n                  <TableCell align=\"center\">Status</TableCell>\n                  <TableCell align=\"center\">Actions</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {competitors.map((competitor) => {\n                  const metrics = competitorMetrics[competitor.id];\n                  return (\n                    <TableRow key={competitor.id}>\n                      <TableCell padding=\"checkbox\">\n                        <Checkbox\n                          checked={selectedCompetitors.includes(competitor.id)}\n                          onChange={() => toggleCompetitorSelection(competitor.id)}\n                        />\n                      </TableCell>\n                      <TableCell>\n                        <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                          <Avatar src={competitor.thumbnailUrl} sx={{ mr: 2 }} />\n                          <Box>\n                            <Typography variant=\"body1\">\n                              {competitor.channelName}\n                            </Typography>\n                            <Typography variant=\"caption\" color=\"textSecondary\">\n                              {competitor.category} • {competitor.country}\n                            </Typography>\n                          </Box>\n                        </Box>\n                      </TableCell>\n                      <TableCell align=\"right\">\n                        {(competitor.subscriberCount / 1000000).toFixed(2)}M\n                      </TableCell>\n                      <TableCell align=\"right\">\n                        {competitor.videoCount}\n                      </TableCell>\n                      <TableCell align=\"right\">\n                        {(competitor.viewCount / 1000000).toFixed(1)}M\n                      </TableCell>\n                      <TableCell align=\"right\">\n                        <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'flex-end' }}>\n                          {metrics?.engagementRate.toFixed(1)}%\n                          {metrics && metrics.engagementRate > 5 ? (\n                            <TrendingUpIcon color=\"success\" fontSize=\"small\" sx={{ ml: 0.5 }} />\n                          ) : (\n                            <TrendingDownIcon color=\"error\" fontSize=\"small\" sx={{ ml: 0.5 }} />\n                          )}\n                        </Box>\n                      </TableCell>\n                      <TableCell align=\"right\">\n                        <Chip\n                          label={`+${metrics?.growthRate.toFixed(1)}%`}\n                          color={metrics && metrics.growthRate > 10 ? 'success' : 'default'}\n                          size=\"small\"\n                        />\n                      </TableCell>\n                      <TableCell align=\"center\">\n                        {competitor.isTracking ? (\n                          <Chip label=\"Tracking\" color=\"success\" size=\"small\" />\n                        ) : (\n                          <Chip label=\"Not Tracking\" color=\"default\" size=\"small\" />\n                        )}\n                      </TableCell>\n                      <TableCell align=\"center\">\n                        <IconButton\n                          size=\"small\"\n                          color=\"error\"\n                          onClick={() => removeCompetitor(competitor.id)}\n                        >\n                          <DeleteIcon />\n                        </IconButton>\n                      </TableCell>\n                    </TableRow>\n                  );\n                })}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </>\n      )}\n\n      {/* Comparison Tab */}\n      {currentTab === 1 && (\n        <Grid container spacing={3}>\n          {/* Bar Chart Comparison */}\n          <Grid item xs={12} lg={6}>\n            <Paper sx={{ p: 2 }}>\n              <Typography variant=\"h6\" gutterBottom>\n                Channel Metrics Comparison\n              </Typography>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <BarChart data={comparisonData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"name\" />\n                  <YAxis />\n                  <ChartTooltip />\n                  <Legend />\n                  <Bar dataKey=\"subscribers\" fill=\"#8884d8\" name=\"Subscribers (K)\" />\n                  <Bar dataKey=\"views\" fill=\"#82ca9d\" name=\"Views (M)\" />\n                  <Bar dataKey=\"engagement\" fill=\"#ffc658\" name=\"Engagement (%)\" />\n                </BarChart>\n              </ResponsiveContainer>\n            </Paper>\n          </Grid>\n\n          {/* Radar Chart - Competitive Positioning */}\n          <Grid item xs={12} lg={6}>\n            <Paper sx={{ p: 2 }}>\n              <Typography variant=\"h6\" gutterBottom>\n                Competitive Positioning\n              </Typography>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <RadarChart data={radarData}>\n                  <PolarGrid />\n                  <PolarAngleAxis dataKey=\"metric\" />\n                  <PolarRadiusAxis angle={90} domain={[0, 100]} />\n                  {selectedCompetitors.map((compId, index) => {\n                    const comp = competitors.find(c => c.id === compId);\n                    const colors = ['#8884d8', '#82ca9d', '#ffc658', '#ff7c7c'];\n                    return comp ? (\n                      <Radar\n                        key={compId}\n                        name={comp.channelName}\n                        dataKey={comp.channelName}\n                        stroke={colors[index % colors.length]}\n                        fill={colors[index % colors.length]}\n                        fillOpacity={0.3}\n                      />\n                    ) : null;\n                  })}\n                  <Legend />\n                </RadarChart>\n              </ResponsiveContainer>\n            </Paper>\n          </Grid>\n\n          {/* Performance Matrix */}\n          <Grid item xs={12}>\n            <Paper sx={{ p: 2 }}>\n              <Typography variant=\"h6\" gutterBottom>\n                Performance Matrix\n              </Typography>\n              <TableContainer>\n                <Table size=\"small\">\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>Metric</TableCell>\n                      {selectedCompetitors.map(compId => {\n                        const comp = competitors.find(c => c.id === compId);\n                        return (\n                          <TableCell key={compId} align=\"center\">\n                            {comp?.channelName}\n                          </TableCell>\n                        );\n                      })}\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    <TableRow>\n                      <TableCell>Avg Views per Video</TableCell>\n                      {selectedCompetitors.map(compId => (\n                        <TableCell key={compId} align=\"center\">\n                          {competitorMetrics[compId]?.avgViews.toLocaleString()}\n                        </TableCell>\n                      ))}\n                    </TableRow>\n                    <TableRow>\n                      <TableCell>Upload Frequency (per week)</TableCell>\n                      {selectedCompetitors.map(compId => (\n                        <TableCell key={compId} align=\"center\">\n                          {competitorMetrics[compId]?.uploadFrequency.toFixed(1)}\n                        </TableCell>\n                      ))}\n                    </TableRow>\n                    <TableRow>\n                      <TableCell>Content Quality Score</TableCell>\n                      {selectedCompetitors.map(compId => (\n                        <TableCell key={compId} align=\"center\">\n                          <Rating\n                            value={competitorMetrics[compId]?.contentQualityScore / 20}\n                            readOnly\n                            precision={0.5}\n                            size=\"small\"\n                          />\n                        </TableCell>\n                      ))}\n                    </TableRow>\n                    <TableRow>\n                      <TableCell>Estimated Monthly Revenue</TableCell>\n                      {selectedCompetitors.map(compId => (\n                        <TableCell key={compId} align=\"center\">\n                          ${competitorMetrics[compId]?.estimatedRevenue.toLocaleString()}\n                        </TableCell>\n                      ))}\n                    </TableRow>\n                  </TableBody>\n                </Table>\n              </TableContainer>\n            </Paper>\n          </Grid>\n        </Grid>\n      )}\n\n      {/* Market Insights Tab */}\n      {currentTab === 2 && (\n        <Grid container spacing={3}>\n          {marketInsights.map((insight, index) => (\n            <Grid item xs={12} md={6} lg={4} key={index}>\n              <Card>\n                <CardContent>\n                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n                    <Badge\n                      badgeContent={insight.impact}\n                      color={\n                        insight.impact === 'high' ? 'error' : \n                        insight.impact === 'medium' ? 'warning' : 'info'\n                      }\n                    >\n                      <AnalyticsIcon />\n                    </Badge>\n                    <Typography variant=\"h6\" sx={{ ml: 2 }}>\n                      {insight.trend}\n                    </Typography>\n                  </Box>\n                  <Typography variant=\"body2\" color=\"textSecondary\" paragraph>\n                    {insight.description}\n                  </Typography>\n                  <Alert severity=\"info\" icon={<InfoIcon />}>\n                    <AlertTitle>Recommended Action</AlertTitle>\n                    {insight.recommendedAction}\n                  </Alert>\n                </CardContent>\n              </Card>\n            </Grid>\n          ))}\n        </Grid>\n      )}\n\n      {/* Content Gaps Tab */}\n      {currentTab === 3 && (\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <Alert severity=\"success\" sx={{ mb: 3 }}>\n              <AlertTitle>Content Opportunities</AlertTitle>\n              We've identified {contentGaps.length} content gaps based on competitor analysis and market demand.\n            </Alert>\n          </Grid>\n          \n          {contentGaps.map((gap, index) => (\n            <Grid item xs={12} md={6} lg={4} key={index}>\n              <Card sx={{ height: '100%' }}>\n                <CardContent>\n                  <Typography variant=\"h6\" gutterBottom>\n                    {gap.topic}\n                  </Typography>\n                  \n                  <Box sx={{ mb: 2 }}>\n                    <Chip\n                      label={`Difficulty: ${gap.difficulty}`}\n                      color={\n                        gap.difficulty === 'easy' ? 'success' : \n                        gap.difficulty === 'medium' ? 'warning' : 'error'\n                      }\n                      size=\"small\"\n                      sx={{ mr: 1 }}\n                    />\n                    <Chip\n                      label={`${gap.competitorsCovering} competitors`}\n                      size=\"small\"\n                    />\n                  </Box>\n                  \n                  <Typography variant=\"body2\" color=\"textSecondary\" paragraph>\n                    Potential Views: <strong>{gap.potentialViews.toLocaleString()}</strong>\n                  </Typography>\n                  \n                  <Typography variant=\"body2\">\n                    <strong>Approach:</strong> {gap.recommendedApproach}\n                  </Typography>\n                  \n                  <Box sx={{ mt: 2 }}>\n                    <Button variant=\"outlined\" size=\"small\" fullWidth>\n                      Create Content Plan\n                    </Button>\n                  </Box>\n                </CardContent>\n              </Card>\n            </Grid>\n          ))}\n        </Grid>\n      )}\n\n      {/* Trends Tab */}\n      {currentTab === 4 && (\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <Paper sx={{ p: 2 }}>\n              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n                <Typography variant=\"h6\">\n                  Subscriber Growth Trends\n                </Typography>\n                <FormControl size=\"small\" sx={{ minWidth: 120 }}>\n                  <InputLabel>Time Range</InputLabel>\n                  <Select\n                    value={timeRange}\n                    onChange={(e) => setTimeRange(e.target.value)}\n                    label=\"Time Range\"\n                  >\n                    <MenuItem value=\"7d\">Last 7 Days</MenuItem>\n                    <MenuItem value=\"30d\">Last 30 Days</MenuItem>\n                    <MenuItem value=\"90d\">Last 90 Days</MenuItem>\n                  </Select>\n                </FormControl>\n              </Box>\n              \n              <ResponsiveContainer width=\"100%\" height={400}>\n                <AreaChart data={trendData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"date\" />\n                  <YAxis />\n                  <ChartTooltip />\n                  <Legend />\n                  {selectedCompetitors.map((compId, index) => {\n                    const comp = competitors.find(c => c.id === compId);\n                    const colors = ['#8884d8', '#82ca9d', '#ffc658', '#ff7c7c'];\n                    return comp ? (\n                      <Area\n                        key={compId}\n                        type=\"monotone\"\n                        dataKey={comp.channelName}\n                        stroke={colors[index % colors.length]}\n                        fill={colors[index % colors.length]}\n                        fillOpacity={0.3}\n                      />\n                    ) : null;\n                  })}\n                </AreaChart>\n              </ResponsiveContainer>\n            </Paper>\n          </Grid>\n        </Grid>\n      )}\n    </Box>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Analytics\\UserBehaviorDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":1,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'IconButton' is defined but never used.","line":25,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Tooltip' is defined but never used.","line":26,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TrendingUp' is defined but never used.","line":30,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FilterList' is defined but never used.","line":34,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Info' is defined but never used.","line":35,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Warning' is defined but never used.","line":36,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CheckCircle' is defined but never used.","line":37,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Cancel' is defined but never used.","line":38,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'LineChart' is defined but never used.","line":41,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Line' is defined but never used.","line":42,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":42,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AreaChart' is defined but never used.","line":43,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":43,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Area' is defined but never used.","line":44,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":44,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Funnel' is defined but never used.","line":47,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":47,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FunnelChart' is defined but never used.","line":48,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Sankey' is defined but never used.","line":49,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":49,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'HeatMapGrid' is defined but never used.","line":50,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":50,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Legend' is defined but never used.","line":55,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":55,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'format' is defined but never used.","line":59,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":59,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'subDays' is defined but never used.","line":59,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":59,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'segmentView' is assigned a value but never used.","line":80,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":80,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setSegmentView' is assigned a value but never used.","line":80,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":80,"endColumn":37}],"suppressedMessages":[],"errorCount":22,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Card,\n  CardContent,\n  Typography,\n  Grid,\n  Select,\n  MenuItem,\n  FormControl,\n  InputLabel,\n  Button,\n  Chip,\n  LinearProgress,\n  Alert,\n  Tab,\n  Tabs,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  IconButton,\n  Tooltip,\n} from '@mui/material';\nimport {\n  Timeline,\n  TrendingUp,\n  People,\n  TouchApp,\n  Assessment,\n  FilterList,\n  Info,\n  Warning,\n  CheckCircle,\n  Cancel,\n} from '@mui/icons-material';\nimport {\n  LineChart,\n  Line,\n  AreaChart,\n  Area,\n  BarChart,\n  Bar,\n  Funnel,\n  FunnelChart,\n  Sankey,\n  HeatMapGrid,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip as RechartsTooltip,\n  Legend,\n  ResponsiveContainer,\n  Cell,\n} from 'recharts';\nimport { format, subDays } from 'date-fns';\nimport { useBehaviorAnalytics } from '../../hooks/useBehaviorAnalytics';\nimport { formatNumber, formatPercentage, formatDuration } from '../../utils/formatters';\n\ninterface UserBehaviorDashboardProps {\n  userId?: number;\n  dateRange?: {\n    start: Date;\n    end: Date;\n  };\n}\n\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8'];\n\nexport const UserBehaviorDashboard: React.FC<UserBehaviorDashboardProps> = ({\n  userId,\n  dateRange,\n}) => {\n  const [activeTab, setActiveTab] = useState(0);\n  const [selectedFunnel, setSelectedFunnel] = useState('signup');\n  const [cohortType, setCohortType] = useState('signup');\n  const [segmentView, setSegmentView] = useState('overview');\n\n  const {\n    overview,\n    funnelData,\n    cohortData,\n    heatmapData,\n    segments,\n    loading,\n    error,\n    refetch,\n  } = useBehaviorAnalytics({\n    userId,\n    dateRange,\n    funnelSteps: getFunnelSteps(selectedFunnel),\n    cohortType,\n  });\n\n  function getFunnelSteps(funnelType: string): string[] {\n    switch (funnelType) {\n      case 'signup':\n        return ['page_view', 'signup_start', 'signup_complete', 'first_video'];\n      case 'video':\n        return ['dashboard_view', 'video_create_click', 'video_generate', 'video_publish'];\n      case 'upgrade':\n        return ['pricing_view', 'plan_select', 'checkout', 'payment_complete'];\n      default:\n        return [];\n    }\n  }\n\n  const renderMetricCard = (title: string, value: number | string, icon: React.ReactNode, color: string = 'primary') => (\n    <Card sx={{ height: '100%' }}>\n      <CardContent>\n        <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\n          <Typography color=\"textSecondary\" variant=\"body2\">\n            {title}\n          </Typography>\n          <Box color={`${color}.main`}>{icon}</Box>\n        </Box>\n        <Typography variant=\"h4\" fontWeight=\"bold\">\n          {typeof value === 'number' ? formatNumber(value) : value}\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n\n  const renderEventBreakdown = () => {\n    if (!overview?.event_breakdown) return null;\n\n    return (\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <BarChart data={overview.event_breakdown}>\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"event_type\" angle={-45} textAnchor=\"end\" height={80} />\n          <YAxis />\n          <RechartsTooltip />\n          <Bar dataKey=\"count\" fill=\"#8884d8\">\n            {overview.event_breakdown.map((entry, index) => (\n              <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n            ))}\n          </Bar>\n        </BarChart>\n      </ResponsiveContainer>\n    );\n  };\n\n  const renderFunnelChart = () => {\n    if (!funnelData?.steps) return null;\n\n    const funnelChartData = funnelData.steps.map(step => ({\n      name: step.step,\n      value: step.users,\n      rate: step.conversion_rate,\n    }));\n\n    return (\n      <Box>\n        <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\n          <FormControl size=\"small\" sx={{ minWidth: 200 }}>\n            <InputLabel>Funnel Type</InputLabel>\n            <Select\n              value={selectedFunnel}\n              onChange={(e) => setSelectedFunnel(e.target.value)}\n              label=\"Funnel Type\"\n            >\n              <MenuItem value=\"signup\">Signup Flow</MenuItem>\n              <MenuItem value=\"video\">Video Creation</MenuItem>\n              <MenuItem value=\"upgrade\">Upgrade Flow</MenuItem>\n            </Select>\n          </FormControl>\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            Overall Conversion: {formatPercentage(funnelData.overall_conversion)}\n          </Typography>\n        </Box>\n\n        <ResponsiveContainer width=\"100%\" height={400}>\n          <BarChart data={funnelChartData} layout=\"horizontal\">\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis type=\"number\" />\n            <YAxis dataKey=\"name\" type=\"category\" width={120} />\n            <RechartsTooltip\n              formatter={(value: number) => formatNumber(value)}\n              labelFormatter={(label) => `${label}: ${formatPercentage(funnelChartData.find(d => d.name === label)?.rate || 0)}`}\n            />\n            <Bar dataKey=\"value\" fill=\"#8884d8\">\n              {funnelChartData.map((entry, index) => (\n                <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n              ))}\n            </Bar>\n          </BarChart>\n        </ResponsiveContainer>\n\n        {/* Funnel Steps Table */}\n        <TableContainer component={Paper} sx={{ mt: 2 }}>\n          <Table size=\"small\">\n            <TableHead>\n              <TableRow>\n                <TableCell>Step</TableCell>\n                <TableCell align=\"right\">Users</TableCell>\n                <TableCell align=\"right\">Conversion Rate</TableCell>\n                <TableCell align=\"right\">Drop-off Rate</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {funnelData.steps.map((step) => (\n                <TableRow key={step.step}>\n                  <TableCell>{step.step}</TableCell>\n                  <TableCell align=\"right\">{formatNumber(step.users)}</TableCell>\n                  <TableCell align=\"right\">{formatPercentage(step.conversion_rate)}</TableCell>\n                  <TableCell align=\"right\">\n                    <Chip\n                      label={formatPercentage(step.drop_off_rate)}\n                      size=\"small\"\n                      color={step.drop_off_rate > 50 ? 'error' : 'default'}\n                    />\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </Box>\n    );\n  };\n\n  const renderCohortAnalysis = () => {\n    if (!cohortData?.cohorts) return null;\n\n    return (\n      <Box>\n        <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\n          <FormControl size=\"small\" sx={{ minWidth: 200 }}>\n            <InputLabel>Cohort Type</InputLabel>\n            <Select\n              value={cohortType}\n              onChange={(e) => setCohortType(e.target.value)}\n              label=\"Cohort Type\"\n            >\n              <MenuItem value=\"signup\">By Signup Date</MenuItem>\n              <MenuItem value=\"first_video\">By First Video</MenuItem>\n              <MenuItem value=\"upgrade\">By Upgrade Date</MenuItem>\n            </Select>\n          </FormControl>\n        </Box>\n\n        <TableContainer component={Paper}>\n          <Table size=\"small\">\n            <TableHead>\n              <TableRow>\n                <TableCell>Cohort</TableCell>\n                <TableCell align=\"right\">Size</TableCell>\n                <TableCell align=\"center\">Week 0</TableCell>\n                <TableCell align=\"center\">Week 1</TableCell>\n                <TableCell align=\"center\">Week 2</TableCell>\n                <TableCell align=\"center\">Week 3</TableCell>\n                <TableCell align=\"center\">Week 4</TableCell>\n                <TableCell align=\"center\">Week 5</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {cohortData.cohorts.map((cohort) => (\n                <TableRow key={cohort.cohort}>\n                  <TableCell>{cohort.cohort}</TableCell>\n                  <TableCell align=\"right\">{cohort.size}</TableCell>\n                  {[0, 1, 2, 3, 4, 5].map((week) => {\n                    const retention = cohort.retention.find(r => r.period === week);\n                    const rate = retention?.retention_rate || 0;\n                    return (\n                      <TableCell key={week} align=\"center\">\n                        <Chip\n                          label={formatPercentage(rate)}\n                          size=\"small\"\n                          sx={{\n                            backgroundColor: `rgba(0, 136, 254, ${rate / 100})`,\n                            color: rate > 50 ? 'white' : 'inherit',\n                          }}\n                        />\n                      </TableCell>\n                    );\n                  })}\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </Box>\n    );\n  };\n\n  const renderHeatmap = () => {\n    if (!heatmapData?.heatmap) return null;\n\n    // Group data by hour and day\n    const heatmapMatrix: number[][] = Array(7).fill(null).map(() => Array(24).fill(0));\n    const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\n    heatmapData.heatmap.forEach((item) => {\n      const date = new Date(item.date);\n      const dayOfWeek = date.getDay();\n      heatmapMatrix[dayOfWeek][item.hour] = item.intensity;\n    });\n\n    return (\n      <Box>\n        <Typography variant=\"h6\" mb={2}>Feature Usage Heatmap</Typography>\n        <Box sx={{ overflowX: 'auto' }}>\n          <table style={{ width: '100%', borderCollapse: 'collapse' }}>\n            <thead>\n              <tr>\n                <th style={{ padding: 8, textAlign: 'left' }}>Day</th>\n                {Array.from({ length: 24 }, (_, i) => (\n                  <th key={i} style={{ padding: 4, textAlign: 'center', fontSize: '10px' }}>\n                    {i}\n                  </th>\n                ))}\n              </tr>\n            </thead>\n            <tbody>\n              {dayNames.map((day, dayIndex) => (\n                <tr key={day}>\n                  <td style={{ padding: 8 }}>{day}</td>\n                  {heatmapMatrix[dayIndex].map((intensity, hour) => (\n                    <td\n                      key={hour}\n                      style={{\n                        padding: 4,\n                        backgroundColor: `rgba(0, 136, 254, ${intensity})`,\n                        border: '1px solid #f0f0f0',\n                        width: 20,\n                        height: 20,\n                      }}\n                      title={`${day} ${hour}:00 - Intensity: ${(intensity * 100).toFixed(0)}%`}\n                    />\n                  ))}\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </Box>\n        <Box display=\"flex\" alignItems=\"center\" mt={2}>\n          <Typography variant=\"body2\" color=\"textSecondary\" mr={2}>\n            Low Activity\n          </Typography>\n          <Box sx={{ flexGrow: 1, height: 10, background: 'linear-gradient(to right, rgba(0,136,254,0.1), rgba(0,136,254,1))' }} />\n          <Typography variant=\"body2\" color=\"textSecondary\" ml={2}>\n            High Activity\n          </Typography>\n        </Box>\n      </Box>\n    );\n  };\n\n  const renderUserSegments = () => {\n    if (!segments?.segments) return null;\n\n    const segmentData = Object.entries(segments.segments).map(([name, data]) => ({\n      name: name.replace('_', ' ').toUpperCase(),\n      count: data.count,\n      percentage: (data.count / segments.total_users) * 100,\n    }));\n\n    return (\n      <Box>\n        <Typography variant=\"h6\" mb={2}>User Segments</Typography>\n        <Grid container spacing={2}>\n          {segmentData.map((segment) => (\n            <Grid item xs={12} sm={6} md={3} key={segment.name}>\n              <Card>\n                <CardContent>\n                  <Typography variant=\"body2\" color=\"textSecondary\" gutterBottom>\n                    {segment.name}\n                  </Typography>\n                  <Typography variant=\"h4\">{formatNumber(segment.count)}</Typography>\n                  <Typography variant=\"body2\" color=\"textSecondary\">\n                    {formatPercentage(segment.percentage)} of users\n                  </Typography>\n                  {segment.name === 'AT RISK' && (\n                    <Chip label=\"Action Required\" color=\"warning\" size=\"small\" sx={{ mt: 1 }} />\n                  )}\n                  {segment.name === 'POWER USERS' && (\n                    <Chip label=\"VIP\" color=\"success\" size=\"small\" sx={{ mt: 1 }} />\n                  )}\n                </CardContent>\n              </Card>\n            </Grid>\n          ))}\n        </Grid>\n      </Box>\n    );\n  };\n\n  if (loading) {\n    return <LinearProgress />;\n  }\n\n  if (error) {\n    return <Alert severity=\"error\">{error}</Alert>;\n  }\n\n  return (\n    <Box sx={{ p: 3 }}>\n      {/* Header */}\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\n        <Typography variant=\"h4\" fontWeight=\"bold\">\n          User Behavior Analytics\n        </Typography>\n        <Button variant=\"outlined\" onClick={refetch}>\n          Refresh\n        </Button>\n      </Box>\n\n      {/* Summary Cards */}\n      <Grid container spacing={3} mb={3}>\n        <Grid item xs={12} sm={6} md={3}>\n          {renderMetricCard('Total Events', overview?.total_events || 0, <Timeline />, 'primary')}\n        </Grid>\n        <Grid item xs={12} sm={6} md={3}>\n          {renderMetricCard('Unique Users', overview?.unique_users || 0, <People />, 'secondary')}\n        </Grid>\n        <Grid item xs={12} sm={6} md={3}>\n          {renderMetricCard('Avg Session Duration', \n            formatDuration(overview?.session_stats?.avg_duration || 0), \n            <Assessment />, 'success'\n          )}\n        </Grid>\n        <Grid item xs={12} sm={6} md={3}>\n          {renderMetricCard('Bounce Rate', \n            formatPercentage(overview?.session_stats?.bounce_rate || 0), \n            <TouchApp />, \n            overview?.session_stats?.bounce_rate > 50 ? 'error' : 'info'\n          )}\n        </Grid>\n      </Grid>\n\n      {/* Tabs */}\n      <Card>\n        <Tabs value={activeTab} onChange={(e, v) => setActiveTab(v)}>\n          <Tab label=\"Overview\" />\n          <Tab label=\"Funnels\" />\n          <Tab label=\"Cohorts\" />\n          <Tab label=\"Heatmap\" />\n          <Tab label=\"Segments\" />\n        </Tabs>\n\n        <CardContent>\n          {activeTab === 0 && (\n            <Box>\n              <Typography variant=\"h6\" mb={2}>Event Breakdown</Typography>\n              {renderEventBreakdown()}\n              \n              {overview?.journey_stats && (\n                <Box mt={4}>\n                  <Typography variant=\"h6\" mb={2}>User Journey Insights</Typography>\n                  <Grid container spacing={2}>\n                    <Grid item xs={12} md={4}>\n                      <Card variant=\"outlined\">\n                        <CardContent>\n                          <Typography variant=\"body2\" color=\"textSecondary\">\n                            Total Sessions\n                          </Typography>\n                          <Typography variant=\"h5\">\n                            {formatNumber(overview.journey_stats.total_sessions)}\n                          </Typography>\n                        </CardContent>\n                      </Card>\n                    </Grid>\n                    <Grid item xs={12} md={4}>\n                      <Card variant=\"outlined\">\n                        <CardContent>\n                          <Typography variant=\"body2\" color=\"textSecondary\">\n                            Avg Events/Session\n                          </Typography>\n                          <Typography variant=\"h5\">\n                            {overview.journey_stats.avg_events_per_session?.toFixed(1)}\n                          </Typography>\n                        </CardContent>\n                      </Card>\n                    </Grid>\n                    <Grid item xs={12} md={4}>\n                      <Card variant=\"outlined\">\n                        <CardContent>\n                          <Typography variant=\"body2\" color=\"textSecondary\">\n                            Top Pattern\n                          </Typography>\n                          <Typography variant=\"body1\">\n                            {overview.journey_stats.top_patterns?.[0]?.pattern}\n                          </Typography>\n                        </CardContent>\n                      </Card>\n                    </Grid>\n                  </Grid>\n                </Box>\n              )}\n            </Box>\n          )}\n          \n          {activeTab === 1 && renderFunnelChart()}\n          {activeTab === 2 && renderCohortAnalysis()}\n          {activeTab === 3 && renderHeatmap()}\n          {activeTab === 4 && renderUserSegments()}\n        </CardContent>\n      </Card>\n    </Box>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Analytics\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Animations\\AdvancedAnimations.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useAnimation' is defined but never used.","line":7,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":47},{"ruleId":"react-refresh/only-export-components","severity":2,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":12,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":12,"endColumn":32},{"ruleId":"react-refresh/only-export-components","severity":2,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":18,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":18,"endColumn":35},{"ruleId":"react-refresh/only-export-components","severity":2,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":24,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":24,"endColumn":35},{"ruleId":"react-refresh/only-export-components","severity":2,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":30,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":30,"endColumn":36},{"ruleId":"react-refresh/only-export-components","severity":2,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":36,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":36,"endColumn":40},{"ruleId":"react-refresh/only-export-components","severity":2,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":45,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":45,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'endTime' is assigned a value but never used.","line":236,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":236,"endColumn":18},{"ruleId":"react-refresh/only-export-components","severity":2,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":490,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":490,"endColumn":28}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Advanced Animation Components and Hooks\n * Provides sophisticated animation effects throughout the application\n */\n\nimport React, { useEffect, useRef, useState, useCallback } from 'react';\nimport { motion, AnimatePresence, useAnimation, useInView, Variants, useScroll, useTransform } from 'framer-motion';\nimport { Box, styled, keyframes } from '@mui/material';\nimport { useEnhancedTheme } from '../../contexts/EnhancedThemeContext';\n\n// Animation variants\nexport const fadeInUp: Variants = {\n  initial: { opacity: 0, y: 20 },\n  animate: { opacity: 1, y: 0 },\n  exit: { opacity: 0, y: -20 }\n};\n\nexport const fadeInScale: Variants = {\n  initial: { opacity: 0, scale: 0.9 },\n  animate: { opacity: 1, scale: 1 },\n  exit: { opacity: 0, scale: 0.9 }\n};\n\nexport const slideInLeft: Variants = {\n  initial: { opacity: 0, x: -50 },\n  animate: { opacity: 1, x: 0 },\n  exit: { opacity: 0, x: 50 }\n};\n\nexport const slideInRight: Variants = {\n  initial: { opacity: 0, x: 50 },\n  animate: { opacity: 1, x: 0 },\n  exit: { opacity: 0, x: -50 }\n};\n\nexport const staggerContainer: Variants = {\n  animate: {\n    transition: {\n      staggerChildren: 0.1,\n      delayChildren: 0.2\n    }\n  }\n};\n\nexport const staggerItem: Variants = {\n  initial: { opacity: 0, y: 20 },\n  animate: { \n    opacity: 1, \n    y: 0,\n    transition: {\n      duration: 0.5,\n      ease: [0.48, 0.15, 0.25, 0.96]\n    }\n  }\n};\n\n// Keyframe animations\nconst pulse = keyframes`\n  0% { transform: scale(1); }\n  50% { transform: scale(1.05); }\n  100% { transform: scale(1); }\n`;\n\nconst shimmer = keyframes`\n  0% { background-position: -1000px 0; }\n  100% { background-position: 1000px 0; }\n`;\n\nconst rotate = keyframes`\n  from { transform: rotate(0deg); }\n  to { transform: rotate(360deg); }\n`;\n\nconst bounce = keyframes`\n  0%, 100% { transform: translateY(0); }\n  50% { transform: translateY(-20px); }\n`;\n\nconst glow = keyframes`\n  0% { box-shadow: 0 0 5px rgba(66, 153, 225, 0.5); }\n  50% { box-shadow: 0 0 20px rgba(66, 153, 225, 0.8), 0 0 30px rgba(66, 153, 225, 0.6); }\n  100% { box-shadow: 0 0 5px rgba(66, 153, 225, 0.5); }\n`;\n\n// Styled components with animations\nexport const PulseBox = styled(Box)`\n  animation: ${pulse} 2s ease-in-out infinite;\n`;\n\nexport const ShimmerBox = styled(Box)`\n  background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);\n  background-size: 1000px 100%;\n  animation: ${shimmer} 2s infinite;\n`;\n\nexport const RotateBox = styled(Box)`\n  animation: ${rotate} 2s linear infinite;\n`;\n\nexport const BounceBox = styled(Box)`\n  animation: ${bounce} 1s ease-in-out infinite;\n`;\n\nexport const GlowBox = styled(Box)`\n  animation: ${glow} 2s ease-in-out infinite;\n`;\n\n// Animated card component\nexport const AnimatedCard: React.FC<{\n  children: React.ReactNode;\n  delay?: number;\n  className?: string;\n}> = ({ children, delay = 0, className }) => {\n  const ref = useRef(null);\n  const isInView = useInView(ref, { once: true, amount: 0.3 });\n  const { themeConfig } = useEnhancedTheme();\n\n  if (!themeConfig.animationsEnabled) {\n    return <div className={className}>{children}</div>;\n  }\n\n  return (\n    <motion.div\n      ref={ref}\n      initial={{ opacity: 0, y: 50 }}\n      animate={isInView ? { opacity: 1, y: 0 } : { opacity: 0, y: 50 }}\n      transition={{\n        duration: 0.6,\n        delay,\n        ease: [0.48, 0.15, 0.25, 0.96]\n      }}\n      whileHover={{\n        scale: 1.02,\n        boxShadow: '0 10px 30px rgba(0,0,0,0.2)'\n      }}\n      className={className}\n    >\n      {children}\n    </motion.div>\n  );\n};\n\n// Parallax scroll component\nexport const ParallaxSection: React.FC<{\n  children: React.ReactNode;\n  speed?: number;\n}> = ({ children, speed = 0.5 }) => {\n  const ref = useRef(null);\n  const { scrollYProgress } = useScroll({\n    target: ref,\n    offset: ['start end', 'end start']\n  });\n  \n  const y = useTransform(scrollYProgress, [0, 1], [0, speed * 100]);\n  const { themeConfig } = useEnhancedTheme();\n\n  if (!themeConfig.animationsEnabled) {\n    return <div>{children}</div>;\n  }\n\n  return (\n    <motion.div ref={ref} style={{ y }}>\n      {children}\n    </motion.div>\n  );\n};\n\n// Morphing shape background\nexport const MorphingBackground: React.FC = () => {\n  const { isDarkMode, themeConfig } = useEnhancedTheme();\n  \n  if (!themeConfig.animationsEnabled) {\n    return null;\n  }\n\n  return (\n    <Box\n      sx={{\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n        overflow: 'hidden',\n        zIndex: -1\n      }}\n    >\n      <svg\n        style={{\n          position: 'absolute',\n          width: '100%',\n          height: '100%'\n        }}\n        viewBox=\"0 0 1440 800\"\n      >\n        <motion.path\n          d=\"M 0,400 C 0,400 0,200 0,200 C 114.35714285714286,156.53571428571428 228.71428571428572,113.07142857142857 351,131 C 473.2857142857143,148.92857142857142 603.5,228.25 710,245 C 816.5,261.75 899.2857142857142,216.92857142857142 1029,196 C 1158.7142857142858,175.07142857142858 1335.357142857143,177.03571428571428 1440,200 C 1440,200 1440,400 1440,400 Z\"\n          fill={isDarkMode ? '#1e1e1e' : '#f0f0f0'}\n          fillOpacity=\"0.3\"\n          animate={{\n            d: [\n              \"M 0,400 C 0,400 0,200 0,200 C 114.35714285714286,156.53571428571428 228.71428571428572,113.07142857142857 351,131 C 473.2857142857143,148.92857142857142 603.5,228.25 710,245 C 816.5,261.75 899.2857142857142,216.92857142857142 1029,196 C 1158.7142857142858,175.07142857142858 1335.357142857143,177.03571428571428 1440,200 C 1440,200 1440,400 1440,400 Z\",\n              \"M 0,400 C 0,400 0,200 0,200 C 89.35714285714286,244.17857142857142 178.71428571428572,288.35714285714283 306,276 C 433.2857142857143,263.6428571428571 598.5,194.75 741,183 C 883.5,171.25 1003.2857142857142,216.64285714285714 1123,234 C 1242.7142857142858,251.35714285714286 1362.357142857143,240.67857142857142 1440,235 C 1440,235 1440,400 1440,400 Z\",\n              \"M 0,400 C 0,400 0,200 0,200 C 114.35714285714286,156.53571428571428 228.71428571428572,113.07142857142857 351,131 C 473.2857142857143,148.92857142857142 603.5,228.25 710,245 C 816.5,261.75 899.2857142857142,216.92857142857142 1029,196 C 1158.7142857142858,175.07142857142858 1335.357142857143,177.03571428571428 1440,200 C 1440,200 1440,400 1440,400 Z\"\n            ]\n          }}\n          transition={{\n            repeat: Infinity,\n            repeatType: \"reverse\",\n            duration: 10,\n            ease: \"easeInOut\"\n          }}\n        />\n      </svg>\n    </Box>\n  );\n};\n\n// Animated counter\nexport const AnimatedCounter: React.FC<{\n  value: number;\n  duration?: number;\n  prefix?: string;\n  suffix?: string;\n}> = ({ value, duration = 2, prefix = '', suffix = '' }) => {\n  const [displayValue, setDisplayValue] = useState(0);\n  const { themeConfig } = useEnhancedTheme();\n\n  useEffect(() => {\n    if (!themeConfig.animationsEnabled) {\n      setDisplayValue(value);\n      return;\n    }\n\n    const startTime = Date.now();\n    const endTime = startTime + duration * 1000;\n\n    const updateValue = () => {\n      const now = Date.now();\n      const progress = Math.min((now - startTime) / (duration * 1000), 1);\n      \n      // Easing function\n      const easeOutQuart = 1 - Math.pow(1 - progress, 4);\n      const currentValue = Math.floor(easeOutQuart * value);\n      \n      setDisplayValue(currentValue);\n      \n      if (progress < 1) {\n        requestAnimationFrame(updateValue);\n      }\n    };\n    \n    requestAnimationFrame(updateValue);\n  }, [value, duration, themeConfig.animationsEnabled]);\n\n  return (\n    <span>\n      {prefix}{displayValue.toLocaleString()}{suffix}\n    </span>\n  );\n};\n\n// Typewriter effect\nexport const TypewriterText: React.FC<{\n  text: string;\n  delay?: number;\n  speed?: number;\n}> = ({ text, delay = 0, speed = 50 }) => {\n  const [displayedText, setDisplayedText] = useState('');\n  const { themeConfig } = useEnhancedTheme();\n\n  useEffect(() => {\n    if (!themeConfig.animationsEnabled) {\n      setDisplayedText(text);\n      return;\n    }\n\n    let index = 0;\n    const timeout = setTimeout(() => {\n      const interval = setInterval(() => {\n        if (index < text.length) {\n          setDisplayedText(text.slice(0, index + 1));\n          index++;\n        } else {\n          clearInterval(interval);\n        }\n      }, speed);\n      \n      return () => clearInterval(interval);\n    }, delay);\n    \n    return () => clearTimeout(timeout);\n  }, [text, delay, speed, themeConfig.animationsEnabled]);\n\n  return <span>{displayedText}</span>;\n};\n\n// Ripple effect component\nexport const RippleButton: React.FC<{\n  children: React.ReactNode;\n  onClick?: () => void;\n  className?: string;\n}> = ({ children, onClick, className }) => {\n  const [ripples, setRipples] = useState<Array<{ x: number; y: number; id: number }>>([]);\n  const { themeConfig } = useEnhancedTheme();\n\n  const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    if (!themeConfig.animationsEnabled) {\n      onClick?.();\n      return;\n    }\n\n    const rect = e.currentTarget.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    const id = Date.now();\n    \n    setRipples(prev => [...prev, { x, y, id }]);\n    \n    setTimeout(() => {\n      setRipples(prev => prev.filter(r => r.id !== id));\n    }, 600);\n    \n    onClick?.();\n  }, [onClick, themeConfig.animationsEnabled]);\n\n  return (\n    <Box\n      onClick={handleClick}\n      className={className}\n      sx={{\n        position: 'relative',\n        overflow: 'hidden',\n        cursor: 'pointer'\n      }}\n    >\n      {children}\n      <AnimatePresence>\n        {ripples.map(ripple => (\n          <motion.div\n            key={ripple.id}\n            style={{\n              position: 'absolute',\n              left: ripple.x,\n              top: ripple.y,\n              transform: 'translate(-50%, -50%)',\n              borderRadius: '50%',\n              backgroundColor: 'rgba(255, 255, 255, 0.5)'\n            }}\n            initial={{ width: 0, height: 0, opacity: 1 }}\n            animate={{ width: 200, height: 200, opacity: 0 }}\n            exit={{ opacity: 0 }}\n            transition={{ duration: 0.6, ease: 'easeOut' }}\n          />\n        ))}\n      </AnimatePresence>\n    </Box>\n  );\n};\n\n// Page transition wrapper\nexport const PageTransition: React.FC<{\n  children: React.ReactNode;\n  variant?: 'fade' | 'slide' | 'scale';\n}> = ({ children, variant = 'fade' }) => {\n  const { themeConfig } = useEnhancedTheme();\n  \n  if (!themeConfig.animationsEnabled) {\n    return <>{children}</>;\n  }\n\n  const variants = {\n    fade: fadeInUp,\n    slide: slideInRight,\n    scale: fadeInScale\n  };\n\n  return (\n    <AnimatePresence mode=\"wait\">\n      <motion.div\n        variants={variants[variant]}\n        initial=\"initial\"\n        animate=\"animate\"\n        exit=\"exit\"\n        transition={{ duration: 0.3 }}\n      >\n        {children}\n      </motion.div>\n    </AnimatePresence>\n  );\n};\n\n// Loading skeleton with animation\nexport const AnimatedSkeleton: React.FC<{\n  width?: string | number;\n  height?: string | number;\n  variant?: 'text' | 'rectangular' | 'circular';\n}> = ({ width = '100%', height = 20, variant = 'text' }) => {\n  const { isDarkMode } = useEnhancedTheme();\n  \n  const baseColor = isDarkMode ? '#2a2a2a' : '#e0e0e0';\n  const highlightColor = isDarkMode ? '#3a3a3a' : '#f0f0f0';\n  \n  return (\n    <Box\n      sx={{\n        width,\n        height,\n        backgroundColor: baseColor,\n        borderRadius: variant === 'circular' ? '50%' : variant === 'text' ? 1 : 2,\n        position: 'relative',\n        overflow: 'hidden',\n        '&::after': {\n          content: '\"\"',\n          position: 'absolute',\n          top: 0,\n          left: '-150%',\n          width: '150%',\n          height: '100%',\n          background: `linear-gradient(90deg, transparent, ${highlightColor}, transparent)`,\n          animation: `${shimmer} 2s infinite`\n        }\n      }}\n    />\n  );\n};\n\n// Floating action button with animation\nexport const FloatingActionButton: React.FC<{\n  children: React.ReactNode;\n  onClick?: () => void;\n}> = ({ children, onClick }) => {\n  const { themeConfig } = useEnhancedTheme();\n  \n  if (!themeConfig.animationsEnabled) {\n    return (\n      <Box\n        onClick={onClick}\n        sx={{\n          position: 'fixed',\n          bottom: 24,\n          right: 24,\n          width: 56,\n          height: 56,\n          borderRadius: '50%',\n          backgroundColor: 'primary.main',\n          color: 'primary.contrastText',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          cursor: 'pointer',\n          boxShadow: 3\n        }}\n      >\n        {children}\n      </Box>\n    );\n  }\n\n  return (\n    <motion.div\n      style={{\n        position: 'fixed',\n        bottom: 24,\n        right: 24,\n        width: 56,\n        height: 56,\n        borderRadius: '50%',\n        backgroundColor: 'var(--primary-color)',\n        color: 'white',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        cursor: 'pointer',\n        boxShadow: '0 4px 10px rgba(0,0,0,0.3)'\n      }}\n      whileHover={{ scale: 1.1 }}\n      whileTap={{ scale: 0.9 }}\n      initial={{ scale: 0 }}\n      animate={{ scale: 1 }}\n      transition={{ type: 'spring', stiffness: 260, damping: 20 }}\n      onClick={onClick}\n    >\n      {children}\n    </motion.div>\n  );\n};\n\n// Export all animation utilities\nexport const AnimationUtils = {\n  fadeInUp,\n  fadeInScale,\n  slideInLeft,\n  slideInRight,\n  staggerContainer,\n  staggerItem\n};\n\nexport default {\n  AnimatedCard,\n  ParallaxSection,\n  MorphingBackground,\n  AnimatedCounter,\n  TypewriterText,\n  RippleButton,\n  PageTransition,\n  AnimatedSkeleton,\n  FloatingActionButton,\n  AnimationUtils\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Animations\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Auth\\EmailVerification.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'verifyEmail'. Either include it or remove the dependency array.","line":30,"column":6,"nodeType":"ArrayExpression","endLine":30,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [token, verifyEmail]","fix":{"range":[893,900],"text":"[token, verifyEmail]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'response' is assigned a value but never used.","line":34,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":42,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1292,1295],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1292,1295],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":59,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":59,"endColumn":19}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\r\nimport { useNavigate, useSearchParams, Link } from 'react-router-dom';\r\nimport {\r\n  Box,\r\n  Paper,\r\n  Typography,\r\n  Button,\r\n  CircularProgress,\r\n  Alert,\r\n} from '@mui/material';\r\nimport { CheckCircle, Error as ErrorIcon, Email } from '@mui/icons-material';\r\nimport { authApi } from '../../services/api';\r\n\r\nexport const EmailVerification: React.FC = () => {\r\n  const navigate = useNavigate();\r\n  const [searchParams] = useSearchParams();\r\n  const [status, setStatus] = useState<'loading' | 'success' | 'error'>('loading');\r\n  const [message, setMessage] = useState('');\r\n  \r\n  const token = searchParams.get('token');\r\n\r\n  useEffect(() => {\r\n    if (!token) {\r\n      setStatus('error');\r\n      setMessage('Invalid verification link. Please check your email for the correct link.');\r\n      return;\r\n    }\r\n\r\n    verifyEmail(token);\r\n  }, [token]);\r\n\r\n  const verifyEmail = async (verificationToken: string) => {\r\n    try {\r\n      const response = await authApi.verifyEmail(verificationToken);\r\n      setStatus('success');\r\n      setMessage('Your email has been successfully verified!');\r\n      \r\n      // Redirect to login after 3 seconds\r\n      setTimeout(() => {\r\n        navigate('/auth/login');\r\n      }, 3000);\r\n    } catch (error: any) {\r\n      setStatus('error');\r\n      if (error.response?.status === 404) {\r\n        setMessage('Invalid or expired verification token.');\r\n      } else {\r\n        setMessage('An error occurred during verification. Please try again.');\r\n      }\r\n    }\r\n  };\r\n\r\n  const resendVerification = async () => {\r\n    setStatus('loading');\r\n    try {\r\n      // This would require the user's email\r\n      // You might want to add an input field for this\r\n      setMessage('A new verification email has been sent.');\r\n      setStatus('success');\r\n    } catch (error) {\r\n      setStatus('error');\r\n      setMessage('Failed to resend verification email.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        minHeight: '100vh',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n        padding: 2,\r\n      }}\r\n    >\r\n      <Paper\r\n        elevation={10}\r\n        sx={{\r\n          padding: 4,\r\n          maxWidth: 400,\r\n          width: '100%',\r\n          borderRadius: 2,\r\n          textAlign: 'center',\r\n        }}\r\n      >\r\n        <Box sx={{ mb: 4 }}>\r\n          <Typography variant=\"h4\" component=\"h1\" gutterBottom fontWeight=\"bold\">\r\n            YTEmpire\r\n          </Typography>\r\n          <Typography variant=\"h6\" color=\"text.secondary\">\r\n            Email Verification\r\n          </Typography>\r\n        </Box>\r\n\r\n        {status === 'loading' && (\r\n          <Box sx={{ py: 4 }}>\r\n            <CircularProgress size={60} />\r\n            <Typography variant=\"body1\" sx={{ mt: 2 }}>\r\n              Verifying your email...\r\n            </Typography>\r\n          </Box>\r\n        )}\r\n\r\n        {status === 'success' && (\r\n          <Box sx={{ py: 4 }}>\r\n            <CheckCircle sx={{ fontSize: 60, color: 'success.main', mb: 2 }} />\r\n            <Alert severity=\"success\" sx={{ mb: 3 }}>\r\n              {message}\r\n            </Alert>\r\n            <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 3 }}>\r\n              You will be redirected to the login page shortly...\r\n            </Typography>\r\n            <Button\r\n              variant=\"contained\"\r\n              fullWidth\r\n              onClick={() => navigate('/auth/login')}\r\n              sx={{\r\n                background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n                '&:hover': {\r\n                  background: 'linear-gradient(135deg, #5a6fd8 0%, #6a4290 100%)',\r\n                },\r\n              }}\r\n            >\r\n              Go to Login\r\n            </Button>\r\n          </Box>\r\n        )}\r\n\r\n        {status === 'error' && (\r\n          <Box sx={{ py: 4 }}>\r\n            <ErrorIcon sx={{ fontSize: 60, color: 'error.main', mb: 2 }} />\r\n            <Alert severity=\"error\" sx={{ mb: 3 }}>\r\n              {message}\r\n            </Alert>\r\n            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>\r\n              <Button\r\n                variant=\"outlined\"\r\n                fullWidth\r\n                startIcon={<Email />}\r\n                onClick={resendVerification}\r\n              >\r\n                Resend Verification Email\r\n              </Button>\r\n              <Button\r\n                variant=\"contained\"\r\n                fullWidth\r\n                onClick={() => navigate('/auth/login')}\r\n                sx={{\r\n                  background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n                  '&:hover': {\r\n                    background: 'linear-gradient(135deg, #5a6fd8 0%, #6a4290 100%)',\r\n                  },\r\n                }}\r\n              >\r\n                Back to Login\r\n              </Button>\r\n            </Box>\r\n          </Box>\r\n        )}\r\n\r\n        <Box sx={{ mt: 4 }}>\r\n          <Typography variant=\"body2\" color=\"text.secondary\">\r\n            Need help?{' '}\r\n            <Link\r\n              to=\"/support\"\r\n              style={{\r\n                color: '#667eea',\r\n                textDecoration: 'none',\r\n                fontWeight: 'bold',\r\n              }}\r\n            >\r\n              Contact Support\r\n            </Link>\r\n          </Typography>\r\n        </Box>\r\n      </Paper>\r\n    </Box>\r\n  );\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Auth\\ForgotPasswordForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":97,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":97,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2894,2897],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2894,2897],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":118,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":118,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3437,3440],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3437,3440],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":142,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":142,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4106,4109],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4106,4109],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\r\nimport { useNavigate, Link } from 'react-router-dom';\r\nimport {\r\n  Box,\r\n  Button,\r\n  TextField,\r\n  Typography,\r\n  Alert,\r\n  Paper,\r\n  InputAdornment,\r\n  CircularProgress,\r\n  Stepper,\r\n  Step,\r\n  StepLabel,\r\n} from '@mui/material';\r\nimport {\r\n  Email,\r\n  Lock,\r\n  VpnKey,\r\n  ArrowBack,\r\n  CheckCircle,\r\n} from '@mui/icons-material';\r\nimport axios from 'axios';\r\n\r\nconst API_URL = import.meta.env.VITE_API_URL || 'http://localhost:8000';\r\n\r\nconst steps = ['Enter Email', 'Verify Code', 'Reset Password'];\r\n\r\nexport const ForgotPasswordForm: React.FC = () => {\r\n  const navigate = useNavigate();\r\n  \r\n  const [activeStep, setActiveStep] = useState(0);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [success, setSuccess] = useState<string | null>(null);\r\n  \r\n  const [formData, setFormData] = useState({\r\n    email: '',\r\n    resetCode: '',\r\n    newPassword: '',\r\n    confirmPassword: '',\r\n  });\r\n  \r\n  const [validationErrors, setValidationErrors] = useState<Record<string, string>>({});\r\n\r\n  const validateStep = (step: number): boolean => {\r\n    const errors: Record<string, string> = {};\r\n    \r\n    if (step === 0) {\r\n      // Validate email\r\n      if (!formData.email) {\r\n        errors.email = 'Email is required';\r\n      } else if (!/\\S+@\\S+\\.\\S+/.test(formData.email)) {\r\n        errors.email = 'Email is invalid';\r\n      }\r\n    } else if (step === 1) {\r\n      // Validate reset code\r\n      if (!formData.resetCode) {\r\n        errors.resetCode = 'Reset code is required';\r\n      } else if (formData.resetCode.length !== 6) {\r\n        errors.resetCode = 'Reset code must be 6 digits';\r\n      }\r\n    } else if (step === 2) {\r\n      // Validate new password\r\n      if (!formData.newPassword) {\r\n        errors.newPassword = 'Password is required';\r\n      } else if (formData.newPassword.length < 8) {\r\n        errors.newPassword = 'Password must be at least 8 characters';\r\n      } else if (!/(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/.test(formData.newPassword)) {\r\n        errors.newPassword = 'Password must contain uppercase, lowercase, and number';\r\n      }\r\n      \r\n      if (!formData.confirmPassword) {\r\n        errors.confirmPassword = 'Please confirm your password';\r\n      } else if (formData.newPassword !== formData.confirmPassword) {\r\n        errors.confirmPassword = 'Passwords do not match';\r\n      }\r\n    }\r\n    \r\n    setValidationErrors(errors);\r\n    return Object.keys(errors).length === 0;\r\n  };\r\n\r\n  const handleSendResetCode = async () => {\r\n    if (!validateStep(0)) return;\r\n    \r\n    setIsLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      await axios.post(`${API_URL}/api/v1/auth/forgot-password`, {\r\n        email: formData.email,\r\n      });\r\n      \r\n      setSuccess('Reset code sent to your email!');\r\n      setActiveStep(1);\r\n    } catch (error: any) {\r\n      setError(error.response?.data?.detail || 'Failed to send reset code');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleVerifyCode = async () => {\r\n    if (!validateStep(1)) return;\r\n    \r\n    setIsLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      await axios.post(`${API_URL}/api/v1/auth/verify-reset-code`, {\r\n        email: formData.email,\r\n        code: formData.resetCode,\r\n      });\r\n      \r\n      setSuccess('Code verified successfully!');\r\n      setActiveStep(2);\r\n    } catch (error: any) {\r\n      setError(error.response?.data?.detail || 'Invalid or expired reset code');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleResetPassword = async () => {\r\n    if (!validateStep(2)) return;\r\n    \r\n    setIsLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      await axios.post(`${API_URL}/api/v1/auth/reset-password`, {\r\n        email: formData.email,\r\n        code: formData.resetCode,\r\n        new_password: formData.newPassword,\r\n      });\r\n      \r\n      setSuccess('Password reset successfully! Redirecting to login...');\r\n      setTimeout(() => {\r\n        navigate('/auth/login');\r\n      }, 2000);\r\n    } catch (error: any) {\r\n      setError(error.response?.data?.detail || 'Failed to reset password');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { name, value } = e.target;\r\n    setFormData(prev => ({ ...prev, [name]: value }));\r\n    \r\n    // Clear validation error when user starts typing\r\n    if (validationErrors[name]) {\r\n      setValidationErrors(prev => ({ ...prev, [name]: '' }));\r\n    }\r\n    \r\n    // Clear error/success messages\r\n    if (error) setError(null);\r\n    if (success) setSuccess(null);\r\n  };\r\n\r\n  const renderStepContent = (step: number) => {\r\n    switch (step) {\r\n      case 0:\r\n        return (\r\n          <Box>\r\n            <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 3 }}>\r\n              Enter your email address and we'll send you a code to reset your password.\r\n            </Typography>\r\n            \r\n            <TextField\r\n              fullWidth\r\n              margin=\"normal\"\r\n              name=\"email\"\r\n              type=\"email\"\r\n              label=\"Email Address\"\r\n              value={formData.email}\r\n              onChange={handleChange}\r\n              error={!!validationErrors.email}\r\n              helperText={validationErrors.email}\r\n              InputProps={{\r\n                startAdornment: (\r\n                  <InputAdornment position=\"start\">\r\n                    <Email color=\"action\" />\r\n                  </InputAdornment>\r\n                ),\r\n              }}\r\n              autoComplete=\"email\"\r\n              autoFocus\r\n            />\r\n            \r\n            <Button\r\n              fullWidth\r\n              variant=\"contained\"\r\n              onClick={handleSendResetCode}\r\n              disabled={isLoading}\r\n              sx={{\r\n                mt: 3,\r\n                background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n                '&:hover': {\r\n                  background: 'linear-gradient(135deg, #5a6fd8 0%, #6a4290 100%)',\r\n                },\r\n              }}\r\n            >\r\n              {isLoading ? (\r\n                <CircularProgress size={24} color=\"inherit\" />\r\n              ) : (\r\n                'Send Reset Code'\r\n              )}\r\n            </Button>\r\n          </Box>\r\n        );\r\n        \r\n      case 1:\r\n        return (\r\n          <Box>\r\n            <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 3 }}>\r\n              Enter the 6-digit code sent to {formData.email}\r\n            </Typography>\r\n            \r\n            <TextField\r\n              fullWidth\r\n              margin=\"normal\"\r\n              name=\"resetCode\"\r\n              label=\"Reset Code\"\r\n              value={formData.resetCode}\r\n              onChange={handleChange}\r\n              error={!!validationErrors.resetCode}\r\n              helperText={validationErrors.resetCode}\r\n              InputProps={{\r\n                startAdornment: (\r\n                  <InputAdornment position=\"start\">\r\n                    <VpnKey color=\"action\" />\r\n                  </InputAdornment>\r\n                ),\r\n              }}\r\n              inputProps={{\r\n                maxLength: 6,\r\n                pattern: '[0-9]*',\r\n              }}\r\n              autoFocus\r\n            />\r\n            \r\n            <Box sx={{ display: 'flex', gap: 2, mt: 3 }}>\r\n              <Button\r\n                variant=\"outlined\"\r\n                onClick={() => setActiveStep(0)}\r\n                startIcon={<ArrowBack />}\r\n              >\r\n                Back\r\n              </Button>\r\n              \r\n              <Button\r\n                fullWidth\r\n                variant=\"contained\"\r\n                onClick={handleVerifyCode}\r\n                disabled={isLoading}\r\n                sx={{\r\n                  background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n                  '&:hover': {\r\n                    background: 'linear-gradient(135deg, #5a6fd8 0%, #6a4290 100%)',\r\n                  },\r\n                }}\r\n              >\r\n                {isLoading ? (\r\n                  <CircularProgress size={24} color=\"inherit\" />\r\n                ) : (\r\n                  'Verify Code'\r\n                )}\r\n              </Button>\r\n            </Box>\r\n            \r\n            <Button\r\n              fullWidth\r\n              variant=\"text\"\r\n              onClick={handleSendResetCode}\r\n              disabled={isLoading}\r\n              sx={{ mt: 2 }}\r\n            >\r\n              Resend Code\r\n            </Button>\r\n          </Box>\r\n        );\r\n        \r\n      case 2:\r\n        return (\r\n          <Box>\r\n            <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 3 }}>\r\n              Create a new password for your account\r\n            </Typography>\r\n            \r\n            <TextField\r\n              fullWidth\r\n              margin=\"normal\"\r\n              name=\"newPassword\"\r\n              type=\"password\"\r\n              label=\"New Password\"\r\n              value={formData.newPassword}\r\n              onChange={handleChange}\r\n              error={!!validationErrors.newPassword}\r\n              helperText={validationErrors.newPassword || 'Min 8 chars, include uppercase, lowercase, and number'}\r\n              InputProps={{\r\n                startAdornment: (\r\n                  <InputAdornment position=\"start\">\r\n                    <Lock color=\"action\" />\r\n                  </InputAdornment>\r\n                ),\r\n              }}\r\n              autoComplete=\"new-password\"\r\n              autoFocus\r\n            />\r\n            \r\n            <TextField\r\n              fullWidth\r\n              margin=\"normal\"\r\n              name=\"confirmPassword\"\r\n              type=\"password\"\r\n              label=\"Confirm New Password\"\r\n              value={formData.confirmPassword}\r\n              onChange={handleChange}\r\n              error={!!validationErrors.confirmPassword}\r\n              helperText={validationErrors.confirmPassword}\r\n              InputProps={{\r\n                startAdornment: (\r\n                  <InputAdornment position=\"start\">\r\n                    <Lock color=\"action\" />\r\n                  </InputAdornment>\r\n                ),\r\n              }}\r\n              autoComplete=\"new-password\"\r\n            />\r\n            \r\n            <Button\r\n              fullWidth\r\n              variant=\"contained\"\r\n              onClick={handleResetPassword}\r\n              disabled={isLoading}\r\n              sx={{\r\n                mt: 3,\r\n                background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n                '&:hover': {\r\n                  background: 'linear-gradient(135deg, #5a6fd8 0%, #6a4290 100%)',\r\n                },\r\n              }}\r\n            >\r\n              {isLoading ? (\r\n                <CircularProgress size={24} color=\"inherit\" />\r\n              ) : (\r\n                'Reset Password'\r\n              )}\r\n            </Button>\r\n          </Box>\r\n        );\r\n        \r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        minHeight: '100vh',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n        padding: 2,\r\n      }}\r\n    >\r\n      <Paper\r\n        elevation={10}\r\n        sx={{\r\n          padding: 4,\r\n          maxWidth: 450,\r\n          width: '100%',\r\n          borderRadius: 2,\r\n        }}\r\n      >\r\n        <Box sx={{ mb: 4, textAlign: 'center' }}>\r\n          <Typography variant=\"h4\" component=\"h1\" gutterBottom fontWeight=\"bold\">\r\n            YTEmpire\r\n          </Typography>\r\n          <Typography variant=\"h6\" color=\"text.secondary\">\r\n            Reset Password\r\n          </Typography>\r\n        </Box>\r\n\r\n        <Stepper activeStep={activeStep} sx={{ mb: 4 }}>\r\n          {steps.map((label) => (\r\n            <Step key={label}>\r\n              <StepLabel>{label}</StepLabel>\r\n            </Step>\r\n          ))}\r\n        </Stepper>\r\n\r\n        {error && (\r\n          <Alert severity=\"error\" sx={{ mb: 2 }} onClose={() => setError(null)}>\r\n            {error}\r\n          </Alert>\r\n        )}\r\n        \r\n        {success && (\r\n          <Alert \r\n            severity=\"success\" \r\n            sx={{ mb: 2 }} \r\n            icon={<CheckCircle />}\r\n            onClose={() => setSuccess(null)}\r\n          >\r\n            {success}\r\n          </Alert>\r\n        )}\r\n\r\n        {renderStepContent(activeStep)}\r\n\r\n        <Box sx={{ textAlign: 'center', mt: 4 }}>\r\n          <Typography variant=\"body2\" color=\"text.secondary\">\r\n            Remember your password?{' '}\r\n            <Link\r\n              to=\"/auth/login\"\r\n              style={{\r\n                color: '#667eea',\r\n                textDecoration: 'none',\r\n                fontWeight: 'bold',\r\n              }}\r\n            >\r\n              Back to Login\r\n            </Link>\r\n          </Typography>\r\n        </Box>\r\n      </Paper>\r\n    </Box>\r\n  );\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Auth\\LoginForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Auth\\RegisterForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CheckCircle' is defined but never used.","line":27,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":14}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\r\nimport { useNavigate, Link } from 'react-router-dom';\r\nimport { useAuthStore } from '../../stores/authStore';\r\nimport {\r\n  Box,\r\n  Button,\r\n  TextField,\r\n  Typography,\r\n  Alert,\r\n  Paper,\r\n  InputAdornment,\r\n  IconButton,\r\n  CircularProgress,\r\n  Stepper,\r\n  Step,\r\n  StepLabel,\r\n  Checkbox,\r\n  FormControlLabel,\r\n} from '@mui/material';\r\nimport {\r\n  Visibility,\r\n  VisibilityOff,\r\n  Email,\r\n  Lock,\r\n  Person,\r\n  Badge,\r\n  CheckCircle,\r\n} from '@mui/icons-material';\r\n\r\nconst steps = ['Account Details', 'Personal Information', 'Confirmation'];\r\n\r\nexport const RegisterForm: React.FC = () => {\r\n  const navigate = useNavigate();\r\n  const { register, isLoading, error, clearError } = useAuthStore();\r\n  \r\n  const [activeStep, setActiveStep] = useState(0);\r\n  const [formData, setFormData] = useState({\r\n    email: '',\r\n    username: '',\r\n    password: '',\r\n    confirmPassword: '',\r\n    fullName: '',\r\n    agreeToTerms: false,\r\n  });\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\r\n  const [validationErrors, setValidationErrors] = useState<Record<string, string>>({});\r\n\r\n  const validateStep = (step: number): boolean => {\r\n    const errors: Record<string, string> = {};\r\n    \r\n    if (step === 0) {\r\n      // Validate email and username\r\n      if (!formData.email) {\r\n        errors.email = 'Email is required';\r\n      } else if (!/\\S+@\\S+\\.\\S+/.test(formData.email)) {\r\n        errors.email = 'Email is invalid';\r\n      }\r\n      \r\n      if (!formData.username) {\r\n        errors.username = 'Username is required';\r\n      } else if (formData.username.length < 3) {\r\n        errors.username = 'Username must be at least 3 characters';\r\n      } else if (!/^[a-zA-Z0-9_]+$/.test(formData.username)) {\r\n        errors.username = 'Username can only contain letters, numbers, and underscores';\r\n      }\r\n    } else if (step === 1) {\r\n      // Validate password and full name\r\n      if (!formData.password) {\r\n        errors.password = 'Password is required';\r\n      } else if (formData.password.length < 8) {\r\n        errors.password = 'Password must be at least 8 characters';\r\n      } else if (!/(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/.test(formData.password)) {\r\n        errors.password = 'Password must contain uppercase, lowercase, and number';\r\n      }\r\n      \r\n      if (!formData.confirmPassword) {\r\n        errors.confirmPassword = 'Please confirm your password';\r\n      } else if (formData.password !== formData.confirmPassword) {\r\n        errors.confirmPassword = 'Passwords do not match';\r\n      }\r\n      \r\n      if (formData.fullName && formData.fullName.length < 2) {\r\n        errors.fullName = 'Full name must be at least 2 characters';\r\n      }\r\n    } else if (step === 2) {\r\n      // Validate terms agreement\r\n      if (!formData.agreeToTerms) {\r\n        errors.agreeToTerms = 'You must agree to the terms and conditions';\r\n      }\r\n    }\r\n    \r\n    setValidationErrors(errors);\r\n    return Object.keys(errors).length === 0;\r\n  };\r\n\r\n  const handleNext = () => {\r\n    if (validateStep(activeStep)) {\r\n      setActiveStep((prevStep) => prevStep + 1);\r\n    }\r\n  };\r\n\r\n  const handleBack = () => {\r\n    setActiveStep((prevStep) => prevStep - 1);\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (!validateStep(2)) return;\r\n    \r\n    try {\r\n      await register(\r\n        formData.email,\r\n        formData.username,\r\n        formData.password,\r\n        formData.fullName || undefined\r\n      );\r\n      navigate('/dashboard');\r\n    } catch (error) {\r\n      console.error('Registration failed:', error);\r\n      setActiveStep(0); // Go back to first step on error\r\n    }\r\n  };\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { name, value, checked } = e.target;\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      [name]: name === 'agreeToTerms' ? checked : value\r\n    }));\r\n    \r\n    // Clear validation error when user starts typing\r\n    if (validationErrors[name]) {\r\n      setValidationErrors(prev => ({ ...prev, [name]: '' }));\r\n    }\r\n    \r\n    // Clear auth error\r\n    if (error) {\r\n      clearError();\r\n    }\r\n  };\r\n\r\n  const renderStepContent = (step: number) => {\r\n    switch (step) {\r\n      case 0:\r\n        return (\r\n          <>\r\n            <TextField\r\n              fullWidth\r\n              margin=\"normal\"\r\n              name=\"email\"\r\n              type=\"email\"\r\n              label=\"Email Address\"\r\n              value={formData.email}\r\n              onChange={handleChange}\r\n              error={!!validationErrors.email}\r\n              helperText={validationErrors.email}\r\n              InputProps={{\r\n                startAdornment: (\r\n                  <InputAdornment position=\"start\">\r\n                    <Email color=\"action\" />\r\n                  </InputAdornment>\r\n                ),\r\n              }}\r\n              autoComplete=\"email\"\r\n              autoFocus\r\n            />\r\n            \r\n            <TextField\r\n              fullWidth\r\n              margin=\"normal\"\r\n              name=\"username\"\r\n              label=\"Username\"\r\n              value={formData.username}\r\n              onChange={handleChange}\r\n              error={!!validationErrors.username}\r\n              helperText={validationErrors.username}\r\n              InputProps={{\r\n                startAdornment: (\r\n                  <InputAdornment position=\"start\">\r\n                    <Person color=\"action\" />\r\n                  </InputAdornment>\r\n                ),\r\n              }}\r\n              autoComplete=\"username\"\r\n            />\r\n          </>\r\n        );\r\n        \r\n      case 1:\r\n        return (\r\n          <>\r\n            <TextField\r\n              fullWidth\r\n              margin=\"normal\"\r\n              name=\"fullName\"\r\n              label=\"Full Name (Optional)\"\r\n              value={formData.fullName}\r\n              onChange={handleChange}\r\n              error={!!validationErrors.fullName}\r\n              helperText={validationErrors.fullName}\r\n              InputProps={{\r\n                startAdornment: (\r\n                  <InputAdornment position=\"start\">\r\n                    <Badge color=\"action\" />\r\n                  </InputAdornment>\r\n                ),\r\n              }}\r\n              autoComplete=\"name\"\r\n            />\r\n            \r\n            <TextField\r\n              fullWidth\r\n              margin=\"normal\"\r\n              name=\"password\"\r\n              type={showPassword ? 'text' : 'password'}\r\n              label=\"Password\"\r\n              value={formData.password}\r\n              onChange={handleChange}\r\n              error={!!validationErrors.password}\r\n              helperText={validationErrors.password || 'Min 8 chars, include uppercase, lowercase, and number'}\r\n              InputProps={{\r\n                startAdornment: (\r\n                  <InputAdornment position=\"start\">\r\n                    <Lock color=\"action\" />\r\n                  </InputAdornment>\r\n                ),\r\n                endAdornment: (\r\n                  <InputAdornment position=\"end\">\r\n                    <IconButton\r\n                      aria-label=\"toggle password visibility\"\r\n                      onClick={() => setShowPassword(!showPassword)}\r\n                      edge=\"end\"\r\n                    >\r\n                      {showPassword ? <VisibilityOff /> : <Visibility />}\r\n                    </IconButton>\r\n                  </InputAdornment>\r\n                ),\r\n              }}\r\n              autoComplete=\"new-password\"\r\n            />\r\n            \r\n            <TextField\r\n              fullWidth\r\n              margin=\"normal\"\r\n              name=\"confirmPassword\"\r\n              type={showConfirmPassword ? 'text' : 'password'}\r\n              label=\"Confirm Password\"\r\n              value={formData.confirmPassword}\r\n              onChange={handleChange}\r\n              error={!!validationErrors.confirmPassword}\r\n              helperText={validationErrors.confirmPassword}\r\n              InputProps={{\r\n                startAdornment: (\r\n                  <InputAdornment position=\"start\">\r\n                    <Lock color=\"action\" />\r\n                  </InputAdornment>\r\n                ),\r\n                endAdornment: (\r\n                  <InputAdornment position=\"end\">\r\n                    <IconButton\r\n                      aria-label=\"toggle confirm password visibility\"\r\n                      onClick={() => setShowConfirmPassword(!showConfirmPassword)}\r\n                      edge=\"end\"\r\n                    >\r\n                      {showConfirmPassword ? <VisibilityOff /> : <Visibility />}\r\n                    </IconButton>\r\n                  </InputAdornment>\r\n                ),\r\n              }}\r\n              autoComplete=\"new-password\"\r\n            />\r\n          </>\r\n        );\r\n        \r\n      case 2:\r\n        return (\r\n          <Box sx={{ mt: 2 }}>\r\n            <Paper sx={{ p: 3, mb: 2, bgcolor: 'grey.50' }}>\r\n              <Typography variant=\"h6\" gutterBottom>\r\n                Account Summary\r\n              </Typography>\r\n              <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\r\n                <strong>Email:</strong> {formData.email}\r\n              </Typography>\r\n              <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\r\n                <strong>Username:</strong> {formData.username}\r\n              </Typography>\r\n              {formData.fullName && (\r\n                <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\r\n                  <strong>Full Name:</strong> {formData.fullName}\r\n                </Typography>\r\n              )}\r\n            </Paper>\r\n            \r\n            <FormControlLabel\r\n              control={\r\n                <Checkbox\r\n                  checked={formData.agreeToTerms}\r\n                  onChange={handleChange}\r\n                  name=\"agreeToTerms\"\r\n                  color=\"primary\"\r\n                />\r\n              }\r\n              label={\r\n                <Typography variant=\"body2\">\r\n                  I agree to the{' '}\r\n                  <Link to=\"/terms\" style={{ color: '#667eea' }}>\r\n                    Terms and Conditions\r\n                  </Link>\r\n                  {' '}and{' '}\r\n                  <Link to=\"/privacy\" style={{ color: '#667eea' }}>\r\n                    Privacy Policy\r\n                  </Link>\r\n                </Typography>\r\n              }\r\n            />\r\n            {validationErrors.agreeToTerms && (\r\n              <Typography color=\"error\" variant=\"caption\" display=\"block\" sx={{ mt: 1 }}>\r\n                {validationErrors.agreeToTerms}\r\n              </Typography>\r\n            )}\r\n          </Box>\r\n        );\r\n        \r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        minHeight: '100vh',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n        padding: 2,\r\n      }}\r\n    >\r\n      <Paper\r\n        elevation={10}\r\n        sx={{\r\n          padding: 4,\r\n          maxWidth: 500,\r\n          width: '100%',\r\n          borderRadius: 2,\r\n        }}\r\n      >\r\n        <Box sx={{ mb: 4, textAlign: 'center' }}>\r\n          <Typography variant=\"h4\" component=\"h1\" gutterBottom fontWeight=\"bold\">\r\n            YTEmpire\r\n          </Typography>\r\n          <Typography variant=\"subtitle1\" color=\"text.secondary\">\r\n            Create your account\r\n          </Typography>\r\n        </Box>\r\n\r\n        <Stepper activeStep={activeStep} sx={{ mb: 4 }}>\r\n          {steps.map((label) => (\r\n            <Step key={label}>\r\n              <StepLabel>{label}</StepLabel>\r\n            </Step>\r\n          ))}\r\n        </Stepper>\r\n\r\n        {error && (\r\n          <Alert severity=\"error\" sx={{ mb: 2 }} onClose={clearError}>\r\n            {error}\r\n          </Alert>\r\n        )}\r\n\r\n        <Box>\r\n          {renderStepContent(activeStep)}\r\n          \r\n          <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 3 }}>\r\n            <Button\r\n              disabled={activeStep === 0}\r\n              onClick={handleBack}\r\n              sx={{ mr: 1 }}\r\n            >\r\n              Back\r\n            </Button>\r\n            \r\n            {activeStep === steps.length - 1 ? (\r\n              <Button\r\n                variant=\"contained\"\r\n                onClick={handleSubmit}\r\n                disabled={isLoading}\r\n                sx={{\r\n                  background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n                  '&:hover': {\r\n                    background: 'linear-gradient(135deg, #5a6fd8 0%, #6a4290 100%)',\r\n                  },\r\n                }}\r\n              >\r\n                {isLoading ? (\r\n                  <CircularProgress size={24} color=\"inherit\" />\r\n                ) : (\r\n                  'Create Account'\r\n                )}\r\n              </Button>\r\n            ) : (\r\n              <Button\r\n                variant=\"contained\"\r\n                onClick={handleNext}\r\n                sx={{\r\n                  background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n                  '&:hover': {\r\n                    background: 'linear-gradient(135deg, #5a6fd8 0%, #6a4290 100%)',\r\n                  },\r\n                }}\r\n              >\r\n                Next\r\n              </Button>\r\n            )}\r\n          </Box>\r\n        </Box>\r\n\r\n        <Box sx={{ textAlign: 'center', mt: 3 }}>\r\n          <Typography variant=\"body2\" color=\"text.secondary\">\r\n            Already have an account?{' '}\r\n            <Link\r\n              to=\"/auth/login\"\r\n              style={{\r\n                color: '#667eea',\r\n                textDecoration: 'none',\r\n                fontWeight: 'bold',\r\n              }}\r\n            >\r\n              Sign In\r\n            </Link>\r\n          </Typography>\r\n        </Box>\r\n      </Paper>\r\n    </Box>\r\n  );\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Auth\\TwoFactorAuth.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\BatchOperations\\BatchOperations.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Tooltip' is defined but never used.","line":38,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Badge' is defined but never used.","line":40,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'RefreshIcon' is defined but never used.","line":47,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":47,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'WarningIcon' is defined but never used.","line":51,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":51,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SettingsIcon' is defined but never used.","line":54,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":54,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'onJobComplete' is defined but never used.","line":81,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":81,"endColumn":16},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":408,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":408,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11910,11913],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11910,11913],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Card,\n  CardContent,\n  Typography,\n  Button,\n  LinearProgress,\n  Grid,\n  Chip,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  IconButton,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  Select,\n  MenuItem,\n  FormControl,\n  InputLabel,\n  Alert,\n  Checkbox,\n  FormControlLabel,\n  Stepper,\n  Step,\n  StepLabel,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemIcon,\n  Tooltip,\n  CircularProgress,\n  Badge\n} from '@mui/material';\nimport {\n  PlayArrow as PlayIcon,\n  Pause as PauseIcon,\n  Stop as StopIcon,\n  Delete as DeleteIcon,\n  Refresh as RefreshIcon,\n  Add as AddIcon,\n  CheckCircle as CheckCircleIcon,\n  Error as ErrorIcon,\n  Warning as WarningIcon,\n  Schedule as ScheduleIcon,\n  VideoLibrary as VideoIcon,\n  Settings as SettingsIcon,\n  Queue as QueueIcon,\n  Speed as SpeedIcon\n} from '@mui/icons-material';\n\ninterface BatchJob {\n  id: string;\n  name: string;\n  type: 'video_generation' | 'thumbnail_update' | 'metadata_update' | 'analytics_sync';\n  status: 'pending' | 'running' | 'completed' | 'failed' | 'paused';\n  totalItems: number;\n  processedItems: number;\n  failedItems: number;\n  startTime?: string;\n  endTime?: string;\n  estimatedCompletion?: string;\n  channels: string[];\n  priority: 'low' | 'medium' | 'high';\n}\n\ninterface BatchOperationsProps {\n  maxConcurrent?: number;\n  onJobComplete?: (job: BatchJob) => void;\n}\n\nconst BatchOperations: React.FC<BatchOperationsProps> = ({ \n  maxConcurrent = 10,\n  onJobComplete \n}) => {\n  const [jobs, setJobs] = useState<BatchJob[]>([]);\n  const [selectedJobs, setSelectedJobs] = useState<string[]>([]);\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [activeStep, setActiveStep] = useState(0);\n  const [newBatch, setNewBatch] = useState({\n    name: '',\n    type: 'video_generation',\n    videoCount: 50,\n    channels: [] as string[],\n    priority: 'medium',\n    schedule: 'immediate',\n    options: {\n      generateThumbnails: true,\n      autoUpload: true,\n      qualityCheck: true,\n      costOptimization: true\n    }\n  });\n\n  const steps = ['Select Type', 'Configure Options', 'Select Channels', 'Review & Start'];\n\n  useEffect(() => {\n    loadJobs();\n    const interval = setInterval(updateJobProgress, 2000);\n    return () => clearInterval(interval);\n  }, []);\n\n  const loadJobs = () => {\n    // Mock data - replace with API call\n    const mockJobs: BatchJob[] = [\n      {\n        id: '1',\n        name: 'Daily Tech Videos',\n        type: 'video_generation',\n        status: 'running',\n        totalItems: 50,\n        processedItems: 23,\n        failedItems: 2,\n        startTime: new Date(Date.now() - 3600000).toISOString(),\n        estimatedCompletion: new Date(Date.now() + 7200000).toISOString(),\n        channels: ['Tech Reviews Pro', 'Gaming Central'],\n        priority: 'high'\n      },\n      {\n        id: '2',\n        name: 'Thumbnail Refresh',\n        type: 'thumbnail_update',\n        status: 'pending',\n        totalItems: 100,\n        processedItems: 0,\n        failedItems: 0,\n        channels: ['DIY Crafts Hub'],\n        priority: 'low'\n      },\n      {\n        id: '3',\n        name: 'Weekly Gaming Content',\n        type: 'video_generation',\n        status: 'completed',\n        totalItems: 75,\n        processedItems: 75,\n        failedItems: 3,\n        startTime: new Date(Date.now() - 86400000).toISOString(),\n        endTime: new Date(Date.now() - 3600000).toISOString(),\n        channels: ['Gaming Central'],\n        priority: 'medium'\n      }\n    ];\n    setJobs(mockJobs);\n  };\n\n  const updateJobProgress = () => {\n    setJobs(prevJobs => \n      prevJobs.map(job => {\n        if (job.status === 'running' && job.processedItems < job.totalItems) {\n          return {\n            ...job,\n            processedItems: Math.min(job.processedItems + Math.floor(Math.random() * 3), job.totalItems),\n            status: job.processedItems + 1 >= job.totalItems ? 'completed' : 'running'\n          };\n        }\n        return job;\n      })\n    );\n  };\n\n  const getStatusIcon = (status: BatchJob['status']) => {\n    switch (status) {\n      case 'running':\n        return <CircularProgress size={20} />;\n      case 'completed':\n        return <CheckCircleIcon color=\"success\" />;\n      case 'failed':\n        return <ErrorIcon color=\"error\" />;\n      case 'paused':\n        return <PauseIcon color=\"warning\" />;\n      default:\n        return <ScheduleIcon color=\"action\" />;\n    }\n  };\n\n  const getStatusColor = (status: BatchJob['status']) => {\n    switch (status) {\n      case 'running':\n        return 'primary';\n      case 'completed':\n        return 'success';\n      case 'failed':\n        return 'error';\n      case 'paused':\n        return 'warning';\n      default:\n        return 'default';\n    }\n  };\n\n  const handleStartJob = (jobId: string) => {\n    setJobs(jobs.map(job => \n      job.id === jobId ? { ...job, status: 'running', startTime: new Date().toISOString() } : job\n    ));\n  };\n\n  const handlePauseJob = (jobId: string) => {\n    setJobs(jobs.map(job => \n      job.id === jobId ? { ...job, status: 'paused' } : job\n    ));\n  };\n\n  const handleStopJob = (jobId: string) => {\n    setJobs(jobs.map(job => \n      job.id === jobId ? { ...job, status: 'failed', endTime: new Date().toISOString() } : job\n    ));\n  };\n\n  const handleDeleteJob = (jobId: string) => {\n    if (confirm('Are you sure you want to delete this batch job?')) {\n      setJobs(jobs.filter(job => job.id !== jobId));\n    }\n  };\n\n  const handleCreateBatch = () => {\n    const newJob: BatchJob = {\n      id: Date.now().toString(),\n      name: newBatch.name,\n      type: newBatch.type as BatchJob['type'],\n      status: 'pending',\n      totalItems: newBatch.videoCount,\n      processedItems: 0,\n      failedItems: 0,\n      channels: newBatch.channels,\n      priority: newBatch.priority as BatchJob['priority']\n    };\n    \n    setJobs([newJob, ...jobs]);\n    setIsCreateDialogOpen(false);\n    setActiveStep(0);\n    setNewBatch({\n      name: '',\n      type: 'video_generation',\n      videoCount: 50,\n      channels: [],\n      priority: 'medium',\n      schedule: 'immediate',\n      options: {\n        generateThumbnails: true,\n        autoUpload: true,\n        qualityCheck: true,\n        costOptimization: true\n      }\n    });\n  };\n\n  const runningJobs = jobs.filter(j => j.status === 'running').length;\n  const totalProcessed = jobs.reduce((sum, job) => sum + job.processedItems, 0);\n  const totalFailed = jobs.reduce((sum, job) => sum + job.failedItems, 0);\n\n  return (\n    <Box>\n      {/* Header */}\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\n        <Typography variant=\"h4\" component=\"h1\">\n          Batch Operations\n        </Typography>\n        <Box display=\"flex\" gap={2}>\n          <Chip\n            icon={<SpeedIcon />}\n            label={`${runningJobs} / ${maxConcurrent} Running`}\n            color={runningJobs >= maxConcurrent ? 'error' : 'primary'}\n          />\n          <Button\n            variant=\"contained\"\n            startIcon={<AddIcon />}\n            onClick={() => setIsCreateDialogOpen(true)}\n          >\n            New Batch Job\n          </Button>\n        </Box>\n      </Box>\n\n      {/* Statistics Cards */}\n      <Grid container spacing={3} mb={3}>\n        <Grid item xs={12} md={3}>\n          <Card>\n            <CardContent>\n              <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\n                <Box>\n                  <Typography color=\"text.secondary\" gutterBottom>\n                    Active Jobs\n                  </Typography>\n                  <Typography variant=\"h4\">\n                    {runningJobs}\n                  </Typography>\n                </Box>\n                <PlayIcon color=\"primary\" fontSize=\"large\" />\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} md={3}>\n          <Card>\n            <CardContent>\n              <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\n                <Box>\n                  <Typography color=\"text.secondary\" gutterBottom>\n                    Videos Processed\n                  </Typography>\n                  <Typography variant=\"h4\">\n                    {totalProcessed}\n                  </Typography>\n                </Box>\n                <VideoIcon color=\"success\" fontSize=\"large\" />\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} md={3}>\n          <Card>\n            <CardContent>\n              <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\n                <Box>\n                  <Typography color=\"text.secondary\" gutterBottom>\n                    Failed Items\n                  </Typography>\n                  <Typography variant=\"h4\">\n                    {totalFailed}\n                  </Typography>\n                </Box>\n                <ErrorIcon color=\"error\" fontSize=\"large\" />\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} md={3}>\n          <Card>\n            <CardContent>\n              <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\n                <Box>\n                  <Typography color=\"text.secondary\" gutterBottom>\n                    Capacity Used\n                  </Typography>\n                  <Typography variant=\"h4\">\n                    {Math.round((runningJobs / maxConcurrent) * 100)}%\n                  </Typography>\n                </Box>\n                <QueueIcon color=\"action\" fontSize=\"large\" />\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n\n      {/* Jobs Table */}\n      <TableContainer component={Paper}>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell padding=\"checkbox\">\n                <Checkbox\n                  checked={selectedJobs.length === jobs.length}\n                  onChange={(e) => {\n                    if (e.target.checked) {\n                      setSelectedJobs(jobs.map(j => j.id));\n                    } else {\n                      setSelectedJobs([]);\n                    }\n                  }}\n                />\n              </TableCell>\n              <TableCell>Job Name</TableCell>\n              <TableCell>Type</TableCell>\n              <TableCell>Status</TableCell>\n              <TableCell>Progress</TableCell>\n              <TableCell>Channels</TableCell>\n              <TableCell>Priority</TableCell>\n              <TableCell align=\"right\">Actions</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {jobs.map((job) => (\n              <TableRow key={job.id}>\n                <TableCell padding=\"checkbox\">\n                  <Checkbox\n                    checked={selectedJobs.includes(job.id)}\n                    onChange={(e) => {\n                      if (e.target.checked) {\n                        setSelectedJobs([...selectedJobs, job.id]);\n                      } else {\n                        setSelectedJobs(selectedJobs.filter(id => id !== job.id));\n                      }\n                    }}\n                  />\n                </TableCell>\n                <TableCell>\n                  <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                    {getStatusIcon(job.status)}\n                    <Typography variant=\"body2\">{job.name}</Typography>\n                  </Box>\n                </TableCell>\n                <TableCell>\n                  <Chip label={job.type.replace('_', ' ')} size=\"small\" variant=\"outlined\" />\n                </TableCell>\n                <TableCell>\n                  <Chip \n                    label={job.status} \n                    size=\"small\" \n                    color={getStatusColor(job.status) as any}\n                  />\n                </TableCell>\n                <TableCell>\n                  <Box>\n                    <Box display=\"flex\" justifyContent=\"space-between\" mb={1}>\n                      <Typography variant=\"caption\">\n                        {job.processedItems} / {job.totalItems}\n                      </Typography>\n                      <Typography variant=\"caption\">\n                        {Math.round((job.processedItems / job.totalItems) * 100)}%\n                      </Typography>\n                    </Box>\n                    <LinearProgress \n                      variant=\"determinate\" \n                      value={(job.processedItems / job.totalItems) * 100}\n                      sx={{ height: 6, borderRadius: 1 }}\n                    />\n                    {job.failedItems > 0 && (\n                      <Typography variant=\"caption\" color=\"error\">\n                        {job.failedItems} failed\n                      </Typography>\n                    )}\n                  </Box>\n                </TableCell>\n                <TableCell>\n                  <Box display=\"flex\" flexDirection=\"column\" gap={0.5}>\n                    {job.channels.slice(0, 2).map((channel, idx) => (\n                      <Chip key={idx} label={channel} size=\"small\" />\n                    ))}\n                    {job.channels.length > 2 && (\n                      <Typography variant=\"caption\">\n                        +{job.channels.length - 2} more\n                      </Typography>\n                    )}\n                  </Box>\n                </TableCell>\n                <TableCell>\n                  <Chip \n                    label={job.priority} \n                    size=\"small\"\n                    color={job.priority === 'high' ? 'error' : job.priority === 'medium' ? 'warning' : 'default'}\n                  />\n                </TableCell>\n                <TableCell align=\"right\">\n                  <Box>\n                    {job.status === 'pending' && (\n                      <IconButton size=\"small\" onClick={() => handleStartJob(job.id)}>\n                        <PlayIcon />\n                      </IconButton>\n                    )}\n                    {job.status === 'running' && (\n                      <IconButton size=\"small\" onClick={() => handlePauseJob(job.id)}>\n                        <PauseIcon />\n                      </IconButton>\n                    )}\n                    {job.status === 'paused' && (\n                      <IconButton size=\"small\" onClick={() => handleStartJob(job.id)}>\n                        <PlayIcon />\n                      </IconButton>\n                    )}\n                    {(job.status === 'running' || job.status === 'paused') && (\n                      <IconButton size=\"small\" onClick={() => handleStopJob(job.id)}>\n                        <StopIcon />\n                      </IconButton>\n                    )}\n                    <IconButton \n                      size=\"small\" \n                      onClick={() => handleDeleteJob(job.id)}\n                      color=\"error\"\n                    >\n                      <DeleteIcon />\n                    </IconButton>\n                  </Box>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n\n      {/* Create Batch Dialog */}\n      <Dialog \n        open={isCreateDialogOpen} \n        onClose={() => setIsCreateDialogOpen(false)}\n        maxWidth=\"md\"\n        fullWidth\n      >\n        <DialogTitle>Create New Batch Job</DialogTitle>\n        <DialogContent>\n          <Stepper activeStep={activeStep} sx={{ mb: 3, mt: 2 }}>\n            {steps.map((label) => (\n              <Step key={label}>\n                <StepLabel>{label}</StepLabel>\n              </Step>\n            ))}\n          </Stepper>\n\n          {activeStep === 0 && (\n            <Box>\n              <TextField\n                label=\"Batch Name\"\n                value={newBatch.name}\n                onChange={(e) => setNewBatch({ ...newBatch, name: e.target.value })}\n                fullWidth\n                margin=\"normal\"\n              />\n              <FormControl fullWidth margin=\"normal\">\n                <InputLabel>Batch Type</InputLabel>\n                <Select\n                  value={newBatch.type}\n                  onChange={(e) => setNewBatch({ ...newBatch, type: e.target.value })}\n                  label=\"Batch Type\"\n                >\n                  <MenuItem value=\"video_generation\">Video Generation</MenuItem>\n                  <MenuItem value=\"thumbnail_update\">Thumbnail Update</MenuItem>\n                  <MenuItem value=\"metadata_update\">Metadata Update</MenuItem>\n                  <MenuItem value=\"analytics_sync\">Analytics Sync</MenuItem>\n                </Select>\n              </FormControl>\n              <TextField\n                label=\"Number of Items\"\n                type=\"number\"\n                value={newBatch.videoCount}\n                onChange={(e) => setNewBatch({ ...newBatch, videoCount: parseInt(e.target.value) })}\n                fullWidth\n                margin=\"normal\"\n                helperText=\"Maximum 100 items per batch\"\n                inputProps={{ min: 1, max: 100 }}\n              />\n            </Box>\n          )}\n\n          {activeStep === 1 && (\n            <Box>\n              <Typography variant=\"h6\" gutterBottom>Processing Options</Typography>\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    checked={newBatch.options.generateThumbnails}\n                    onChange={(e) => setNewBatch({\n                      ...newBatch,\n                      options: { ...newBatch.options, generateThumbnails: e.target.checked }\n                    })}\n                  />\n                }\n                label=\"Generate Thumbnails\"\n              />\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    checked={newBatch.options.autoUpload}\n                    onChange={(e) => setNewBatch({\n                      ...newBatch,\n                      options: { ...newBatch.options, autoUpload: e.target.checked }\n                    })}\n                  />\n                }\n                label=\"Auto Upload to YouTube\"\n              />\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    checked={newBatch.options.qualityCheck}\n                    onChange={(e) => setNewBatch({\n                      ...newBatch,\n                      options: { ...newBatch.options, qualityCheck: e.target.checked }\n                    })}\n                  />\n                }\n                label=\"Enable Quality Check\"\n              />\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    checked={newBatch.options.costOptimization}\n                    onChange={(e) => setNewBatch({\n                      ...newBatch,\n                      options: { ...newBatch.options, costOptimization: e.target.checked }\n                    })}\n                  />\n                }\n                label=\"Cost Optimization Mode\"\n              />\n              <FormControl fullWidth margin=\"normal\">\n                <InputLabel>Priority</InputLabel>\n                <Select\n                  value={newBatch.priority}\n                  onChange={(e) => setNewBatch({ ...newBatch, priority: e.target.value })}\n                  label=\"Priority\"\n                >\n                  <MenuItem value=\"low\">Low</MenuItem>\n                  <MenuItem value=\"medium\">Medium</MenuItem>\n                  <MenuItem value=\"high\">High</MenuItem>\n                </Select>\n              </FormControl>\n            </Box>\n          )}\n\n          {activeStep === 2 && (\n            <Box>\n              <Typography variant=\"h6\" gutterBottom>Select Channels</Typography>\n              <Alert severity=\"info\" sx={{ mb: 2 }}>\n                Select channels to distribute the batch job across multiple YouTube accounts\n              </Alert>\n              {/* Mock channel selection */}\n              <List>\n                {['Tech Reviews Pro', 'Gaming Central', 'DIY Crafts Hub'].map((channel) => (\n                  <ListItem key={channel}>\n                    <ListItemIcon>\n                      <Checkbox\n                        checked={newBatch.channels.includes(channel)}\n                        onChange={(e) => {\n                          if (e.target.checked) {\n                            setNewBatch({ ...newBatch, channels: [...newBatch.channels, channel] });\n                          } else {\n                            setNewBatch({ \n                              ...newBatch, \n                              channels: newBatch.channels.filter(c => c !== channel)\n                            });\n                          }\n                        }}\n                      />\n                    </ListItemIcon>\n                    <ListItemText primary={channel} />\n                  </ListItem>\n                ))}\n              </List>\n            </Box>\n          )}\n\n          {activeStep === 3 && (\n            <Box>\n              <Typography variant=\"h6\" gutterBottom>Review Batch Job</Typography>\n              <List>\n                <ListItem>\n                  <ListItemText primary=\"Name\" secondary={newBatch.name} />\n                </ListItem>\n                <ListItem>\n                  <ListItemText primary=\"Type\" secondary={newBatch.type} />\n                </ListItem>\n                <ListItem>\n                  <ListItemText primary=\"Items\" secondary={newBatch.videoCount} />\n                </ListItem>\n                <ListItem>\n                  <ListItemText primary=\"Channels\" secondary={newBatch.channels.join(', ') || 'None selected'} />\n                </ListItem>\n                <ListItem>\n                  <ListItemText primary=\"Priority\" secondary={newBatch.priority} />\n                </ListItem>\n                <ListItem>\n                  <ListItemText \n                    primary=\"Estimated Cost\" \n                    secondary={`$${(newBatch.videoCount * 2.04).toFixed(2)}`}\n                  />\n                </ListItem>\n              </List>\n            </Box>\n          )}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setIsCreateDialogOpen(false)}>Cancel</Button>\n          {activeStep > 0 && (\n            <Button onClick={() => setActiveStep(activeStep - 1)}>Back</Button>\n          )}\n          {activeStep < steps.length - 1 && (\n            <Button \n              onClick={() => setActiveStep(activeStep + 1)}\n              variant=\"contained\"\n              disabled={activeStep === 0 && !newBatch.name}\n            >\n              Next\n            </Button>\n          )}\n          {activeStep === steps.length - 1 && (\n            <Button \n              onClick={handleCreateBatch}\n              variant=\"contained\"\n              disabled={!newBatch.name || newBatch.channels.length === 0}\n            >\n              Create Batch\n            </Button>\n          )}\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default BatchOperations;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\BatchOperations\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\BulkOperations\\EnhancedBulkOperations.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'List' is defined but never used.","line":26,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ListItem' is defined but never used.","line":27,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ListItemIcon' is defined but never used.","line":28,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ListItemText' is defined but never used.","line":29,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ListItemSecondaryAction' is defined but never used.","line":30,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CircularProgress' is defined but never used.","line":33,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Stepper' is defined but never used.","line":34,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Step' is defined but never used.","line":35,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'StepLabel' is defined but never used.","line":36,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'StepContent' is defined but never used.","line":37,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Badge' is defined but never used.","line":47,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":47,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Divider' is defined but never used.","line":49,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":49,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Collapse' is defined but never used.","line":50,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":50,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Stack' is defined but never used.","line":51,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":51,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ListItemButton' is defined but never used.","line":56,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":56,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FormControlLabel' is defined but never used.","line":57,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":57,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Switch' is defined but never used.","line":58,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":58,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Radio' is defined but never used.","line":59,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":59,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'RadioGroup' is defined but never used.","line":60,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":60,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CheckBoxIcon' is defined but never used.","line":70,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":70,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CheckBoxOutlineBlankIcon' is defined but never used.","line":71,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":71,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'IndeterminateCheckBoxIcon' is defined but never used.","line":72,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":72,"endColumn":53},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'VisibilityIcon' is defined but never used.","line":76,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":76,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'VisibilityOffIcon' is defined but never used.","line":77,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":77,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'UnarchiveIcon' is defined but never used.","line":80,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":80,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FilterIcon' is defined but never used.","line":83,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":83,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'UploadIcon' is defined but never used.","line":89,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":89,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SettingsIcon' is defined but never used.","line":90,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":90,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":111,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2199,2202],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2199,2202],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'enableDragAndDrop' is assigned a value but never used.","line":153,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":153,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'enableAutoSave' is assigned a value but never used.","line":154,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":154,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setSortOrder' is assigned a value but never used.","line":162,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":162,"endColumn":33},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'executeOperation'. Either include it or remove the dependency array.","line":301,"column":6,"nodeType":"ArrayExpression","endLine":301,"endColumn":19,"suggestions":[{"desc":"Update the dependencies array to be: [executeOperation, selectedIds.size]","fix":{"range":[8706,8719],"text":"[executeOperation, selectedIds.size]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":670,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":670,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20485,20488],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20485,20488],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":687,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":687,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21167,21170],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21167,21170],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":34,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Enhanced Bulk Operations Interface\n * Complete multi-select interface with progress tracking and batch actions\n */\n\nimport React, { useState, useCallback, useMemo, useEffect } from 'react';\nimport Grid from '@mui/material/Grid2';\nimport {\n  Box,\n  Card,\n  CardContent,\n  Typography,\n  Button,\n  Checkbox,\n  IconButton,\n  Chip,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  TextField,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  ListItemSecondaryAction,\n  Alert,\n  LinearProgress,\n  CircularProgress,\n  Stepper,\n  Step,\n  StepLabel,\n  StepContent,\n  Table,\n  TableHead,\n  TableBody,\n  TableRow,\n  TableCell,\n  TableContainer,\n  TablePagination,\n  Paper,\n  Tooltip,\n  Badge,\n  Avatar,\n  Divider,\n  Collapse,\n  Stack,\n  Fade,\n  ButtonGroup,\n  ToggleButton,\n  ToggleButtonGroup,\n  ListItemButton,\n  FormControlLabel,\n  Switch,\n  Radio,\n  RadioGroup,\n  InputAdornment,\n  Snackbar,\n  SpeedDial,\n  SpeedDialAction,\n  SpeedDialIcon,\n  useTheme,\n  alpha\n} from '@mui/material';\nimport {\n  CheckBox as CheckBoxIcon,\n  CheckBoxOutlineBlank as CheckBoxOutlineBlankIcon,\n  IndeterminateCheckBox as IndeterminateCheckBoxIcon,\n  Edit as EditIcon,\n  Delete as DeleteIcon,\n  Schedule as ScheduleIcon,\n  Visibility as VisibilityIcon,\n  VisibilityOff as VisibilityOffIcon,\n  ContentCopy as CopyIcon,\n  Archive as ArchiveIcon,\n  Unarchive as UnarchiveIcon,\n  Label as LabelIcon,\n  Star as StarIcon,\n  FilterList as FilterIcon,\n  ViewModule as GridIcon,\n  ViewList as TableIcon,\n  Search as SearchIcon,\n  MoreVert as MoreVertIcon,\n  Download as DownloadIcon,\n  Upload as UploadIcon,\n  Settings as SettingsIcon,\n  Undo as UndoIcon,\n  Redo as RedoIcon,\n  Clear as ClearIcon,\n  SelectAll as SelectAllIcon,\n  DeselectAll as DeselectAllIcon,\n  Refresh as RefreshIcon,\n  FolderOpen as FolderIcon,\n  VideoLibrary as VideoIcon,\n  Image as ImageIcon,\n  AttachFile as FileIcon\n} from '@mui/icons-material';\n\n// Types\ninterface BulkItem {\n  id: string;\n  name: string;\n  type: 'channel' | 'video' | 'image' | 'file';\n  status: 'active' | 'paused' | 'archived' | 'processing';\n  selected?: boolean;\n  thumbnail?: string;\n  metadata?: Record<string, any>;\n  tags?: string[];\n  starred?: boolean;\n  createdAt: Date;\n  modifiedAt: Date;\n}\n\ninterface BulkOperation {\n  id: string;\n  type: 'edit' | 'delete' | 'archive' | 'export' | 'tag' | 'schedule' | 'copy';\n  name: string;\n  icon: React.ReactNode;\n  color?: 'primary' | 'secondary' | 'error' | 'warning' | 'info' | 'success';\n  requiresConfirmation?: boolean;\n  allowedTypes?: Array<BulkItem['type']>;\n}\n\ninterface OperationProgress {\n  operationId: string;\n  totalItems: number;\n  processedItems: number;\n  failedItems: number;\n  status: 'pending' | 'processing' | 'completed' | 'failed' | 'cancelled';\n  startTime?: Date;\n  endTime?: Date;\n  errors?: Array<{ itemId: string; error: string }>;\n}\n\ninterface BulkOperationsProps {\n  items: BulkItem[];\n  onOperationComplete?: (operation: string, items: string[]) => void;\n  onSelectionChange?: (selectedIds: string[]) => void;\n  customOperations?: BulkOperation[];\n  enableDragAndDrop?: boolean;\n  enableAutoSave?: boolean;\n}\n\nexport const EnhancedBulkOperations: React.FC<BulkOperationsProps> = ({\n  items: initialItems,\n  onOperationComplete,\n  onSelectionChange,\n  customOperations = [],\n  enableDragAndDrop = true,\n  enableAutoSave = false\n}) => {\n  const theme = useTheme();\n  const [items, setItems] = useState<BulkItem[]>(initialItems);\n  const [selectedIds, setSelectedIds] = useState<Set<string>>(new Set());\n  const [searchQuery, setSearchQuery] = useState('');\n  const [filterType, setFilterType] = useState<BulkItem['type'] | 'all'>('all');\n  const [sortBy, setSortBy] = useState<'name' | 'date' | 'type'>('name');\n  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('asc');\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n  const [viewMode, setViewMode] = useState<'table' | 'grid' | 'list'>('table');\n  const [confirmDialog, setConfirmDialog] = useState<{\n    open: boolean;\n    operation?: BulkOperation;\n    message?: string;\n  }>({ open: false });\n  const [progressDialog, setProgressDialog] = useState(false);\n  const [operationProgress, setOperationProgress] = useState<OperationProgress | null>(null);\n  const [snackbar, setSnackbar] = useState<{\n    open: boolean;\n    message: string;\n    severity: 'success' | 'error' | 'warning' | 'info';\n  }>({ open: false, message: '', severity: 'info' });\n  const [speedDialOpen, setSpeedDialOpen] = useState(false);\n  const [history, setHistory] = useState<Array<{ action: string; items: string[]; timestamp: Date }>>([]);\n  const [historyIndex, setHistoryIndex] = useState(-1);\n\n  // Default operations\n  const defaultOperations: BulkOperation[] = [\n    { id: 'edit', type: 'edit', name: 'Edit', icon: <EditIcon />, color: 'primary' },\n    { id: 'delete', type: 'delete', name: 'Delete', icon: <DeleteIcon />, color: 'error', requiresConfirmation: true },\n    { id: 'archive', type: 'archive', name: 'Archive', icon: <ArchiveIcon />, color: 'warning' },\n    { id: 'export', type: 'export', name: 'Export', icon: <DownloadIcon />, color: 'info' },\n    { id: 'tag', type: 'tag', name: 'Add Tags', icon: <LabelIcon />, color: 'secondary' },\n    { id: 'schedule', type: 'schedule', name: 'Schedule', icon: <ScheduleIcon />, color: 'primary' },\n    { id: 'copy', type: 'copy', name: 'Duplicate', icon: <CopyIcon />, color: 'success' }\n  ];\n\n  const operations = [...defaultOperations, ...customOperations];\n\n  // Computed values\n  const filteredItems = useMemo(() => {\n    let filtered = items;\n\n    // Apply search filter\n    if (searchQuery) {\n      filtered = filtered.filter(item =>\n        item.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        item.tags?.some(tag => tag.toLowerCase().includes(searchQuery.toLowerCase()))\n      );\n    }\n\n    // Apply type filter\n    if (filterType !== 'all') {\n      filtered = filtered.filter(item => item.type === filterType);\n    }\n\n    // Apply sorting\n    filtered.sort((a, b) => {\n      let comparison = 0;\n      switch (sortBy) {\n        case 'name':\n          comparison = a.name.localeCompare(b.name);\n          break;\n        case 'date':\n          comparison = a.modifiedAt.getTime() - b.modifiedAt.getTime();\n          break;\n        case 'type':\n          comparison = a.type.localeCompare(b.type);\n          break;\n      }\n      return sortOrder === 'asc' ? comparison : -comparison;\n    });\n\n    return filtered;\n  }, [items, searchQuery, filterType, sortBy, sortOrder]);\n\n  const paginatedItems = useMemo(() => {\n    const start = page * rowsPerPage;\n    return filteredItems.slice(start, start + rowsPerPage);\n  }, [filteredItems, page, rowsPerPage]);\n\n  const isAllSelected = filteredItems.length > 0 && filteredItems.every(item => selectedIds.has(item.id));\n  const isSomeSelected = filteredItems.some(item => selectedIds.has(item.id)) && !isAllSelected;\n\n  // Handlers\n  const handleSelectAll = useCallback(() => {\n    if (isAllSelected) {\n      setSelectedIds(new Set());\n    } else {\n      setSelectedIds(new Set(filteredItems.map(item => item.id)));\n    }\n  }, [isAllSelected, filteredItems]);\n\n  const handleSelectItem = useCallback((itemId: string) => {\n    setSelectedIds(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(itemId)) {\n        newSet.delete(itemId);\n      } else {\n        newSet.add(itemId);\n      }\n      return newSet;\n    });\n  }, []);\n\n  const handleSelectRange = useCallback((startId: string, endId: string, event: React.MouseEvent) => {\n    if (!event.shiftKey) return;\n\n    const startIndex = filteredItems.findIndex(item => item.id === startId);\n    const endIndex = filteredItems.findIndex(item => item.id === endId);\n    \n    if (startIndex !== -1 && endIndex !== -1) {\n      const range = filteredItems.slice(\n        Math.min(startIndex, endIndex),\n        Math.max(startIndex, endIndex) + 1\n      );\n      \n      setSelectedIds(prev => {\n        const newSet = new Set(prev);\n        range.forEach(item => newSet.add(item.id));\n        return newSet;\n      });\n    }\n  }, [filteredItems]);\n\n  const handleOperation = useCallback(async (operation: BulkOperation) => {\n    if (selectedIds.size === 0) {\n      setSnackbar({\n        open: true,\n        message: 'No items selected',\n        severity: 'warning'\n      });\n      return;\n    }\n\n    if (operation.requiresConfirmation) {\n      setConfirmDialog({\n        open: true,\n        operation,\n        message: `Are you sure you want to ${operation.name.toLowerCase()} ${selectedIds.size} item(s)?`\n      });\n      return;\n    }\n\n    executeOperation(operation);\n  }, [selectedIds]);\n\n  const executeOperation = useCallback(async (operation: BulkOperation) => {\n    setProgressDialog(true);\n    setOperationProgress({\n      operationId: operation.id,\n      totalItems: selectedIds.size,\n      processedItems: 0,\n      failedItems: 0,\n      status: 'processing',\n      startTime: new Date()\n    });\n\n    // Simulate operation processing\n    const selectedArray = Array.from(selectedIds);\n    for (let i = 0; i < selectedArray.length; i++) {\n      await new Promise(resolve => setTimeout(resolve, 100)); // Simulate processing time\n      \n      setOperationProgress(prev => ({\n        ...prev!,\n        processedItems: i + 1\n      }));\n    }\n\n    // Complete operation\n    setOperationProgress(prev => ({\n      ...prev!,\n      status: 'completed',\n      endTime: new Date()\n    }));\n\n    // Add to history\n    setHistory(prev => [...prev, {\n      action: operation.name,\n      items: selectedArray,\n      timestamp: new Date()\n    }]);\n    setHistoryIndex(prev => prev + 1);\n\n    // Callback\n    if (onOperationComplete) {\n      onOperationComplete(operation.id, selectedArray);\n    }\n\n    // Show success message\n    setSnackbar({\n      open: true,\n      message: `Successfully ${operation.name.toLowerCase()}d ${selectedIds.size} item(s)`,\n      severity: 'success'\n    });\n\n    // Clear selection\n    setSelectedIds(new Set());\n    \n    // Close dialogs\n    setTimeout(() => {\n      setProgressDialog(false);\n      setOperationProgress(null);\n    }, 1500);\n  }, [selectedIds, onOperationComplete]);\n\n  const handleUndo = useCallback(() => {\n    if (historyIndex > 0) {\n      const previousAction = history[historyIndex - 1];\n      // Implement undo logic based on action\n      setHistoryIndex(prev => prev - 1);\n      setSnackbar({\n        open: true,\n        message: `Undid: ${previousAction.action}`,\n        severity: 'info'\n      });\n    }\n  }, [history, historyIndex]);\n\n  const handleRedo = useCallback(() => {\n    if (historyIndex < history.length - 1) {\n      const nextAction = history[historyIndex + 1];\n      // Implement redo logic based on action\n      setHistoryIndex(prev => prev + 1);\n      setSnackbar({\n        open: true,\n        message: `Redid: ${nextAction.action}`,\n        severity: 'info'\n      });\n    }\n  }, [history, historyIndex]);\n\n  // Effects\n  useEffect(() => {\n    if (onSelectionChange) {\n      onSelectionChange(Array.from(selectedIds));\n    }\n  }, [selectedIds, onSelectionChange]);\n\n  useEffect(() => {\n    setItems(initialItems);\n  }, [initialItems]);\n\n  // Render helpers\n  const renderSelectionBar = () => (\n    <Fade in={selectedIds.size > 0}>\n      <Paper\n        sx={{\n          position: 'sticky',\n          top: 0,\n          zIndex: 10,\n          p: 2,\n          mb: 2,\n          backgroundColor: alpha(theme.palette.primary.main, 0.1),\n          borderRadius: 2,\n          display: 'flex',\n          alignItems: 'center',\n          gap: 2\n        }}\n      >\n        <Typography variant=\"subtitle1\" sx={{ fontWeight: 600 }}>\n          {selectedIds.size} item{selectedIds.size !== 1 ? 's' : ''} selected\n        </Typography>\n        \n        <ButtonGroup size=\"small\" variant=\"outlined\">\n          {operations.map(op => (\n            <Tooltip key={op.id} title={op.name}>\n              <Button\n                onClick={() => handleOperation(op)}\n                color={op.color}\n                startIcon={op.icon}\n              >\n                {op.name}\n              </Button>\n            </Tooltip>\n          ))}\n        </ButtonGroup>\n\n        <Box sx={{ flexGrow: 1 }} />\n\n        <IconButton onClick={() => setSelectedIds(new Set())} size=\"small\">\n          <ClearIcon />\n        </IconButton>\n      </Paper>\n    </Fade>\n  );\n\n  const renderTableView = () => (\n    <TableContainer component={Paper} sx={{ maxHeight: 600 }}>\n      <Table stickyHeader>\n        <TableHead>\n          <TableRow>\n            <TableCell padding=\"checkbox\">\n              <Checkbox\n                indeterminate={isSomeSelected}\n                checked={isAllSelected}\n                onChange={handleSelectAll}\n              />\n            </TableCell>\n            <TableCell>Name</TableCell>\n            <TableCell>Type</TableCell>\n            <TableCell>Status</TableCell>\n            <TableCell>Tags</TableCell>\n            <TableCell>Modified</TableCell>\n            <TableCell align=\"right\">Actions</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {paginatedItems.map((item, index) => (\n            <TableRow\n              key={item.id}\n              hover\n              selected={selectedIds.has(item.id)}\n              onClick={(e) => handleSelectRange(\n                index > 0 ? paginatedItems[index - 1].id : item.id,\n                item.id,\n                e\n              )}\n            >\n              <TableCell padding=\"checkbox\">\n                <Checkbox\n                  checked={selectedIds.has(item.id)}\n                  onChange={() => handleSelectItem(item.id)}\n                  onClick={(e) => e.stopPropagation()}\n                />\n              </TableCell>\n              <TableCell>\n                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                  {item.thumbnail && (\n                    <Avatar src={item.thumbnail} sx={{ width: 32, height: 32 }}>\n                      {getItemIcon(item.type)}\n                    </Avatar>\n                  )}\n                  <Typography variant=\"body2\">{item.name}</Typography>\n                  {item.starred && <StarIcon fontSize=\"small\" color=\"warning\" />}\n                </Box>\n              </TableCell>\n              <TableCell>\n                <Chip label={item.type} size=\"small\" variant=\"outlined\" />\n              </TableCell>\n              <TableCell>\n                <Chip\n                  label={item.status}\n                  size=\"small\"\n                  color={getStatusColor(item.status)}\n                  variant=\"filled\"\n                />\n              </TableCell>\n              <TableCell>\n                <Box sx={{ display: 'flex', gap: 0.5, flexWrap: 'wrap' }}>\n                  {item.tags?.slice(0, 3).map(tag => (\n                    <Chip key={tag} label={tag} size=\"small\" />\n                  ))}\n                  {item.tags && item.tags.length > 3 && (\n                    <Chip label={`+${item.tags.length - 3}`} size=\"small\" variant=\"outlined\" />\n                  )}\n                </Box>\n              </TableCell>\n              <TableCell>\n                <Typography variant=\"caption\">\n                  {item.modifiedAt.toLocaleDateString()}\n                </Typography>\n              </TableCell>\n              <TableCell align=\"right\">\n                <IconButton size=\"small\" onClick={(e) => {\n                  e.stopPropagation();\n                  // Action menu would be implemented here\n                }}>\n                  <MoreVertIcon />\n                </IconButton>\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n      <TablePagination\n        component=\"div\"\n        count={filteredItems.length}\n        page={page}\n        onPageChange={(e, newPage) => setPage(newPage)}\n        rowsPerPage={rowsPerPage}\n        onRowsPerPageChange={(e) => {\n          setRowsPerPage(parseInt(e.target.value, 10));\n          setPage(0);\n        }}\n      />\n    </TableContainer>\n  );\n\n  const renderGridView = () => (\n    <Grid container spacing={2}>\n      {paginatedItems.map(item => (\n        <Grid key={item.id} size={{ xs: 12, sm: 6, md: 4, lg: 3 }}>\n          <Card\n            sx={{\n              position: 'relative',\n              cursor: 'pointer',\n              transition: 'all 0.2s',\n              '&:hover': {\n                transform: 'translateY(-2px)',\n                boxShadow: 4\n              },\n              ...(selectedIds.has(item.id) && {\n                borderColor: 'primary.main',\n                borderWidth: 2,\n                borderStyle: 'solid'\n              })\n            }}\n            onClick={() => handleSelectItem(item.id)}\n          >\n            <Box sx={{ position: 'absolute', top: 8, left: 8, zIndex: 1 }}>\n              <Checkbox\n                checked={selectedIds.has(item.id)}\n                onChange={() => handleSelectItem(item.id)}\n                onClick={(e) => e.stopPropagation()}\n                sx={{\n                  backgroundColor: 'rgba(255, 255, 255, 0.9)',\n                  borderRadius: 1\n                }}\n              />\n            </Box>\n            {item.starred && (\n              <Box sx={{ position: 'absolute', top: 8, right: 8, zIndex: 1 }}>\n                <StarIcon color=\"warning\" />\n              </Box>\n            )}\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n                {item.thumbnail ? (\n                  <Avatar src={item.thumbnail} sx={{ width: 48, height: 48, mr: 2 }}>\n                    {getItemIcon(item.type)}\n                  </Avatar>\n                ) : (\n                  <Avatar sx={{ width: 48, height: 48, mr: 2 }}>\n                    {getItemIcon(item.type)}\n                  </Avatar>\n                )}\n                <Box sx={{ flexGrow: 1 }}>\n                  <Typography variant=\"subtitle2\" noWrap>\n                    {item.name}\n                  </Typography>\n                  <Typography variant=\"caption\" color=\"text.secondary\">\n                    {item.type}\n                  </Typography>\n                </Box>\n              </Box>\n              <Box sx={{ display: 'flex', gap: 0.5, mb: 1 }}>\n                <Chip\n                  label={item.status}\n                  size=\"small\"\n                  color={getStatusColor(item.status)}\n                />\n              </Box>\n              {item.tags && item.tags.length > 0 && (\n                <Box sx={{ display: 'flex', gap: 0.5, flexWrap: 'wrap' }}>\n                  {item.tags.slice(0, 2).map(tag => (\n                    <Chip key={tag} label={tag} size=\"small\" variant=\"outlined\" />\n                  ))}\n                </Box>\n              )}\n            </CardContent>\n          </Card>\n        </Grid>\n      ))}\n    </Grid>\n  );\n\n  const getItemIcon = (type: BulkItem['type']) => {\n    switch (type) {\n      case 'channel': return <FolderIcon />;\n      case 'video': return <VideoIcon />;\n      case 'image': return <ImageIcon />;\n      case 'file': return <FileIcon />;\n      default: return <FileIcon />;\n    }\n  };\n\n  const getStatusColor = (status: BulkItem['status']): 'default' | 'primary' | 'secondary' | 'error' | 'info' | 'success' | 'warning' => {\n    switch (status) {\n      case 'active': return 'success';\n      case 'paused': return 'warning';\n      case 'archived': return 'default';\n      case 'processing': return 'info';\n      default: return 'default';\n    }\n  };\n\n  return (\n    <Box>\n      {/* Header Toolbar */}\n      <Paper sx={{ p: 2, mb: 2 }}>\n        <Grid container spacing={2} alignItems=\"center\">\n          <Grid size={{ xs: 12, sm: 6, md: 4 }}>\n            <TextField\n              fullWidth\n              size=\"small\"\n              placeholder=\"Search items...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              InputProps={{\n                startAdornment: (\n                  <InputAdornment position=\"start\">\n                    <SearchIcon />\n                  </InputAdornment>\n                )\n              }}\n            />\n          </Grid>\n          \n          <Grid size={{ xs: 6, sm: 3, md: 2 }}>\n            <FormControl fullWidth size=\"small\">\n              <InputLabel>Type</InputLabel>\n              <Select\n                value={filterType}\n                onChange={(e) => setFilterType(e.target.value as any)}\n                label=\"Type\"\n              >\n                <MenuItem value=\"all\">All Types</MenuItem>\n                <MenuItem value=\"channel\">Channels</MenuItem>\n                <MenuItem value=\"video\">Videos</MenuItem>\n                <MenuItem value=\"image\">Images</MenuItem>\n                <MenuItem value=\"file\">Files</MenuItem>\n              </Select>\n            </FormControl>\n          </Grid>\n          \n          <Grid size={{ xs: 6, sm: 3, md: 2 }}>\n            <FormControl fullWidth size=\"small\">\n              <InputLabel>Sort By</InputLabel>\n              <Select\n                value={sortBy}\n                onChange={(e) => setSortBy(e.target.value as any)}\n                label=\"Sort By\"\n              >\n                <MenuItem value=\"name\">Name</MenuItem>\n                <MenuItem value=\"date\">Date Modified</MenuItem>\n                <MenuItem value=\"type\">Type</MenuItem>\n              </Select>\n            </FormControl>\n          </Grid>\n          \n          <Grid size={{ xs: 12, sm: 12, md: 4 }}>\n            <Box sx={{ display: 'flex', gap: 1, justifyContent: 'flex-end' }}>\n            <ToggleButtonGroup\n              value={viewMode}\n              exclusive\n              onChange={(e, value) => value && setViewMode(value)}\n              size=\"small\"\n            >\n              <ToggleButton value=\"table\">\n                <Tooltip title=\"Table View\">\n                  <TableIcon />\n                </Tooltip>\n              </ToggleButton>\n              <ToggleButton value=\"grid\">\n                <Tooltip title=\"Grid View\">\n                  <GridIcon />\n                </Tooltip>\n              </ToggleButton>\n            </ToggleButtonGroup>\n            \n            <ButtonGroup size=\"small\">\n              <Button\n                onClick={handleUndo}\n                disabled={historyIndex <= 0}\n                startIcon={<UndoIcon />}\n              >\n                Undo\n              </Button>\n              <Button\n                onClick={handleRedo}\n                disabled={historyIndex >= history.length - 1}\n                startIcon={<RedoIcon />}\n              >\n                Redo\n              </Button>\n            </ButtonGroup>\n            </Box>\n          </Grid>\n        </Grid>\n      </Paper>\n\n      {/* Selection Bar */}\n      {renderSelectionBar()}\n\n      {/* Content Area */}\n      {viewMode === 'table' ? renderTableView() : renderGridView()}\n\n      {/* Confirmation Dialog */}\n      <Dialog open={confirmDialog.open} onClose={() => setConfirmDialog({ open: false })}>\n        <DialogTitle>Confirm Operation</DialogTitle>\n        <DialogContent>\n          <Typography>{confirmDialog.message}</Typography>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setConfirmDialog({ open: false })}>\n            Cancel\n          </Button>\n          <Button\n            onClick={() => {\n              if (confirmDialog.operation) {\n                executeOperation(confirmDialog.operation);\n              }\n              setConfirmDialog({ open: false });\n            }}\n            variant=\"contained\"\n            color={confirmDialog.operation?.color || 'primary'}\n          >\n            Confirm\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      {/* Progress Dialog */}\n      <Dialog open={progressDialog} maxWidth=\"sm\" fullWidth>\n        <DialogTitle>Processing Operation</DialogTitle>\n        <DialogContent>\n          {operationProgress && (\n            <Box>\n              <Typography variant=\"body2\" gutterBottom>\n                Processing {operationProgress.processedItems} of {operationProgress.totalItems} items\n              </Typography>\n              <LinearProgress\n                variant=\"determinate\"\n                value={(operationProgress.processedItems / operationProgress.totalItems) * 100}\n                sx={{ mb: 2 }}\n              />\n              {operationProgress.status === 'completed' && (\n                <Alert severity=\"success\">\n                  Operation completed successfully!\n                </Alert>\n              )}\n            </Box>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Snackbar */}\n      <Snackbar\n        open={snackbar.open}\n        autoHideDuration={4000}\n        onClose={() => setSnackbar(prev => ({ ...prev, open: false }))}\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n      >\n        <Alert\n          onClose={() => setSnackbar(prev => ({ ...prev, open: false }))}\n          severity={snackbar.severity}\n          variant=\"filled\"\n        >\n          {snackbar.message}\n        </Alert>\n      </Snackbar>\n\n      {/* Speed Dial for Quick Actions */}\n      <SpeedDial\n        ariaLabel=\"Quick Actions\"\n        sx={{ position: 'fixed', bottom: 16, right: 16 }}\n        icon={<SpeedDialIcon />}\n        open={speedDialOpen}\n        onOpen={() => setSpeedDialOpen(true)}\n        onClose={() => setSpeedDialOpen(false)}\n      >\n        <SpeedDialAction\n          icon={<SelectAllIcon />}\n          tooltipTitle=\"Select All\"\n          onClick={() => {\n            handleSelectAll();\n            setSpeedDialOpen(false);\n          }}\n        />\n        <SpeedDialAction\n          icon={<DeselectAllIcon />}\n          tooltipTitle=\"Clear Selection\"\n          onClick={() => {\n            setSelectedIds(new Set());\n            setSpeedDialOpen(false);\n          }}\n        />\n        <SpeedDialAction\n          icon={<RefreshIcon />}\n          tooltipTitle=\"Refresh\"\n          onClick={() => {\n            // Refresh logic\n            setSpeedDialOpen(false);\n          }}\n        />\n      </SpeedDial>\n    </Box>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\ChannelManager\\ChannelManager.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Badge' is defined but never used.","line":23,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SettingsIcon' is defined but never used.","line":36,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SwapIcon' is defined but never used.","line":38,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useChannelStore' is defined but never used.","line":40,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isEditDialogOpen' is assigned a value but never used.","line":55,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":55,"endColumn":26},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":291,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":291,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8974,8977],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8974,8977],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Card,\n  CardContent,\n  Grid,\n  Typography,\n  Button,\n  IconButton,\n  Chip,\n  LinearProgress,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  Select,\n  MenuItem,\n  FormControl,\n  InputLabel,\n  Alert,\n  Tooltip,\n  Badge,\n  Switch,\n  FormControlLabel\n} from '@mui/material';\nimport {\n  Add as AddIcon,\n  Edit as EditIcon,\n  Delete as DeleteIcon,\n  Refresh as RefreshIcon,\n  CheckCircle as CheckCircleIcon,\n  Warning as WarningIcon,\n  Error as ErrorIcon,\n  YouTube as YouTubeIcon,\n  Settings as SettingsIcon,\n  Analytics as AnalyticsIcon,\n  SwapHoriz as SwapIcon\n} from '@mui/icons-material';\nimport { useChannelStore } from '../../stores/channelStore';\nimport { Channel, ChannelHealth } from '../../types/channel';\n\ninterface ChannelManagerProps {\n  onChannelSelect?: (channel: Channel) => void;\n  maxChannels?: number;\n}\n\nconst ChannelManager: React.FC<ChannelManagerProps> = ({ \n  onChannelSelect,\n  maxChannels = 15 \n}) => {\n  const [channels, setChannels] = useState<Channel[]>([]);\n  const [selectedChannel, setSelectedChannel] = useState<Channel | null>(null);\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [autoRotate, setAutoRotate] = useState(true);\n  const [newChannel, setNewChannel] = useState({\n    name: '',\n    youtubeId: '',\n    apiKey: '',\n    category: '',\n    description: ''\n  });\n\n  // Mock channel health status\n  const getHealthIcon = (health: ChannelHealth) => {\n    switch (health) {\n      case 'healthy':\n        return <CheckCircleIcon color=\"success\" />;\n      case 'warning':\n        return <WarningIcon color=\"warning\" />;\n      case 'critical':\n        return <ErrorIcon color=\"error\" />;\n      default:\n        return <CheckCircleIcon color=\"disabled\" />;\n    }\n  };\n\n  const getHealthColor = (health: ChannelHealth) => {\n    switch (health) {\n      case 'healthy':\n        return 'success';\n      case 'warning':\n        return 'warning';\n      case 'critical':\n        return 'error';\n      default:\n        return 'default';\n    }\n  };\n\n  useEffect(() => {\n    loadChannels();\n  }, []);\n\n  const loadChannels = async () => {\n    setIsLoading(true);\n    try {\n      // TODO: Fetch channels from API\n      const mockChannels: Channel[] = [\n        {\n          id: '1',\n          name: 'Tech Reviews Pro',\n          youtubeId: 'UC_tech_reviews',\n          category: 'Technology',\n          health: 'healthy',\n          quota: { used: 3500, limit: 10000 },\n          subscribers: 15420,\n          videoCount: 145,\n          isActive: true,\n          lastSync: new Date().toISOString()\n        },\n        {\n          id: '2',\n          name: 'Gaming Central',\n          youtubeId: 'UC_gaming_central',\n          category: 'Gaming',\n          health: 'warning',\n          quota: { used: 8500, limit: 10000 },\n          subscribers: 28300,\n          videoCount: 312,\n          isActive: true,\n          lastSync: new Date().toISOString()\n        },\n        {\n          id: '3',\n          name: 'DIY Crafts Hub',\n          youtubeId: 'UC_diy_crafts',\n          category: 'Lifestyle',\n          health: 'critical',\n          quota: { used: 9800, limit: 10000 },\n          subscribers: 8900,\n          videoCount: 89,\n          isActive: false,\n          lastSync: new Date().toISOString()\n        }\n      ];\n      setChannels(mockChannels);\n    } catch (error) {\n      console.error('Failed to load channels:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleAddChannel = async () => {\n    if (channels.length >= maxChannels) {\n      alert(`Maximum of ${maxChannels} channels allowed`);\n      return;\n    }\n    \n    // TODO: Add channel via API\n    const newChannelData: Channel = {\n      id: Date.now().toString(),\n      name: newChannel.name,\n      youtubeId: newChannel.youtubeId,\n      category: newChannel.category,\n      health: 'healthy',\n      quota: { used: 0, limit: 10000 },\n      subscribers: 0,\n      videoCount: 0,\n      isActive: true,\n      lastSync: new Date().toISOString()\n    };\n    \n    setChannels([...channels, newChannelData]);\n    setIsAddDialogOpen(false);\n    setNewChannel({ name: '', youtubeId: '', apiKey: '', category: '', description: '' });\n  };\n\n  const handleDeleteChannel = async (channelId: string) => {\n    if (confirm('Are you sure you want to delete this channel?')) {\n      setChannels(channels.filter(c => c.id !== channelId));\n    }\n  };\n\n  const handleToggleChannel = async (channelId: string) => {\n    setChannels(channels.map(c => \n      c.id === channelId ? { ...c, isActive: !c.isActive } : c\n    ));\n  };\n\n  const handleRefreshChannel = async (channelId: string) => {\n    // TODO: Refresh channel data from YouTube API\n    console.log('Refreshing channel:', channelId);\n  };\n\n  return (\n    <Box>\n      {/* Header */}\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\n        <Typography variant=\"h4\" component=\"h1\">\n          Multi-Channel Manager\n        </Typography>\n        <Box display=\"flex\" gap={2} alignItems=\"center\">\n          <FormControlLabel\n            control={\n              <Switch\n                checked={autoRotate}\n                onChange={(e) => setAutoRotate(e.target.checked)}\n                color=\"primary\"\n              />\n            }\n            label=\"Auto-Rotate\"\n          />\n          <Chip\n            label={`${channels.length} / ${maxChannels} Channels`}\n            color={channels.length >= maxChannels ? 'error' : 'primary'}\n          />\n          <Button\n            variant=\"contained\"\n            startIcon={<AddIcon />}\n            onClick={() => setIsAddDialogOpen(true)}\n            disabled={channels.length >= maxChannels}\n          >\n            Add Channel\n          </Button>\n        </Box>\n      </Box>\n\n      {/* Alert for quota warnings */}\n      {channels.some(c => c.health === 'critical') && (\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\n          Some channels have critical quota usage. Consider rotating to other channels.\n        </Alert>\n      )}\n\n      {/* Channels Grid */}\n      {isLoading ? (\n        <LinearProgress />\n      ) : (\n        <Grid container spacing={3}>\n          {channels.map((channel) => (\n            <Grid item xs={12} md={6} lg={4} key={channel.id}>\n              <Card \n                sx={{ \n                  position: 'relative',\n                  opacity: channel.isActive ? 1 : 0.6,\n                  border: selectedChannel?.id === channel.id ? 2 : 0,\n                  borderColor: 'primary.main'\n                }}\n              >\n                <CardContent>\n                  {/* Channel Header */}\n                  <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\n                    <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                      <YouTubeIcon color=\"error\" />\n                      <Typography variant=\"h6\" component=\"h2\">\n                        {channel.name}\n                      </Typography>\n                    </Box>\n                    <Tooltip title={`Health: ${channel.health}`}>\n                      {getHealthIcon(channel.health)}\n                    </Tooltip>\n                  </Box>\n\n                  {/* Channel Info */}\n                  <Box mb={2}>\n                    <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n                      ID: {channel.youtubeId}\n                    </Typography>\n                    <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n                      Category: {channel.category}\n                    </Typography>\n                    <Box display=\"flex\" gap={2} mt={1}>\n                      <Chip \n                        label={`${channel.subscribers.toLocaleString()} subs`} \n                        size=\"small\" \n                        variant=\"outlined\"\n                      />\n                      <Chip \n                        label={`${channel.videoCount} videos`} \n                        size=\"small\" \n                        variant=\"outlined\"\n                      />\n                    </Box>\n                  </Box>\n\n                  {/* Quota Usage */}\n                  <Box mb={2}>\n                    <Box display=\"flex\" justifyContent=\"space-between\" mb={1}>\n                      <Typography variant=\"body2\">Quota Usage</Typography>\n                      <Typography variant=\"body2\" color={getHealthColor(channel.health)}>\n                        {channel.quota.used.toLocaleString()} / {channel.quota.limit.toLocaleString()}\n                      </Typography>\n                    </Box>\n                    <LinearProgress \n                      variant=\"determinate\" \n                      value={(channel.quota.used / channel.quota.limit) * 100}\n                      color={getHealthColor(channel.health) as any}\n                      sx={{ height: 8, borderRadius: 1 }}\n                    />\n                  </Box>\n\n                  {/* Actions */}\n                  <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n                    <Box>\n                      <Switch\n                        checked={channel.isActive}\n                        onChange={() => handleToggleChannel(channel.id)}\n                        size=\"small\"\n                      />\n                      <Typography variant=\"caption\" ml={1}>\n                        {channel.isActive ? 'Active' : 'Inactive'}\n                      </Typography>\n                    </Box>\n                    <Box>\n                      <IconButton \n                        size=\"small\" \n                        onClick={() => handleRefreshChannel(channel.id)}\n                        title=\"Refresh\"\n                      >\n                        <RefreshIcon />\n                      </IconButton>\n                      <IconButton \n                        size=\"small\"\n                        onClick={() => {\n                          setSelectedChannel(channel);\n                          onChannelSelect?.(channel);\n                        }}\n                        title=\"Analytics\"\n                      >\n                        <AnalyticsIcon />\n                      </IconButton>\n                      <IconButton \n                        size=\"small\"\n                        onClick={() => {\n                          setSelectedChannel(channel);\n                          setIsEditDialogOpen(true);\n                        }}\n                        title=\"Edit\"\n                      >\n                        <EditIcon />\n                      </IconButton>\n                      <IconButton \n                        size=\"small\"\n                        onClick={() => handleDeleteChannel(channel.id)}\n                        color=\"error\"\n                        title=\"Delete\"\n                      >\n                        <DeleteIcon />\n                      </IconButton>\n                    </Box>\n                  </Box>\n                </CardContent>\n              </Card>\n            </Grid>\n          ))}\n        </Grid>\n      )}\n\n      {/* Add Channel Dialog */}\n      <Dialog open={isAddDialogOpen} onClose={() => setIsAddDialogOpen(false)} maxWidth=\"sm\" fullWidth>\n        <DialogTitle>Add New Channel</DialogTitle>\n        <DialogContent>\n          <Box display=\"flex\" flexDirection=\"column\" gap={2} mt={2}>\n            <TextField\n              label=\"Channel Name\"\n              value={newChannel.name}\n              onChange={(e) => setNewChannel({ ...newChannel, name: e.target.value })}\n              fullWidth\n              required\n            />\n            <TextField\n              label=\"YouTube Channel ID\"\n              value={newChannel.youtubeId}\n              onChange={(e) => setNewChannel({ ...newChannel, youtubeId: e.target.value })}\n              fullWidth\n              required\n              helperText=\"Found in YouTube Studio > Settings\"\n            />\n            <TextField\n              label=\"API Key\"\n              value={newChannel.apiKey}\n              onChange={(e) => setNewChannel({ ...newChannel, apiKey: e.target.value })}\n              fullWidth\n              required\n              type=\"password\"\n              helperText=\"YouTube Data API v3 key\"\n            />\n            <FormControl fullWidth>\n              <InputLabel>Category</InputLabel>\n              <Select\n                value={newChannel.category}\n                onChange={(e) => setNewChannel({ ...newChannel, category: e.target.value })}\n                label=\"Category\"\n              >\n                <MenuItem value=\"Technology\">Technology</MenuItem>\n                <MenuItem value=\"Gaming\">Gaming</MenuItem>\n                <MenuItem value=\"Education\">Education</MenuItem>\n                <MenuItem value=\"Entertainment\">Entertainment</MenuItem>\n                <MenuItem value=\"Lifestyle\">Lifestyle</MenuItem>\n                <MenuItem value=\"News\">News</MenuItem>\n              </Select>\n            </FormControl>\n            <TextField\n              label=\"Description\"\n              value={newChannel.description}\n              onChange={(e) => setNewChannel({ ...newChannel, description: e.target.value })}\n              fullWidth\n              multiline\n              rows={3}\n            />\n          </Box>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setIsAddDialogOpen(false)}>Cancel</Button>\n          <Button \n            onClick={handleAddChannel} \n            variant=\"contained\"\n            disabled={!newChannel.name || !newChannel.youtubeId || !newChannel.apiKey}\n          >\n            Add Channel\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default ChannelManager;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\ChannelManager\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Channels\\BulkOperations.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FormControl' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'InputLabel' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Select' is defined but never used.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MenuItem' is defined but never used.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TextField' is defined but never used.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ListItemSecondaryAction' is defined but never used.","line":24,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Stepper' is defined but never used.","line":27,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Step' is defined but never used.","line":28,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'StepLabel' is defined but never used.","line":29,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Tooltip' is defined but never used.","line":37,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Divider' is defined but never used.","line":40,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CheckBox' is defined but never used.","line":44,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":44,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CheckBoxOutlineBlank' is defined but never used.","line":45,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":45,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'IndeterminateCheckBox' is defined but never used.","line":46,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Warning' is defined but never used.","line":54,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":54,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CheckCircle' is defined but never used.","line":55,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":55,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Category' is defined but never used.","line":58,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":58,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Visibility' is defined but never used.","line":59,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":59,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Update' is defined but never used.","line":61,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":61,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'BatchPrediction' is defined but never used.","line":62,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":62,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'activeStep' is assigned a value but never used.","line":97,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":97,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setActiveStep' is assigned a value but never used.","line":97,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":97,"endColumn":35},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":183,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":183,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4520,4523],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4520,4523],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'channelIds' is defined but never used.","line":190,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":190,"endColumn":47},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'channelIds' is defined but never used.","line":198,"column":43,"nodeType":null,"messageId":"unusedVar","endLine":198,"endColumn":53},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'channelIds' is defined but never used.","line":206,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":206,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'channelIds' is defined but never used.","line":214,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":214,"endColumn":43},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'channelIds' is defined but never used.","line":222,"column":42,"nodeType":null,"messageId":"unusedVar","endLine":222,"endColumn":52}],"suppressedMessages":[],"errorCount":28,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport {\n  Box,\n  Card,\n  CardContent,\n  Typography,\n  Button,\n  Checkbox,\n  IconButton,\n  Chip,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  TextField,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  ListItemSecondaryAction,\n  Alert,\n  LinearProgress,\n  Stepper,\n  Step,\n  StepLabel,\n  Table,\n  TableHead,\n  TableBody,\n  TableRow,\n  TableCell,\n  TableContainer,\n  Paper,\n  Tooltip,\n  Badge,\n  Avatar,\n  Divider,\n} from '@mui/material';\nimport {\n  YouTube,\n  CheckBox,\n  CheckBoxOutlineBlank,\n  IndeterminateCheckBox,\n  Edit,\n  Delete,\n  Pause,\n  PlayArrow,\n  Schedule,\n  Settings,\n  CloudUpload,\n  Warning,\n  CheckCircle,\n  ContentCopy,\n  Label,\n  Category,\n  Visibility,\n  MonetizationOn,\n  Update,\n  BatchPrediction,\n} from '@mui/icons-material';\n\ninterface Channel {\n  id: string;\n  name: string;\n  status: 'active' | 'paused' | 'error';\n  videos: number;\n  subscribers: number;\n  health: number;\n  selected?: boolean;\n}\n\ninterface BulkAction {\n  id: string;\n  label: string;\n  icon: React.ReactNode;\n  action: (channels: string[]) => void;\n  requiresConfirmation?: boolean;\n  dangerous?: boolean;\n}\n\nexport const BulkOperations: React.FC = () => {\n  const [channels, setChannels] = useState<Channel[]>([\n    { id: '1', name: 'Tech Insights', status: 'active', videos: 234, subscribers: 125000, health: 85 },\n    { id: '2', name: 'AI Daily', status: 'active', videos: 189, subscribers: 89000, health: 92 },\n    { id: '3', name: 'Future Tech', status: 'paused', videos: 156, subscribers: 67000, health: 78 },\n    { id: '4', name: 'Coding Tips', status: 'active', videos: 342, subscribers: 234000, health: 95 },\n    { id: '5', name: 'Tech Reviews', status: 'error', videos: 89, subscribers: 45000, health: 45 },\n  ]);\n\n  const [selectedChannels, setSelectedChannels] = useState<string[]>([]);\n  const [actionDialog, setActionDialog] = useState(false);\n  const [currentAction, setCurrentAction] = useState<BulkAction | null>(null);\n  const [processing, setProcessing] = useState(false);\n  const [activeStep, setActiveStep] = useState(0);\n\n  // Bulk Actions\n  const bulkActions: BulkAction[] = [\n    {\n      id: 'activate',\n      label: 'Activate Channels',\n      icon: <PlayArrow />,\n      action: (channelIds) => handleBulkStatusChange(channelIds, 'active'),\n    },\n    {\n      id: 'pause',\n      label: 'Pause Channels',\n      icon: <Pause />,\n      action: (channelIds) => handleBulkStatusChange(channelIds, 'paused'),\n    },\n    {\n      id: 'schedule',\n      label: 'Bulk Schedule Videos',\n      icon: <Schedule />,\n      action: (channelIds) => handleBulkSchedule(channelIds),\n    },\n    {\n      id: 'upload',\n      label: 'Bulk Upload Settings',\n      icon: <CloudUpload />,\n      action: (channelIds) => handleBulkUploadSettings(channelIds),\n    },\n    {\n      id: 'monetization',\n      label: 'Update Monetization',\n      icon: <MonetizationOn />,\n      action: (channelIds) => handleBulkMonetization(channelIds),\n    },\n    {\n      id: 'tags',\n      label: 'Update Tags & Categories',\n      icon: <Label />,\n      action: (channelIds) => handleBulkTags(channelIds),\n    },\n    {\n      id: 'duplicate',\n      label: 'Duplicate Settings',\n      icon: <ContentCopy />,\n      action: (channelIds) => handleDuplicateSettings(channelIds),\n    },\n    {\n      id: 'delete',\n      label: 'Delete Channels',\n      icon: <Delete />,\n      action: (channelIds) => handleBulkDelete(channelIds),\n      requiresConfirmation: true,\n      dangerous: true,\n    },\n  ];\n\n  const handleSelectAll = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (event.target.checked) {\n      setSelectedChannels(channels.map(c => c.id));\n    } else {\n      setSelectedChannels([]);\n    }\n  };\n\n  const handleSelectChannel = (channelId: string) => {\n    setSelectedChannels(prev =>\n      prev.includes(channelId)\n        ? prev.filter(id => id !== channelId)\n        : [...prev, channelId]\n    );\n  };\n\n  const handleBulkAction = (action: BulkAction) => {\n    if (selectedChannels.length === 0) {\n      alert('Please select at least one channel');\n      return;\n    }\n    setCurrentAction(action);\n    setActionDialog(true);\n  };\n\n  const handleBulkStatusChange = async (channelIds: string[], status: string) => {\n    setProcessing(true);\n    // Simulate API call\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    setChannels(prev => prev.map(c =>\n      channelIds.includes(c.id) ? { ...c, status: status as any } : c\n    ));\n    setProcessing(false);\n    setActionDialog(false);\n    setSelectedChannels([]);\n  };\n\n  const handleBulkSchedule = async (channelIds: string[]) => {\n    setProcessing(true);\n    // Implementation for bulk scheduling\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    setProcessing(false);\n    setActionDialog(false);\n  };\n\n  const handleBulkUploadSettings = async (channelIds: string[]) => {\n    setProcessing(true);\n    // Implementation for bulk upload settings\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    setProcessing(false);\n    setActionDialog(false);\n  };\n\n  const handleBulkMonetization = async (channelIds: string[]) => {\n    setProcessing(true);\n    // Implementation for bulk monetization\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    setProcessing(false);\n    setActionDialog(false);\n  };\n\n  const handleBulkTags = async (channelIds: string[]) => {\n    setProcessing(true);\n    // Implementation for bulk tags\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    setProcessing(false);\n    setActionDialog(false);\n  };\n\n  const handleDuplicateSettings = async (channelIds: string[]) => {\n    setProcessing(true);\n    // Implementation for duplicate settings\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    setProcessing(false);\n    setActionDialog(false);\n  };\n\n  const handleBulkDelete = async (channelIds: string[]) => {\n    setProcessing(true);\n    // Implementation for bulk delete\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    setChannels(prev => prev.filter(c => !channelIds.includes(c.id)));\n    setProcessing(false);\n    setActionDialog(false);\n    setSelectedChannels([]);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': return 'success';\n      case 'paused': return 'warning';\n      case 'error': return 'error';\n      default: return 'default';\n    }\n  };\n\n  return (\n    <Box>\n      {/* Header with Actions */}\n      <Card sx={{ mb: 3 }}>\n        <CardContent>\n          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n            <Typography variant=\"h5\" fontWeight=\"bold\">\n              Channel Bulk Operations\n            </Typography>\n            <Badge badgeContent={selectedChannels.length} color=\"primary\">\n              <Chip\n                label={`${selectedChannels.length} selected`}\n                color={selectedChannels.length > 0 ? 'primary' : 'default'}\n              />\n            </Badge>\n          </Box>\n\n          {selectedChannels.length > 0 && (\n            <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>\n              {bulkActions.map(action => (\n                <Button\n                  key={action.id}\n                  variant={action.dangerous ? 'outlined' : 'contained'}\n                  color={action.dangerous ? 'error' : 'primary'}\n                  size=\"small\"\n                  startIcon={action.icon}\n                  onClick={() => handleBulkAction(action)}\n                >\n                  {action.label}\n                </Button>\n              ))}\n            </Box>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Channels Table */}\n      <TableContainer component={Paper}>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell padding=\"checkbox\">\n                <Checkbox\n                  indeterminate={selectedChannels.length > 0 && selectedChannels.length < channels.length}\n                  checked={channels.length > 0 && selectedChannels.length === channels.length}\n                  onChange={handleSelectAll}\n                />\n              </TableCell>\n              <TableCell>Channel</TableCell>\n              <TableCell>Status</TableCell>\n              <TableCell align=\"right\">Videos</TableCell>\n              <TableCell align=\"right\">Subscribers</TableCell>\n              <TableCell align=\"right\">Health</TableCell>\n              <TableCell>Actions</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {channels.map(channel => (\n              <TableRow\n                key={channel.id}\n                selected={selectedChannels.includes(channel.id)}\n                hover\n              >\n                <TableCell padding=\"checkbox\">\n                  <Checkbox\n                    checked={selectedChannels.includes(channel.id)}\n                    onChange={() => handleSelectChannel(channel.id)}\n                  />\n                </TableCell>\n                <TableCell>\n                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                    <Avatar sx={{ width: 32, height: 32 }}>\n                      <YouTube />\n                    </Avatar>\n                    <Typography variant=\"body2\" fontWeight=\"medium\">\n                      {channel.name}\n                    </Typography>\n                  </Box>\n                </TableCell>\n                <TableCell>\n                  <Chip\n                    label={channel.status}\n                    size=\"small\"\n                    color={getStatusColor(channel.status)}\n                  />\n                </TableCell>\n                <TableCell align=\"right\">{channel.videos}</TableCell>\n                <TableCell align=\"right\">{channel.subscribers.toLocaleString()}</TableCell>\n                <TableCell align=\"right\">\n                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                    <LinearProgress\n                      variant=\"determinate\"\n                      value={channel.health}\n                      sx={{ width: 60, height: 6, borderRadius: 1 }}\n                      color={channel.health > 80 ? 'success' : channel.health > 50 ? 'warning' : 'error'}\n                    />\n                    <Typography variant=\"caption\">{channel.health}%</Typography>\n                  </Box>\n                </TableCell>\n                <TableCell>\n                  <IconButton size=\"small\">\n                    <Edit fontSize=\"small\" />\n                  </IconButton>\n                  <IconButton size=\"small\">\n                    <Settings fontSize=\"small\" />\n                  </IconButton>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n\n      {/* Bulk Action Dialog */}\n      <Dialog\n        open={actionDialog}\n        onClose={() => !processing && setActionDialog(false)}\n        maxWidth=\"sm\"\n        fullWidth\n      >\n        <DialogTitle>\n          {currentAction?.label}\n        </DialogTitle>\n        <DialogContent>\n          {currentAction?.requiresConfirmation && (\n            <Alert severity=\"warning\" sx={{ mb: 2 }}>\n              This action cannot be undone. Are you sure you want to proceed?\n            </Alert>\n          )}\n          \n          <Typography variant=\"body2\" gutterBottom>\n            This action will be applied to {selectedChannels.length} channel(s):\n          </Typography>\n          \n          <List dense>\n            {selectedChannels.map(id => {\n              const channel = channels.find(c => c.id === id);\n              return channel ? (\n                <ListItem key={id}>\n                  <ListItemIcon>\n                    <YouTube />\n                  </ListItemIcon>\n                  <ListItemText primary={channel.name} />\n                </ListItem>\n              ) : null;\n            })}\n          </List>\n\n          {processing && (\n            <Box sx={{ mt: 2 }}>\n              <LinearProgress />\n              <Typography variant=\"caption\" color=\"text.secondary\" sx={{ mt: 1 }}>\n                Processing bulk operation...\n              </Typography>\n            </Box>\n          )}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setActionDialog(false)} disabled={processing}>\n            Cancel\n          </Button>\n          <Button\n            variant=\"contained\"\n            color={currentAction?.dangerous ? 'error' : 'primary'}\n            onClick={() => currentAction?.action(selectedChannels)}\n            disabled={processing}\n          >\n            Confirm\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Channels\\ChannelDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Paper' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Dialog' is defined but never used.","line":25,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DialogTitle' is defined but never used.","line":26,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DialogContent' is defined but never used.","line":27,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DialogActions' is defined but never used.","line":28,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Badge' is defined but never used.","line":37,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TrendingUp' is defined but never used.","line":52,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":52,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Warning' is defined but never used.","line":54,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":54,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Timeline' is defined but never used.","line":62,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":62,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'HealthAndSafety' is defined but never used.","line":65,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":65,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Assignment' is defined but never used.","line":66,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":66,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FilterList' is defined but never used.","line":67,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":67,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Sort' is defined but never used.","line":68,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":68,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'subDays' is defined but never used.","line":71,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":71,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'HelpTooltip' is defined but never used.","line":74,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":74,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'settingsOpen' is assigned a value but never used.","line":142,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":142,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'filterOpen' is assigned a value but never used.","line":143,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":143,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setFilterOpen' is assigned a value but never used.","line":143,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":143,"endColumn":35}],"suppressedMessages":[],"errorCount":18,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Grid,\n  Card,\n  CardContent,\n  CardHeader,\n  Typography,\n  Avatar,\n  Button,\n  IconButton,\n  Chip,\n  LinearProgress,\n  Tab,\n  Tabs,\n  Paper,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n  ListItemSecondaryAction,\n  Divider,\n  Menu,\n  MenuItem,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  FormControl,\n  InputLabel,\n  Select,\n  Switch,\n  FormControlLabel,\n  Alert,\n  Tooltip,\n  Badge,\n  useTheme,\n  useMediaQuery,\n} from '@mui/material';\nimport {\n  YouTube,\n  Settings,\n  MoreVert,\n  Edit,\n  Delete,\n  Schedule,\n  PlayCircle,\n  Visibility,\n  ThumbUp,\n  Comment,\n  TrendingUp,\n  AttachMoney,\n  Warning,\n  CheckCircle,\n  CloudUpload,\n  Download,\n  Share,\n  ContentCopy,\n  Refresh,\n  BarChart,\n  Timeline,\n  VideoLibrary,\n  Speed,\n  HealthAndSafety,\n  Assignment,\n  FilterList,\n  Sort,\n  Search,\n} from '@mui/icons-material';\nimport { format, formatDistanceToNow, subDays } from 'date-fns';\nimport { RealTimeMetrics } from '../Dashboard/RealTimeMetrics';\nimport { InlineHelp } from '../Common/InlineHelp';\nimport { HelpTooltip } from '../Common/HelpTooltip';\n\ninterface Channel {\n  id: string;\n  name: string;\n  handle: string;\n  thumbnail: string;\n  subscribers: number;\n  totalVideos: number;\n  totalViews: number;\n  monthlyRevenue: number;\n  health: number;\n  status: 'active' | 'paused' | 'warning' | 'error';\n  lastVideoDate: Date;\n  quotaUsage: number;\n  quotaLimit: number;\n  verified: boolean;\n  monetized: boolean;\n}\n\ninterface Video {\n  id: string;\n  title: string;\n  thumbnail: string;\n  status: 'published' | 'scheduled' | 'processing' | 'draft' | 'failed';\n  publishedAt?: Date;\n  scheduledAt?: Date;\n  views: number;\n  likes: number;\n  comments: number;\n  revenue: number;\n  duration: string;\n  ctr: number;\n  avd: number;\n}\n\ninterface ChannelMetric {\n  label: string;\n  value: string | number;\n  change: number;\n  icon: React.ReactNode;\n  color: string;\n}\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: number;\n  value: number;\n}\n\nconst TabPanel: React.FC<TabPanelProps> = ({ children, value, index }) => {\n  return (\n    <div hidden={value !== index}>\n      {value === index && <Box sx={{ py: 3 }}>{children}</Box>}\n    </div>\n  );\n};\n\nexport const ChannelDashboard: React.FC<{ channelId: string }> = ({ channelId }) => {\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));\n  \n  const [channel, setChannel] = useState<Channel | null>(null);\n  const [videos, setVideos] = useState<Video[]>([]);\n  const [tabValue, setTabValue] = useState(0);\n  const [loading, setLoading] = useState(true);\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n  const [selectedVideo, setSelectedVideo] = useState<Video | null>(null);\n  const [settingsOpen, setSettingsOpen] = useState(false);\n  const [filterOpen, setFilterOpen] = useState(false);\n  const [videoFilter, setVideoFilter] = useState('all');\n  const [sortBy, setSortBy] = useState('date');\n\n  // Mock data - replace with API calls\n  useEffect(() => {\n    // Simulate API call\n    setTimeout(() => {\n      setChannel({\n        id: channelId,\n        name: 'Tech Insights Daily',\n        handle: '@techinsights',\n        thumbnail: '/channel-thumb.jpg',\n        subscribers: 125000,\n        totalVideos: 342,\n        totalViews: 8500000,\n        monthlyRevenue: 3250.75,\n        health: 85,\n        status: 'active',\n        lastVideoDate: new Date(),\n        quotaUsage: 7500,\n        quotaLimit: 10000,\n        verified: true,\n        monetized: true,\n      });\n\n      setVideos([\n        {\n          id: '1',\n          title: '10 AI Tools That Will Change Your Life in 2024',\n          thumbnail: '/video1.jpg',\n          status: 'published',\n          publishedAt: new Date(),\n          views: 15234,\n          likes: 892,\n          comments: 156,\n          revenue: 45.67,\n          duration: '12:34',\n          ctr: 4.5,\n          avd: 65,\n        },\n        {\n          id: '2',\n          title: 'The Future of Quantum Computing Explained',\n          thumbnail: '/video2.jpg',\n          status: 'scheduled',\n          scheduledAt: new Date(Date.now() + 86400000),\n          views: 0,\n          likes: 0,\n          comments: 0,\n          revenue: 0,\n          duration: '15:22',\n          ctr: 0,\n          avd: 0,\n        },\n        {\n          id: '3',\n          title: 'Building a Smart Home on a Budget',\n          thumbnail: '/video3.jpg',\n          status: 'processing',\n          views: 0,\n          likes: 0,\n          comments: 0,\n          revenue: 0,\n          duration: '10:15',\n          ctr: 0,\n          avd: 0,\n        },\n      ]);\n\n      setLoading(false);\n    }, 1000);\n  }, [channelId]);\n\n  const channelMetrics: ChannelMetric[] = [\n    {\n      label: 'Subscribers',\n      value: channel?.subscribers.toLocaleString() || 0,\n      change: 5.2,\n      icon: <YouTube />,\n      color: theme.palette.error.main,\n    },\n    {\n      label: 'Total Views',\n      value: channel?.totalViews.toLocaleString() || 0,\n      change: 12.5,\n      icon: <Visibility />,\n      color: theme.palette.primary.main,\n    },\n    {\n      label: 'Monthly Revenue',\n      value: `$${channel?.monthlyRevenue.toFixed(2) || 0}`,\n      change: 8.3,\n      icon: <AttachMoney />,\n      color: theme.palette.success.main,\n    },\n    {\n      label: 'Channel Health',\n      value: `${channel?.health || 0}%`,\n      change: 2.1,\n      icon: <Speed />,\n      color: theme.palette.warning.main,\n    },\n  ];\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'published':\n      case 'active':\n        return 'success';\n      case 'scheduled':\n        return 'info';\n      case 'processing':\n        return 'warning';\n      case 'failed':\n      case 'error':\n        return 'error';\n      default:\n        return 'default';\n    }\n  };\n\n  const handleVideoMenu = (event: React.MouseEvent<HTMLElement>, video: Video) => {\n    setAnchorEl(event.currentTarget);\n    setSelectedVideo(video);\n  };\n\n  const handleCloseMenu = () => {\n    setAnchorEl(null);\n    setSelectedVideo(null);\n  };\n\n  const renderChannelOverview = () => (\n    <Grid container spacing={3}>\n      {/* Channel Header */}\n      <Grid item xs={12}>\n        <Card>\n          <CardContent>\n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 3, flexWrap: 'wrap' }}>\n              <Avatar\n                src={channel?.thumbnail}\n                sx={{ width: 80, height: 80 }}\n              >\n                {channel?.name[0]}\n              </Avatar>\n              \n              <Box sx={{ flex: 1 }}>\n                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 1 }}>\n                  <Typography variant=\"h5\" fontWeight=\"bold\">\n                    {channel?.name}\n                  </Typography>\n                  {channel?.verified && (\n                    <Tooltip title=\"Verified Channel\">\n                      <CheckCircle color=\"primary\" fontSize=\"small\" />\n                    </Tooltip>\n                  )}\n                  {channel?.monetized && (\n                    <Tooltip title=\"Monetization Enabled\">\n                      <AttachMoney color=\"success\" fontSize=\"small\" />\n                    </Tooltip>\n                  )}\n                  <Chip\n                    label={channel?.status}\n                    size=\"small\"\n                    color={getStatusColor(channel?.status || '')}\n                  />\n                </Box>\n                \n                <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n                  {channel?.handle} • {channel?.totalVideos} videos\n                </Typography>\n                \n                <Box sx={{ display: 'flex', gap: 1, mt: 1 }}>\n                  <Chip\n                    icon={<Schedule />}\n                    label={`Last video: ${channel?.lastVideoDate ? formatDistanceToNow(channel.lastVideoDate, { addSuffix: true }) : 'N/A'}`}\n                    size=\"small\"\n                    variant=\"outlined\"\n                  />\n                  <Chip\n                    icon={<CloudUpload />}\n                    label={`Quota: ${channel?.quotaUsage}/${channel?.quotaLimit}`}\n                    size=\"small\"\n                    variant=\"outlined\"\n                    color={channel && channel.quotaUsage > channel.quotaLimit * 0.8 ? 'warning' : 'default'}\n                  />\n                </Box>\n              </Box>\n              \n              <Box sx={{ display: 'flex', gap: 1 }}>\n                <Button\n                  variant=\"contained\"\n                  startIcon={<VideoLibrary />}\n                  onClick={() => setTabValue(1)}\n                >\n                  Create Video\n                </Button>\n                <Button\n                  variant=\"outlined\"\n                  startIcon={<Settings />}\n                  onClick={() => setSettingsOpen(true)}\n                >\n                  Settings\n                </Button>\n                <IconButton onClick={(e) => setAnchorEl(e.currentTarget)}>\n                  <MoreVert />\n                </IconButton>\n              </Box>\n            </Box>\n            \n            {/* Quota Progress */}\n            <Box sx={{ mt: 3 }}>\n              <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>\n                <Typography variant=\"body2\">API Quota Usage</Typography>\n                <Typography variant=\"body2\" fontWeight=\"bold\">\n                  {channel ? ((channel.quotaUsage / channel.quotaLimit) * 100).toFixed(1) : 0}%\n                </Typography>\n              </Box>\n              <LinearProgress\n                variant=\"determinate\"\n                value={channel ? (channel.quotaUsage / channel.quotaLimit) * 100 : 0}\n                color={channel && channel.quotaUsage > channel.quotaLimit * 0.8 ? 'warning' : 'primary'}\n              />\n            </Box>\n          </CardContent>\n        </Card>\n      </Grid>\n\n      {/* Key Metrics */}\n      {channelMetrics.map((metric, index) => (\n        <Grid item xs={12} sm={6} md={3} key={index}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n                <Avatar\n                  sx={{\n                    bgcolor: `${metric.color}20`,\n                    color: metric.color,\n                    width: 40,\n                    height: 40,\n                  }}\n                >\n                  {metric.icon}\n                </Avatar>\n                <Box sx={{ ml: 'auto' }}>\n                  <Chip\n                    label={`+${metric.change}%`}\n                    size=\"small\"\n                    color=\"success\"\n                    sx={{ fontSize: 11 }}\n                  />\n                </Box>\n              </Box>\n              <Typography variant=\"h5\" fontWeight=\"bold\">\n                {metric.value}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                {metric.label}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n      ))}\n\n      {/* Real-time Metrics */}\n      <Grid item xs={12}>\n        <Typography variant=\"h6\" fontWeight=\"bold\" gutterBottom>\n          Real-time Performance\n        </Typography>\n        <RealTimeMetrics\n          channelId={channelId}\n          compactMode={isMobile}\n          showSparklines={!isMobile}\n        />\n      </Grid>\n\n      {/* Help Section */}\n      <Grid item xs={12}>\n        <InlineHelp\n          context=\"channel-management\"\n          variant=\"compact\"\n        />\n      </Grid>\n    </Grid>\n  );\n\n  const renderVideoHistory = () => (\n    <Box>\n      {/* Filters and Actions */}\n      <Box sx={{ display: 'flex', gap: 2, mb: 3, flexWrap: 'wrap' }}>\n        <TextField\n          placeholder=\"Search videos...\"\n          size=\"small\"\n          InputProps={{\n            startAdornment: <Search sx={{ mr: 1, color: 'text.secondary' }} />,\n          }}\n          sx={{ flex: 1, minWidth: 200 }}\n        />\n        \n        <FormControl size=\"small\" sx={{ minWidth: 120 }}>\n          <InputLabel>Status</InputLabel>\n          <Select\n            value={videoFilter}\n            onChange={(e) => setVideoFilter(e.target.value)}\n            label=\"Status\"\n          >\n            <MenuItem value=\"all\">All</MenuItem>\n            <MenuItem value=\"published\">Published</MenuItem>\n            <MenuItem value=\"scheduled\">Scheduled</MenuItem>\n            <MenuItem value=\"processing\">Processing</MenuItem>\n            <MenuItem value=\"draft\">Draft</MenuItem>\n          </Select>\n        </FormControl>\n        \n        <FormControl size=\"small\" sx={{ minWidth: 120 }}>\n          <InputLabel>Sort By</InputLabel>\n          <Select\n            value={sortBy}\n            onChange={(e) => setSortBy(e.target.value)}\n            label=\"Sort By\"\n          >\n            <MenuItem value=\"date\">Date</MenuItem>\n            <MenuItem value=\"views\">Views</MenuItem>\n            <MenuItem value=\"revenue\">Revenue</MenuItem>\n            <MenuItem value=\"engagement\">Engagement</MenuItem>\n          </Select>\n        </FormControl>\n        \n        <Button\n          variant=\"outlined\"\n          startIcon={<Refresh />}\n        >\n          Refresh\n        </Button>\n      </Box>\n\n      {/* Video List */}\n      <List>\n        {videos.map((video, index) => (\n          <React.Fragment key={video.id}>\n            <ListItem alignItems=\"flex-start\">\n              <ListItemAvatar>\n                <Avatar\n                  variant=\"rounded\"\n                  src={video.thumbnail}\n                  sx={{ width: 120, height: 67.5, mr: 2 }}\n                >\n                  <PlayCircle />\n                </Avatar>\n              </ListItemAvatar>\n              \n              <ListItemText\n                primary={\n                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                    <Typography variant=\"subtitle1\" fontWeight=\"medium\">\n                      {video.title}\n                    </Typography>\n                    <Chip\n                      label={video.status}\n                      size=\"small\"\n                      color={getStatusColor(video.status)}\n                    />\n                  </Box>\n                }\n                secondary={\n                  <Box>\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      {video.status === 'published' && video.publishedAt\n                        ? `Published ${formatDistanceToNow(video.publishedAt, { addSuffix: true })}`\n                        : video.status === 'scheduled' && video.scheduledAt\n                        ? `Scheduled for ${format(video.scheduledAt, 'PPp')}`\n                        : `Status: ${video.status}`}\n                    </Typography>\n                    \n                    {video.status === 'published' && (\n                      <Box sx={{ display: 'flex', gap: 2, mt: 1 }}>\n                        <Chip\n                          icon={<Visibility />}\n                          label={video.views.toLocaleString()}\n                          size=\"small\"\n                          variant=\"outlined\"\n                        />\n                        <Chip\n                          icon={<ThumbUp />}\n                          label={video.likes.toLocaleString()}\n                          size=\"small\"\n                          variant=\"outlined\"\n                        />\n                        <Chip\n                          icon={<Comment />}\n                          label={video.comments.toLocaleString()}\n                          size=\"small\"\n                          variant=\"outlined\"\n                        />\n                        <Chip\n                          icon={<AttachMoney />}\n                          label={`$${video.revenue.toFixed(2)}`}\n                          size=\"small\"\n                          variant=\"outlined\"\n                          color=\"success\"\n                        />\n                      </Box>\n                    )}\n                    \n                    {video.status === 'published' && (\n                      <Box sx={{ display: 'flex', gap: 2, mt: 1 }}>\n                        <Typography variant=\"caption\" color=\"text.secondary\">\n                          CTR: {video.ctr}%\n                        </Typography>\n                        <Typography variant=\"caption\" color=\"text.secondary\">\n                          AVD: {video.avd}%\n                        </Typography>\n                        <Typography variant=\"caption\" color=\"text.secondary\">\n                          Duration: {video.duration}\n                        </Typography>\n                      </Box>\n                    )}\n                  </Box>\n                }\n              />\n              \n              <ListItemSecondaryAction>\n                <IconButton\n                  edge=\"end\"\n                  onClick={(e) => handleVideoMenu(e, video)}\n                >\n                  <MoreVert />\n                </IconButton>\n              </ListItemSecondaryAction>\n            </ListItem>\n            {index < videos.length - 1 && <Divider component=\"li\" />}\n          </React.Fragment>\n        ))}\n      </List>\n\n      {/* Video Actions Menu */}\n      <Menu\n        anchorEl={anchorEl}\n        open={Boolean(anchorEl) && Boolean(selectedVideo)}\n        onClose={handleCloseMenu}\n      >\n        <MenuItem onClick={handleCloseMenu}>\n          <ListItemIcon>\n            <Edit fontSize=\"small\" />\n          </ListItemIcon>\n          <ListItemText>Edit</ListItemText>\n        </MenuItem>\n        <MenuItem onClick={handleCloseMenu}>\n          <ListItemIcon>\n            <ContentCopy fontSize=\"small\" />\n          </ListItemIcon>\n          <ListItemText>Duplicate</ListItemText>\n        </MenuItem>\n        <MenuItem onClick={handleCloseMenu}>\n          <ListItemIcon>\n            <Share fontSize=\"small\" />\n          </ListItemIcon>\n          <ListItemText>Share</ListItemText>\n        </MenuItem>\n        <MenuItem onClick={handleCloseMenu}>\n          <ListItemIcon>\n            <Download fontSize=\"small\" />\n          </ListItemIcon>\n          <ListItemText>Download</ListItemText>\n        </MenuItem>\n        <Divider />\n        <MenuItem onClick={handleCloseMenu} sx={{ color: 'error.main' }}>\n          <ListItemIcon>\n            <Delete fontSize=\"small\" color=\"error\" />\n          </ListItemIcon>\n          <ListItemText>Delete</ListItemText>\n        </MenuItem>\n      </Menu>\n    </Box>\n  );\n\n  const renderChannelSettings = () => (\n    <Grid container spacing={3}>\n      <Grid item xs={12} md={6}>\n        <Card>\n          <CardHeader title=\"Channel Configuration\" />\n          <CardContent>\n            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>\n              <TextField\n                label=\"Channel Name\"\n                value={channel?.name || ''}\n                fullWidth\n              />\n              <TextField\n                label=\"Channel Handle\"\n                value={channel?.handle || ''}\n                fullWidth\n              />\n              <TextField\n                label=\"Description\"\n                multiline\n                rows={4}\n                fullWidth\n              />\n              <FormControlLabel\n                control={<Switch checked={channel?.monetized || false} />}\n                label=\"Monetization Enabled\"\n              />\n              <FormControlLabel\n                control={<Switch checked={true} />}\n                label=\"Auto-publish Videos\"\n              />\n              <Button variant=\"contained\">\n                Save Changes\n              </Button>\n            </Box>\n          </CardContent>\n        </Card>\n      </Grid>\n\n      <Grid item xs={12} md={6}>\n        <Card>\n          <CardHeader title=\"Upload Defaults\" />\n          <CardContent>\n            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>\n              <FormControl fullWidth>\n                <InputLabel>Default Category</InputLabel>\n                <Select value=\"technology\" label=\"Default Category\">\n                  <MenuItem value=\"technology\">Science & Technology</MenuItem>\n                  <MenuItem value=\"education\">Education</MenuItem>\n                  <MenuItem value=\"entertainment\">Entertainment</MenuItem>\n                </Select>\n              </FormControl>\n              <TextField\n                label=\"Default Tags\"\n                placeholder=\"tech, ai, innovation\"\n                fullWidth\n              />\n              <FormControl fullWidth>\n                <InputLabel>Default Visibility</InputLabel>\n                <Select value=\"public\" label=\"Default Visibility\">\n                  <MenuItem value=\"public\">Public</MenuItem>\n                  <MenuItem value=\"unlisted\">Unlisted</MenuItem>\n                  <MenuItem value=\"private\">Private</MenuItem>\n                </Select>\n              </FormControl>\n              <FormControlLabel\n                control={<Switch checked={true} />}\n                label=\"Enable Comments\"\n              />\n              <FormControlLabel\n                control={<Switch checked={true} />}\n                label=\"Enable Likes\"\n              />\n            </Box>\n          </CardContent>\n        </Card>\n      </Grid>\n\n      <Grid item xs={12}>\n        <Alert severity=\"info\">\n          Changes to channel settings may take up to 24 hours to fully propagate across YouTube's systems.\n        </Alert>\n      </Grid>\n    </Grid>\n  );\n\n  if (loading) {\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'center', p: 4 }}>\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  return (\n    <Box>\n      <Tabs\n        value={tabValue}\n        onChange={(e, newValue) => setTabValue(newValue)}\n        variant={isMobile ? 'scrollable' : 'standard'}\n        scrollButtons={isMobile ? 'auto' : false}\n      >\n        <Tab label=\"Overview\" icon={<Dashboard />} iconPosition=\"start\" />\n        <Tab label=\"Videos\" icon={<VideoLibrary />} iconPosition=\"start\" />\n        <Tab label=\"Analytics\" icon={<BarChart />} iconPosition=\"start\" />\n        <Tab label=\"Settings\" icon={<Settings />} iconPosition=\"start\" />\n      </Tabs>\n\n      <TabPanel value={tabValue} index={0}>\n        {renderChannelOverview()}\n      </TabPanel>\n\n      <TabPanel value={tabValue} index={1}>\n        {renderVideoHistory()}\n      </TabPanel>\n\n      <TabPanel value={tabValue} index={2}>\n        <Typography>Analytics content coming soon...</Typography>\n      </TabPanel>\n\n      <TabPanel value={tabValue} index={3}>\n        {renderChannelSettings()}\n      </TabPanel>\n    </Box>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Channels\\ChannelHealthDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'IconButton' is defined but never used.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Paper' is defined but never used.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Divider' is defined but never used.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Tooltip' is defined but never used.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Avatar' is defined but never used.","line":23,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Table' is defined but never used.","line":25,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TableBody' is defined but never used.","line":26,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TableCell' is defined but never used.","line":27,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TableContainer' is defined but never used.","line":28,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TableHead' is defined but never used.","line":29,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TableRow' is defined but never used.","line":30,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Speed' is defined but never used.","line":36,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Error' is defined but never used.","line":39,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'YouTube' is defined but never used.","line":45,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":45,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Visibility' is defined but never used.","line":46,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ThumbUp' is defined but never used.","line":47,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":47,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Comment' is defined but never used.","line":48,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Schedule' is defined but never used.","line":49,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":49,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MonetizationOn' is defined but never used.","line":50,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":50,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Security' is defined but never used.","line":51,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":51,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CloudQueue' is defined but never used.","line":52,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":52,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Analytics' is defined but never used.","line":53,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":53,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'BugReport' is defined but never used.","line":54,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":54,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Build' is defined but never used.","line":55,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":55,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Timeline' is defined but never used.","line":56,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":56,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'HealthAndSafety' is defined but never used.","line":58,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":58,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Legend' is defined but never used.","line":60,"column":168,"nodeType":null,"messageId":"unusedVar","endLine":60,"endColumn":174},{"ruleId":"@typescript-eslint/no-non-null-asserted-optional-chain","severity":2,"message":"Optional chain expressions can return undefined by design - using a non-null assertion is unsafe and wrong.","line":318,"column":32,"nodeType":"TSNonNullExpression","messageId":"noNonNullOptionalChain","endLine":318,"endColumn":58,"suggestions":[{"messageId":"suggestRemovingNonNull","fix":{"range":[9906,9907],"text":""},"desc":"You should remove the non-null assertion."}]},{"ruleId":"@typescript-eslint/no-non-null-asserted-optional-chain","severity":2,"message":"Optional chain expressions can return undefined by design - using a non-null assertion is unsafe and wrong.","line":318,"column":79,"nodeType":"TSNonNullExpression","messageId":"noNonNullOptionalChain","endLine":318,"endColumn":105,"suggestions":[{"messageId":"suggestRemovingNonNull","fix":{"range":[9953,9954],"text":""},"desc":"You should remove the non-null assertion."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":492,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":492,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16682,16685],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16682,16685],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":30,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Grid,\n  Card,\n  CardContent,\n  Typography,\n  LinearProgress,\n  CircularProgress,\n  Chip,\n  Alert,\n  Button,\n  IconButton,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  ListItemSecondaryAction,\n  Paper,\n  Divider,\n  Tooltip,\n  Badge,\n  Avatar,\n  useTheme,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Accordion,\n  AccordionSummary,\n  AccordionDetails,\n} from '@mui/material';\nimport {\n  Speed,\n  CheckCircle,\n  Warning,\n  Error,\n  TrendingUp,\n  TrendingDown,\n  Info,\n  Refresh,\n  ExpandMore,\n  YouTube,\n  Visibility,\n  ThumbUp,\n  Comment,\n  Schedule,\n  MonetizationOn,\n  Security,\n  CloudQueue,\n  Analytics,\n  BugReport,\n  Build,\n  Timeline,\n  AutoFixHigh,\n  HealthAndSafety,\n} from '@mui/icons-material';\nimport { RadarChart, PolarGrid, PolarAngleAxis, PolarRadiusAxis, Radar, ResponsiveContainer, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip as RechartsTooltip, Legend } from 'recharts';\nimport { format, subDays } from 'date-fns';\n\ninterface HealthMetric {\n  category: string;\n  score: number;\n  maxScore: 100;\n  status: 'healthy' | 'warning' | 'critical';\n  factors: {\n    name: string;\n    value: number;\n    impact: 'positive' | 'negative' | 'neutral';\n    recommendation?: string;\n  }[];\n}\n\ninterface HealthIssue {\n  id: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  category: string;\n  title: string;\n  description: string;\n  impact: string;\n  solution: string;\n  autoFixAvailable: boolean;\n}\n\ninterface ChannelHealthData {\n  channelId: string;\n  channelName: string;\n  overallHealth: number;\n  trend: 'improving' | 'stable' | 'declining';\n  lastChecked: Date;\n  metrics: HealthMetric[];\n  issues: HealthIssue[];\n  history: { date: Date; score: number }[];\n}\n\nexport const ChannelHealthDashboard: React.FC<{ channelId?: string }> = ({ channelId }) => {\n  const theme = useTheme();\n  const [healthData, setHealthData] = useState<ChannelHealthData | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [autoFixing, setAutoFixing] = useState(false);\n  const [expandedMetric, setExpandedMetric] = useState<string | null>(null);\n\n  useEffect(() => {\n    // Simulate fetching health data\n    setTimeout(() => {\n      setHealthData({\n        channelId: channelId || '1',\n        channelName: 'Tech Insights Daily',\n        overallHealth: 85,\n        trend: 'improving',\n        lastChecked: new Date(),\n        metrics: [\n          {\n            category: 'Content Performance',\n            score: 88,\n            maxScore: 100,\n            status: 'healthy',\n            factors: [\n              { name: 'View Count', value: 92, impact: 'positive' },\n              { name: 'Engagement Rate', value: 85, impact: 'positive' },\n              { name: 'Average View Duration', value: 78, impact: 'neutral' },\n              { name: 'Click-Through Rate', value: 95, impact: 'positive' },\n            ],\n          },\n          {\n            category: 'Upload Consistency',\n            score: 75,\n            maxScore: 100,\n            status: 'warning',\n            factors: [\n              { name: 'Upload Frequency', value: 70, impact: 'negative', recommendation: 'Increase upload frequency to daily' },\n              { name: 'Schedule Adherence', value: 80, impact: 'neutral' },\n              { name: 'Content Gaps', value: 65, impact: 'negative', recommendation: 'Fill content gaps on weekends' },\n            ],\n          },\n          {\n            category: 'Audience Growth',\n            score: 92,\n            maxScore: 100,\n            status: 'healthy',\n            factors: [\n              { name: 'Subscriber Growth', value: 95, impact: 'positive' },\n              { name: 'Retention Rate', value: 88, impact: 'positive' },\n              { name: 'New Viewer Acquisition', value: 93, impact: 'positive' },\n            ],\n          },\n          {\n            category: 'Monetization',\n            score: 82,\n            maxScore: 100,\n            status: 'healthy',\n            factors: [\n              { name: 'RPM', value: 85, impact: 'positive' },\n              { name: 'Ad Revenue', value: 80, impact: 'neutral' },\n              { name: 'Channel Memberships', value: 75, impact: 'neutral' },\n            ],\n          },\n          {\n            category: 'Technical Health',\n            score: 95,\n            maxScore: 100,\n            status: 'healthy',\n            factors: [\n              { name: 'API Quota Usage', value: 60, impact: 'positive' },\n              { name: 'Upload Success Rate', value: 100, impact: 'positive' },\n              { name: 'Processing Errors', value: 5, impact: 'positive' },\n            ],\n          },\n          {\n            category: 'Compliance',\n            score: 100,\n            maxScore: 100,\n            status: 'healthy',\n            factors: [\n              { name: 'Community Guidelines', value: 100, impact: 'positive' },\n              { name: 'Copyright Status', value: 100, impact: 'positive' },\n              { name: 'Monetization Policies', value: 100, impact: 'positive' },\n            ],\n          },\n        ],\n        issues: [\n          {\n            id: '1',\n            severity: 'medium',\n            category: 'Upload Consistency',\n            title: 'Irregular Upload Schedule',\n            description: 'Videos are not being uploaded at consistent times',\n            impact: 'May reduce audience retention by 15%',\n            solution: 'Enable auto-scheduling with optimal time slots',\n            autoFixAvailable: true,\n          },\n          {\n            id: '2',\n            severity: 'low',\n            category: 'Content Performance',\n            title: 'Low Weekend Engagement',\n            description: 'Weekend videos receive 30% less engagement',\n            impact: 'Missing potential revenue opportunities',\n            solution: 'Adjust content strategy for weekends',\n            autoFixAvailable: false,\n          },\n          {\n            id: '3',\n            severity: 'low',\n            category: 'Monetization',\n            title: 'Underutilized Membership Features',\n            description: 'Channel memberships could be better promoted',\n            impact: 'Potential 20% increase in membership revenue',\n            solution: 'Add membership perks and promote in videos',\n            autoFixAvailable: false,\n          },\n        ],\n        history: Array.from({ length: 30 }, (_, i) => ({\n          date: subDays(new Date(), 29 - i),\n          score: 75 + Math.random() * 15 + (i * 0.3),\n        })),\n      });\n      setLoading(false);\n    }, 1000);\n  }, [channelId]);\n\n  const getHealthColor = (score: number) => {\n    if (score >= 80) return theme.palette.success.main;\n    if (score >= 60) return theme.palette.warning.main;\n    return theme.palette.error.main;\n  };\n\n  const getHealthLabel = (score: number) => {\n    if (score >= 80) return 'Healthy';\n    if (score >= 60) return 'Needs Attention';\n    return 'Critical';\n  };\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case 'critical': return 'error';\n      case 'high': return 'error';\n      case 'medium': return 'warning';\n      case 'low': return 'info';\n      default: return 'default';\n    }\n  };\n\n  const handleAutoFix = async (issue: HealthIssue) => {\n    setAutoFixing(true);\n    // Simulate auto-fix\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    setHealthData(prev => prev ? {\n      ...prev,\n      issues: prev.issues.filter(i => i.id !== issue.id),\n    } : null);\n    setAutoFixing(false);\n  };\n\n  const radarData = healthData?.metrics.map(metric => ({\n    category: metric.category,\n    score: metric.score,\n    fullMark: 100,\n  })) || [];\n\n  if (loading) {\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'center', p: 4 }}>\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  return (\n    <Box>\n      {/* Overall Health Score */}\n      <Grid container spacing={3}>\n        <Grid item xs={12}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                <Box sx={{ display: 'flex', alignItems: 'center', gap: 3 }}>\n                  <Box sx={{ position: 'relative', display: 'inline-flex' }}>\n                    <CircularProgress\n                      variant=\"determinate\"\n                      value={healthData?.overallHealth || 0}\n                      size={120}\n                      thickness={4}\n                      sx={{ color: getHealthColor(healthData?.overallHealth || 0) }}\n                    />\n                    <Box\n                      sx={{\n                        top: 0,\n                        left: 0,\n                        bottom: 0,\n                        right: 0,\n                        position: 'absolute',\n                        display: 'flex',\n                        alignItems: 'center',\n                        justifyContent: 'center',\n                      }}\n                    >\n                      <Box sx={{ textAlign: 'center' }}>\n                        <Typography variant=\"h3\" fontWeight=\"bold\">\n                          {healthData?.overallHealth}%\n                        </Typography>\n                        <Typography variant=\"caption\" color=\"text.secondary\">\n                          Health Score\n                        </Typography>\n                      </Box>\n                    </Box>\n                  </Box>\n\n                  <Box>\n                    <Typography variant=\"h5\" fontWeight=\"bold\" gutterBottom>\n                      {healthData?.channelName}\n                    </Typography>\n                    <Box sx={{ display: 'flex', gap: 1, alignItems: 'center' }}>\n                      <Chip\n                        label={getHealthLabel(healthData?.overallHealth || 0)}\n                        color={healthData?.overallHealth! >= 80 ? 'success' : healthData?.overallHealth! >= 60 ? 'warning' : 'error'}\n                        size=\"small\"\n                      />\n                      <Chip\n                        icon={healthData?.trend === 'improving' ? <TrendingUp /> : healthData?.trend === 'declining' ? <TrendingDown /> : <TrendingUp />}\n                        label={healthData?.trend}\n                        size=\"small\"\n                        variant=\"outlined\"\n                      />\n                      <Typography variant=\"caption\" color=\"text.secondary\">\n                        Last checked: {healthData?.lastChecked ? format(healthData.lastChecked, 'HH:mm') : ''}\n                      </Typography>\n                    </Box>\n                  </Box>\n                </Box>\n\n                <Button\n                  variant=\"contained\"\n                  startIcon={<Refresh />}\n                  onClick={() => setLoading(true)}\n                >\n                  Refresh\n                </Button>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        {/* Health Radar Chart */}\n        <Grid item xs={12} md={6}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" fontWeight=\"bold\" gutterBottom>\n                Health Overview\n              </Typography>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <RadarChart data={radarData}>\n                  <PolarGrid />\n                  <PolarAngleAxis dataKey=\"category\" tick={{ fontSize: 10 }} />\n                  <PolarRadiusAxis angle={90} domain={[0, 100]} />\n                  <Radar\n                    name=\"Health Score\"\n                    dataKey=\"score\"\n                    stroke={theme.palette.primary.main}\n                    fill={theme.palette.primary.main}\n                    fillOpacity={0.6}\n                  />\n                </RadarChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        {/* Health Trend */}\n        <Grid item xs={12} md={6}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" fontWeight=\"bold\" gutterBottom>\n                30-Day Health Trend\n              </Typography>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <LineChart data={healthData?.history}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis\n                    dataKey=\"date\"\n                    tickFormatter={(date) => format(date, 'MM/dd')}\n                    tick={{ fontSize: 10 }}\n                  />\n                  <YAxis domain={[0, 100]} />\n                  <RechartsTooltip\n                    labelFormatter={(date) => format(date, 'PPP')}\n                  />\n                  <Line\n                    type=\"monotone\"\n                    dataKey=\"score\"\n                    stroke={theme.palette.primary.main}\n                    strokeWidth={2}\n                    dot={false}\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        {/* Detailed Metrics */}\n        <Grid item xs={12}>\n          <Typography variant=\"h6\" fontWeight=\"bold\" gutterBottom>\n            Detailed Health Metrics\n          </Typography>\n          {healthData?.metrics.map((metric) => (\n            <Accordion\n              key={metric.category}\n              expanded={expandedMetric === metric.category}\n              onChange={() => setExpandedMetric(\n                expandedMetric === metric.category ? null : metric.category\n              )}\n            >\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Box sx={{ display: 'flex', alignItems: 'center', width: '100%', gap: 2 }}>\n                  <Box sx={{ flex: 1 }}>\n                    <Typography variant=\"subtitle1\" fontWeight=\"medium\">\n                      {metric.category}\n                    </Typography>\n                  </Box>\n                  <Chip\n                    label={`${metric.score}%`}\n                    color={metric.status === 'healthy' ? 'success' : metric.status === 'warning' ? 'warning' : 'error'}\n                    size=\"small\"\n                  />\n                  <LinearProgress\n                    variant=\"determinate\"\n                    value={metric.score}\n                    sx={{\n                      width: 100,\n                      height: 6,\n                      borderRadius: 1,\n                      backgroundColor: 'grey.200',\n                      '& .MuiLinearProgress-bar': {\n                        backgroundColor: getHealthColor(metric.score),\n                      },\n                    }}\n                  />\n                </Box>\n              </AccordionSummary>\n              <AccordionDetails>\n                <List dense>\n                  {metric.factors.map((factor, index) => (\n                    <ListItem key={index}>\n                      <ListItemIcon>\n                        {factor.impact === 'positive' ? (\n                          <CheckCircle color=\"success\" />\n                        ) : factor.impact === 'negative' ? (\n                          <Warning color=\"warning\" />\n                        ) : (\n                          <Info color=\"info\" />\n                        )}\n                      </ListItemIcon>\n                      <ListItemText\n                        primary={factor.name}\n                        secondary={factor.recommendation}\n                      />\n                      <ListItemSecondaryAction>\n                        <Typography variant=\"body2\" fontWeight=\"bold\">\n                          {factor.value}%\n                        </Typography>\n                      </ListItemSecondaryAction>\n                    </ListItem>\n                  ))}\n                </List>\n              </AccordionDetails>\n            </Accordion>\n          ))}\n        </Grid>\n\n        {/* Issues & Recommendations */}\n        <Grid item xs={12}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" fontWeight=\"bold\" gutterBottom>\n                Issues & Recommendations\n              </Typography>\n              \n              {healthData?.issues.length === 0 ? (\n                <Alert severity=\"success\">\n                  No issues detected. Your channel is healthy!\n                </Alert>\n              ) : (\n                <List>\n                  {healthData?.issues.map((issue) => (\n                    <ListItem key={issue.id}>\n                      <ListItemIcon>\n                        <Badge\n                          badgeContent={issue.severity}\n                          color={getSeverityColor(issue.severity) as any}\n                        >\n                          <Warning />\n                        </Badge>\n                      </ListItemIcon>\n                      <ListItemText\n                        primary={\n                          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                            <Typography variant=\"subtitle1\" fontWeight=\"medium\">\n                              {issue.title}\n                            </Typography>\n                            <Chip\n                              label={issue.category}\n                              size=\"small\"\n                              variant=\"outlined\"\n                            />\n                          </Box>\n                        }\n                        secondary={\n                          <Box>\n                            <Typography variant=\"body2\" color=\"text.secondary\">\n                              {issue.description}\n                            </Typography>\n                            <Typography variant=\"caption\" color=\"warning.main\">\n                              Impact: {issue.impact}\n                            </Typography>\n                            <Typography variant=\"body2\" color=\"primary.main\" sx={{ mt: 1 }}>\n                              Solution: {issue.solution}\n                            </Typography>\n                          </Box>\n                        }\n                      />\n                      <ListItemSecondaryAction>\n                        {issue.autoFixAvailable && (\n                          <Button\n                            variant=\"outlined\"\n                            size=\"small\"\n                            startIcon={<AutoFixHigh />}\n                            onClick={() => handleAutoFix(issue)}\n                            disabled={autoFixing}\n                          >\n                            Auto Fix\n                          </Button>\n                        )}\n                      </ListItemSecondaryAction>\n                    </ListItem>\n                  ))}\n                </List>\n              )}\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Channels\\ChannelList.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":87,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":87,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2103,2106],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2103,2106],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\r\nimport {\r\n  Box,\r\n  Card,\r\n  CardContent,\r\n  CardActions,\r\n  Typography,\r\n  Button,\r\n  Grid,\r\n  Chip,\r\n  Avatar,\r\n  IconButton,\r\n  Menu,\r\n  MenuItem,\r\n  Skeleton,\r\n  Alert,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  SelectChangeEvent,\r\n} from '@mui/material';\r\nimport {\r\n  YouTube,\r\n  MoreVert,\r\n  Edit,\r\n  Delete,\r\n  Analytics,\r\n  Link as LinkIcon,\r\n  Add,\r\n  CheckCircle,\r\n  Warning,\r\n  TrendingUp,\r\n  VideoLibrary,\r\n  Visibility,\r\n  MonetizationOn,\r\n} from '@mui/icons-material';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { channelApi } from '../../services/api';\r\nimport { formatNumber, formatCurrency } from '../../utils/formatters';\r\n\r\ninterface Channel {\r\n  id: string;\r\n  name: string;\r\n  description?: string;\r\n  category: string;\r\n  target_audience: string;\r\n  upload_schedule: string;\r\n  language: string;\r\n  youtube_channel_id?: string;\r\n  youtube_channel_url?: string;\r\n  is_active: boolean;\r\n  is_verified: boolean;\r\n  total_videos: number;\r\n  total_views: number;\r\n  total_revenue: number;\r\n  subscriber_count?: number;\r\n  created_at: string;\r\n  updated_at?: string;\r\n}\r\n\r\nexport const ChannelList: React.FC = () => {\r\n  const navigate = useNavigate();\r\n  const [channels, setChannels] = useState<Channel[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\r\n  const [selectedChannel, setSelectedChannel] = useState<Channel | null>(null);\r\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\r\n  const [editDialogOpen, setEditDialogOpen] = useState(false);\r\n  const [editForm, setEditForm] = useState<Partial<Channel>>({});\r\n\r\n  useEffect(() => {\r\n    fetchChannels();\r\n  }, []);\r\n\r\n  const fetchChannels = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await channelApi.getChannels();\r\n      setChannels(response.data);\r\n      setError(null);\r\n    } catch (error: any) {\r\n      setError('Failed to load channels. Please try again.');\r\n      console.error('Error fetching channels:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleMenuClick = (event: React.MouseEvent<HTMLElement>, channel: Channel) => {\r\n    setAnchorEl(event.currentTarget);\r\n    setSelectedChannel(channel);\r\n  };\r\n\r\n  const handleMenuClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const handleEdit = () => {\r\n    if (selectedChannel) {\r\n      setEditForm(selectedChannel);\r\n      setEditDialogOpen(true);\r\n    }\r\n    handleMenuClose();\r\n  };\r\n\r\n  const handleDelete = () => {\r\n    setDeleteDialogOpen(true);\r\n    handleMenuClose();\r\n  };\r\n\r\n  const handleViewAnalytics = () => {\r\n    if (selectedChannel) {\r\n      navigate(`/channels/${selectedChannel.id}/analytics`);\r\n    }\r\n    handleMenuClose();\r\n  };\r\n\r\n  const handleConnectYouTube = () => {\r\n    if (selectedChannel) {\r\n      navigate(`/channels/${selectedChannel.id}/connect`);\r\n    }\r\n    handleMenuClose();\r\n  };\r\n\r\n  const confirmDelete = async () => {\r\n    if (selectedChannel) {\r\n      try {\r\n        await channelApi.deleteChannel(selectedChannel.id);\r\n        setChannels(channels.filter(c => c.id !== selectedChannel.id));\r\n        setDeleteDialogOpen(false);\r\n        setSelectedChannel(null);\r\n      } catch (error) {\r\n        console.error('Error deleting channel:', error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleEditSubmit = async () => {\r\n    if (selectedChannel && editForm) {\r\n      try {\r\n        const response = await channelApi.updateChannel(selectedChannel.id, editForm);\r\n        setChannels(channels.map(c => \r\n          c.id === selectedChannel.id ? { ...c, ...response.data } : c\r\n        ));\r\n        setEditDialogOpen(false);\r\n        setSelectedChannel(null);\r\n        setEditForm({});\r\n      } catch (error) {\r\n        console.error('Error updating channel:', error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const getCategoryColor = (category: string) => {\r\n    const colors: Record<string, string> = {\r\n      gaming: '#e91e63',\r\n      education: '#2196f3',\r\n      technology: '#9c27b0',\r\n      entertainment: '#ff9800',\r\n      music: '#4caf50',\r\n      sports: '#f44336',\r\n      news: '#607d8b',\r\n      howto: '#00bcd4',\r\n      travel: '#8bc34a',\r\n      food: '#ff5722',\r\n    };\r\n    return colors[category.toLowerCase()] || '#757575';\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Grid container spacing={3}>\r\n        {[1, 2, 3].map((i) => (\r\n          <Grid item xs={12} md={6} lg={4} key={i}>\r\n            <Card>\r\n              <CardContent>\r\n                <Skeleton variant=\"text\" width=\"60%\" height={32} />\r\n                <Skeleton variant=\"text\" width=\"100%\" />\r\n                <Skeleton variant=\"text\" width=\"80%\" />\r\n                <Box sx={{ display: 'flex', gap: 1, mt: 2 }}>\r\n                  <Skeleton variant=\"rectangular\" width={60} height={24} />\r\n                  <Skeleton variant=\"rectangular\" width={60} height={24} />\r\n                </Box>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n        {error}\r\n      </Alert>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={12}>\r\n          <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 3 }}>\r\n            <Typography variant=\"h5\" fontWeight=\"bold\">\r\n              My Channels\r\n            </Typography>\r\n            <Button\r\n              variant=\"contained\"\r\n              startIcon={<Add />}\r\n              onClick={() => navigate('/channels/create')}\r\n              sx={{\r\n                background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n                '&:hover': {\r\n                  background: 'linear-gradient(135deg, #5a6fd8 0%, #6a4290 100%)',\r\n                },\r\n              }}\r\n            >\r\n              Create Channel\r\n            </Button>\r\n          </Box>\r\n        </Grid>\r\n\r\n        {channels.length === 0 ? (\r\n          <Grid item xs={12}>\r\n            <Card sx={{ textAlign: 'center', py: 6 }}>\r\n              <YouTube sx={{ fontSize: 60, color: 'text.secondary', mb: 2 }} />\r\n              <Typography variant=\"h6\" gutterBottom>\r\n                No channels yet\r\n              </Typography>\r\n              <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 3 }}>\r\n                Create your first channel to start generating videos\r\n              </Typography>\r\n              <Button\r\n                variant=\"contained\"\r\n                startIcon={<Add />}\r\n                onClick={() => navigate('/channels/create')}\r\n                sx={{\r\n                  background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n                  '&:hover': {\r\n                    background: 'linear-gradient(135deg, #5a6fd8 0%, #6a4290 100%)',\r\n                  },\r\n                }}\r\n              >\r\n                Create Your First Channel\r\n              </Button>\r\n            </Card>\r\n          </Grid>\r\n        ) : (\r\n          channels.map((channel) => (\r\n            <Grid item xs={12} md={6} lg={4} key={channel.id}>\r\n              <Card\r\n                sx={{\r\n                  height: '100%',\r\n                  display: 'flex',\r\n                  flexDirection: 'column',\r\n                  position: 'relative',\r\n                  transition: 'transform 0.2s, box-shadow 0.2s',\r\n                  '&:hover': {\r\n                    transform: 'translateY(-4px)',\r\n                    boxShadow: 4,\r\n                  },\r\n                }}\r\n              >\r\n                <CardContent sx={{ flexGrow: 1 }}>\r\n                  <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>\r\n                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                      <Avatar\r\n                        sx={{\r\n                          bgcolor: getCategoryColor(channel.category),\r\n                          width: 40,\r\n                          height: 40,\r\n                        }}\r\n                      >\r\n                        <YouTube />\r\n                      </Avatar>\r\n                      <Box>\r\n                        <Typography variant=\"h6\" component=\"div\">\r\n                          {channel.name}\r\n                        </Typography>\r\n                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\r\n                          {channel.is_verified ? (\r\n                            <CheckCircle sx={{ fontSize: 16, color: 'success.main' }} />\r\n                          ) : (\r\n                            <Warning sx={{ fontSize: 16, color: 'warning.main' }} />\r\n                          )}\r\n                          <Typography variant=\"caption\" color=\"text.secondary\">\r\n                            {channel.is_verified ? 'Connected' : 'Not connected'}\r\n                          </Typography>\r\n                        </Box>\r\n                      </Box>\r\n                    </Box>\r\n                    <IconButton\r\n                      size=\"small\"\r\n                      onClick={(e) => handleMenuClick(e, channel)}\r\n                    >\r\n                      <MoreVert />\r\n                    </IconButton>\r\n                  </Box>\r\n\r\n                  <Typography\r\n                    variant=\"body2\"\r\n                    color=\"text.secondary\"\r\n                    sx={{ mb: 2, minHeight: 40 }}\r\n                  >\r\n                    {channel.description || 'No description provided'}\r\n                  </Typography>\r\n\r\n                  <Box sx={{ display: 'flex', gap: 1, mb: 2, flexWrap: 'wrap' }}>\r\n                    <Chip\r\n                      label={channel.category}\r\n                      size=\"small\"\r\n                      sx={{\r\n                        bgcolor: getCategoryColor(channel.category),\r\n                        color: 'white',\r\n                      }}\r\n                    />\r\n                    <Chip\r\n                      label={channel.upload_schedule}\r\n                      size=\"small\"\r\n                      variant=\"outlined\"\r\n                    />\r\n                    <Chip\r\n                      label={channel.language.toUpperCase()}\r\n                      size=\"small\"\r\n                      variant=\"outlined\"\r\n                    />\r\n                  </Box>\r\n\r\n                  <Grid container spacing={2}>\r\n                    <Grid item xs={6}>\r\n                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\r\n                        <VideoLibrary sx={{ fontSize: 18, color: 'text.secondary' }} />\r\n                        <Typography variant=\"body2\" color=\"text.secondary\">\r\n                          {formatNumber(channel.total_videos)} videos\r\n                        </Typography>\r\n                      </Box>\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\r\n                        <Visibility sx={{ fontSize: 18, color: 'text.secondary' }} />\r\n                        <Typography variant=\"body2\" color=\"text.secondary\">\r\n                          {formatNumber(channel.total_views)} views\r\n                        </Typography>\r\n                      </Box>\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\r\n                        <TrendingUp sx={{ fontSize: 18, color: 'text.secondary' }} />\r\n                        <Typography variant=\"body2\" color=\"text.secondary\">\r\n                          {formatNumber(channel.subscriber_count || 0)} subs\r\n                        </Typography>\r\n                      </Box>\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\r\n                        <MonetizationOn sx={{ fontSize: 18, color: 'text.secondary' }} />\r\n                        <Typography variant=\"body2\" color=\"text.secondary\">\r\n                          {formatCurrency(channel.total_revenue)}\r\n                        </Typography>\r\n                      </Box>\r\n                    </Grid>\r\n                  </Grid>\r\n                </CardContent>\r\n\r\n                <CardActions sx={{ justifyContent: 'space-between', px: 2, pb: 2 }}>\r\n                  <Button\r\n                    size=\"small\"\r\n                    startIcon={<Analytics />}\r\n                    onClick={() => navigate(`/channels/${channel.id}/analytics`)}\r\n                  >\r\n                    Analytics\r\n                  </Button>\r\n                  <Button\r\n                    size=\"small\"\r\n                    variant=\"contained\"\r\n                    onClick={() => navigate(`/channels/${channel.id}`)}\r\n                    sx={{\r\n                      background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n                      '&:hover': {\r\n                        background: 'linear-gradient(135deg, #5a6fd8 0%, #6a4290 100%)',\r\n                      },\r\n                    }}\r\n                  >\r\n                    Manage\r\n                  </Button>\r\n                </CardActions>\r\n              </Card>\r\n            </Grid>\r\n          ))\r\n        )}\r\n      </Grid>\r\n\r\n      {/* Action Menu */}\r\n      <Menu\r\n        anchorEl={anchorEl}\r\n        open={Boolean(anchorEl)}\r\n        onClose={handleMenuClose}\r\n      >\r\n        <MenuItem onClick={handleEdit}>\r\n          <Edit sx={{ mr: 1, fontSize: 20 }} />\r\n          Edit Channel\r\n        </MenuItem>\r\n        <MenuItem onClick={handleViewAnalytics}>\r\n          <Analytics sx={{ mr: 1, fontSize: 20 }} />\r\n          View Analytics\r\n        </MenuItem>\r\n        {selectedChannel && !selectedChannel.is_verified && (\r\n          <MenuItem onClick={handleConnectYouTube}>\r\n            <LinkIcon sx={{ mr: 1, fontSize: 20 }} />\r\n            Connect YouTube\r\n          </MenuItem>\r\n        )}\r\n        <MenuItem onClick={handleDelete} sx={{ color: 'error.main' }}>\r\n          <Delete sx={{ mr: 1, fontSize: 20 }} />\r\n          Delete Channel\r\n        </MenuItem>\r\n      </Menu>\r\n\r\n      {/* Delete Confirmation Dialog */}\r\n      <Dialog\r\n        open={deleteDialogOpen}\r\n        onClose={() => setDeleteDialogOpen(false)}\r\n      >\r\n        <DialogTitle>Delete Channel</DialogTitle>\r\n        <DialogContent>\r\n          <Typography>\r\n            Are you sure you want to delete \"{selectedChannel?.name}\"? This action cannot be undone.\r\n          </Typography>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setDeleteDialogOpen(false)}>Cancel</Button>\r\n          <Button onClick={confirmDelete} color=\"error\" variant=\"contained\">\r\n            Delete\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Edit Dialog */}\r\n      <Dialog\r\n        open={editDialogOpen}\r\n        onClose={() => setEditDialogOpen(false)}\r\n        maxWidth=\"sm\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle>Edit Channel</DialogTitle>\r\n        <DialogContent>\r\n          <Box sx={{ pt: 2, display: 'flex', flexDirection: 'column', gap: 2 }}>\r\n            <TextField\r\n              label=\"Channel Name\"\r\n              fullWidth\r\n              value={editForm.name || ''}\r\n              onChange={(e) => setEditForm({ ...editForm, name: e.target.value })}\r\n            />\r\n            <TextField\r\n              label=\"Description\"\r\n              fullWidth\r\n              multiline\r\n              rows={3}\r\n              value={editForm.description || ''}\r\n              onChange={(e) => setEditForm({ ...editForm, description: e.target.value })}\r\n            />\r\n            <FormControl fullWidth>\r\n              <InputLabel>Upload Schedule</InputLabel>\r\n              <Select\r\n                value={editForm.upload_schedule || ''}\r\n                label=\"Upload Schedule\"\r\n                onChange={(e: SelectChangeEvent) => \r\n                  setEditForm({ ...editForm, upload_schedule: e.target.value })\r\n                }\r\n              >\r\n                <MenuItem value=\"daily\">Daily</MenuItem>\r\n                <MenuItem value=\"weekly\">Weekly</MenuItem>\r\n                <MenuItem value=\"biweekly\">Bi-weekly</MenuItem>\r\n                <MenuItem value=\"monthly\">Monthly</MenuItem>\r\n                <MenuItem value=\"custom\">Custom</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </Box>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setEditDialogOpen(false)}>Cancel</Button>\r\n          <Button onClick={handleEditSubmit} variant=\"contained\">\r\n            Save Changes\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </>\r\n  );\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Channels\\ChannelTemplates.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CardMedia' is defined but never used.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Accordion' is defined but never used.","line":25,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AccordionSummary' is defined but never used.","line":26,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AccordionDetails' is defined but never used.","line":27,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'List' is defined but never used.","line":28,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ListItem' is defined but never used.","line":29,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ListItemIcon' is defined but never used.","line":30,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ListItemText' is defined but never used.","line":31,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ListItemSecondaryAction' is defined but never used.","line":32,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Paper' is defined but never used.","line":34,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Tooltip' is defined but never used.","line":38,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Badge' is defined but never used.","line":39,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ExpandMore' is defined but never used.","line":43,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":43,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Label' is defined but never used.","line":52,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":52,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Visibility' is defined but never used.","line":54,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":54,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Description' is defined but never used.","line":58,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":58,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Language' is defined but never used.","line":59,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":59,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Public' is defined but never used.","line":60,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":60,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Lock' is defined but never used.","line":61,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":61,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CloudUpload' is defined but never used.","line":62,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":62,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Warning' is defined but never used.","line":64,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":64,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Share' is defined but never used.","line":65,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":65,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'GetApp' is defined but never used.","line":66,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":66,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TabPanel' is assigned a value but never used.","line":132,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":132,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":583,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":583,"endColumn":44}],"suppressedMessages":[],"errorCount":25,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport {\n  Box,\n  Grid,\n  Card,\n  CardContent,\n  CardActions,\n  CardMedia,\n  Typography,\n  Button,\n  IconButton,\n  Chip,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Switch,\n  FormControlLabel,\n  FormGroup,\n  Accordion,\n  AccordionSummary,\n  AccordionDetails,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  ListItemSecondaryAction,\n  Avatar,\n  Paper,\n  Tabs,\n  Tab,\n  Alert,\n  Tooltip,\n  Badge,\n  Divider,\n} from '@mui/material';\nimport {\n  ExpandMore,\n  Add,\n  Edit,\n  Delete,\n  ContentCopy,\n  Save,\n  Star,\n  StarBorder,\n  Category,\n  Label,\n  Schedule,\n  Visibility,\n  MonetizationOn,\n  Settings,\n  VideoLibrary,\n  Description,\n  Language,\n  Public,\n  Lock,\n  CloudUpload,\n  CheckCircle,\n  Warning,\n  Share,\n  GetApp,\n  Upload,\n} from '@mui/icons-material';\n\ninterface Template {\n  id: string;\n  name: string;\n  description: string;\n  type: 'channel' | 'video' | 'scheduling' | 'monetization';\n  category: string;\n  thumbnail?: string;\n  isFavorite: boolean;\n  isDefault: boolean;\n  usage: number;\n  lastUsed?: Date;\n  config: {\n    // Channel Template Config\n    channelSettings?: {\n      category: string;\n      tags: string[];\n      description: string;\n      keywords: string[];\n      country: string;\n      language: string;\n    };\n    // Video Template Config\n    videoSettings?: {\n      title: string;\n      description: string;\n      tags: string[];\n      category: string;\n      visibility: 'public' | 'unlisted' | 'private';\n      thumbnail: string;\n      endScreen: boolean;\n      cards: boolean;\n      comments: boolean;\n      likes: boolean;\n    };\n    // Scheduling Template Config\n    schedulingSettings?: {\n      publishTime: string;\n      timezone: string;\n      frequency: 'daily' | 'weekly' | 'custom';\n      daysOfWeek: number[];\n      maxPerDay: number;\n      spreadOverDay: boolean;\n    };\n    // Monetization Template Config\n    monetizationSettings?: {\n      enabled: boolean;\n      midrollAds: boolean;\n      productPlacement: boolean;\n      paidPromotion: boolean;\n      merchShelf: boolean;\n      channelMemberships: boolean;\n      superChat: boolean;\n    };\n  };\n}\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: number;\n  value: number;\n}\n\nconst TabPanel: React.FC<TabPanelProps> = ({ children, value, index }) => {\n  return (\n    <div hidden={value !== index}>\n      {value === index && <Box sx={{ py: 2 }}>{children}</Box>}\n    </div>\n  );\n};\n\nexport const ChannelTemplates: React.FC = () => {\n  const [templates, setTemplates] = useState<Template[]>([\n    {\n      id: '1',\n      name: 'Tech Channel Starter',\n      description: 'Perfect template for technology-focused channels',\n      type: 'channel',\n      category: 'Technology',\n      isFavorite: true,\n      isDefault: true,\n      usage: 156,\n      lastUsed: new Date(),\n      config: {\n        channelSettings: {\n          category: 'Science & Technology',\n          tags: ['tech', 'technology', 'innovation', 'gadgets', 'AI'],\n          description: 'Exploring the latest in technology and innovation',\n          keywords: ['technology', 'artificial intelligence', 'gadgets'],\n          country: 'US',\n          language: 'en',\n        },\n      },\n    },\n    {\n      id: '2',\n      name: 'Daily Upload Schedule',\n      description: 'Optimized schedule for daily content creators',\n      type: 'scheduling',\n      category: 'Scheduling',\n      isFavorite: false,\n      isDefault: false,\n      usage: 89,\n      config: {\n        schedulingSettings: {\n          publishTime: '14:00',\n          timezone: 'America/New_York',\n          frequency: 'daily',\n          daysOfWeek: [1, 2, 3, 4, 5],\n          maxPerDay: 2,\n          spreadOverDay: true,\n        },\n      },\n    },\n    {\n      id: '3',\n      name: 'Tutorial Video Template',\n      description: 'Structured template for educational content',\n      type: 'video',\n      category: 'Education',\n      isFavorite: true,\n      isDefault: false,\n      usage: 234,\n      config: {\n        videoSettings: {\n          title: '[Tutorial] {topic} - Complete Guide',\n          description: 'In this tutorial, you will learn...',\n          tags: ['tutorial', 'how to', 'guide', 'education'],\n          category: 'Education',\n          visibility: 'public',\n          thumbnail: 'tutorial_thumb.jpg',\n          endScreen: true,\n          cards: true,\n          comments: true,\n          likes: true,\n        },\n      },\n    },\n    {\n      id: '4',\n      name: 'Full Monetization',\n      description: 'Enable all monetization features',\n      type: 'monetization',\n      category: 'Revenue',\n      isFavorite: false,\n      isDefault: false,\n      usage: 67,\n      config: {\n        monetizationSettings: {\n          enabled: true,\n          midrollAds: true,\n          productPlacement: false,\n          paidPromotion: false,\n          merchShelf: true,\n          channelMemberships: true,\n          superChat: true,\n        },\n      },\n    },\n  ]);\n\n  const [selectedTemplate, setSelectedTemplate] = useState<Template | null>(null);\n  const [editDialog, setEditDialog] = useState(false);\n  const [createDialog, setCreateDialog] = useState(false);\n  const [tabValue, setTabValue] = useState(0);\n  const [filter, setFilter] = useState('all');\n\n  const templateCategories = [\n    { value: 'all', label: 'All Templates' },\n    { value: 'channel', label: 'Channel Setup' },\n    { value: 'video', label: 'Video Creation' },\n    { value: 'scheduling', label: 'Scheduling' },\n    { value: 'monetization', label: 'Monetization' },\n  ];\n\n  const handleApplyTemplate = (template: Template) => {\n    // Apply template logic\n    console.log('Applying template:', template);\n  };\n\n  const handleToggleFavorite = (templateId: string) => {\n    setTemplates(prev => prev.map(t =>\n      t.id === templateId ? { ...t, isFavorite: !t.isFavorite } : t\n    ));\n  };\n\n  const handleDuplicateTemplate = (template: Template) => {\n    const newTemplate: Template = {\n      ...template,\n      id: `template-${Date.now()}`,\n      name: `${template.name} (Copy)`,\n      isDefault: false,\n      usage: 0,\n    };\n    setTemplates(prev => [...prev, newTemplate]);\n  };\n\n  const handleDeleteTemplate = (templateId: string) => {\n    setTemplates(prev => prev.filter(t => t.id !== templateId));\n  };\n\n  const getTemplateIcon = (type: string) => {\n    switch (type) {\n      case 'channel': return <Settings />;\n      case 'video': return <VideoLibrary />;\n      case 'scheduling': return <Schedule />;\n      case 'monetization': return <MonetizationOn />;\n      default: return <Category />;\n    }\n  };\n\n  const filteredTemplates = filter === 'all'\n    ? templates\n    : templates.filter(t => t.type === filter);\n\n  const renderTemplateCard = (template: Template) => (\n    <Grid item xs={12} sm={6} md={4} key={template.id}>\n      <Card sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}>\n        <CardContent sx={{ flex: 1 }}>\n          <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>\n            <Avatar sx={{ bgcolor: 'primary.main' }}>\n              {getTemplateIcon(template.type)}\n            </Avatar>\n            <IconButton\n              onClick={() => handleToggleFavorite(template.id)}\n              size=\"small\"\n            >\n              {template.isFavorite ? <Star color=\"warning\" /> : <StarBorder />}\n            </IconButton>\n          </Box>\n\n          <Typography variant=\"h6\" gutterBottom>\n            {template.name}\n          </Typography>\n\n          <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n            {template.description}\n          </Typography>\n\n          <Box sx={{ display: 'flex', gap: 1, mt: 2, flexWrap: 'wrap' }}>\n            <Chip\n              label={template.type}\n              size=\"small\"\n              color=\"primary\"\n              variant=\"outlined\"\n            />\n            {template.isDefault && (\n              <Chip label=\"Default\" size=\"small\" color=\"success\" />\n            )}\n            <Chip\n              label={`Used ${template.usage} times`}\n              size=\"small\"\n              variant=\"outlined\"\n            />\n          </Box>\n        </CardContent>\n\n        <CardActions>\n          <Button\n            size=\"small\"\n            startIcon={<CheckCircle />}\n            onClick={() => handleApplyTemplate(template)}\n          >\n            Apply\n          </Button>\n          <Button\n            size=\"small\"\n            startIcon={<Edit />}\n            onClick={() => {\n              setSelectedTemplate(template);\n              setEditDialog(true);\n            }}\n          >\n            Edit\n          </Button>\n          <IconButton\n            size=\"small\"\n            onClick={() => handleDuplicateTemplate(template)}\n          >\n            <ContentCopy fontSize=\"small\" />\n          </IconButton>\n          {!template.isDefault && (\n            <IconButton\n              size=\"small\"\n              onClick={() => handleDeleteTemplate(template.id)}\n            >\n              <Delete fontSize=\"small\" />\n            </IconButton>\n          )}\n        </CardActions>\n      </Card>\n    </Grid>\n  );\n\n  const renderTemplateForm = () => (\n    <Box>\n      <TextField\n        fullWidth\n        label=\"Template Name\"\n        value={selectedTemplate?.name || ''}\n        sx={{ mb: 2 }}\n      />\n      \n      <TextField\n        fullWidth\n        multiline\n        rows={3}\n        label=\"Description\"\n        value={selectedTemplate?.description || ''}\n        sx={{ mb: 2 }}\n      />\n\n      <FormControl fullWidth sx={{ mb: 2 }}>\n        <InputLabel>Template Type</InputLabel>\n        <Select value={selectedTemplate?.type || 'channel'}>\n          <MenuItem value=\"channel\">Channel Setup</MenuItem>\n          <MenuItem value=\"video\">Video Creation</MenuItem>\n          <MenuItem value=\"scheduling\">Scheduling</MenuItem>\n          <MenuItem value=\"monetization\">Monetization</MenuItem>\n        </Select>\n      </FormControl>\n\n      <Divider sx={{ my: 3 }} />\n\n      {/* Template-specific settings */}\n      {selectedTemplate?.type === 'channel' && (\n        <Box>\n          <Typography variant=\"subtitle1\" gutterBottom>\n            Channel Settings\n          </Typography>\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <FormControl fullWidth>\n                <InputLabel>Category</InputLabel>\n                <Select value={selectedTemplate?.config.channelSettings?.category || ''}>\n                  <MenuItem value=\"Science & Technology\">Science & Technology</MenuItem>\n                  <MenuItem value=\"Education\">Education</MenuItem>\n                  <MenuItem value=\"Entertainment\">Entertainment</MenuItem>\n                  <MenuItem value=\"Gaming\">Gaming</MenuItem>\n                </Select>\n              </FormControl>\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                fullWidth\n                label=\"Tags (comma separated)\"\n                value={selectedTemplate?.config.channelSettings?.tags.join(', ') || ''}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                fullWidth\n                multiline\n                rows={3}\n                label=\"Channel Description\"\n                value={selectedTemplate?.config.channelSettings?.description || ''}\n              />\n            </Grid>\n          </Grid>\n        </Box>\n      )}\n\n      {selectedTemplate?.type === 'video' && (\n        <Box>\n          <Typography variant=\"subtitle1\" gutterBottom>\n            Video Settings\n          </Typography>\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <TextField\n                fullWidth\n                label=\"Title Template\"\n                value={selectedTemplate?.config.videoSettings?.title || ''}\n                helperText=\"Use {topic} as a placeholder\"\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <FormControl fullWidth>\n                <InputLabel>Default Visibility</InputLabel>\n                <Select value={selectedTemplate?.config.videoSettings?.visibility || 'public'}>\n                  <MenuItem value=\"public\">Public</MenuItem>\n                  <MenuItem value=\"unlisted\">Unlisted</MenuItem>\n                  <MenuItem value=\"private\">Private</MenuItem>\n                </Select>\n              </FormControl>\n            </Grid>\n            <Grid item xs={12}>\n              <FormGroup>\n                <FormControlLabel\n                  control={<Switch checked={selectedTemplate?.config.videoSettings?.comments || false} />}\n                  label=\"Enable Comments\"\n                />\n                <FormControlLabel\n                  control={<Switch checked={selectedTemplate?.config.videoSettings?.likes || false} />}\n                  label=\"Enable Likes\"\n                />\n                <FormControlLabel\n                  control={<Switch checked={selectedTemplate?.config.videoSettings?.endScreen || false} />}\n                  label=\"Add End Screen\"\n                />\n              </FormGroup>\n            </Grid>\n          </Grid>\n        </Box>\n      )}\n\n      {selectedTemplate?.type === 'scheduling' && (\n        <Box>\n          <Typography variant=\"subtitle1\" gutterBottom>\n            Scheduling Settings\n          </Typography>\n          <Grid container spacing={2}>\n            <Grid item xs={6}>\n              <TextField\n                fullWidth\n                label=\"Publish Time\"\n                type=\"time\"\n                value={selectedTemplate?.config.schedulingSettings?.publishTime || '14:00'}\n                InputLabelProps={{ shrink: true }}\n              />\n            </Grid>\n            <Grid item xs={6}>\n              <FormControl fullWidth>\n                <InputLabel>Frequency</InputLabel>\n                <Select value={selectedTemplate?.config.schedulingSettings?.frequency || 'daily'}>\n                  <MenuItem value=\"daily\">Daily</MenuItem>\n                  <MenuItem value=\"weekly\">Weekly</MenuItem>\n                  <MenuItem value=\"custom\">Custom</MenuItem>\n                </Select>\n              </FormControl>\n            </Grid>\n            <Grid item xs={6}>\n              <TextField\n                fullWidth\n                label=\"Max Videos Per Day\"\n                type=\"number\"\n                value={selectedTemplate?.config.schedulingSettings?.maxPerDay || 2}\n              />\n            </Grid>\n            <Grid item xs={6}>\n              <FormControlLabel\n                control={<Switch checked={selectedTemplate?.config.schedulingSettings?.spreadOverDay || false} />}\n                label=\"Spread Over Day\"\n              />\n            </Grid>\n          </Grid>\n        </Box>\n      )}\n\n      {selectedTemplate?.type === 'monetization' && (\n        <Box>\n          <Typography variant=\"subtitle1\" gutterBottom>\n            Monetization Settings\n          </Typography>\n          <FormGroup>\n            <FormControlLabel\n              control={<Switch checked={selectedTemplate?.config.monetizationSettings?.enabled || false} />}\n              label=\"Enable Monetization\"\n            />\n            <FormControlLabel\n              control={<Switch checked={selectedTemplate?.config.monetizationSettings?.midrollAds || false} />}\n              label=\"Mid-roll Ads\"\n            />\n            <FormControlLabel\n              control={<Switch checked={selectedTemplate?.config.monetizationSettings?.merchShelf || false} />}\n              label=\"Merchandise Shelf\"\n            />\n            <FormControlLabel\n              control={<Switch checked={selectedTemplate?.config.monetizationSettings?.channelMemberships || false} />}\n              label=\"Channel Memberships\"\n            />\n            <FormControlLabel\n              control={<Switch checked={selectedTemplate?.config.monetizationSettings?.superChat || false} />}\n              label=\"Super Chat & Super Stickers\"\n            />\n          </FormGroup>\n        </Box>\n      )}\n    </Box>\n  );\n\n  return (\n    <Box>\n      {/* Header */}\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\n        <Typography variant=\"h5\" fontWeight=\"bold\">\n          Channel Templates\n        </Typography>\n        <Box sx={{ display: 'flex', gap: 2 }}>\n          <Button\n            variant=\"outlined\"\n            startIcon={<Upload />}\n          >\n            Import\n          </Button>\n          <Button\n            variant=\"contained\"\n            startIcon={<Add />}\n            onClick={() => setCreateDialog(true)}\n          >\n            Create Template\n          </Button>\n        </Box>\n      </Box>\n\n      {/* Filters */}\n      <Tabs\n        value={tabValue}\n        onChange={(e, newValue) => {\n          setTabValue(newValue);\n          setFilter(templateCategories[newValue].value);\n        }}\n        sx={{ mb: 3 }}\n      >\n        {templateCategories.map((cat, index) => (\n          <Tab key={cat.value} label={cat.label} />\n        ))}\n      </Tabs>\n\n      {/* Templates Grid */}\n      <Grid container spacing={3}>\n        {filteredTemplates.map(renderTemplateCard)}\n      </Grid>\n\n      {/* Edit Template Dialog */}\n      <Dialog\n        open={editDialog}\n        onClose={() => setEditDialog(false)}\n        maxWidth=\"md\"\n        fullWidth\n      >\n        <DialogTitle>\n          Edit Template\n        </DialogTitle>\n        <DialogContent>\n          {renderTemplateForm()}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setEditDialog(false)}>\n            Cancel\n          </Button>\n          <Button variant=\"contained\" startIcon={<Save />}>\n            Save Changes\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      {/* Create Template Dialog */}\n      <Dialog\n        open={createDialog}\n        onClose={() => setCreateDialog(false)}\n        maxWidth=\"md\"\n        fullWidth\n      >\n        <DialogTitle>\n          Create New Template\n        </DialogTitle>\n        <DialogContent>\n          <Alert severity=\"info\" sx={{ mb: 2 }}>\n            Templates help you standardize settings across multiple channels and videos.\n          </Alert>\n          {renderTemplateForm()}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setCreateDialog(false)}>\n            Cancel\n          </Button>\n          <Button variant=\"contained\" startIcon={<Add />}>\n            Create Template\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Charts\\AdvancedCharts.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useMemo' is defined but never used.","line":1,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Sankey' is defined but never used.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Layer' is defined but never used.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Rectangle' is defined but never used.","line":22,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'LabelList' is defined but never used.","line":30,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Fullscreen' is defined but never used.","line":40,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":40},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'format' is defined but never used.","line":41,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":16},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":46,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[749,752],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[749,752],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'cellRenderCallback' is defined but never used.","line":65,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":65,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'theme' is assigned a value but never used.","line":224,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":224,"endColumn":14},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":236,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":236,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5887,5890],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5887,5890],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":381,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":381,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9553,9556],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9553,9556],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useMemo } from 'react';\nimport {\n  Box,\n  Card,\n  CardContent,\n  Typography,\n  useTheme,\n  Paper,\n  Chip,\n  IconButton,\n  Menu,\n  MenuItem,\n  Tooltip,\n} from '@mui/material';\nimport {\n  ResponsiveContainer,\n  Treemap,\n  Tooltip as RechartsTooltip,\n  Cell,\n  Sankey,\n  Layer,\n  Rectangle,\n  Radar,\n  RadarChart,\n  PolarGrid,\n  PolarAngleAxis,\n  PolarRadiusAxis,\n  FunnelChart,\n  Funnel,\n  LabelList,\n  ScatterChart,\n  Scatter,\n  XAxis,\n  YAxis,\n  ZAxis,\n  CartesianGrid,\n  Legend,\n} from 'recharts';\nimport { HeatMapGrid } from 'react-grid-heatmap';\nimport { MoreVert, Download, Fullscreen, Refresh } from '@mui/icons-material';\nimport { format } from 'date-fns';\n\ninterface ChartProps {\n  title: string;\n  subtitle?: string;\n  data: any[];\n  height?: number;\n  onRefresh?: () => void;\n  onExport?: () => void;\n  onFullscreen?: () => void;\n}\n\n// Heatmap Chart Component\nexport const HeatmapChart: React.FC<ChartProps & {\n  xLabels: string[];\n  yLabels: string[];\n  cellRenderCallback?: (x: number, y: number, value: number) => void;\n}> = ({\n  title,\n  subtitle,\n  data,\n  xLabels,\n  yLabels,\n  height = 400,\n  cellRenderCallback,\n  onRefresh,\n  onExport,\n}) => {\n  const theme = useTheme();\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n\n  return (\n    <Card>\n      <CardContent>\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>\n          <Box>\n            <Typography variant=\"h6\" fontWeight=\"bold\">\n              {title}\n            </Typography>\n            {subtitle && (\n              <Typography variant=\"caption\" color=\"text.secondary\">\n                {subtitle}\n              </Typography>\n            )}\n          </Box>\n          <IconButton size=\"small\" onClick={(e) => setAnchorEl(e.currentTarget)}>\n            <MoreVert />\n          </IconButton>\n        </Box>\n        \n        <Box sx={{ height, overflow: 'auto' }}>\n          <HeatMapGrid\n            data={data}\n            xLabels={xLabels}\n            yLabels={yLabels}\n            cellRender={(x, y, value) => (\n              <div title={`${xLabels[x]}, ${yLabels[y]}: ${value}`}>\n                {value}\n              </div>\n            )}\n            xLabelsStyle={() => ({\n              fontSize: '0.75rem',\n              color: theme.palette.text.secondary,\n            })}\n            yLabelsStyle={() => ({\n              fontSize: '0.75rem',\n              color: theme.palette.text.secondary,\n            })}\n            cellStyle={(x, y, ratio) => ({\n              background: `rgba(33, 150, 243, ${ratio})`,\n              color: ratio > 0.5 ? '#fff' : theme.palette.text.primary,\n              fontSize: '0.7rem',\n              border: '1px solid rgba(0,0,0,0.1)',\n            })}\n            cellHeight=\"30px\"\n            square\n          />\n        </Box>\n        \n        <Menu\n          anchorEl={anchorEl}\n          open={Boolean(anchorEl)}\n          onClose={() => setAnchorEl(null)}\n        >\n          <MenuItem onClick={onRefresh}>\n            <Refresh fontSize=\"small\" sx={{ mr: 1 }} /> Refresh\n          </MenuItem>\n          <MenuItem onClick={onExport}>\n            <Download fontSize=\"small\" sx={{ mr: 1 }} /> Export\n          </MenuItem>\n        </Menu>\n      </CardContent>\n    </Card>\n  );\n};\n\n// Funnel Chart Component\nexport const FunnelVisualization: React.FC<ChartProps> = ({\n  title,\n  subtitle,\n  data,\n  height = 400,\n  onRefresh,\n}) => {\n  const theme = useTheme();\n  const COLORS = [\n    theme.palette.primary.main,\n    theme.palette.secondary.main,\n    theme.palette.warning.main,\n    theme.palette.error.main,\n    theme.palette.success.main,\n  ];\n\n  return (\n    <Card>\n      <CardContent>\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>\n          <Box>\n            <Typography variant=\"h6\" fontWeight=\"bold\">\n              {title}\n            </Typography>\n            {subtitle && (\n              <Typography variant=\"caption\" color=\"text.secondary\">\n                {subtitle}\n              </Typography>\n            )}\n          </Box>\n          <Tooltip title=\"Refresh\">\n            <IconButton size=\"small\" onClick={onRefresh}>\n              <Refresh />\n            </IconButton>\n          </Tooltip>\n        </Box>\n        \n        <ResponsiveContainer width=\"100%\" height={height}>\n          <FunnelChart>\n            <RechartsTooltip \n              contentStyle={{\n                backgroundColor: theme.palette.background.paper,\n                border: `1px solid ${theme.palette.divider}`,\n                borderRadius: 4,\n              }}\n            />\n            <Funnel\n              dataKey=\"value\"\n              data={data}\n              isAnimationActive\n              labelLine={false}\n              label={(entry) => `${entry.name}: ${entry.value} (${entry.percent}%)`}\n            >\n              {data.map((entry, index) => (\n                <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n              ))}\n            </Funnel>\n          </FunnelChart>\n        </ResponsiveContainer>\n        \n        {/* Legend */}\n        <Box sx={{ mt: 2, display: 'flex', flexWrap: 'wrap', gap: 1 }}>\n          {data.map((item, index) => (\n            <Chip\n              key={item.name}\n              label={`${item.name}: ${item.conversion}%`}\n              size=\"small\"\n              sx={{\n                backgroundColor: COLORS[index % COLORS.length],\n                color: '#fff',\n              }}\n            />\n          ))}\n        </Box>\n      </CardContent>\n    </Card>\n  );\n};\n\n// Treemap Chart Component\nexport const TreemapVisualization: React.FC<ChartProps> = ({\n  title,\n  subtitle,\n  data,\n  height = 400,\n}) => {\n  const theme = useTheme();\n  const COLORS = [\n    '#8889DD',\n    '#9597E4',\n    '#8DC77B',\n    '#A5D297',\n    '#E2CF45',\n    '#F8C12D',\n    '#F2A93B',\n    '#E68B3C',\n  ];\n\n  const CustomizedContent = (props: any) => {\n    const { root, depth, x, y, width, height, index, colors, name, value } = props;\n\n    return (\n      <g>\n        <rect\n          x={x}\n          y={y}\n          width={width}\n          height={height}\n          style={{\n            fill: depth < 2 ? colors[Math.floor((index / root.children.length) * colors.length)] : 'none',\n            stroke: '#fff',\n            strokeWidth: 2 / (depth + 1e-10),\n            strokeOpacity: 1 / (depth + 1e-10),\n          }}\n        />\n        {depth === 1 && width > 50 && height > 30 && (\n          <text\n            x={x + width / 2}\n            y={y + height / 2}\n            textAnchor=\"middle\"\n            fill=\"#fff\"\n            fontSize={12}\n          >\n            {name}\n          </text>\n        )}\n        {depth === 1 && width > 50 && height > 40 && (\n          <text\n            x={x + width / 2}\n            y={y + height / 2 + 15}\n            textAnchor=\"middle\"\n            fill=\"#fff\"\n            fontSize={10}\n          >\n            {value}\n          </text>\n        )}\n      </g>\n    );\n  };\n\n  return (\n    <Card>\n      <CardContent>\n        <Typography variant=\"h6\" fontWeight=\"bold\" gutterBottom>\n          {title}\n        </Typography>\n        {subtitle && (\n          <Typography variant=\"caption\" color=\"text.secondary\" display=\"block\" gutterBottom>\n            {subtitle}\n          </Typography>\n        )}\n        \n        <ResponsiveContainer width=\"100%\" height={height}>\n          <Treemap\n            data={data}\n            dataKey=\"size\"\n            ratio={4 / 3}\n            stroke=\"#fff\"\n            fill=\"#8884d8\"\n            content={<CustomizedContent colors={COLORS} />}\n          />\n        </ResponsiveContainer>\n      </CardContent>\n    </Card>\n  );\n};\n\n// Radar Chart Component\nexport const RadarVisualization: React.FC<ChartProps & {\n  metrics: string[];\n}> = ({\n  title,\n  subtitle,\n  data,\n  metrics,\n  height = 400,\n}) => {\n  const theme = useTheme();\n\n  return (\n    <Card>\n      <CardContent>\n        <Typography variant=\"h6\" fontWeight=\"bold\" gutterBottom>\n          {title}\n        </Typography>\n        {subtitle && (\n          <Typography variant=\"caption\" color=\"text.secondary\" display=\"block\" gutterBottom>\n            {subtitle}\n          </Typography>\n        )}\n        \n        <ResponsiveContainer width=\"100%\" height={height}>\n          <RadarChart data={data}>\n            <PolarGrid \n              gridType=\"polygon\"\n              stroke={theme.palette.divider}\n            />\n            <PolarAngleAxis \n              dataKey=\"metric\"\n              tick={{ fontSize: 12 }}\n              stroke={theme.palette.text.secondary}\n            />\n            <PolarRadiusAxis \n              angle={90}\n              domain={[0, 100]}\n              tick={{ fontSize: 10 }}\n              stroke={theme.palette.text.secondary}\n            />\n            {metrics.map((metric, index) => (\n              <Radar\n                key={metric}\n                name={metric}\n                dataKey={metric}\n                stroke={index === 0 ? theme.palette.primary.main : theme.palette.secondary.main}\n                fill={index === 0 ? theme.palette.primary.main : theme.palette.secondary.main}\n                fillOpacity={0.3}\n              />\n            ))}\n            <Legend />\n          </RadarChart>\n        </ResponsiveContainer>\n      </CardContent>\n    </Card>\n  );\n};\n\n// Scatter Plot with Bubble sizes\nexport const BubbleChart: React.FC<ChartProps & {\n  xKey: string;\n  yKey: string;\n  zKey: string;\n}> = ({\n  title,\n  subtitle,\n  data,\n  xKey,\n  yKey,\n  zKey,\n  height = 400,\n}) => {\n  const theme = useTheme();\n\n  const renderTooltip = (props: any) => {\n    const { active, payload } = props;\n    if (active && payload && payload.length) {\n      const data = payload[0].payload;\n      return (\n        <Paper sx={{ p: 1, backgroundColor: 'background.paper' }}>\n          <Typography variant=\"caption\" display=\"block\">\n            {xKey}: {data[xKey]}\n          </Typography>\n          <Typography variant=\"caption\" display=\"block\">\n            {yKey}: {data[yKey]}\n          </Typography>\n          <Typography variant=\"caption\" display=\"block\">\n            {zKey}: {data[zKey]}\n          </Typography>\n        </Paper>\n      );\n    }\n    return null;\n  };\n\n  return (\n    <Card>\n      <CardContent>\n        <Typography variant=\"h6\" fontWeight=\"bold\" gutterBottom>\n          {title}\n        </Typography>\n        {subtitle && (\n          <Typography variant=\"caption\" color=\"text.secondary\" display=\"block\" gutterBottom>\n            {subtitle}\n          </Typography>\n        )}\n        \n        <ResponsiveContainer width=\"100%\" height={height}>\n          <ScatterChart\n            margin={{ top: 20, right: 20, bottom: 20, left: 20 }}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" stroke={theme.palette.divider} />\n            <XAxis \n              type=\"number\" \n              dataKey={xKey} \n              name={xKey}\n              tick={{ fontSize: 12 }}\n              stroke={theme.palette.text.secondary}\n            />\n            <YAxis \n              type=\"number\" \n              dataKey={yKey} \n              name={yKey}\n              tick={{ fontSize: 12 }}\n              stroke={theme.palette.text.secondary}\n            />\n            <ZAxis \n              type=\"number\" \n              dataKey={zKey} \n              range={[60, 400]} \n              name={zKey}\n            />\n            <RechartsTooltip \n              cursor={{ strokeDasharray: '3 3' }}\n              content={renderTooltip}\n            />\n            <Scatter \n              name=\"Data\" \n              data={data} \n              fill={theme.palette.primary.main}\n              fillOpacity={0.6}\n            />\n          </ScatterChart>\n        </ResponsiveContainer>\n      </CardContent>\n    </Card>\n  );\n};\n\n// Cohort Retention Chart\nexport const CohortChart: React.FC<{\n  title: string;\n  data: { cohort: string; week: number; retention: number }[];\n  height?: number;\n}> = ({ title, data, height = 400 }) => {\n  const theme = useTheme();\n  \n  // Transform data for heatmap\n  const cohorts = [...new Set(data.map(d => d.cohort))];\n  const weeks = [...new Set(data.map(d => d.week))].sort((a, b) => a - b);\n  \n  const heatmapData = weeks.map(week => \n    cohorts.map(cohort => {\n      const item = data.find(d => d.cohort === cohort && d.week === week);\n      return item ? item.retention : 0;\n    })\n  );\n\n  return (\n    <Card>\n      <CardContent>\n        <Typography variant=\"h6\" fontWeight=\"bold\" gutterBottom>\n          {title}\n        </Typography>\n        <Typography variant=\"caption\" color=\"text.secondary\" display=\"block\" gutterBottom>\n          User retention by cohort over time\n        </Typography>\n        \n        <Box sx={{ height, overflow: 'auto' }}>\n          <HeatMapGrid\n            data={heatmapData}\n            xLabels={cohorts}\n            yLabels={weeks.map(w => `Week ${w}`)}\n            cellRender={(x, y, value) => `${value}%`}\n            xLabelsStyle={() => ({\n              fontSize: '0.75rem',\n              color: theme.palette.text.secondary,\n            })}\n            yLabelsStyle={() => ({\n              fontSize: '0.75rem',\n              color: theme.palette.text.secondary,\n            })}\n            cellStyle={(x, y, ratio) => ({\n              background: ratio > 0.7 \n                ? theme.palette.success.main\n                : ratio > 0.4\n                ? theme.palette.warning.main\n                : theme.palette.error.main,\n              color: '#fff',\n              fontSize: '0.7rem',\n              border: '1px solid rgba(255,255,255,0.2)',\n            })}\n            cellHeight=\"35px\"\n            square\n          />\n        </Box>\n        \n        {/* Legend */}\n        <Box sx={{ mt: 2, display: 'flex', gap: 2, justifyContent: 'center' }}>\n          <Chip \n            label=\"High (>70%)\" \n            size=\"small\" \n            sx={{ backgroundColor: theme.palette.success.main, color: '#fff' }}\n          />\n          <Chip \n            label=\"Medium (40-70%)\" \n            size=\"small\" \n            sx={{ backgroundColor: theme.palette.warning.main, color: '#fff' }}\n          />\n          <Chip \n            label=\"Low (<40%)\" \n            size=\"small\" \n            sx={{ backgroundColor: theme.palette.error.main, color: '#fff' }}\n          />\n        </Box>\n      </CardContent>\n    </Card>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Charts\\ChannelPerformanceCharts.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'InfoIcon' is defined but never used.","line":24,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'LineChart' is defined but never used.","line":32,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Line' is defined but never used.","line":33,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'BarChart' is defined but never used.","line":40,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Bar' is defined but never used.","line":41,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'PieChart' is defined but never used.","line":42,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":42,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Pie' is defined but never used.","line":43,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":43,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Cell' is defined but never used.","line":44,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":44,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Legend' is defined but never used.","line":51,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":51,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'comparisonMode' is assigned a value but never used.","line":96,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":96,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setComparisonMode' is assigned a value but never used.","line":96,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":96,"endColumn":43},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'formatDuration' is assigned a value but never used.","line":155,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":155,"endColumn":23},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":165,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":165,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4769,4772],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4769,4772],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":176,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":176,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5102,5105],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5102,5105],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":346,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":346,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11543,11546],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11543,11546],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":388,"column":49,"nodeType":null,"messageId":"unusedVar","endLine":388,"endColumn":54},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":484,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":484,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17038,17041],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17038,17041],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":17,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Channel Performance Charts Component\n * Advanced analytics visualization for individual channel performance\n */\nimport React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Card,\n  CardContent,\n  Typography,\n  Select,\n  MenuItem,\n  FormControl,\n  InputLabel,\n  Grid,\n  Chip,\n  Tooltip,\n  IconButton,\n  CircularProgress,\n  Alert,\n  Button\n} from '@mui/material';\nimport {\n  Info as InfoIcon,\n  Download as DownloadIcon,\n  Share as ShareIcon,\n  Refresh as RefreshIcon,\n  TrendingUp as TrendingUpIcon,\n  TrendingDown as TrendingDownIcon\n} from '@mui/icons-material';\nimport {\n  LineChart,\n  Line,\n  AreaChart,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  ResponsiveContainer,\n  BarChart,\n  Bar,\n  PieChart,\n  Pie,\n  Cell,\n  RadarChart,\n  PolarGrid,\n  PolarAngleAxis,\n  PolarRadiusAxis,\n  Radar,\n  ComposedChart,\n  Legend,\n  Scatter,\n  ScatterChart,\n  ZAxis\n} from 'recharts';\n\ninterface ChannelMetrics {\n  date: string;\n  views: number;\n  subscribers: number;\n  revenue: number;\n  watchTime: number;\n  engagement: number;\n  ctr: number; // Click-through rate\n  avgViewDuration: number;\n  likes: number;\n  comments: number;\n  shares: number;\n}\n\ninterface VideoPerformance {\n  id: string;\n  title: string;\n  views: number;\n  revenue: number;\n  engagement: number;\n  publishedAt: string;\n  category: string;\n}\n\ninterface ChannelPerformanceChartsProps {\n  channelId: string;\n  timeRange: '7d' | '30d' | '90d' | '1y';\n  onTimeRangeChange: (range: '7d' | '30d' | '90d' | '1y') => void;\n}\n\nconst ChannelPerformanceCharts: React.FC<ChannelPerformanceChartsProps> = ({\n  channelId,\n  timeRange,\n  onTimeRangeChange\n}) => {\n  const [loading, setLoading] = useState(true);\n  const [metrics, setMetrics] = useState<ChannelMetrics[]>([]);\n  const [videos, setVideos] = useState<VideoPerformance[]>([]);\n  const [selectedMetric, setSelectedMetric] = useState('views');\n  const [comparisonMode, setComparisonMode] = useState(false);\n\n  // Sample data generation\n  useEffect(() => {\n    setLoading(true);\n    \n    // Generate sample data based on time range\n    const generateSampleData = () => {\n      const days = timeRange === '7d' ? 7 : timeRange === '30d' ? 30 : timeRange === '90d' ? 90 : 365;\n      const data: ChannelMetrics[] = [];\n      \n      for (let i = 0; i < days; i++) {\n        const date = new Date();\n        date.setDate(date.getDate() - (days - i));\n        \n        data.push({\n          date: date.toISOString().split('T')[0],\n          views: Math.floor(Math.random() * 50000) + 10000,\n          subscribers: Math.floor(Math.random() * 1000) + 100,\n          revenue: Math.floor(Math.random() * 500) + 50,\n          watchTime: Math.floor(Math.random() * 10000) + 2000,\n          engagement: Math.random() * 10 + 2,\n          ctr: Math.random() * 5 + 1,\n          avgViewDuration: Math.random() * 300 + 60,\n          likes: Math.floor(Math.random() * 2000) + 100,\n          comments: Math.floor(Math.random() * 500) + 20,\n          shares: Math.floor(Math.random() * 200) + 10\n        });\n      }\n      \n      return data;\n    };\n\n    // Generate sample video data\n    const generateVideoData = (): VideoPerformance[] => {\n      return [\n        { id: '1', title: 'Gaming Tutorial: Advanced Strategies', views: 45000, revenue: 234, engagement: 8.5, publishedAt: '2024-01-08', category: 'Gaming' },\n        { id: '2', title: 'Tech Review: Latest Smartphone', views: 32000, revenue: 189, engagement: 7.2, publishedAt: '2024-01-07', category: 'Tech' },\n        { id: '3', title: 'Cooking Masterclass: Italian Cuisine', views: 28000, revenue: 156, engagement: 9.1, publishedAt: '2024-01-06', category: 'Food' },\n        { id: '4', title: 'Fitness Journey: 30-Day Challenge', views: 52000, revenue: 298, engagement: 8.8, publishedAt: '2024-01-05', category: 'Fitness' },\n        { id: '5', title: 'Travel Vlog: Hidden Gems in Tokyo', views: 38000, revenue: 221, engagement: 7.9, publishedAt: '2024-01-04', category: 'Travel' }\n      ];\n    };\n\n    setTimeout(() => {\n      setMetrics(generateSampleData());\n      setVideos(generateVideoData());\n      setLoading(false);\n    }, 1000);\n  }, [channelId, timeRange]);\n\n  const formatNumber = (num: number) => {\n    if (num >= 1000000) return `${(num / 1000000).toFixed(1)}M`;\n    if (num >= 1000) return `${(num / 1000).toFixed(1)}K`;\n    return num.toString();\n  };\n\n  const formatCurrency = (num: number) => `$${num.toFixed(2)}`;\n\n  const formatDuration = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = Math.floor(seconds % 60);\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  const getMetricColor = (value: number, baseline: number) => {\n    return value >= baseline ? '#10b981' : '#ef4444';\n  };\n\n  const CustomTooltip = ({ active, payload, label }: any) => {\n    if (active && payload && payload.length) {\n      return (\n        <Box sx={{\n          background: 'white',\n          border: '1px solid #e5e7eb',\n          borderRadius: 1,\n          p: 2,\n          boxShadow: 2\n        }}>\n          <Typography variant=\"subtitle2\">{label}</Typography>\n          {payload.map((entry: any, index: number) => (\n            <Typography key={index} sx={{ color: entry.color }}>\n              {`${entry.dataKey}: ${entry.dataKey === 'revenue' ? formatCurrency(entry.value) : formatNumber(entry.value)}`}\n            </Typography>\n          ))}\n        </Box>\n      );\n    }\n    return null;\n  };\n\n  const renderOverviewMetrics = () => {\n    if (loading) return <CircularProgress />;\n\n    const totalViews = metrics.reduce((sum, m) => sum + m.views, 0);\n    const totalRevenue = metrics.reduce((sum, m) => sum + m.revenue, 0);\n    const avgEngagement = metrics.reduce((sum, m) => sum + m.engagement, 0) / metrics.length;\n    const avgCTR = metrics.reduce((sum, m) => sum + m.ctr, 0) / metrics.length;\n\n    return (\n      <Grid container spacing={2} sx={{ mb: 3 }}>\n        {[\n          { label: 'Total Views', value: formatNumber(totalViews), color: '#3b82f6', trend: 12.5 },\n          { label: 'Revenue', value: formatCurrency(totalRevenue), color: '#10b981', trend: 8.3 },\n          { label: 'Avg. Engagement', value: `${avgEngagement.toFixed(1)}%`, color: '#f59e0b', trend: -2.1 },\n          { label: 'Avg. CTR', value: `${avgCTR.toFixed(2)}%`, color: '#8b5cf6', trend: 5.7 }\n        ].map((metric, index) => (\n          <Grid item xs={6} sm={3} key={index}>\n            <Card>\n              <CardContent sx={{ p: 2 }}>\n                <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 1 }}>\n                  <Typography variant=\"caption\" color=\"textSecondary\">\n                    {metric.label}\n                  </Typography>\n                  <Chip\n                    size=\"small\"\n                    icon={metric.trend >= 0 ? <TrendingUpIcon /> : <TrendingDownIcon />}\n                    label={`${metric.trend >= 0 ? '+' : ''}${metric.trend}%`}\n                    color={metric.trend >= 0 ? 'success' : 'error'}\n                    sx={{ height: 20, fontSize: '0.75rem' }}\n                  />\n                </Box>\n                <Typography variant=\"h6\" sx={{ color: metric.color, fontWeight: 'bold' }}>\n                  {metric.value}\n                </Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n        ))}\n      </Grid>\n    );\n  };\n\n  const renderMainPerformanceChart = () => {\n    if (loading) {\n      return (\n        <Box sx={{ display: 'flex', justifyContent: 'center', p: 4 }}>\n          <CircularProgress />\n        </Box>\n      );\n    }\n\n    return (\n      <Card sx={{ mb: 3 }}>\n        <CardContent>\n          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n            <Typography variant=\"h6\">Performance Trends</Typography>\n            <Box sx={{ display: 'flex', gap: 1 }}>\n              <FormControl size=\"small\" sx={{ minWidth: 120 }}>\n                <Select\n                  value={selectedMetric}\n                  onChange={(e) => setSelectedMetric(e.target.value)}\n                >\n                  <MenuItem value=\"views\">Views</MenuItem>\n                  <MenuItem value=\"revenue\">Revenue</MenuItem>\n                  <MenuItem value=\"engagement\">Engagement</MenuItem>\n                  <MenuItem value=\"subscribers\">Subscribers</MenuItem>\n                </Select>\n              </FormControl>\n              <IconButton size=\"small\">\n                <RefreshIcon />\n              </IconButton>\n            </Box>\n          </Box>\n          \n          <ResponsiveContainer width=\"100%\" height={300}>\n            <ComposedChart data={metrics}>\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#f0f0f0\" />\n              <XAxis \n                dataKey=\"date\" \n                stroke=\"#666\"\n                fontSize={12}\n                tickFormatter={(value) => new Date(value).toLocaleDateString(undefined, { month: 'short', day: 'numeric' })}\n              />\n              <YAxis \n                stroke=\"#666\"\n                fontSize={12}\n                tickFormatter={selectedMetric === 'revenue' ? formatCurrency : formatNumber}\n              />\n              <Tooltip content={<CustomTooltip />} />\n              <Area\n                type=\"monotone\"\n                dataKey={selectedMetric}\n                fill=\"#3b82f6\"\n                fillOpacity={0.1}\n                stroke=\"#3b82f6\"\n                strokeWidth={2}\n              />\n            </ComposedChart>\n          </ResponsiveContainer>\n        </CardContent>\n      </Card>\n    );\n  };\n\n  const renderEngagementRadar = () => {\n    if (loading) return <CircularProgress />;\n\n    const radarData = [\n      { subject: 'Views', A: 85, fullMark: 100 },\n      { subject: 'Engagement', A: 92, fullMark: 100 },\n      { subject: 'CTR', A: 78, fullMark: 100 },\n      { subject: 'Watch Time', A: 88, fullMark: 100 },\n      { subject: 'Subscribers', A: 81, fullMark: 100 },\n      { subject: 'Revenue', A: 95, fullMark: 100 }\n    ];\n\n    return (\n      <Card>\n        <CardContent>\n          <Typography variant=\"h6\" gutterBottom>\n            Channel Performance Radar\n          </Typography>\n          <ResponsiveContainer width=\"100%\" height={250}>\n            <RadarChart data={radarData}>\n              <PolarGrid />\n              <PolarAngleAxis dataKey=\"subject\" fontSize={12} />\n              <PolarRadiusAxis angle={90} domain={[0, 100]} fontSize={10} />\n              <Radar\n                name=\"Performance\"\n                dataKey=\"A\"\n                stroke=\"#3b82f6\"\n                fill=\"#3b82f6\"\n                fillOpacity={0.2}\n                strokeWidth={2}\n              />\n            </RadarChart>\n          </ResponsiveContainer>\n        </CardContent>\n      </Card>\n    );\n  };\n\n  const renderVideoPerformanceScatter = () => {\n    if (loading) return <CircularProgress />;\n\n    return (\n      <Card>\n        <CardContent>\n          <Typography variant=\"h6\" gutterBottom>\n            Video Performance Matrix\n          </Typography>\n          <ResponsiveContainer width=\"100%\" height={250}>\n            <ScatterChart data={videos}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"views\" name=\"Views\" tickFormatter={formatNumber} fontSize={12} />\n              <YAxis dataKey=\"revenue\" name=\"Revenue\" tickFormatter={formatCurrency} fontSize={12} />\n              <ZAxis dataKey=\"engagement\" name=\"Engagement\" range={[50, 200]} />\n              <Tooltip \n                cursor={{ strokeDasharray: '3 3' }}\n                formatter={(value: any, name: string) => {\n                  if (name === 'views') return [formatNumber(value), 'Views'];\n                  if (name === 'revenue') return [formatCurrency(value), 'Revenue'];\n                  if (name === 'engagement') return [`${value}%`, 'Engagement'];\n                  return [value, name];\n                }}\n                labelFormatter={() => ''}\n              />\n              <Scatter \n                name=\"Videos\" \n                dataKey=\"revenue\" \n                fill=\"#10b981\"\n                fillOpacity={0.8}\n              />\n            </ScatterChart>\n          </ResponsiveContainer>\n        </CardContent>\n      </Card>\n    );\n  };\n\n  const renderTopVideosTable = () => {\n    if (loading) return <CircularProgress />;\n\n    return (\n      <Card>\n        <CardContent>\n          <Typography variant=\"h6\" gutterBottom>\n            Top Performing Videos\n          </Typography>\n          <Box sx={{ overflowX: 'auto' }}>\n            <table style={{ width: '100%', borderCollapse: 'collapse' }}>\n              <thead>\n                <tr style={{ borderBottom: '2px solid #e5e7eb' }}>\n                  <th style={{ textAlign: 'left', padding: '12px 8px', fontWeight: 600 }}>Video</th>\n                  <th style={{ textAlign: 'right', padding: '12px 8px', fontWeight: 600 }}>Views</th>\n                  <th style={{ textAlign: 'right', padding: '12px 8px', fontWeight: 600 }}>Revenue</th>\n                  <th style={{ textAlign: 'right', padding: '12px 8px', fontWeight: 600 }}>Engagement</th>\n                  <th style={{ textAlign: 'center', padding: '12px 8px', fontWeight: 600 }}>Category</th>\n                </tr>\n              </thead>\n              <tbody>\n                {videos.slice(0, 5).map((video, index) => (\n                  <tr key={video.id} style={{ borderBottom: '1px solid #f3f4f6' }}>\n                    <td style={{ padding: '12px 8px' }}>\n                      <Box>\n                        <Typography variant=\"body2\" sx={{ fontWeight: 500 }}>\n                          {video.title}\n                        </Typography>\n                        <Typography variant=\"caption\" color=\"textSecondary\">\n                          {new Date(video.publishedAt).toLocaleDateString()}\n                        </Typography>\n                      </Box>\n                    </td>\n                    <td style={{ textAlign: 'right', padding: '12px 8px' }}>\n                      <Typography variant=\"body2\">{formatNumber(video.views)}</Typography>\n                    </td>\n                    <td style={{ textAlign: 'right', padding: '12px 8px' }}>\n                      <Typography variant=\"body2\">{formatCurrency(video.revenue)}</Typography>\n                    </td>\n                    <td style={{ textAlign: 'right', padding: '12px 8px' }}>\n                      <Typography \n                        variant=\"body2\" \n                        sx={{ color: getMetricColor(video.engagement, 7) }}\n                      >\n                        {video.engagement}%\n                      </Typography>\n                    </td>\n                    <td style={{ textAlign: 'center', padding: '12px 8px' }}>\n                      <Chip \n                        label={video.category} \n                        size=\"small\" \n                        variant=\"outlined\"\n                      />\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </Box>\n        </CardContent>\n      </Card>\n    );\n  };\n\n  const renderRevenueTrendChart = () => {\n    if (loading) return <CircularProgress />;\n\n    return (\n      <Card>\n        <CardContent>\n          <Typography variant=\"h6\" gutterBottom>\n            Revenue Trend\n          </Typography>\n          <ResponsiveContainer width=\"100%\" height={200}>\n            <AreaChart data={metrics}>\n              <defs>\n                <linearGradient id=\"revenueGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                  <stop offset=\"5%\" stopColor=\"#10b981\" stopOpacity={0.8}/>\n                  <stop offset=\"95%\" stopColor=\"#10b981\" stopOpacity={0.1}/>\n                </linearGradient>\n              </defs>\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#f0f0f0\" />\n              <XAxis \n                dataKey=\"date\" \n                fontSize={12}\n                tickFormatter={(value) => new Date(value).toLocaleDateString(undefined, { month: 'short', day: 'numeric' })}\n              />\n              <YAxis fontSize={12} tickFormatter={formatCurrency} />\n              <Tooltip content={<CustomTooltip />} />\n              <Area\n                type=\"monotone\"\n                dataKey=\"revenue\"\n                stroke=\"#10b981\"\n                strokeWidth={2}\n                fillOpacity={1}\n                fill=\"url(#revenueGradient)\"\n              />\n            </AreaChart>\n          </ResponsiveContainer>\n        </CardContent>\n      </Card>\n    );\n  };\n\n  return (\n    <Box>\n      {/* Header Controls */}\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\n        <Typography variant=\"h5\" fontWeight=\"bold\">\n          Channel Performance Analytics\n        </Typography>\n        <Box sx={{ display: 'flex', gap: 2 }}>\n          <FormControl size=\"small\">\n            <InputLabel>Time Range</InputLabel>\n            <Select\n              value={timeRange}\n              label=\"Time Range\"\n              onChange={(e) => onTimeRangeChange(e.target.value as any)}\n              sx={{ minWidth: 120 }}\n            >\n              <MenuItem value=\"7d\">Last 7 Days</MenuItem>\n              <MenuItem value=\"30d\">Last 30 Days</MenuItem>\n              <MenuItem value=\"90d\">Last 90 Days</MenuItem>\n              <MenuItem value=\"1y\">Last Year</MenuItem>\n            </Select>\n          </FormControl>\n          <Button\n            variant=\"outlined\"\n            startIcon={<DownloadIcon />}\n            size=\"small\"\n          >\n            Export\n          </Button>\n          <Button\n            variant=\"outlined\"\n            startIcon={<ShareIcon />}\n            size=\"small\"\n          >\n            Share\n          </Button>\n        </Box>\n      </Box>\n\n      {/* Overview Metrics */}\n      {renderOverviewMetrics()}\n\n      {/* Main Performance Chart */}\n      {renderMainPerformanceChart()}\n\n      {/* Secondary Charts Grid */}\n      <Grid container spacing={3} sx={{ mb: 3 }}>\n        <Grid item xs={12} md={6}>\n          {renderEngagementRadar()}\n        </Grid>\n        <Grid item xs={12} md={6}>\n          {renderVideoPerformanceScatter()}\n        </Grid>\n      </Grid>\n\n      <Grid container spacing={3}>\n        <Grid item xs={12} lg={8}>\n          {renderTopVideosTable()}\n        </Grid>\n        <Grid item xs={12} lg={4}>\n          {renderRevenueTrendChart()}\n        </Grid>\n      </Grid>\n\n      {/* Performance Insights */}\n      <Card sx={{ mt: 3 }}>\n        <CardContent>\n          <Typography variant=\"h6\" gutterBottom>\n            Performance Insights\n          </Typography>\n          <Grid container spacing={2}>\n            <Grid item xs={12} md={4}>\n              <Alert severity=\"success\" sx={{ mb: 2 }}>\n                <Typography variant=\"subtitle2\">Top Performing Category</Typography>\n                <Typography variant=\"body2\">Fitness videos show 23% higher engagement</Typography>\n              </Alert>\n            </Grid>\n            <Grid item xs={12} md={4}>\n              <Alert severity=\"info\" sx={{ mb: 2 }}>\n                <Typography variant=\"subtitle2\">Optimal Upload Time</Typography>\n                <Typography variant=\"body2\">Tuesdays at 2 PM show peak performance</Typography>\n              </Alert>\n            </Grid>\n            <Grid item xs={12} md={4}>\n              <Alert severity=\"warning\" sx={{ mb: 2 }}>\n                <Typography variant=\"subtitle2\">Revenue Opportunity</Typography>\n                <Typography variant=\"body2\">Tech videos have potential for 15% more revenue</Typography>\n              </Alert>\n            </Grid>\n          </Grid>\n        </CardContent>\n      </Card>\n    </Box>\n  );\n};\n\nexport default ChannelPerformanceCharts;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Charts\\ChartComponents.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":32,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[435,438],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[435,438],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":77,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":77,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1790,1793],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1790,1793],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":288,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":288,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8268,8271],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8268,8271],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport {\n  LineChart,\n  Line,\n  AreaChart,\n  Area,\n  BarChart,\n  Bar,\n  PieChart,\n  Pie,\n  RadarChart,\n  Radar,\n  PolarGrid,\n  PolarAngleAxis,\n  PolarRadiusAxis,\n  ComposedChart,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  Cell,\n  ReferenceLine,\n  Brush,\n  RadialBarChart,\n  RadialBar\n} from 'recharts';\nimport { format } from 'date-fns';\n\ninterface ChartProps {\n  data: any[];\n  height?: number;\n  width?: string | number;\n}\n\nconst COLORS = {\n  primary: '#3b82f6',\n  secondary: '#10b981',\n  tertiary: '#f59e0b',\n  quaternary: '#ef4444',\n  quinary: '#8b5cf6',\n  senary: '#ec4899',\n  septenary: '#06b6d4',\n  octonary: '#64748b'\n};\n\nconst CHART_COLORS = Object.values(COLORS);\n\nexport const RevenueChart: React.FC<ChartProps> = ({ data, height = 300 }) => {\n  return (\n    <ResponsiveContainer width=\"100%\" height={height}>\n      <AreaChart data={data} margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>\n        <defs>\n          <linearGradient id=\"colorRevenue\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n            <stop offset=\"5%\" stopColor={COLORS.primary} stopOpacity={0.8}/>\n            <stop offset=\"95%\" stopColor={COLORS.primary} stopOpacity={0}/>\n          </linearGradient>\n        </defs>\n        <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#e5e7eb\" />\n        <XAxis \n          dataKey=\"date\" \n          tickFormatter={(value) => format(new Date(value), 'MMM dd')}\n          stroke=\"#6b7280\"\n        />\n        <YAxis \n          stroke=\"#6b7280\"\n          tickFormatter={(value) => `$${value}`}\n        />\n        <Tooltip \n          contentStyle={{ \n            backgroundColor: '#1f2937', \n            border: 'none',\n            borderRadius: '8px',\n            color: '#f3f4f6'\n          }}\n          formatter={(value: any) => [`$${value}`, 'Revenue']}\n          labelFormatter={(label) => format(new Date(label), 'MMM dd, yyyy')}\n        />\n        <Area \n          type=\"monotone\" \n          dataKey=\"revenue\" \n          stroke={COLORS.primary} \n          fillOpacity={1} \n          fill=\"url(#colorRevenue)\" \n        />\n      </AreaChart>\n    </ResponsiveContainer>\n  );\n};\n\nexport const ViewsChart: React.FC<ChartProps> = ({ data, height = 300 }) => {\n  return (\n    <ResponsiveContainer width=\"100%\" height={height}>\n      <LineChart data={data} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n        <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#e5e7eb\" />\n        <XAxis \n          dataKey=\"date\" \n          tickFormatter={(value) => format(new Date(value), 'MMM dd')}\n          stroke=\"#6b7280\"\n        />\n        <YAxis stroke=\"#6b7280\" />\n        <Tooltip \n          contentStyle={{ \n            backgroundColor: '#1f2937', \n            border: 'none',\n            borderRadius: '8px',\n            color: '#f3f4f6'\n          }}\n          labelFormatter={(label) => format(new Date(label), 'MMM dd, yyyy')}\n        />\n        <Legend />\n        <Line \n          type=\"monotone\" \n          dataKey=\"views\" \n          stroke={COLORS.secondary} \n          strokeWidth={2}\n          dot={false}\n          activeDot={{ r: 8 }}\n        />\n        <Line \n          type=\"monotone\" \n          dataKey=\"uniqueViewers\" \n          stroke={COLORS.tertiary} \n          strokeWidth={2}\n          dot={false}\n          activeDot={{ r: 8 }}\n        />\n      </LineChart>\n    </ResponsiveContainer>\n  );\n};\n\nexport const ChannelPerformanceChart: React.FC<ChartProps> = ({ data, height = 300 }) => {\n  return (\n    <ResponsiveContainer width=\"100%\" height={height}>\n      <BarChart data={data} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\n        <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#e5e7eb\" />\n        <XAxis dataKey=\"channel\" stroke=\"#6b7280\" />\n        <YAxis stroke=\"#6b7280\" />\n        <Tooltip \n          contentStyle={{ \n            backgroundColor: '#1f2937', \n            border: 'none',\n            borderRadius: '8px',\n            color: '#f3f4f6'\n          }}\n        />\n        <Legend />\n        <Bar dataKey=\"videos\" fill={COLORS.primary} radius={[8, 8, 0, 0]} />\n        <Bar dataKey=\"views\" fill={COLORS.secondary} radius={[8, 8, 0, 0]} />\n        <Bar dataKey=\"revenue\" fill={COLORS.tertiary} radius={[8, 8, 0, 0]} />\n      </BarChart>\n    </ResponsiveContainer>\n  );\n};\n\nexport const ContentDistributionPie: React.FC<ChartProps> = ({ data, height = 300 }) => {\n  return (\n    <ResponsiveContainer width=\"100%\" height={height}>\n      <PieChart>\n        <Pie\n          data={data}\n          cx=\"50%\"\n          cy=\"50%\"\n          labelLine={false}\n          label={(entry) => `${entry.name}: ${entry.value}%`}\n          outerRadius={80}\n          fill=\"#8884d8\"\n          dataKey=\"value\"\n        >\n          {data.map((entry, index) => (\n            <Cell key={`cell-${index}`} fill={CHART_COLORS[index % CHART_COLORS.length]} />\n          ))}\n        </Pie>\n        <Tooltip \n          contentStyle={{ \n            backgroundColor: '#1f2937', \n            border: 'none',\n            borderRadius: '8px',\n            color: '#f3f4f6'\n          }}\n        />\n      </PieChart>\n    </ResponsiveContainer>\n  );\n};\n\nexport const EngagementRadar: React.FC<ChartProps> = ({ data, height = 300 }) => {\n  return (\n    <ResponsiveContainer width=\"100%\" height={height}>\n      <RadarChart data={data}>\n        <PolarGrid stroke=\"#e5e7eb\" />\n        <PolarAngleAxis dataKey=\"metric\" stroke=\"#6b7280\" />\n        <PolarRadiusAxis stroke=\"#6b7280\" />\n        <Radar \n          name=\"Current\" \n          dataKey=\"current\" \n          stroke={COLORS.primary} \n          fill={COLORS.primary} \n          fillOpacity={0.6} \n        />\n        <Radar \n          name=\"Target\" \n          dataKey=\"target\" \n          stroke={COLORS.secondary} \n          fill={COLORS.secondary} \n          fillOpacity={0.6} \n        />\n        <Legend />\n        <Tooltip \n          contentStyle={{ \n            backgroundColor: '#1f2937', \n            border: 'none',\n            borderRadius: '8px',\n            color: '#f3f4f6'\n          }}\n        />\n      </RadarChart>\n    </ResponsiveContainer>\n  );\n};\n\nexport const VideoGenerationTimeline: React.FC<ChartProps> = ({ data, height = 300 }) => {\n  return (\n    <ResponsiveContainer width=\"100%\" height={height}>\n      <ComposedChart data={data} margin={{ top: 20, right: 20, bottom: 20, left: 20 }}>\n        <CartesianGrid stroke=\"#e5e7eb\" />\n        <XAxis \n          dataKey=\"time\" \n          tickFormatter={(value) => format(new Date(value), 'HH:mm')}\n          stroke=\"#6b7280\"\n        />\n        <YAxis yAxisId=\"left\" orientation=\"left\" stroke=\"#6b7280\" />\n        <YAxis yAxisId=\"right\" orientation=\"right\" stroke=\"#6b7280\" />\n        <Tooltip \n          contentStyle={{ \n            backgroundColor: '#1f2937', \n            border: 'none',\n            borderRadius: '8px',\n            color: '#f3f4f6'\n          }}\n          labelFormatter={(label) => format(new Date(label), 'HH:mm:ss')}\n        />\n        <Legend />\n        <Bar yAxisId=\"left\" dataKey=\"completed\" fill={COLORS.secondary} />\n        <Bar yAxisId=\"left\" dataKey=\"failed\" fill={COLORS.quaternary} />\n        <Line \n          yAxisId=\"right\" \n          type=\"monotone\" \n          dataKey=\"queueSize\" \n          stroke={COLORS.primary} \n          strokeWidth={2}\n        />\n      </ComposedChart>\n    </ResponsiveContainer>\n  );\n};\n\nexport const CostBreakdownRadial: React.FC<ChartProps> = ({ data, height = 300 }) => {\n  return (\n    <ResponsiveContainer width=\"100%\" height={height}>\n      <RadialBarChart cx=\"50%\" cy=\"50%\" innerRadius=\"10%\" outerRadius=\"80%\" data={data}>\n        <RadialBar\n          minAngle={15}\n          label={{ position: 'insideStart', fill: '#fff' }}\n          background\n          clockWise\n          dataKey=\"cost\"\n        >\n          {data.map((entry, index) => (\n            <Cell key={`cell-${index}`} fill={CHART_COLORS[index % CHART_COLORS.length]} />\n          ))}\n        </RadialBar>\n        <Legend \n          iconSize={10}\n          layout=\"vertical\"\n          verticalAlign=\"middle\"\n          align=\"right\"\n        />\n        <Tooltip \n          contentStyle={{ \n            backgroundColor: '#1f2937', \n            border: 'none',\n            borderRadius: '8px',\n            color: '#f3f4f6'\n          }}\n          formatter={(value: any) => [`$${value}`, 'Cost']}\n        />\n      </RadialBarChart>\n    </ResponsiveContainer>\n  );\n};\n\nexport const TrendAnalysisChart: React.FC<ChartProps & { showBrush?: boolean }> = ({ \n  data, \n  height = 300,\n  showBrush = true \n}) => {\n  return (\n    <ResponsiveContainer width=\"100%\" height={height}>\n      <LineChart data={data} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n        <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#e5e7eb\" />\n        <XAxis \n          dataKey=\"date\" \n          tickFormatter={(value) => format(new Date(value), 'MMM dd')}\n          stroke=\"#6b7280\"\n        />\n        <YAxis stroke=\"#6b7280\" />\n        <Tooltip \n          contentStyle={{ \n            backgroundColor: '#1f2937', \n            border: 'none',\n            borderRadius: '8px',\n            color: '#f3f4f6'\n          }}\n          labelFormatter={(label) => format(new Date(label), 'MMM dd, yyyy')}\n        />\n        <Legend />\n        <ReferenceLine y={0} stroke=\"#6b7280\" />\n        <Line \n          type=\"monotone\" \n          dataKey=\"trendScore\" \n          stroke={COLORS.primary} \n          strokeWidth={2}\n          dot={false}\n        />\n        <Line \n          type=\"monotone\" \n          dataKey=\"prediction\" \n          stroke={COLORS.secondary} \n          strokeWidth={2}\n          strokeDasharray=\"5 5\"\n          dot={false}\n        />\n        {showBrush && (\n          <Brush \n            dataKey=\"date\" \n            height={30} \n            stroke={COLORS.primary}\n            tickFormatter={(value) => format(new Date(value), 'MM/dd')}\n          />\n        )}\n      </LineChart>\n    </ResponsiveContainer>\n  );\n};\n\nexport const RealTimeMetricsChart: React.FC<ChartProps> = ({ data, height = 200 }) => {\n  return (\n    <ResponsiveContainer width=\"100%\" height={height}>\n      <AreaChart data={data} margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>\n        <defs>\n          <linearGradient id=\"colorMetric\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n            <stop offset=\"5%\" stopColor={COLORS.septenary} stopOpacity={0.8}/>\n            <stop offset=\"95%\" stopColor={COLORS.septenary} stopOpacity={0}/>\n          </linearGradient>\n        </defs>\n        <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#e5e7eb\" />\n        <XAxis \n          dataKey=\"timestamp\" \n          tickFormatter={(value) => format(new Date(value), 'HH:mm:ss')}\n          stroke=\"#6b7280\"\n        />\n        <YAxis stroke=\"#6b7280\" />\n        <Tooltip \n          contentStyle={{ \n            backgroundColor: '#1f2937', \n            border: 'none',\n            borderRadius: '8px',\n            color: '#f3f4f6'\n          }}\n          labelFormatter={(label) => format(new Date(label), 'HH:mm:ss')}\n        />\n        <Area \n          type=\"monotone\" \n          dataKey=\"value\" \n          stroke={COLORS.septenary} \n          fillOpacity={1} \n          fill=\"url(#colorMetric)\"\n          isAnimationActive={false}\n        />\n      </AreaChart>\n    </ResponsiveContainer>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Charts\\index.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":33,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[590,593],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[590,593],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'theme' is assigned a value but never used.","line":216,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":216,"endColumn":14},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":218,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":218,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7472,7475],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7472,7475],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'root' is assigned a value but never used.","line":219,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":219,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'colors' is assigned a value but never used.","line":219,"column":54,"nodeType":null,"messageId":"unusedVar","endLine":219,"endColumn":60},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":278,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":278,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8993,8996],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8993,8996],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":314,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":314,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10220,10223],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10220,10223],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  AreaChart,\r\n  Area,\r\n  BarChart,\r\n  Bar,\r\n  PieChart,\r\n  Pie,\r\n  Cell,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n  ResponsiveContainer,\r\n  RadarChart,\r\n  PolarGrid,\r\n  PolarAngleAxis,\r\n  PolarRadiusAxis,\r\n  Radar,\r\n  Treemap,\r\n} from 'recharts';\r\nimport { Box, Paper, Typography, useTheme } from '@mui/material';\r\nimport { format } from 'date-fns';\r\n\r\n// Color palette\r\nconst COLORS = ['#667eea', '#764ba2', '#f093fb', '#fda085', '#84fab0', '#8fd3f4'];\r\n\r\ninterface ChartProps {\r\n  title?: string;\r\n  data: any[];\r\n  height?: number;\r\n}\r\n\r\nexport const ViewsLineChart: React.FC<ChartProps> = ({ title = 'Views Over Time', data, height = 300 }) => {\r\n  const theme = useTheme();\r\n  \r\n  return (\r\n    <Paper sx={{ p: 2 }}>\r\n      <Typography variant=\"h6\" gutterBottom>{title}</Typography>\r\n      <ResponsiveContainer width=\"100%\" height={height}>\r\n        <LineChart data={data} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\r\n          <CartesianGrid strokeDasharray=\"3 3\" stroke={theme.palette.divider} />\r\n          <XAxis \r\n            dataKey=\"date\" \r\n            tickFormatter={(date) => format(new Date(date), 'MMM dd')}\r\n            stroke={theme.palette.text.secondary}\r\n          />\r\n          <YAxis stroke={theme.palette.text.secondary} />\r\n          <Tooltip \r\n            contentStyle={{ \r\n              backgroundColor: theme.palette.background.paper,\r\n              border: `1px solid ${theme.palette.divider}`\r\n            }}\r\n          />\r\n          <Legend />\r\n          <Line \r\n            type=\"monotone\" \r\n            dataKey=\"views\" \r\n            stroke=\"#667eea\" \r\n            strokeWidth={2}\r\n            dot={{ fill: '#667eea', r: 4 }}\r\n            activeDot={{ r: 6 }}\r\n          />\r\n          <Line \r\n            type=\"monotone\" \r\n            dataKey=\"projectedViews\" \r\n            stroke=\"#764ba2\" \r\n            strokeWidth={2}\r\n            strokeDasharray=\"5 5\"\r\n            dot={false}\r\n          />\r\n        </LineChart>\r\n      </ResponsiveContainer>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport const RevenueAreaChart: React.FC<ChartProps> = ({ title = 'Revenue Trend', data, height = 300 }) => {\r\n  const theme = useTheme();\r\n  \r\n  return (\r\n    <Paper sx={{ p: 2 }}>\r\n      <Typography variant=\"h6\" gutterBottom>{title}</Typography>\r\n      <ResponsiveContainer width=\"100%\" height={height}>\r\n        <AreaChart data={data} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\r\n          <defs>\r\n            <linearGradient id=\"colorRevenue\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n              <stop offset=\"5%\" stopColor=\"#667eea\" stopOpacity={0.8}/>\r\n              <stop offset=\"95%\" stopColor=\"#667eea\" stopOpacity={0.1}/>\r\n            </linearGradient>\r\n            <linearGradient id=\"colorCost\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n              <stop offset=\"5%\" stopColor=\"#f093fb\" stopOpacity={0.8}/>\r\n              <stop offset=\"95%\" stopColor=\"#f093fb\" stopOpacity={0.1}/>\r\n            </linearGradient>\r\n          </defs>\r\n          <CartesianGrid strokeDasharray=\"3 3\" stroke={theme.palette.divider} />\r\n          <XAxis \r\n            dataKey=\"date\" \r\n            tickFormatter={(date) => format(new Date(date), 'MMM dd')}\r\n            stroke={theme.palette.text.secondary}\r\n          />\r\n          <YAxis stroke={theme.palette.text.secondary} />\r\n          <Tooltip \r\n            contentStyle={{ \r\n              backgroundColor: theme.palette.background.paper,\r\n              border: `1px solid ${theme.palette.divider}`\r\n            }}\r\n            formatter={(value: number) => `$${value.toFixed(2)}`}\r\n          />\r\n          <Legend />\r\n          <Area type=\"monotone\" dataKey=\"revenue\" stroke=\"#667eea\" fillOpacity={1} fill=\"url(#colorRevenue)\" />\r\n          <Area type=\"monotone\" dataKey=\"cost\" stroke=\"#f093fb\" fillOpacity={1} fill=\"url(#colorCost)\" />\r\n        </AreaChart>\r\n      </ResponsiveContainer>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport const VideoPerformanceBar: React.FC<ChartProps> = ({ title = 'Video Performance', data, height = 300 }) => {\r\n  const theme = useTheme();\r\n  \r\n  return (\r\n    <Paper sx={{ p: 2 }}>\r\n      <Typography variant=\"h6\" gutterBottom>{title}</Typography>\r\n      <ResponsiveContainer width=\"100%\" height={height}>\r\n        <BarChart data={data} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\r\n          <CartesianGrid strokeDasharray=\"3 3\" stroke={theme.palette.divider} />\r\n          <XAxis \r\n            dataKey=\"title\" \r\n            angle={-45}\r\n            textAnchor=\"end\"\r\n            height={100}\r\n            stroke={theme.palette.text.secondary}\r\n          />\r\n          <YAxis stroke={theme.palette.text.secondary} />\r\n          <Tooltip \r\n            contentStyle={{ \r\n              backgroundColor: theme.palette.background.paper,\r\n              border: `1px solid ${theme.palette.divider}`\r\n            }}\r\n          />\r\n          <Legend />\r\n          <Bar dataKey=\"views\" fill=\"#667eea\" />\r\n          <Bar dataKey=\"likes\" fill=\"#764ba2\" />\r\n          <Bar dataKey=\"comments\" fill=\"#f093fb\" />\r\n        </BarChart>\r\n      </ResponsiveContainer>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport const ChannelDistributionPie: React.FC<ChartProps> = ({ title = 'Channel Distribution', data, height = 300 }) => {\r\n  const theme = useTheme();\r\n  \r\n  return (\r\n    <Paper sx={{ p: 2 }}>\r\n      <Typography variant=\"h6\" gutterBottom>{title}</Typography>\r\n      <ResponsiveContainer width=\"100%\" height={height}>\r\n        <PieChart>\r\n          <Pie\r\n            data={data}\r\n            cx=\"50%\"\r\n            cy=\"50%\"\r\n            labelLine={false}\r\n            label={(entry) => `${entry.name}: ${entry.value}`}\r\n            outerRadius={80}\r\n            fill=\"#8884d8\"\r\n            dataKey=\"value\"\r\n          >\r\n            {data.map((entry, index) => (\r\n              <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\r\n            ))}\r\n          </Pie>\r\n          <Tooltip \r\n            contentStyle={{ \r\n              backgroundColor: theme.palette.background.paper,\r\n              border: `1px solid ${theme.palette.divider}`\r\n            }}\r\n          />\r\n        </PieChart>\r\n      </ResponsiveContainer>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport const MetricsRadar: React.FC<ChartProps> = ({ title = 'Performance Metrics', data, height = 300 }) => {\r\n  const theme = useTheme();\r\n  \r\n  return (\r\n    <Paper sx={{ p: 2 }}>\r\n      <Typography variant=\"h6\" gutterBottom>{title}</Typography>\r\n      <ResponsiveContainer width=\"100%\" height={height}>\r\n        <RadarChart data={data}>\r\n          <PolarGrid stroke={theme.palette.divider} />\r\n          <PolarAngleAxis dataKey=\"metric\" stroke={theme.palette.text.secondary} />\r\n          <PolarRadiusAxis angle={90} domain={[0, 100]} stroke={theme.palette.text.secondary} />\r\n          <Radar name=\"Current\" dataKey=\"current\" stroke=\"#667eea\" fill=\"#667eea\" fillOpacity={0.6} />\r\n          <Radar name=\"Target\" dataKey=\"target\" stroke=\"#764ba2\" fill=\"#764ba2\" fillOpacity={0.3} />\r\n          <Legend />\r\n          <Tooltip \r\n            contentStyle={{ \r\n              backgroundColor: theme.palette.background.paper,\r\n              border: `1px solid ${theme.palette.divider}`\r\n            }}\r\n          />\r\n        </RadarChart>\r\n      </ResponsiveContainer>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport const ContentTreemap: React.FC<ChartProps> = ({ title = 'Content Categories', data, height = 300 }) => {\r\n  const theme = useTheme();\r\n  \r\n  const CustomContent = (props: any) => {\r\n    const { root, depth, x, y, width, height, index, colors, name, value } = props;\r\n    \r\n    return (\r\n      <g>\r\n        <rect\r\n          x={x}\r\n          y={y}\r\n          width={width}\r\n          height={height}\r\n          style={{\r\n            fill: COLORS[index % COLORS.length],\r\n            stroke: '#fff',\r\n            strokeWidth: 2 / (depth + 1e-10),\r\n            strokeOpacity: 1 / (depth + 1e-10),\r\n          }}\r\n        />\r\n        {depth === 1 && width > 50 && height > 30 && (\r\n          <>\r\n            <text\r\n              x={x + width / 2}\r\n              y={y + height / 2 - 7}\r\n              textAnchor=\"middle\"\r\n              fill=\"#fff\"\r\n              fontSize={14}\r\n            >\r\n              {name}\r\n            </text>\r\n            <text\r\n              x={x + width / 2}\r\n              y={y + height / 2 + 7}\r\n              textAnchor=\"middle\"\r\n              fill=\"#fff\"\r\n              fontSize={12}\r\n            >\r\n              {value}\r\n            </text>\r\n          </>\r\n        )}\r\n      </g>\r\n    );\r\n  };\r\n  \r\n  return (\r\n    <Paper sx={{ p: 2 }}>\r\n      <Typography variant=\"h6\" gutterBottom>{title}</Typography>\r\n      <ResponsiveContainer width=\"100%\" height={height}>\r\n        <Treemap\r\n          data={data}\r\n          dataKey=\"size\"\r\n          aspectRatio={4 / 3}\r\n          stroke=\"#fff\"\r\n          fill=\"#8884d8\"\r\n          content={<CustomContent />}\r\n        />\r\n      </ResponsiveContainer>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport const RealTimeMetrics: React.FC<{ data: any[] }> = ({ data }) => {\r\n  const theme = useTheme();\r\n  \r\n  return (\r\n    <Paper sx={{ p: 2 }}>\r\n      <Typography variant=\"h6\" gutterBottom>Real-Time Metrics</Typography>\r\n      <ResponsiveContainer width=\"100%\" height={200}>\r\n        <LineChart data={data} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\r\n          <CartesianGrid strokeDasharray=\"3 3\" stroke={theme.palette.divider} />\r\n          <XAxis \r\n            dataKey=\"time\" \r\n            tickFormatter={(time) => format(new Date(time), 'HH:mm:ss')}\r\n            stroke={theme.palette.text.secondary}\r\n          />\r\n          <YAxis stroke={theme.palette.text.secondary} />\r\n          <Tooltip \r\n            contentStyle={{ \r\n              backgroundColor: theme.palette.background.paper,\r\n              border: `1px solid ${theme.palette.divider}`\r\n            }}\r\n          />\r\n          <Line \r\n            type=\"monotone\" \r\n            dataKey=\"value\" \r\n            stroke=\"#667eea\" \r\n            strokeWidth={2}\r\n            dot={false}\r\n            isAnimationActive={false}\r\n          />\r\n        </LineChart>\r\n      </ResponsiveContainer>\r\n    </Paper>\r\n  );\r\n};\r\n\r\n// Composite dashboard component\r\nexport const DashboardCharts: React.FC<{ metrics: any }> = ({ metrics }) => {\r\n  return (\r\n    <Box sx={{ display: 'grid', gap: 3, gridTemplateColumns: 'repeat(auto-fit, minmax(400px, 1fr))' }}>\r\n      <ViewsLineChart data={metrics.viewsData} />\r\n      <RevenueAreaChart data={metrics.revenueData} />\r\n      <VideoPerformanceBar data={metrics.videoPerformance} />\r\n      <ChannelDistributionPie data={metrics.channelDistribution} />\r\n      <MetricsRadar data={metrics.performanceMetrics} />\r\n      <ContentTreemap data={metrics.contentCategories} />\r\n    </Box>\r\n  );\r\n};\r\n\r\n// Export the new Channel Performance Charts component\r\nexport { default as ChannelPerformanceCharts } from './ChannelPerformanceCharts';","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Common\\ErrorMessage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Common\\HelpTooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Common\\InlineHelp.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Speed' is defined but never used.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MenuBook' is defined but never used.","line":25,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":11}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { \n  Box, \n  Paper, \n  Typography, \n  IconButton, \n  Collapse,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Link,\n  Chip,\n  Alert,\n} from '@mui/material';\nimport { \n  Close, \n  CheckCircle, \n  Lightbulb,\n  School,\n  Speed,\n  KeyboardArrowRight,\n  KeyboardArrowDown,\n  VideoLibrary,\n  MenuBook,\n  QuestionAnswer,\n} from '@mui/icons-material';\n\ninterface HelpItem {\n  id: string;\n  title: string;\n  content: string;\n  type?: 'tip' | 'tutorial' | 'faq';\n  link?: string;\n  videoUrl?: string;\n}\n\ninterface InlineHelpProps {\n  context: string;\n  items?: HelpItem[];\n  onClose?: () => void;\n  persistent?: boolean;\n  variant?: 'compact' | 'expanded';\n}\n\nconst defaultHelpItems: Record<string, HelpItem[]> = {\n  'video-creation': [\n    {\n      id: '1',\n      title: 'Quick Start',\n      content: 'Start by selecting a trending topic or enter your own. Our AI will generate an optimized script.',\n      type: 'tip',\n    },\n    {\n      id: '2',\n      title: 'Batch Processing',\n      content: 'Create up to 10 videos at once by enabling batch mode for better efficiency.',\n      type: 'tip',\n    },\n    {\n      id: '3',\n      title: 'Cost Optimization',\n      content: 'Use GPT-3.5 for drafts and GPT-4 for final versions to reduce costs by 40%.',\n      type: 'tip',\n    },\n  ],\n  'channel-management': [\n    {\n      id: '1',\n      title: 'Channel Health',\n      content: 'Keep your channel health above 80% for optimal YouTube algorithm performance.',\n      type: 'tip',\n    },\n    {\n      id: '2',\n      title: 'Multi-Channel Strategy',\n      content: 'Diversify content across channels to test different niches and audiences.',\n      type: 'tutorial',\n      link: '/docs/multi-channel',\n    },\n    {\n      id: '3',\n      title: 'Scheduling Best Practices',\n      content: 'Schedule videos during peak hours (2-4 PM and 7-9 PM) for maximum engagement.',\n      type: 'tip',\n    },\n  ],\n  'analytics': [\n    {\n      id: '1',\n      title: 'Key Metrics',\n      content: 'Focus on CTR (Click-Through Rate) and AVD (Average View Duration) for growth.',\n      type: 'tip',\n    },\n    {\n      id: '2',\n      title: 'Revenue Tracking',\n      content: 'Monitor RPM (Revenue Per Mille) trends to optimize content strategy.',\n      type: 'tutorial',\n      videoUrl: '/tutorials/revenue-tracking',\n    },\n  ],\n};\n\nexport const InlineHelp: React.FC<InlineHelpProps> = ({\n  context,\n  items,\n  onClose,\n  persistent = false,\n  variant = 'compact',\n}) => {\n  const [expanded, setExpanded] = useState(variant === 'expanded');\n  const [completedItems, setCompletedItems] = useState<string[]>([]);\n  \n  const helpItems = items || defaultHelpItems[context] || [];\n  \n  const handleItemComplete = (itemId: string) => {\n    setCompletedItems(prev => [...prev, itemId]);\n  };\n  \n  const getIcon = (type?: string) => {\n    switch (type) {\n      case 'tip':\n        return <Lightbulb color=\"primary\" />;\n      case 'tutorial':\n        return <School color=\"secondary\" />;\n      case 'faq':\n        return <QuestionAnswer />;\n      default:\n        return <CheckCircle color=\"success\" />;\n    }\n  };\n  \n  if (helpItems.length === 0) return null;\n  \n  return (\n    <Paper\n      elevation={2}\n      sx={{\n        p: 2,\n        mb: 2,\n        backgroundColor: 'background.paper',\n        border: 1,\n        borderColor: 'divider',\n      }}\n    >\n      <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n          <IconButton\n            size=\"small\"\n            onClick={() => setExpanded(!expanded)}\n            sx={{ p: 0.5 }}\n          >\n            {expanded ? <KeyboardArrowDown /> : <KeyboardArrowRight />}\n          </IconButton>\n          <Typography variant=\"subtitle2\" fontWeight=\"medium\">\n            Quick Help\n          </Typography>\n          <Chip\n            label={`${completedItems.length}/${helpItems.length}`}\n            size=\"small\"\n            color={completedItems.length === helpItems.length ? 'success' : 'default'}\n          />\n        </Box>\n        {!persistent && onClose && (\n          <IconButton size=\"small\" onClick={onClose}>\n            <Close fontSize=\"small\" />\n          </IconButton>\n        )}\n      </Box>\n      \n      <Collapse in={expanded}>\n        <Box sx={{ mt: 2 }}>\n          {variant === 'compact' ? (\n            <List dense sx={{ p: 0 }}>\n              {helpItems.map((item) => (\n                <ListItem\n                  key={item.id}\n                  sx={{\n                    pl: 0,\n                    opacity: completedItems.includes(item.id) ? 0.6 : 1,\n                    textDecoration: completedItems.includes(item.id) ? 'line-through' : 'none',\n                  }}\n                >\n                  <ListItemIcon sx={{ minWidth: 36 }}>\n                    {completedItems.includes(item.id) ? (\n                      <CheckCircle color=\"success\" fontSize=\"small\" />\n                    ) : (\n                      getIcon(item.type)\n                    )}\n                  </ListItemIcon>\n                  <ListItemText\n                    primary={item.title}\n                    secondary={item.content}\n                    primaryTypographyProps={{ variant: 'body2', fontWeight: 'medium' }}\n                    secondaryTypographyProps={{ variant: 'caption' }}\n                  />\n                  {!completedItems.includes(item.id) && (\n                    <IconButton\n                      size=\"small\"\n                      onClick={() => handleItemComplete(item.id)}\n                      sx={{ ml: 1 }}\n                    >\n                      <CheckCircle fontSize=\"small\" />\n                    </IconButton>\n                  )}\n                </ListItem>\n              ))}\n            </List>\n          ) : (\n            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>\n              {helpItems.map((item) => (\n                <Alert\n                  key={item.id}\n                  severity={item.type === 'tip' ? 'info' : 'success'}\n                  icon={getIcon(item.type)}\n                  action={\n                    !completedItems.includes(item.id) && (\n                      <IconButton\n                        size=\"small\"\n                        onClick={() => handleItemComplete(item.id)}\n                      >\n                        <CheckCircle />\n                      </IconButton>\n                    )\n                  }\n                >\n                  <Typography variant=\"body2\" fontWeight=\"medium\">\n                    {item.title}\n                  </Typography>\n                  <Typography variant=\"caption\" display=\"block\" sx={{ mt: 0.5 }}>\n                    {item.content}\n                  </Typography>\n                  {item.link && (\n                    <Link href={item.link} sx={{ fontSize: 12, mt: 1, display: 'inline-block' }}>\n                      Learn more →\n                    </Link>\n                  )}\n                  {item.videoUrl && (\n                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5, mt: 1 }}>\n                      <VideoLibrary fontSize=\"small\" />\n                      <Link href={item.videoUrl} sx={{ fontSize: 12 }}>\n                        Watch tutorial\n                      </Link>\n                    </Box>\n                  )}\n                </Alert>\n              ))}\n            </Box>\n          )}\n          \n          {completedItems.length === helpItems.length && (\n            <Alert severity=\"success\" sx={{ mt: 2 }}>\n              <Typography variant=\"caption\">\n                Great job! You've completed all help items. \n              </Typography>\n            </Alert>\n          )}\n        </Box>\n      </Collapse>\n    </Paper>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\CostTracking\\CostVisualization.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Tooltip' is defined but never used.","line":34,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Badge' is defined but never used.","line":35,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Divider' is defined but never used.","line":40,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Warning' is defined but never used.","line":46,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Info' is defined but never used.","line":47,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":47,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Edit' is defined but never used.","line":49,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":49,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Delete' is defined but never used.","line":50,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":50,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CalendarMonth' is defined but never used.","line":53,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":53,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Settings' is defined but never used.","line":57,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":57,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Notifications' is defined but never used.","line":58,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":58,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CheckCircle' is defined but never used.","line":59,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":59,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Error' is defined but never used.","line":60,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":60,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MoneyOff' is defined but never used.","line":61,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":61,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CreditCard' is defined but never used.","line":62,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":62,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Receipt' is defined but never used.","line":63,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":63,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AccountBalance' is defined but never used.","line":64,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":64,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Treemap' is defined but never used.","line":82,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":82,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Sankey' is defined but never used.","line":83,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":83,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'endOfMonth' is defined but never used.","line":90,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":90,"endColumn":42},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'addMonths' is defined but never used.","line":90,"column":55,"nodeType":null,"messageId":"unusedVar","endLine":90,"endColumn":64},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CostItem' is defined but never used.","line":116,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":116,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":154,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":154,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3103,3106],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3103,3106],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":160,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":160,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3468,3471],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3468,3471],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":204,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":204,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4810,4813],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4810,4813],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":216,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":216,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5248,5251],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5248,5251],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchCostData'. Either include it or remove the dependency array.","line":273,"column":6,"nodeType":"ArrayExpression","endLine":273,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [fetchCostData, timeRange]","fix":{"range":[7109,7120],"text":"[fetchCostData, timeRange]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":309,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":309,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":426,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":426,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12406,12409],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12406,12409],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":27,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Cost Tracking Visualization Component\r\n * Comprehensive cost tracking and budget management interface\r\n */\r\n\r\nimport React, { useState, useEffect, useMemo } from 'react';\r\nimport {\r\n  Box,\r\n  Grid,\r\n  Paper,\r\n  Typography,\r\n  Card,\r\n  CardContent,\r\n  LinearProgress,\r\n  Select,\r\n  MenuItem,\r\n  FormControl,\r\n  InputLabel,\r\n  Button,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  TextField,\r\n  Alert,\r\n  Chip,\r\n  IconButton,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Tooltip,\r\n  Badge,\r\n  CircularProgress,\r\n  ToggleButton,\r\n  ToggleButtonGroup,\r\n  Stack,\r\n  Divider,\r\n} from '@mui/material';\r\nimport {\r\n  AttachMoney,\r\n  TrendingUp,\r\n  TrendingDown,\r\n  Warning,\r\n  Info,\r\n  Add,\r\n  Edit,\r\n  Delete,\r\n  Refresh,\r\n  Download,\r\n  CalendarMonth,\r\n  ShowChart,\r\n  PieChart as PieChartIcon,\r\n  BarChart as BarChartIcon,\r\n  Settings,\r\n  Notifications,\r\n  CheckCircle,\r\n  Error,\r\n  MoneyOff,\r\n  CreditCard,\r\n  Receipt,\r\n  AccountBalance,\r\n} from '@mui/icons-material';\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  AreaChart,\r\n  Area,\r\n  BarChart,\r\n  Bar,\r\n  PieChart,\r\n  Pie,\r\n  Cell,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip as ChartTooltip,\r\n  Legend,\r\n  ResponsiveContainer,\r\n  Treemap,\r\n  Sankey,\r\n  RadarChart,\r\n  PolarGrid,\r\n  PolarAngleAxis,\r\n  PolarRadiusAxis,\r\n  Radar,\r\n} from 'recharts';\r\nimport { format, startOfMonth, endOfMonth, subMonths, addMonths } from 'date-fns';\r\nimport { api } from '../../services/api';\r\nimport { useOptimizedStore } from '../../stores/optimizedStore';\r\n\r\n// Types\r\ninterface CostCategory {\r\n  name: string;\r\n  amount: number;\r\n  percentage: number;\r\n  trend: number;\r\n  color: string;\r\n}\r\n\r\ninterface Budget {\r\n  id: string;\r\n  name: string;\r\n  amount: number;\r\n  spent: number;\r\n  remaining: number;\r\n  percentage: number;\r\n  period: 'daily' | 'weekly' | 'monthly' | 'quarterly';\r\n  category?: string;\r\n  alertThresholds: number[];\r\n  status: 'healthy' | 'warning' | 'critical' | 'exceeded';\r\n}\r\n\r\ninterface CostItem {\r\n  id: string;\r\n  date: Date;\r\n  category: string;\r\n  service: string;\r\n  amount: number;\r\n  description: string;\r\n  userId?: string;\r\n  channelId?: string;\r\n  videoId?: string;\r\n}\r\n\r\ninterface CostForecast {\r\n  date: string;\r\n  predicted: number;\r\n  actual?: number;\r\n  confidenceLow: number;\r\n  confidenceHigh: number;\r\n}\r\n\r\nconst CATEGORY_COLORS = {\r\n  'openai_api': '#4CAF50',\r\n  'youtube_api': '#2196F3',\r\n  'elevenlabs_tts': '#FF9800',\r\n  'storage': '#9C27B0',\r\n  'compute': '#F44336',\r\n  'bandwidth': '#00BCD4',\r\n  'database': '#795548',\r\n  'third_party': '#607D8B',\r\n  'other': '#9E9E9E',\r\n};\r\n\r\nexport const CostVisualization: React.FC = () => {\r\n  const [timeRange, setTimeRange] = useState<'daily' | 'weekly' | 'monthly' | 'quarterly'>('monthly');\r\n  const [viewMode, setViewMode] = useState<'overview' | 'detailed' | 'forecast'>('overview');\r\n  const [loading, setLoading] = useState(true);\r\n  const [categories, setCategories] = useState<CostCategory[]>([]);\r\n  const [budgets, setBudgets] = useState<Budget[]>([]);\r\n  const [costHistory, setCostHistory] = useState<any[]>([]);\r\n  const [forecasts, setForecasts] = useState<CostForecast[]>([]);\r\n  const [totalCost, setTotalCost] = useState(0);\r\n  const [costTrend, setCostTrend] = useState(0);\r\n  const [budgetDialogOpen, setBudgetDialogOpen] = useState(false);\r\n  const [selectedBudget, setSelectedBudget] = useState<Budget | null>(null);\r\n  const [alerts, setAlerts] = useState<any[]>([]);\r\n\r\n  const { addNotification } = useOptimizedStore();\r\n\r\n  // Fetch cost data\r\n  const fetchCostData = async () => {\r\n    try {\r\n      setLoading(true);\r\n\r\n      // Determine date range\r\n      const endDate = new Date();\r\n      let startDate: Date;\r\n      \r\n      switch (timeRange) {\r\n        case 'daily':\r\n          startDate = new Date();\r\n          startDate.setHours(0, 0, 0, 0);\r\n          break;\r\n        case 'weekly':\r\n          startDate = new Date();\r\n          startDate.setDate(startDate.getDate() - 7);\r\n          break;\r\n        case 'monthly':\r\n          startDate = startOfMonth(new Date());\r\n          break;\r\n        case 'quarterly':\r\n          startDate = subMonths(new Date(), 3);\r\n          break;\r\n      }\r\n\r\n      // Fetch cost summary\r\n      const summaryResponse = await api.get('/costs/summary', {\r\n        params: {\r\n          start_date: format(startDate, 'yyyy-MM-dd'),\r\n          end_date: format(endDate, 'yyyy-MM-dd'),\r\n        },\r\n      });\r\n\r\n      const summary = summaryResponse.data;\r\n      setTotalCost(summary.total_cost);\r\n      setCostTrend(summary.trend === 'increasing' ? 15 : summary.trend === 'decreasing' ? -10 : 0);\r\n\r\n      // Process categories\r\n      const categoryData: CostCategory[] = Object.entries(summary.category_breakdown || {}).map(\r\n        ([name, amount]: [string, any]) => ({\r\n          name,\r\n          amount: Number(amount),\r\n          percentage: (Number(amount) / summary.total_cost) * 100,\r\n          trend: Math.random() * 20 - 10, // Mock trend\r\n          color: CATEGORY_COLORS[name] || '#9E9E9E',\r\n        })\r\n      );\r\n      setCategories(categoryData);\r\n\r\n      // Fetch budgets\r\n      const budgetsResponse = await api.get('/costs/budgets');\r\n      setBudgets(budgetsResponse.data.map((b: any) => ({\r\n        ...b,\r\n        spent: Math.random() * b.amount, // Mock spent amount\r\n        remaining: b.amount - (Math.random() * b.amount),\r\n        percentage: (Math.random() * b.amount / b.amount) * 100,\r\n        status: b.percentage > 100 ? 'exceeded' : b.percentage > 90 ? 'critical' : b.percentage > 75 ? 'warning' : 'healthy',\r\n      })));\r\n\r\n      // Generate mock cost history\r\n      const history = [];\r\n      for (let i = 29; i >= 0; i--) {\r\n        const date = new Date();\r\n        date.setDate(date.getDate() - i);\r\n        history.push({\r\n          date: format(date, 'MMM dd'),\r\n          cost: Math.random() * 200 + 50,\r\n          openai: Math.random() * 80 + 20,\r\n          youtube: Math.random() * 30 + 10,\r\n          storage: Math.random() * 20 + 5,\r\n          compute: Math.random() * 40 + 10,\r\n        });\r\n      }\r\n      setCostHistory(history);\r\n\r\n      // Generate mock forecasts\r\n      const forecastData: CostForecast[] = [];\r\n      for (let i = 0; i < 7; i++) {\r\n        const date = new Date();\r\n        date.setDate(date.getDate() + i);\r\n        const predicted = Math.random() * 200 + 100;\r\n        forecastData.push({\r\n          date: format(date, 'MMM dd'),\r\n          predicted,\r\n          actual: i === 0 ? predicted * 0.95 : undefined,\r\n          confidenceLow: predicted * 0.8,\r\n          confidenceHigh: predicted * 1.2,\r\n        });\r\n      }\r\n      setForecasts(forecastData);\r\n\r\n      // Fetch alerts\r\n      const alertsResponse = await api.get('/costs/alerts');\r\n      setAlerts(alertsResponse.data || []);\r\n\r\n      setLoading(false);\r\n    } catch (error) {\r\n      console.error('Failed to fetch cost data:', error);\r\n      addNotification({\r\n        type: 'error',\r\n        message: 'Failed to load cost data',\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchCostData();\r\n  }, [timeRange]);\r\n\r\n  // Calculate total budget status\r\n  const budgetStatus = useMemo(() => {\r\n    if (!budgets.length) return null;\r\n\r\n    const totalBudget = budgets.reduce((sum, b) => sum + b.amount, 0);\r\n    const totalSpent = budgets.reduce((sum, b) => sum + b.spent, 0);\r\n    const percentage = (totalSpent / totalBudget) * 100;\r\n\r\n    return {\r\n      totalBudget,\r\n      totalSpent,\r\n      totalRemaining: totalBudget - totalSpent,\r\n      percentage,\r\n      status: percentage > 100 ? 'exceeded' : percentage > 90 ? 'critical' : percentage > 75 ? 'warning' : 'healthy',\r\n    };\r\n  }, [budgets]);\r\n\r\n  // Handle budget creation/edit\r\n  const handleSaveBudget = async (budget: Partial<Budget>) => {\r\n    try {\r\n      if (selectedBudget) {\r\n        await api.put(`/costs/budgets/${selectedBudget.id}`, budget);\r\n      } else {\r\n        await api.post('/costs/budgets', budget);\r\n      }\r\n      \r\n      fetchCostData();\r\n      setBudgetDialogOpen(false);\r\n      setSelectedBudget(null);\r\n      \r\n      addNotification({\r\n        type: 'success',\r\n        message: selectedBudget ? 'Budget updated' : 'Budget created',\r\n      });\r\n    } catch (error) {\r\n      addNotification({\r\n        type: 'error',\r\n        message: 'Failed to save budget',\r\n      });\r\n    }\r\n  };\r\n\r\n  // Render category card\r\n  const renderCategoryCard = (category: CostCategory) => (\r\n    <Card key={category.name} variant=\"outlined\">\r\n      <CardContent>\r\n        <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={1}>\r\n          <Typography variant=\"body2\" color=\"text.secondary\">\r\n            {category.name.replace('_', ' ').toUpperCase()}\r\n          </Typography>\r\n          <Box display=\"flex\" alignItems=\"center\">\r\n            {category.trend > 0 ? (\r\n              <TrendingUp color=\"error\" fontSize=\"small\" />\r\n            ) : (\r\n              <TrendingDown color=\"success\" fontSize=\"small\" />\r\n            )}\r\n            <Typography variant=\"caption\" color={category.trend > 0 ? 'error' : 'success'}>\r\n              {category.trend > 0 ? '+' : ''}{category.trend.toFixed(1)}%\r\n            </Typography>\r\n          </Box>\r\n        </Box>\r\n        <Typography variant=\"h5\" gutterBottom>\r\n          ${category.amount.toFixed(2)}\r\n        </Typography>\r\n        <LinearProgress\r\n          variant=\"determinate\"\r\n          value={category.percentage}\r\n          sx={{\r\n            height: 6,\r\n            borderRadius: 3,\r\n            backgroundColor: '#e0e0e0',\r\n            '& .MuiLinearProgress-bar': {\r\n              backgroundColor: category.color,\r\n            },\r\n          }}\r\n        />\r\n        <Typography variant=\"caption\" color=\"text.secondary\" sx={{ mt: 0.5 }}>\r\n          {category.percentage.toFixed(1)}% of total\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n\r\n  // Render budget card\r\n  const renderBudgetCard = (budget: Budget) => {\r\n    const getStatusColor = () => {\r\n      switch (budget.status) {\r\n        case 'healthy': return 'success';\r\n        case 'warning': return 'warning';\r\n        case 'critical': return 'error';\r\n        case 'exceeded': return 'error';\r\n        default: return 'info';\r\n      }\r\n    };\r\n\r\n    return (\r\n      <Card key={budget.id} variant=\"outlined\">\r\n        <CardContent>\r\n          <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\r\n            <Typography variant=\"h6\">{budget.name}</Typography>\r\n            <Chip\r\n              label={budget.status}\r\n              color={getStatusColor()}\r\n              size=\"small\"\r\n            />\r\n          </Box>\r\n          <Box mb={2}>\r\n            <Box display=\"flex\" justifyContent=\"space-between\" mb={1}>\r\n              <Typography variant=\"body2\">\r\n                ${budget.spent.toFixed(2)} / ${budget.amount.toFixed(2)}\r\n              </Typography>\r\n              <Typography variant=\"body2\" color=\"text.secondary\">\r\n                {budget.percentage.toFixed(0)}%\r\n              </Typography>\r\n            </Box>\r\n            <LinearProgress\r\n              variant=\"determinate\"\r\n              value={Math.min(budget.percentage, 100)}\r\n              color={getStatusColor()}\r\n              sx={{ height: 8, borderRadius: 4 }}\r\n            />\r\n          </Box>\r\n          <Box display=\"flex\" justifyContent=\"space-between\">\r\n            <Typography variant=\"caption\" color=\"text.secondary\">\r\n              Remaining: ${budget.remaining.toFixed(2)}\r\n            </Typography>\r\n            <Typography variant=\"caption\" color=\"text.secondary\">\r\n              {budget.period}\r\n            </Typography>\r\n          </Box>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Box>\r\n      {/* Header */}\r\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\r\n        <Box>\r\n          <Typography variant=\"h4\">Cost Tracking & Budgets</Typography>\r\n          <Typography variant=\"body2\" color=\"text.secondary\">\r\n            Monitor and manage your platform costs\r\n          </Typography>\r\n        </Box>\r\n        <Box display=\"flex\" gap={2}>\r\n          <FormControl size=\"small\" sx={{ minWidth: 120 }}>\r\n            <InputLabel>Period</InputLabel>\r\n            <Select\r\n              value={timeRange}\r\n              label=\"Period\"\r\n              onChange={(e) => setTimeRange(e.target.value as any)}\r\n            >\r\n              <MenuItem value=\"daily\">Daily</MenuItem>\r\n              <MenuItem value=\"weekly\">Weekly</MenuItem>\r\n              <MenuItem value=\"monthly\">Monthly</MenuItem>\r\n              <MenuItem value=\"quarterly\">Quarterly</MenuItem>\r\n            </Select>\r\n          </FormControl>\r\n          <Button\r\n            startIcon={<Add />}\r\n            variant=\"contained\"\r\n            onClick={() => {\r\n              setSelectedBudget(null);\r\n              setBudgetDialogOpen(true);\r\n            }}\r\n          >\r\n            Add Budget\r\n          </Button>\r\n          <Button startIcon={<Download />} variant=\"outlined\">\r\n            Export\r\n          </Button>\r\n          <IconButton onClick={fetchCostData}>\r\n            <Refresh />\r\n          </IconButton>\r\n        </Box>\r\n      </Box>\r\n\r\n      {/* Cost Alerts */}\r\n      {alerts.length > 0 && (\r\n        <Alert severity=\"warning\" sx={{ mb: 3 }}>\r\n          <Typography variant=\"subtitle2\" gutterBottom>\r\n            Cost Alerts\r\n          </Typography>\r\n          {alerts.map((alert, index) => (\r\n            <Typography key={index} variant=\"body2\">\r\n              • {alert.message}\r\n            </Typography>\r\n          ))}\r\n        </Alert>\r\n      )}\r\n\r\n      {/* Summary Cards */}\r\n      <Grid container spacing={3} mb={3}>\r\n        <Grid item xs={12} md={3}>\r\n          <Card>\r\n            <CardContent>\r\n              <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\r\n                <Box>\r\n                  <Typography color=\"text.secondary\" gutterBottom>\r\n                    Total Cost ({timeRange})\r\n                  </Typography>\r\n                  <Typography variant=\"h4\">\r\n                    ${totalCost.toFixed(2)}\r\n                  </Typography>\r\n                  <Box display=\"flex\" alignItems=\"center\" mt={1}>\r\n                    {costTrend > 0 ? (\r\n                      <TrendingUp color=\"error\" fontSize=\"small\" />\r\n                    ) : costTrend < 0 ? (\r\n                      <TrendingDown color=\"success\" fontSize=\"small\" />\r\n                    ) : null}\r\n                    <Typography\r\n                      variant=\"body2\"\r\n                      color={costTrend > 0 ? 'error' : 'success'}\r\n                    >\r\n                      {costTrend > 0 ? '+' : ''}{costTrend.toFixed(1)}% vs last period\r\n                    </Typography>\r\n                  </Box>\r\n                </Box>\r\n                <AttachMoney sx={{ fontSize: 40, color: 'primary.main', opacity: 0.3 }} />\r\n              </Box>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n\r\n        {budgetStatus && (\r\n          <>\r\n            <Grid item xs={12} md={3}>\r\n              <Card>\r\n                <CardContent>\r\n                  <Typography color=\"text.secondary\" gutterBottom>\r\n                    Budget Utilized\r\n                  </Typography>\r\n                  <Typography variant=\"h4\">\r\n                    {budgetStatus.percentage.toFixed(0)}%\r\n                  </Typography>\r\n                  <LinearProgress\r\n                    variant=\"determinate\"\r\n                    value={Math.min(budgetStatus.percentage, 100)}\r\n                    color={\r\n                      budgetStatus.status === 'healthy' ? 'success' :\r\n                      budgetStatus.status === 'warning' ? 'warning' : 'error'\r\n                    }\r\n                    sx={{ mt: 2, height: 8, borderRadius: 4 }}\r\n                  />\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n            <Grid item xs={12} md={3}>\r\n              <Card>\r\n                <CardContent>\r\n                  <Typography color=\"text.secondary\" gutterBottom>\r\n                    Total Budget\r\n                  </Typography>\r\n                  <Typography variant=\"h4\">\r\n                    ${budgetStatus.totalBudget.toFixed(2)}\r\n                  </Typography>\r\n                  <Typography variant=\"body2\" color=\"text.secondary\" mt={1}>\r\n                    {budgets.length} active budgets\r\n                  </Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n            <Grid item xs={12} md={3}>\r\n              <Card>\r\n                <CardContent>\r\n                  <Typography color=\"text.secondary\" gutterBottom>\r\n                    Remaining Budget\r\n                  </Typography>\r\n                  <Typography variant=\"h4\" color={budgetStatus.totalRemaining < 0 ? 'error' : 'inherit'}>\r\n                    ${budgetStatus.totalRemaining.toFixed(2)}\r\n                  </Typography>\r\n                  <Typography variant=\"body2\" color=\"text.secondary\" mt={1}>\r\n                    {Math.ceil(budgetStatus.totalRemaining / (totalCost / 30))} days at current rate\r\n                  </Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n          </>\r\n        )}\r\n      </Grid>\r\n\r\n      {/* View Mode Tabs */}\r\n      <Paper sx={{ mb: 3 }}>\r\n        <ToggleButtonGroup\r\n          value={viewMode}\r\n          exclusive\r\n          onChange={(_, value) => value && setViewMode(value)}\r\n          sx={{ p: 1 }}\r\n        >\r\n          <ToggleButton value=\"overview\">\r\n            <PieChartIcon sx={{ mr: 1 }} />\r\n            Overview\r\n          </ToggleButton>\r\n          <ToggleButton value=\"detailed\">\r\n            <BarChartIcon sx={{ mr: 1 }} />\r\n            Detailed\r\n          </ToggleButton>\r\n          <ToggleButton value=\"forecast\">\r\n            <ShowChart sx={{ mr: 1 }} />\r\n            Forecast\r\n          </ToggleButton>\r\n        </ToggleButtonGroup>\r\n      </Paper>\r\n\r\n      {/* Content based on view mode */}\r\n      {loading ? (\r\n        <Box display=\"flex\" justifyContent=\"center\" p={4}>\r\n          <CircularProgress />\r\n        </Box>\r\n      ) : (\r\n        <>\r\n          {viewMode === 'overview' && (\r\n            <Grid container spacing={3}>\r\n              {/* Category Breakdown */}\r\n              <Grid item xs={12} md={6}>\r\n                <Paper sx={{ p: 2 }}>\r\n                  <Typography variant=\"h6\" gutterBottom>\r\n                    Cost by Category\r\n                  </Typography>\r\n                  <ResponsiveContainer width=\"100%\" height={300}>\r\n                    <PieChart>\r\n                      <Pie\r\n                        data={categories}\r\n                        dataKey=\"amount\"\r\n                        nameKey=\"name\"\r\n                        cx=\"50%\"\r\n                        cy=\"50%\"\r\n                        outerRadius={100}\r\n                        label={(entry) => `${entry.name}: $${entry.amount.toFixed(0)}`}\r\n                      >\r\n                        {categories.map((entry, index) => (\r\n                          <Cell key={`cell-${index}`} fill={entry.color} />\r\n                        ))}\r\n                      </Pie>\r\n                      <ChartTooltip />\r\n                    </PieChart>\r\n                  </ResponsiveContainer>\r\n                </Paper>\r\n              </Grid>\r\n\r\n              {/* Cost Trend */}\r\n              <Grid item xs={12} md={6}>\r\n                <Paper sx={{ p: 2 }}>\r\n                  <Typography variant=\"h6\" gutterBottom>\r\n                    Cost Trend\r\n                  </Typography>\r\n                  <ResponsiveContainer width=\"100%\" height={300}>\r\n                    <AreaChart data={costHistory}>\r\n                      <CartesianGrid strokeDasharray=\"3 3\" />\r\n                      <XAxis dataKey=\"date\" />\r\n                      <YAxis />\r\n                      <ChartTooltip />\r\n                      <Area\r\n                        type=\"monotone\"\r\n                        dataKey=\"cost\"\r\n                        stroke=\"#8884d8\"\r\n                        fill=\"#8884d8\"\r\n                        fillOpacity={0.6}\r\n                      />\r\n                    </AreaChart>\r\n                  </ResponsiveContainer>\r\n                </Paper>\r\n              </Grid>\r\n\r\n              {/* Category Cards */}\r\n              <Grid item xs={12}>\r\n                <Typography variant=\"h6\" gutterBottom>\r\n                  Categories\r\n                </Typography>\r\n                <Grid container spacing={2}>\r\n                  {categories.map((category) => (\r\n                    <Grid item xs={12} sm={6} md={3} key={category.name}>\r\n                      {renderCategoryCard(category)}\r\n                    </Grid>\r\n                  ))}\r\n                </Grid>\r\n              </Grid>\r\n\r\n              {/* Budget Cards */}\r\n              <Grid item xs={12}>\r\n                <Typography variant=\"h6\" gutterBottom>\r\n                  Budgets\r\n                </Typography>\r\n                <Grid container spacing={2}>\r\n                  {budgets.map((budget) => (\r\n                    <Grid item xs={12} sm={6} md={4} key={budget.id}>\r\n                      {renderBudgetCard(budget)}\r\n                    </Grid>\r\n                  ))}\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          )}\r\n\r\n          {viewMode === 'detailed' && (\r\n            <Grid container spacing={3}>\r\n              {/* Stacked Cost Chart */}\r\n              <Grid item xs={12}>\r\n                <Paper sx={{ p: 2 }}>\r\n                  <Typography variant=\"h6\" gutterBottom>\r\n                    Cost Breakdown Over Time\r\n                  </Typography>\r\n                  <ResponsiveContainer width=\"100%\" height={400}>\r\n                    <BarChart data={costHistory}>\r\n                      <CartesianGrid strokeDasharray=\"3 3\" />\r\n                      <XAxis dataKey=\"date\" />\r\n                      <YAxis />\r\n                      <ChartTooltip />\r\n                      <Legend />\r\n                      <Bar dataKey=\"openai\" stackId=\"a\" fill=\"#4CAF50\" />\r\n                      <Bar dataKey=\"youtube\" stackId=\"a\" fill=\"#2196F3\" />\r\n                      <Bar dataKey=\"storage\" stackId=\"a\" fill=\"#9C27B0\" />\r\n                      <Bar dataKey=\"compute\" stackId=\"a\" fill=\"#F44336\" />\r\n                    </BarChart>\r\n                  </ResponsiveContainer>\r\n                </Paper>\r\n              </Grid>\r\n\r\n              {/* Service Comparison Radar */}\r\n              <Grid item xs={12} md={6}>\r\n                <Paper sx={{ p: 2 }}>\r\n                  <Typography variant=\"h6\" gutterBottom>\r\n                    Service Utilization\r\n                  </Typography>\r\n                  <ResponsiveContainer width=\"100%\" height={300}>\r\n                    <RadarChart data={categories}>\r\n                      <PolarGrid />\r\n                      <PolarAngleAxis dataKey=\"name\" />\r\n                      <PolarRadiusAxis />\r\n                      <Radar\r\n                        name=\"Cost\"\r\n                        dataKey=\"amount\"\r\n                        stroke=\"#8884d8\"\r\n                        fill=\"#8884d8\"\r\n                        fillOpacity={0.6}\r\n                      />\r\n                    </RadarChart>\r\n                  </ResponsiveContainer>\r\n                </Paper>\r\n              </Grid>\r\n\r\n              {/* Cost Table */}\r\n              <Grid item xs={12} md={6}>\r\n                <Paper sx={{ p: 2 }}>\r\n                  <Typography variant=\"h6\" gutterBottom>\r\n                    Recent Costs\r\n                  </Typography>\r\n                  <TableContainer>\r\n                    <Table size=\"small\">\r\n                      <TableHead>\r\n                        <TableRow>\r\n                          <TableCell>Service</TableCell>\r\n                          <TableCell>Category</TableCell>\r\n                          <TableCell align=\"right\">Amount</TableCell>\r\n                          <TableCell>Date</TableCell>\r\n                        </TableRow>\r\n                      </TableHead>\r\n                      <TableBody>\r\n                        {[1, 2, 3, 4, 5].map((i) => (\r\n                          <TableRow key={i}>\r\n                            <TableCell>Service {i}</TableCell>\r\n                            <TableCell>\r\n                              <Chip\r\n                                label=\"API\"\r\n                                size=\"small\"\r\n                                sx={{ backgroundColor: CATEGORY_COLORS.openai_api + '20' }}\r\n                              />\r\n                            </TableCell>\r\n                            <TableCell align=\"right\">\r\n                              ${(Math.random() * 50).toFixed(2)}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                              {format(new Date(), 'MMM dd, HH:mm')}\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        ))}\r\n                      </TableBody>\r\n                    </Table>\r\n                  </TableContainer>\r\n                </Paper>\r\n              </Grid>\r\n            </Grid>\r\n          )}\r\n\r\n          {viewMode === 'forecast' && (\r\n            <Grid container spacing={3}>\r\n              {/* Forecast Chart */}\r\n              <Grid item xs={12}>\r\n                <Paper sx={{ p: 2 }}>\r\n                  <Typography variant=\"h6\" gutterBottom>\r\n                    Cost Forecast\r\n                  </Typography>\r\n                  <ResponsiveContainer width=\"100%\" height={400}>\r\n                    <LineChart data={forecasts}>\r\n                      <CartesianGrid strokeDasharray=\"3 3\" />\r\n                      <XAxis dataKey=\"date\" />\r\n                      <YAxis />\r\n                      <ChartTooltip />\r\n                      <Legend />\r\n                      <Line\r\n                        type=\"monotone\"\r\n                        dataKey=\"predicted\"\r\n                        stroke=\"#8884d8\"\r\n                        strokeWidth={2}\r\n                        name=\"Predicted\"\r\n                      />\r\n                      <Line\r\n                        type=\"monotone\"\r\n                        dataKey=\"actual\"\r\n                        stroke=\"#82ca9d\"\r\n                        strokeWidth={2}\r\n                        strokeDasharray=\"5 5\"\r\n                        name=\"Actual\"\r\n                      />\r\n                      <Area\r\n                        type=\"monotone\"\r\n                        dataKey=\"confidenceHigh\"\r\n                        stroke=\"none\"\r\n                        fill=\"#8884d8\"\r\n                        fillOpacity={0.1}\r\n                      />\r\n                      <Area\r\n                        type=\"monotone\"\r\n                        dataKey=\"confidenceLow\"\r\n                        stroke=\"none\"\r\n                        fill=\"#ffffff\"\r\n                        fillOpacity={1}\r\n                      />\r\n                    </LineChart>\r\n                  </ResponsiveContainer>\r\n                </Paper>\r\n              </Grid>\r\n\r\n              {/* Forecast Summary */}\r\n              <Grid item xs={12}>\r\n                <Grid container spacing={2}>\r\n                  <Grid item xs={12} md={4}>\r\n                    <Card>\r\n                      <CardContent>\r\n                        <Typography color=\"text.secondary\" gutterBottom>\r\n                          Next 7 Days Forecast\r\n                        </Typography>\r\n                        <Typography variant=\"h4\">\r\n                          ${forecasts.reduce((sum, f) => sum + f.predicted, 0).toFixed(2)}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" color=\"text.secondary\">\r\n                          ± ${((forecasts[0]?.predicted || 0) * 0.2).toFixed(2)} confidence interval\r\n                        </Typography>\r\n                      </CardContent>\r\n                    </Card>\r\n                  </Grid>\r\n                  <Grid item xs={12} md={4}>\r\n                    <Card>\r\n                      <CardContent>\r\n                        <Typography color=\"text.secondary\" gutterBottom>\r\n                          Monthly Projection\r\n                        </Typography>\r\n                        <Typography variant=\"h4\">\r\n                          ${(totalCost * 30 / 7).toFixed(2)}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" color=\"text.secondary\">\r\n                          Based on current usage patterns\r\n                        </Typography>\r\n                      </CardContent>\r\n                    </Card>\r\n                  </Grid>\r\n                  <Grid item xs={12} md={4}>\r\n                    <Card>\r\n                      <CardContent>\r\n                        <Typography color=\"text.secondary\" gutterBottom>\r\n                          Cost Optimization Potential\r\n                        </Typography>\r\n                        <Typography variant=\"h4\" color=\"success.main\">\r\n                          ${(totalCost * 0.15).toFixed(2)}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" color=\"text.secondary\">\r\n                          ~15% possible savings identified\r\n                        </Typography>\r\n                      </CardContent>\r\n                    </Card>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          )}\r\n        </>\r\n      )}\r\n\r\n      {/* Budget Dialog */}\r\n      <Dialog open={budgetDialogOpen} onClose={() => setBudgetDialogOpen(false)} maxWidth=\"sm\" fullWidth>\r\n        <DialogTitle>\r\n          {selectedBudget ? 'Edit Budget' : 'Create Budget'}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <Stack spacing={2} sx={{ mt: 1 }}>\r\n            <TextField\r\n              label=\"Budget Name\"\r\n              fullWidth\r\n              defaultValue={selectedBudget?.name}\r\n            />\r\n            <TextField\r\n              label=\"Amount\"\r\n              type=\"number\"\r\n              fullWidth\r\n              defaultValue={selectedBudget?.amount}\r\n              InputProps={{\r\n                startAdornment: '$',\r\n              }}\r\n            />\r\n            <FormControl fullWidth>\r\n              <InputLabel>Period</InputLabel>\r\n              <Select defaultValue={selectedBudget?.period || 'monthly'}>\r\n                <MenuItem value=\"daily\">Daily</MenuItem>\r\n                <MenuItem value=\"weekly\">Weekly</MenuItem>\r\n                <MenuItem value=\"monthly\">Monthly</MenuItem>\r\n                <MenuItem value=\"quarterly\">Quarterly</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n            <FormControl fullWidth>\r\n              <InputLabel>Category (Optional)</InputLabel>\r\n              <Select defaultValue={selectedBudget?.category || ''}>\r\n                <MenuItem value=\"\">All Categories</MenuItem>\r\n                {Object.keys(CATEGORY_COLORS).map((cat) => (\r\n                  <MenuItem key={cat} value={cat}>\r\n                    {cat.replace('_', ' ').toUpperCase()}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n            <TextField\r\n              label=\"Alert Thresholds (%)\"\r\n              fullWidth\r\n              defaultValue=\"50,75,90,100\"\r\n              helperText=\"Comma-separated percentages for alerts\"\r\n            />\r\n          </Stack>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setBudgetDialogOpen(false)}>Cancel</Button>\r\n          <Button onClick={() => handleSaveBudget({})} variant=\"contained\">\r\n            Save\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Box>\r\n  );\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Dashboard\\BusinessIntelligenceDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useMemo' is defined but never used.","line":6,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ButtonGroup' is defined but never used.","line":22,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'List' is defined but never used.","line":37,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ListItem' is defined but never used.","line":38,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ListItemIcon' is defined but never used.","line":39,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ListItemText' is defined but never used.","line":40,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ListItemSecondaryAction' is defined but never used.","line":41,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Divider' is defined but never used.","line":42,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":42,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Badge' is defined but never used.","line":43,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":43,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Tooltip' is defined but never used.","line":44,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":44,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Dialog' is defined but never used.","line":45,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":45,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DialogTitle' is defined but never used.","line":46,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DialogContent' is defined but never used.","line":47,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":47,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DialogActions' is defined but never used.","line":48,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Analytics' is defined but never used.","line":59,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":59,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Warning' is defined but never used.","line":61,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":61,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CheckCircle' is defined but never used.","line":62,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":62,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Error' is defined but never used.","line":63,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":63,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Fullscreen' is defined but never used.","line":67,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":67,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FilterList' is defined but never used.","line":68,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":68,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DateRange' is defined but never used.","line":69,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":69,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Assessment' is defined but never used.","line":70,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":70,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'PieChart' is defined but never used.","line":71,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":71,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'BarChartIcon' is defined but never used.","line":72,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":72,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ShowChart' is defined but never used.","line":73,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":73,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Timeline' is defined but never used.","line":74,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":74,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ThumbUp' is defined but never used.","line":76,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":76,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Visibility' is defined but never used.","line":77,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":77,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Schedule' is defined but never used.","line":78,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":78,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Business' is defined but never used.","line":80,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":80,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Growth' is defined but never used.","line":81,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":81,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Engineering' is defined but never used.","line":82,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":82,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Psychology' is defined but never used.","line":83,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":83,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'BarChart' is defined but never used.","line":91,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":91,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Pie' is defined but never used.","line":94,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":94,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'RadialBarChart' is defined but never used.","line":103,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":103,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'RadialBar' is defined but never used.","line":104,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":104,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Treemap' is defined but never used.","line":105,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":105,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FunnelChart' is defined but never used.","line":106,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":106,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Funnel' is defined but never used.","line":107,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":107,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'format' is defined but never used.","line":110,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":110,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'subDays' is defined but never used.","line":110,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":110,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'startOfMonth' is defined but never used.","line":110,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":110,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'endOfMonth' is defined but never used.","line":110,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":110,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'subMonths' is defined but never used.","line":110,"column":53,"nodeType":null,"messageId":"unusedVar","endLine":110,"endColumn":62},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'selectedMetric' is assigned a value but never used.","line":210,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":210,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setSelectedMetric' is assigned a value but never used.","line":210,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":210,"endColumn":43},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":218,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":218,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4404,4407],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4404,4407],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":219,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":219,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4459,4462],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4459,4462],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":49,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Business Intelligence Dashboard\n * Executive-level dashboard with comprehensive business metrics, financial reports, and strategic insights\n */\n\nimport React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport {\n  Box,\n  Grid,\n  Card,\n  CardContent,\n  CardHeader,\n  Typography,\n  Paper,\n  Tabs,\n  Tab,\n  Select,\n  MenuItem,\n  FormControl,\n  InputLabel,\n  Button,\n  ButtonGroup,\n  IconButton,\n  Chip,\n  Alert,\n  AlertTitle,\n  Skeleton,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  LinearProgress,\n  CircularProgress,\n  Avatar,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  ListItemSecondaryAction,\n  Divider,\n  Badge,\n  Tooltip,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Switch,\n  FormControlLabel,\n} from '@mui/material';\nimport {\n  TrendingUp,\n  TrendingDown,\n  TrendingFlat,\n  AttachMoney,\n  People,\n  VideoLibrary,\n  Analytics,\n  Speed,\n  Warning,\n  CheckCircle,\n  Error,\n  Info,\n  Refresh,\n  Download,\n  Fullscreen,\n  FilterList,\n  DateRange,\n  Assessment,\n  PieChart,\n  BarChart as BarChartIcon,\n  ShowChart,\n  Timeline,\n  Star,\n  ThumbUp,\n  Visibility,\n  Schedule,\n  AccountBalance,\n  Business,\n  Growth,\n  Engineering,\n  Psychology,\n  Lightbulb,\n} from '@mui/icons-material';\nimport {\n  LineChart,\n  Line,\n  AreaChart,\n  Area,\n  BarChart,\n  Bar,\n  PieChart as RechartsPie,\n  Pie,\n  Cell,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip as RechartsTooltip,\n  Legend,\n  ResponsiveContainer,\n  ComposedChart,\n  RadialBarChart,\n  RadialBar,\n  Treemap,\n  FunnelChart,\n  Funnel,\n  LabelList,\n} from 'recharts';\nimport { format, subDays, startOfMonth, endOfMonth, subMonths } from 'date-fns';\nimport { useOptimizedStore } from '../../stores/optimizedStore';\nimport { api } from '../../services/api';\n\ninterface ExecutiveMetric {\n  id: string;\n  name: string;\n  value: number | string;\n  previousValue: number | string;\n  change: number;\n  changePercent: number;\n  trend: 'up' | 'down' | 'flat';\n  status: 'excellent' | 'good' | 'warning' | 'critical';\n  target?: number;\n  unit: string;\n  category: 'revenue' | 'growth' | 'efficiency' | 'quality';\n  description: string;\n  icon: React.ReactNode;\n  color: string;\n}\n\ninterface BusinessKPI {\n  id: string;\n  name: string;\n  current: number;\n  target: number;\n  benchmark: number;\n  trend: number[];\n  status: 'on_track' | 'at_risk' | 'critical';\n  category: string;\n  unit: string;\n}\n\ninterface FinancialMetric {\n  period: string;\n  revenue: number;\n  costs: number;\n  profit: number;\n  margin: number;\n  users: number;\n  arpu: number;\n  ltv: number;\n  cac: number;\n}\n\ninterface UserSegment {\n  segment: string;\n  count: number;\n  percentage: number;\n  revenue: number;\n  avgLifetime: number;\n  churnRate: number;\n  growthRate: number;\n}\n\ninterface CompetitiveMetric {\n  metric: string;\n  ourValue: number;\n  industry: number;\n  leader: number;\n  position: string;\n}\n\nconst CHART_COLORS = {\n  primary: '#1976d2',\n  secondary: '#dc004e',\n  success: '#2e7d32',\n  warning: '#ed6c02',\n  error: '#d32f2f',\n  info: '#0288d1',\n  revenue: '#4caf50',\n  costs: '#f44336',\n  profit: '#2e7d32',\n  users: '#3f51b5',\n};\n\nconst TIME_PERIODS = [\n  { value: '24h', label: '24 Hours' },\n  { value: '7d', label: '7 Days' },\n  { value: '30d', label: '30 Days' },\n  { value: '90d', label: '90 Days' },\n  { value: '1y', label: '1 Year' },\n];\n\nconst DASHBOARD_TABS = [\n  'Executive Overview',\n  'Financial Performance',\n  'Growth Analytics',\n  'User Intelligence',\n  'Operational Metrics',\n  'Strategic Insights',\n];\n\nexport const BusinessIntelligenceDashboard: React.FC = () => {\n  // State management\n  const [selectedTab, setSelectedTab] = useState(0);\n  const [timePeriod, setTimePeriod] = useState('30d');\n  const [loading, setLoading] = useState(true);\n  const [autoRefresh, setAutoRefresh] = useState(true);\n  const [showTargets, setShowTargets] = useState(true);\n  const [selectedMetric, setSelectedMetric] = useState<string | null>(null);\n  \n  // Data state\n  const [executiveMetrics, setExecutiveMetrics] = useState<ExecutiveMetric[]>([]);\n  const [businessKPIs, setBusinessKPIs] = useState<BusinessKPI[]>([]);\n  const [financialData, setFinancialData] = useState<FinancialMetric[]>([]);\n  const [userSegments, setUserSegments] = useState<UserSegment[]>([]);\n  const [competitiveMetrics, setCompetitiveMetrics] = useState<CompetitiveMetric[]>([]);\n  const [alerts, setAlerts] = useState<any[]>([]);\n  const [insights, setInsights] = useState<any[]>([]);\n\n  const { addNotification } = useOptimizedStore();\n\n  // Fetch comprehensive business intelligence data\n  const fetchBIData = useCallback(async () => {\n    try {\n      setLoading(true);\n\n      // Parallel API calls for executive dashboard\n      const [\n        executiveResponse,\n        kpiResponse,\n        financialResponse,\n        segmentResponse,\n        competitiveResponse,\n        alertsResponse,\n        insightsResponse,\n      ] = await Promise.all([\n        api.get(`/bi/executive-metrics?period=${timePeriod}`),\n        api.get(`/bi/business-kpis?period=${timePeriod}`),\n        api.get(`/bi/financial-performance?period=${timePeriod}`),\n        api.get(`/bi/user-segments?period=${timePeriod}`),\n        api.get(`/bi/competitive-analysis`),\n        api.get(`/bi/alerts`),\n        api.get(`/bi/insights?period=${timePeriod}`),\n      ]);\n\n      // Process executive metrics\n      const metrics: ExecutiveMetric[] = [\n        {\n          id: 'mrr',\n          name: 'Monthly Recurring Revenue',\n          value: executiveResponse.data.mrr || 0,\n          previousValue: executiveResponse.data.previous_mrr || 0,\n          change: executiveResponse.data.mrr_change || 0,\n          changePercent: executiveResponse.data.mrr_change_percent || 0,\n          trend: executiveResponse.data.mrr_change >= 0 ? 'up' : 'down',\n          status: executiveResponse.data.mrr >= 10000 ? 'excellent' : 'good',\n          target: 10000,\n          unit: '$',\n          category: 'revenue',\n          description: 'Monthly recurring revenue from subscriptions',\n          icon: <AttachMoney />,\n          color: CHART_COLORS.revenue,\n        },\n        {\n          id: 'arr',\n          name: 'Annual Recurring Revenue',\n          value: executiveResponse.data.arr || 0,\n          previousValue: executiveResponse.data.previous_arr || 0,\n          change: executiveResponse.data.arr_change || 0,\n          changePercent: executiveResponse.data.arr_change_percent || 0,\n          trend: executiveResponse.data.arr_change >= 0 ? 'up' : 'down',\n          status: executiveResponse.data.arr >= 120000 ? 'excellent' : 'good',\n          target: 120000,\n          unit: '$',\n          category: 'revenue',\n          description: 'Annual recurring revenue projection',\n          icon: <AccountBalance />,\n          color: CHART_COLORS.success,\n        },\n        {\n          id: 'active_users',\n          name: 'Monthly Active Users',\n          value: executiveResponse.data.mau || 0,\n          previousValue: executiveResponse.data.previous_mau || 0,\n          change: executiveResponse.data.mau_change || 0,\n          changePercent: executiveResponse.data.mau_change_percent || 0,\n          trend: executiveResponse.data.mau_change >= 0 ? 'up' : 'down',\n          status: executiveResponse.data.mau >= 100 ? 'excellent' : 'good',\n          target: 100,\n          unit: 'users',\n          category: 'growth',\n          description: 'Monthly active user count',\n          icon: <People />,\n          color: CHART_COLORS.users,\n        },\n        {\n          id: 'videos_generated',\n          name: 'Videos Generated',\n          value: executiveResponse.data.videos_generated || 0,\n          previousValue: executiveResponse.data.previous_videos || 0,\n          change: executiveResponse.data.videos_change || 0,\n          changePercent: executiveResponse.data.videos_change_percent || 0,\n          trend: executiveResponse.data.videos_change >= 0 ? 'up' : 'down',\n          status: executiveResponse.data.videos_generated >= 1000 ? 'excellent' : 'good',\n          target: 1000,\n          unit: 'videos',\n          category: 'efficiency',\n          description: 'Total videos generated by platform',\n          icon: <VideoLibrary />,\n          color: CHART_COLORS.primary,\n        },\n        {\n          id: 'cost_per_video',\n          name: 'Average Cost per Video',\n          value: executiveResponse.data.avg_cost_per_video || 0,\n          previousValue: executiveResponse.data.previous_cost_per_video || 0,\n          change: executiveResponse.data.cost_change || 0,\n          changePercent: executiveResponse.data.cost_change_percent || 0,\n          trend: executiveResponse.data.cost_change <= 0 ? 'up' : 'down', // Lower cost is better\n          status: executiveResponse.data.avg_cost_per_video <= 2 ? 'excellent' : 'warning',\n          target: 2,\n          unit: '$',\n          category: 'efficiency',\n          description: 'Average cost to generate one video',\n          icon: <Speed />,\n          color: CHART_COLORS.warning,\n        },\n        {\n          id: 'quality_score',\n          name: 'Content Quality Score',\n          value: executiveResponse.data.quality_score || 0,\n          previousValue: executiveResponse.data.previous_quality || 0,\n          change: executiveResponse.data.quality_change || 0,\n          changePercent: executiveResponse.data.quality_change_percent || 0,\n          trend: executiveResponse.data.quality_change >= 0 ? 'up' : 'down',\n          status: executiveResponse.data.quality_score >= 8 ? 'excellent' : 'good',\n          target: 8,\n          unit: '/10',\n          category: 'quality',\n          description: 'Average quality score of generated content',\n          icon: <Star />,\n          color: CHART_COLORS.secondary,\n        },\n      ];\n\n      setExecutiveMetrics(metrics);\n      setBusinessKPIs(kpiResponse.data || []);\n      setFinancialData(financialResponse.data || []);\n      setUserSegments(segmentResponse.data || []);\n      setCompetitiveMetrics(competitiveResponse.data || []);\n      setAlerts(alertsResponse.data || []);\n      setInsights(insightsResponse.data || []);\n      \n      setLoading(false);\n    } catch (error) {\n      console.error('Failed to fetch BI data:', error);\n      addNotification({\n        type: 'error',\n        message: 'Failed to load business intelligence data',\n      });\n      setLoading(false);\n    }\n  }, [timePeriod, addNotification]);\n\n  // Effects\n  useEffect(() => {\n    fetchBIData();\n  }, [fetchBIData]);\n\n  // Auto-refresh effect\n  useEffect(() => {\n    if (!autoRefresh) return;\n    \n    const interval = setInterval(fetchBIData, 5 * 60 * 1000); // 5 minutes\n    return () => clearInterval(interval);\n  }, [autoRefresh, fetchBIData]);\n\n  // Render executive metric card\n  const renderExecutiveMetric = (metric: ExecutiveMetric) => {\n    const getStatusColor = () => {\n      switch (metric.status) {\n        case 'excellent': return 'success';\n        case 'good': return 'info';\n        case 'warning': return 'warning';\n        case 'critical': return 'error';\n        default: return 'info';\n      }\n    };\n\n    const formatValue = (value: number | string) => {\n      if (typeof value === 'string') return value;\n      if (metric.unit === '$') return `$${value.toLocaleString()}`;\n      return `${value.toLocaleString()}${metric.unit}`;\n    };\n\n    const getTrendIcon = () => {\n      switch (metric.trend) {\n        case 'up':\n          return <TrendingUp sx={{ color: metric.category === 'efficiency' && metric.id === 'cost_per_video' ? 'error.main' : 'success.main' }} />;\n        case 'down':\n          return <TrendingDown sx={{ color: metric.category === 'efficiency' && metric.id === 'cost_per_video' ? 'success.main' : 'error.main' }} />;\n        default:\n          return <TrendingFlat color=\"action\" />;\n      }\n    };\n\n    return (\n      <Card key={metric.id} sx={{ height: '100%' }}>\n        <CardContent>\n          <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\" mb={1}>\n            <Box display=\"flex\" alignItems=\"center\">\n              <Avatar sx={{ bgcolor: metric.color, width: 40, height: 40, mr: 2 }}>\n                {metric.icon}\n              </Avatar>\n              <Box>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  {metric.name}\n                </Typography>\n                <Typography variant=\"h5\" fontWeight=\"bold\" sx={{ color: metric.color }}>\n                  {formatValue(metric.value)}\n                </Typography>\n              </Box>\n            </Box>\n            <Chip \n              label={metric.status.toUpperCase()} \n              color={getStatusColor()}\n              size=\"small\"\n              variant=\"outlined\"\n            />\n          </Box>\n          \n          <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\" mb={1}>\n            <Box display=\"flex\" alignItems=\"center\">\n              {getTrendIcon()}\n              <Typography \n                variant=\"body2\" \n                sx={{ \n                  ml: 0.5,\n                  color: metric.changePercent >= 0 ? 'success.main' : 'error.main' \n                }}\n              >\n                {metric.changePercent >= 0 ? '+' : ''}{metric.changePercent.toFixed(1)}%\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\" sx={{ ml: 1 }}>\n                vs prev period\n              </Typography>\n            </Box>\n          </Box>\n\n          {showTargets && metric.target && (\n            <Box>\n              <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={0.5}>\n                <Typography variant=\"caption\" color=\"text.secondary\">\n                  Target: {formatValue(metric.target)}\n                </Typography>\n                <Typography variant=\"caption\" color=\"text.secondary\">\n                  {Math.round((Number(metric.value) / metric.target) * 100)}%\n                </Typography>\n              </Box>\n              <LinearProgress\n                variant=\"determinate\"\n                value={Math.min((Number(metric.value) / metric.target) * 100, 100)}\n                sx={{\n                  height: 6,\n                  borderRadius: 3,\n                  backgroundColor: `${metric.color}20`,\n                  '& .MuiLinearProgress-bar': {\n                    backgroundColor: metric.color,\n                  },\n                }}\n              />\n            </Box>\n          )}\n          \n          <Typography variant=\"caption\" color=\"text.secondary\" sx={{ mt: 1, display: 'block' }}>\n            {metric.description}\n          </Typography>\n        </CardContent>\n      </Card>\n    );\n  };\n\n  // Render financial performance chart\n  const renderFinancialChart = () => (\n    <ResponsiveContainer width=\"100%\" height={400}>\n      <ComposedChart data={financialData} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"period\" />\n        <YAxis yAxisId=\"left\" />\n        <YAxis yAxisId=\"right\" orientation=\"right\" />\n        <RechartsTooltip />\n        <Legend />\n        <Bar yAxisId=\"left\" dataKey=\"revenue\" fill={CHART_COLORS.revenue} name=\"Revenue ($)\" />\n        <Bar yAxisId=\"left\" dataKey=\"costs\" fill={CHART_COLORS.costs} name=\"Costs ($)\" />\n        <Line yAxisId=\"right\" type=\"monotone\" dataKey=\"margin\" stroke={CHART_COLORS.profit} strokeWidth={3} name=\"Profit Margin (%)\" />\n      </ComposedChart>\n    </ResponsiveContainer>\n  );\n\n  // Render user segments chart\n  const renderUserSegmentsChart = () => {\n    const segmentData = userSegments.map(segment => ({\n      name: segment.segment,\n      value: segment.percentage,\n      count: segment.count,\n      revenue: segment.revenue,\n    }));\n\n    const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8'];\n\n    return (\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <RechartsPie data={segmentData} cx=\"50%\" cy=\"50%\" outerRadius={100} dataKey=\"value\">\n          {segmentData.map((entry, index) => (\n            <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n          ))}\n          <LabelList dataKey=\"name\" position=\"outside\" />\n        </RechartsPie>\n      </ResponsiveContainer>\n    );\n  };\n\n  // Render KPI dashboard\n  const renderKPIDashboard = () => (\n    <Grid container spacing={2}>\n      {businessKPIs.map((kpi) => (\n        <Grid item xs={12} sm={6} md={4} key={kpi.id}>\n          <Card sx={{ height: '100%' }}>\n            <CardContent>\n              <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n                {kpi.name}\n              </Typography>\n              <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\" mb={1}>\n                <Typography variant=\"h6\" fontWeight=\"bold\">\n                  {kpi.current.toLocaleString()}{kpi.unit}\n                </Typography>\n                <Chip \n                  label={kpi.status.replace('_', ' ').toUpperCase()} \n                  color={kpi.status === 'on_track' ? 'success' : kpi.status === 'at_risk' ? 'warning' : 'error'}\n                  size=\"small\"\n                />\n              </Box>\n              <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={1}>\n                <Typography variant=\"caption\" color=\"text.secondary\">\n                  Target: {kpi.target.toLocaleString()}{kpi.unit}\n                </Typography>\n                <Typography variant=\"caption\" color=\"text.secondary\">\n                  Industry: {kpi.benchmark.toLocaleString()}{kpi.unit}\n                </Typography>\n              </Box>\n              <LinearProgress\n                variant=\"determinate\"\n                value={(kpi.current / kpi.target) * 100}\n                color={kpi.status === 'on_track' ? 'success' : kpi.status === 'at_risk' ? 'warning' : 'error'}\n                sx={{ mb: 1 }}\n              />\n              <ResponsiveContainer width=\"100%\" height={60}>\n                <LineChart data={kpi.trend.map((value, index) => ({ index, value }))}>\n                  <Line type=\"monotone\" dataKey=\"value\" stroke=\"#8884d8\" strokeWidth={2} dot={false} />\n                </LineChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        </Grid>\n      ))}\n    </Grid>\n  );\n\n  // Render competitive analysis\n  const renderCompetitiveAnalysis = () => (\n    <TableContainer component={Paper}>\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell>Metric</TableCell>\n            <TableCell align=\"right\">Our Value</TableCell>\n            <TableCell align=\"right\">Industry Average</TableCell>\n            <TableCell align=\"right\">Market Leader</TableCell>\n            <TableCell>Position</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {competitiveMetrics.map((metric, index) => (\n            <TableRow key={index}>\n              <TableCell>{metric.metric}</TableCell>\n              <TableCell align=\"right\">{metric.ourValue.toLocaleString()}</TableCell>\n              <TableCell align=\"right\">{metric.industry.toLocaleString()}</TableCell>\n              <TableCell align=\"right\">{metric.leader.toLocaleString()}</TableCell>\n              <TableCell>\n                <Chip \n                  label={metric.position} \n                  color={\n                    metric.position === 'Leading' ? 'success' : \n                    metric.position === 'Competitive' ? 'info' : 'warning'\n                  }\n                  size=\"small\"\n                />\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n\n  // Render strategic insights\n  const renderStrategicInsights = () => (\n    <Box>\n      <Typography variant=\"h6\" gutterBottom>\n        Strategic Insights & Recommendations\n      </Typography>\n      <Grid container spacing={2}>\n        {insights.map((insight, index) => (\n          <Grid item xs={12} md={6} key={index}>\n            <Card>\n              <CardContent>\n                <Box display=\"flex\" alignItems=\"center\" mb={1}>\n                  <Lightbulb color=\"primary\" sx={{ mr: 1 }} />\n                  <Typography variant=\"subtitle1\" fontWeight=\"bold\">\n                    {insight.title}\n                  </Typography>\n                </Box>\n                <Typography variant=\"body2\" color=\"text.secondary\" paragraph>\n                  {insight.description}\n                </Typography>\n                <Box>\n                  <Typography variant=\"caption\" color=\"text.secondary\">\n                    Impact: {insight.impact} • Effort: {insight.effort}\n                  </Typography>\n                </Box>\n                <Box mt={1}>\n                  {insight.tags?.map((tag: string, tagIndex: number) => (\n                    <Chip key={tagIndex} label={tag} size=\"small\" sx={{ mr: 0.5, mb: 0.5 }} />\n                  ))}\n                </Box>\n              </CardContent>\n            </Card>\n          </Grid>\n        ))}\n      </Grid>\n    </Box>\n  );\n\n  // Render alerts section\n  const renderAlerts = () => (\n    <Box mb={3}>\n      <Typography variant=\"h6\" gutterBottom>\n        Business Alerts\n      </Typography>\n      {alerts.length === 0 ? (\n        <Alert severity=\"success\">\n          <AlertTitle>All Systems Operational</AlertTitle>\n          No critical business alerts at this time.\n        </Alert>\n      ) : (\n        alerts.map((alert, index) => (\n          <Alert \n            key={index} \n            severity={alert.severity || 'info'} \n            sx={{ mb: 1 }}\n            action={\n              <IconButton size=\"small\">\n                <Info />\n              </IconButton>\n            }\n          >\n            <AlertTitle>{alert.title}</AlertTitle>\n            {alert.message}\n          </Alert>\n        ))\n      )}\n    </Box>\n  );\n\n  if (loading) {\n    return (\n      <Box p={3}>\n        <Grid container spacing={3}>\n          {[1, 2, 3, 4, 5, 6].map((i) => (\n            <Grid item xs={12} md={6} lg={4} key={i}>\n              <Skeleton variant=\"rectangular\" height={200} />\n            </Grid>\n          ))}\n        </Grid>\n      </Box>\n    );\n  }\n\n  return (\n    <Box p={3}>\n      {/* Header */}\n      <Paper sx={{ p: 2, mb: 3 }}>\n        <Grid container spacing={2} alignItems=\"center\">\n          <Grid item xs>\n            <Typography variant=\"h4\" fontWeight=\"bold\">\n              Business Intelligence Dashboard\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              Executive insights, financial performance, and strategic analytics\n            </Typography>\n          </Grid>\n          \n          <Grid item>\n            <FormControl size=\"small\" sx={{ minWidth: 120 }}>\n              <InputLabel>Time Period</InputLabel>\n              <Select\n                value={timePeriod}\n                label=\"Time Period\"\n                onChange={(e) => setTimePeriod(e.target.value)}\n              >\n                {TIME_PERIODS.map((period) => (\n                  <MenuItem key={period.value} value={period.value}>\n                    {period.label}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </Grid>\n          \n          <Grid item>\n            <FormControlLabel\n              control={\n                <Switch\n                  checked={autoRefresh}\n                  onChange={(e) => setAutoRefresh(e.target.checked)}\n                />\n              }\n              label=\"Auto Refresh\"\n            />\n          </Grid>\n          \n          <Grid item>\n            <FormControlLabel\n              control={\n                <Switch\n                  checked={showTargets}\n                  onChange={(e) => setShowTargets(e.target.checked)}\n                />\n              }\n              label=\"Show Targets\"\n            />\n          </Grid>\n          \n          <Grid item>\n            <Button onClick={fetchBIData} startIcon={<Refresh />}>\n              Refresh\n            </Button>\n          </Grid>\n          \n          <Grid item>\n            <Button startIcon={<Download />} variant=\"outlined\">\n              Export Report\n            </Button>\n          </Grid>\n        </Grid>\n      </Paper>\n\n      {/* Alerts */}\n      {renderAlerts()}\n\n      {/* Executive Metrics */}\n      <Paper sx={{ p: 2, mb: 3 }}>\n        <Typography variant=\"h6\" gutterBottom>\n          Executive Metrics\n        </Typography>\n        <Grid container spacing={3}>\n          {executiveMetrics.map((metric) => (\n            <Grid item xs={12} sm={6} lg={4} key={metric.id}>\n              {renderExecutiveMetric(metric)}\n            </Grid>\n          ))}\n        </Grid>\n      </Paper>\n\n      {/* Tabbed Content */}\n      <Paper sx={{ mb: 3 }}>\n        <Tabs \n          value={selectedTab} \n          onChange={(e, newValue) => setSelectedTab(newValue)}\n          scrollButtons=\"auto\"\n          variant=\"scrollable\"\n        >\n          {DASHBOARD_TABS.map((tab, index) => (\n            <Tab key={index} label={tab} />\n          ))}\n        </Tabs>\n\n        <Box p={3}>\n          {selectedTab === 0 && renderKPIDashboard()}\n          \n          {selectedTab === 1 && (\n            <Box>\n              <Typography variant=\"h6\" gutterBottom>\n                Financial Performance\n              </Typography>\n              {renderFinancialChart()}\n            </Box>\n          )}\n          \n          {selectedTab === 2 && (\n            <Box>\n              <Typography variant=\"h6\" gutterBottom>\n                Growth Analytics\n              </Typography>\n              <Grid container spacing={3}>\n                <Grid item xs={12} md={6}>\n                  <Card>\n                    <CardHeader title=\"User Growth Trend\" />\n                    <CardContent>\n                      <ResponsiveContainer width=\"100%\" height={300}>\n                        <AreaChart data={financialData}>\n                          <CartesianGrid strokeDasharray=\"3 3\" />\n                          <XAxis dataKey=\"period\" />\n                          <YAxis />\n                          <RechartsTooltip />\n                          <Area type=\"monotone\" dataKey=\"users\" stroke={CHART_COLORS.users} fill={CHART_COLORS.users} />\n                        </AreaChart>\n                      </ResponsiveContainer>\n                    </CardContent>\n                  </Card>\n                </Grid>\n                <Grid item xs={12} md={6}>\n                  <Card>\n                    <CardHeader title=\"Revenue Growth\" />\n                    <CardContent>\n                      <ResponsiveContainer width=\"100%\" height={300}>\n                        <LineChart data={financialData}>\n                          <CartesianGrid strokeDasharray=\"3 3\" />\n                          <XAxis dataKey=\"period\" />\n                          <YAxis />\n                          <RechartsTooltip />\n                          <Line type=\"monotone\" dataKey=\"revenue\" stroke={CHART_COLORS.revenue} strokeWidth={3} />\n                        </LineChart>\n                      </ResponsiveContainer>\n                    </CardContent>\n                  </Card>\n                </Grid>\n              </Grid>\n            </Box>\n          )}\n          \n          {selectedTab === 3 && (\n            <Box>\n              <Typography variant=\"h6\" gutterBottom>\n                User Intelligence\n              </Typography>\n              <Grid container spacing={3}>\n                <Grid item xs={12} md={6}>\n                  <Card>\n                    <CardHeader title=\"User Segments\" />\n                    <CardContent>\n                      {renderUserSegmentsChart()}\n                    </CardContent>\n                  </Card>\n                </Grid>\n                <Grid item xs={12} md={6}>\n                  <Card>\n                    <CardHeader title=\"Segment Details\" />\n                    <CardContent>\n                      <TableContainer>\n                        <Table size=\"small\">\n                          <TableHead>\n                            <TableRow>\n                              <TableCell>Segment</TableCell>\n                              <TableCell align=\"right\">Users</TableCell>\n                              <TableCell align=\"right\">Revenue</TableCell>\n                              <TableCell align=\"right\">Churn %</TableCell>\n                            </TableRow>\n                          </TableHead>\n                          <TableBody>\n                            {userSegments.map((segment, index) => (\n                              <TableRow key={index}>\n                                <TableCell>{segment.segment}</TableCell>\n                                <TableCell align=\"right\">{segment.count.toLocaleString()}</TableCell>\n                                <TableCell align=\"right\">${segment.revenue.toLocaleString()}</TableCell>\n                                <TableCell align=\"right\">{segment.churnRate.toFixed(1)}%</TableCell>\n                              </TableRow>\n                            ))}\n                          </TableBody>\n                        </Table>\n                      </TableContainer>\n                    </CardContent>\n                  </Card>\n                </Grid>\n              </Grid>\n            </Box>\n          )}\n          \n          {selectedTab === 4 && (\n            <Box>\n              <Typography variant=\"h6\" gutterBottom>\n                Operational Metrics\n              </Typography>\n              <Grid container spacing={3}>\n                <Grid item xs={12}>\n                  <Card>\n                    <CardHeader title=\"System Performance\" />\n                    <CardContent>\n                      <Grid container spacing={2}>\n                        <Grid item xs={12} sm={3}>\n                          <Box textAlign=\"center\">\n                            <CircularProgress \n                              variant=\"determinate\" \n                              value={95} \n                              size={60}\n                              color=\"success\"\n                            />\n                            <Typography variant=\"h6\">95%</Typography>\n                            <Typography variant=\"caption\">Uptime</Typography>\n                          </Box>\n                        </Grid>\n                        <Grid item xs={12} sm={3}>\n                          <Box textAlign=\"center\">\n                            <CircularProgress \n                              variant=\"determinate\" \n                              value={87} \n                              size={60}\n                              color=\"info\"\n                            />\n                            <Typography variant=\"h6\">87%</Typography>\n                            <Typography variant=\"caption\">Quality Score</Typography>\n                          </Box>\n                        </Grid>\n                        <Grid item xs={12} sm={3}>\n                          <Box textAlign=\"center\">\n                            <CircularProgress \n                              variant=\"determinate\" \n                              value={92} \n                              size={60}\n                              color=\"primary\"\n                            />\n                            <Typography variant=\"h6\">92%</Typography>\n                            <Typography variant=\"caption\">User Satisfaction</Typography>\n                          </Box>\n                        </Grid>\n                        <Grid item xs={12} sm={3}>\n                          <Box textAlign=\"center\">\n                            <CircularProgress \n                              variant=\"determinate\" \n                              value={78} \n                              size={60}\n                              color=\"warning\"\n                            />\n                            <Typography variant=\"h6\">78%</Typography>\n                            <Typography variant=\"caption\">Cost Efficiency</Typography>\n                          </Box>\n                        </Grid>\n                      </Grid>\n                    </CardContent>\n                  </Card>\n                </Grid>\n              </Grid>\n            </Box>\n          )}\n          \n          {selectedTab === 5 && renderStrategicInsights()}\n        </Box>\n      </Paper>\n\n      {/* Competitive Analysis */}\n      <Paper sx={{ p: 2 }}>\n        <Typography variant=\"h6\" gutterBottom>\n          Competitive Analysis\n        </Typography>\n        {renderCompetitiveAnalysis()}\n      </Paper>\n    </Box>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Dashboard\\CostBreakdown.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Dashboard\\CustomizableWidgets.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useCallback' is defined but never used.","line":1,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":38},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useMemo' is defined but never used.","line":1,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":47},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FormControl' is defined but never used.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'InputLabel' is defined but never used.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Select' is defined but never used.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TextField' is defined but never used.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Checkbox' is defined but never used.","line":30,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Close' is defined but never used.","line":38,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FullscreenExit' is defined but never used.","line":43,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":43,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Visibility' is defined but never used.","line":46,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'LockOpen' is defined but never used.","line":52,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":52,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Analytics' is defined but never used.","line":56,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":56,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Warning' is defined but never used.","line":58,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":58,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CheckCircle' is defined but never used.","line":59,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":59,"endColumn":14},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":73,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1188,1191],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1188,1191],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":86,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1437,1440],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1437,1440],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'configDialogOpen' is assigned a value but never used.","line":161,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":161,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'selectedWidget' is assigned a value but never used.","line":162,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":162,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'fullscreenWidget' is assigned a value but never used.","line":163,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":163,"endColumn":26},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":168,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":168,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3960,3963],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3960,3963],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":20,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback, useMemo } from 'react';\nimport {\n  Box,\n  Card,\n  CardContent,\n  CardHeader,\n  IconButton,\n  Menu,\n  MenuItem,\n  Typography,\n  Chip,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  Grid,\n  FormControl,\n  InputLabel,\n  Select,\n  TextField,\n  Switch,\n  FormControlLabel,\n  Divider,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  ListItemSecondaryAction,\n  Checkbox,\n  Tooltip,\n  Paper,\n  Fab,\n  Zoom,\n} from '@mui/material';\nimport {\n  DragIndicator,\n  Close,\n  Settings,\n  Add,\n  MoreVert,\n  Fullscreen,\n  FullscreenExit,\n  Refresh,\n  Download,\n  Visibility,\n  VisibilityOff,\n  Edit,\n  Delete,\n  ContentCopy,\n  Lock,\n  LockOpen,\n  TrendingUp,\n  AttachMoney,\n  VideoLibrary,\n  Analytics,\n  Speed,\n  Warning,\n  CheckCircle,\n  CloudQueue,\n  Schedule,\n} from '@mui/icons-material';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport { format } from 'date-fns';\n\n// Widget Types\nexport interface Widget {\n  id: string;\n  type: 'metric' | 'chart' | 'list' | 'progress' | 'custom';\n  title: string;\n  size: 'small' | 'medium' | 'large' | 'full';\n  position: { x: number; y: number };\n  config: any;\n  locked?: boolean;\n  visible?: boolean;\n  refreshInterval?: number;\n  lastUpdated?: Date;\n}\n\ninterface WidgetLibraryItem {\n  id: string;\n  type: Widget['type'];\n  title: string;\n  description: string;\n  icon: React.ReactNode;\n  defaultConfig: any;\n  sizes: Widget['size'][];\n}\n\nconst widgetLibrary: WidgetLibraryItem[] = [\n  {\n    id: 'revenue-metric',\n    type: 'metric',\n    title: 'Revenue Tracker',\n    description: 'Track daily, weekly, and monthly revenue',\n    icon: <AttachMoney />,\n    defaultConfig: { metric: 'revenue', period: 'daily' },\n    sizes: ['small', 'medium'],\n  },\n  {\n    id: 'video-performance',\n    type: 'chart',\n    title: 'Video Performance',\n    description: 'View performance metrics for your videos',\n    icon: <VideoLibrary />,\n    defaultConfig: { chartType: 'line', metrics: ['views', 'engagement'] },\n    sizes: ['medium', 'large', 'full'],\n  },\n  {\n    id: 'processing-queue',\n    type: 'list',\n    title: 'Processing Queue',\n    description: 'Monitor videos currently being processed',\n    icon: <CloudQueue />,\n    defaultConfig: { maxItems: 5, showStatus: true },\n    sizes: ['medium', 'large'],\n  },\n  {\n    id: 'channel-health',\n    type: 'progress',\n    title: 'Channel Health',\n    description: 'Overall health score of your channels',\n    icon: <Speed />,\n    defaultConfig: { showBreakdown: true },\n    sizes: ['small', 'medium'],\n  },\n  {\n    id: 'trend-analysis',\n    type: 'chart',\n    title: 'Trend Analysis',\n    description: 'Analyze trending topics and niches',\n    icon: <TrendingUp />,\n    defaultConfig: { chartType: 'heatmap', period: '7d' },\n    sizes: ['large', 'full'],\n  },\n  {\n    id: 'scheduled-uploads',\n    type: 'list',\n    title: 'Scheduled Uploads',\n    description: 'View upcoming scheduled video uploads',\n    icon: <Schedule />,\n    defaultConfig: { maxItems: 10, groupByDay: true },\n    sizes: ['medium', 'large'],\n  },\n];\n\ninterface CustomizableWidgetsProps {\n  initialWidgets?: Widget[];\n  onSave?: (widgets: Widget[]) => void;\n  allowEdit?: boolean;\n}\n\nexport const CustomizableWidgets: React.FC<CustomizableWidgetsProps> = ({\n  initialWidgets = [],\n  onSave,\n  allowEdit = true,\n}) => {\n  const [widgets, setWidgets] = useState<Widget[]>(initialWidgets);\n  const [editMode, setEditMode] = useState(false);\n  const [addDialogOpen, setAddDialogOpen] = useState(false);\n  const [configDialogOpen, setConfigDialogOpen] = useState(false);\n  const [selectedWidget, setSelectedWidget] = useState<Widget | null>(null);\n  const [fullscreenWidget, setFullscreenWidget] = useState<string | null>(null);\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n  const [menuWidget, setMenuWidget] = useState<string | null>(null);\n\n  // Handle drag and drop\n  const handleDragEnd = (result: any) => {\n    if (!result.destination) return;\n\n    const items = Array.from(widgets);\n    const [reorderedItem] = items.splice(result.source.index, 1);\n    items.splice(result.destination.index, 0, reorderedItem);\n\n    setWidgets(items);\n  };\n\n  // Add new widget\n  const handleAddWidget = (libraryItem: WidgetLibraryItem, size: Widget['size']) => {\n    const newWidget: Widget = {\n      id: `widget-${Date.now()}`,\n      type: libraryItem.type,\n      title: libraryItem.title,\n      size,\n      position: { x: 0, y: widgets.length },\n      config: libraryItem.defaultConfig,\n      visible: true,\n      lastUpdated: new Date(),\n    };\n\n    setWidgets([...widgets, newWidget]);\n    setAddDialogOpen(false);\n  };\n\n  // Remove widget\n  const handleRemoveWidget = (widgetId: string) => {\n    setWidgets(widgets.filter(w => w.id !== widgetId));\n    setAnchorEl(null);\n  };\n\n  // Toggle widget visibility\n  const handleToggleVisibility = (widgetId: string) => {\n    setWidgets(widgets.map(w =>\n      w.id === widgetId ? { ...w, visible: !w.visible } : w\n    ));\n  };\n\n  // Toggle widget lock\n  const handleToggleLock = (widgetId: string) => {\n    setWidgets(widgets.map(w =>\n      w.id === widgetId ? { ...w, locked: !w.locked } : w\n    ));\n  };\n\n  // Duplicate widget\n  const handleDuplicateWidget = (widgetId: string) => {\n    const widget = widgets.find(w => w.id === widgetId);\n    if (widget) {\n      const newWidget: Widget = {\n        ...widget,\n        id: `widget-${Date.now()}`,\n        title: `${widget.title} (Copy)`,\n      };\n      setWidgets([...widgets, newWidget]);\n    }\n    setAnchorEl(null);\n  };\n\n  // Refresh widget data\n  const handleRefreshWidget = (widgetId: string) => {\n    setWidgets(widgets.map(w =>\n      w.id === widgetId ? { ...w, lastUpdated: new Date() } : w\n    ));\n    // Trigger actual data refresh here\n  };\n\n  // Export widget data\n  const handleExportWidget = (widgetId: string) => {\n    const widget = widgets.find(w => w.id === widgetId);\n    if (widget) {\n      const data = JSON.stringify(widget, null, 2);\n      const blob = new Blob([data], { type: 'application/json' });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `${widget.title.replace(/\\s+/g, '-')}-${format(new Date(), 'yyyy-MM-dd')}.json`;\n      a.click();\n      URL.revokeObjectURL(url);\n    }\n    setAnchorEl(null);\n  };\n\n  // Widget menu actions\n  const handleWidgetMenu = (event: React.MouseEvent<HTMLElement>, widgetId: string) => {\n    setAnchorEl(event.currentTarget);\n    setMenuWidget(widgetId);\n  };\n\n  const handleCloseMenu = () => {\n    setAnchorEl(null);\n    setMenuWidget(null);\n  };\n\n  // Save widgets configuration\n  const handleSaveConfiguration = () => {\n    onSave?.(widgets);\n    setEditMode(false);\n  };\n\n  // Render individual widget\n  const renderWidget = (widget: Widget) => {\n    const gridSizes = {\n      small: { xs: 12, sm: 6, md: 3 },\n      medium: { xs: 12, sm: 12, md: 6 },\n      large: { xs: 12, sm: 12, md: 9 },\n      full: { xs: 12, sm: 12, md: 12 },\n    };\n\n    const size = gridSizes[widget.size];\n\n    return (\n      <Grid item {...size} key={widget.id}>\n        <Card\n          sx={{\n            height: '100%',\n            opacity: widget.visible ? 1 : 0.5,\n            position: 'relative',\n            ...(editMode && !widget.locked && {\n              cursor: 'move',\n              '&:hover': {\n                boxShadow: 4,\n              },\n            }),\n          }}\n        >\n          {editMode && !widget.locked && (\n            <Box\n              sx={{\n                position: 'absolute',\n                top: 8,\n                left: 8,\n                zIndex: 1,\n              }}\n            >\n              <DragIndicator color=\"action\" />\n            </Box>\n          )}\n\n          <CardHeader\n            title={\n              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                <Typography variant=\"h6\" fontSize={16}>\n                  {widget.title}\n                </Typography>\n                {widget.locked && (\n                  <Tooltip title=\"Widget is locked\">\n                    <Lock fontSize=\"small\" color=\"action\" />\n                  </Tooltip>\n                )}\n                {!widget.visible && (\n                  <Tooltip title=\"Widget is hidden\">\n                    <VisibilityOff fontSize=\"small\" color=\"action\" />\n                  </Tooltip>\n                )}\n              </Box>\n            }\n            action={\n              <Box>\n                {widget.lastUpdated && (\n                  <Typography variant=\"caption\" color=\"text.secondary\" sx={{ mr: 1 }}>\n                    {format(widget.lastUpdated, 'HH:mm')}\n                  </Typography>\n                )}\n                <IconButton\n                  size=\"small\"\n                  onClick={(e) => handleWidgetMenu(e, widget.id)}\n                >\n                  <MoreVert fontSize=\"small\" />\n                </IconButton>\n              </Box>\n            }\n            sx={{ pb: 1 }}\n          />\n\n          <CardContent>\n            {/* Widget content based on type */}\n            {widget.type === 'metric' && (\n              <Box>\n                <Typography variant=\"h3\" fontWeight=\"bold\">\n                  $1,234.56\n                </Typography>\n                <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5, mt: 1 }}>\n                  <TrendingUp color=\"success\" fontSize=\"small\" />\n                  <Typography variant=\"body2\" color=\"success.main\">\n                    +12.5% from yesterday\n                  </Typography>\n                </Box>\n              </Box>\n            )}\n\n            {widget.type === 'progress' && (\n              <Box>\n                <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>\n                  <Typography variant=\"body2\">Channel Health</Typography>\n                  <Typography variant=\"body2\" fontWeight=\"bold\">85%</Typography>\n                </Box>\n                <Box sx={{ width: '100%', bgcolor: 'grey.200', borderRadius: 1, height: 8 }}>\n                  <Box\n                    sx={{\n                      width: '85%',\n                      bgcolor: 'success.main',\n                      borderRadius: 1,\n                      height: '100%',\n                    }}\n                  />\n                </Box>\n              </Box>\n            )}\n\n            {widget.type === 'list' && (\n              <List dense>\n                {[1, 2, 3].map((item) => (\n                  <ListItem key={item}>\n                    <ListItemIcon>\n                      <CloudQueue color=\"primary\" />\n                    </ListItemIcon>\n                    <ListItemText\n                      primary={`Video ${item}`}\n                      secondary=\"Processing...\"\n                    />\n                    <ListItemSecondaryAction>\n                      <Chip label=\"50%\" size=\"small\" />\n                    </ListItemSecondaryAction>\n                  </ListItem>\n                ))}\n              </List>\n            )}\n\n            {widget.type === 'chart' && (\n              <Box sx={{ height: 200, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  Chart visualization here\n                </Typography>\n              </Box>\n            )}\n          </CardContent>\n        </Card>\n      </Grid>\n    );\n  };\n\n  return (\n    <Box>\n      {/* Edit Mode Toggle */}\n      {allowEdit && (\n        <Box sx={{ mb: 2, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n          <FormControlLabel\n            control={\n              <Switch\n                checked={editMode}\n                onChange={(e) => setEditMode(e.target.checked)}\n              />\n            }\n            label=\"Edit Dashboard\"\n          />\n          \n          {editMode && (\n            <Box sx={{ display: 'flex', gap: 1 }}>\n              <Button\n                variant=\"outlined\"\n                startIcon={<Add />}\n                onClick={() => setAddDialogOpen(true)}\n              >\n                Add Widget\n              </Button>\n              <Button\n                variant=\"contained\"\n                onClick={handleSaveConfiguration}\n              >\n                Save Layout\n              </Button>\n            </Box>\n          )}\n        </Box>\n      )}\n\n      {/* Widgets Grid */}\n      {editMode ? (\n        <DragDropContext onDragEnd={handleDragEnd}>\n          <Droppable droppableId=\"widgets\">\n            {(provided) => (\n              <Grid\n                container\n                spacing={2}\n                {...provided.droppableProps}\n                ref={provided.innerRef}\n              >\n                {widgets.map((widget, index) => (\n                  <Draggable\n                    key={widget.id}\n                    draggableId={widget.id}\n                    index={index}\n                    isDragDisabled={widget.locked}\n                  >\n                    {(provided) => (\n                      <div\n                        ref={provided.innerRef}\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                        style={{\n                          ...provided.draggableProps.style,\n                          width: '100%',\n                        }}\n                      >\n                        {renderWidget(widget)}\n                      </div>\n                    )}\n                  </Draggable>\n                ))}\n                {provided.placeholder}\n              </Grid>\n            )}\n          </Droppable>\n        </DragDropContext>\n      ) : (\n        <Grid container spacing={2}>\n          {widgets.filter(w => w.visible).map(renderWidget)}\n        </Grid>\n      )}\n\n      {/* Widget Menu */}\n      <Menu\n        anchorEl={anchorEl}\n        open={Boolean(anchorEl)}\n        onClose={handleCloseMenu}\n      >\n        <MenuItem onClick={() => {\n          if (menuWidget) {\n            setFullscreenWidget(menuWidget);\n            handleCloseMenu();\n          }\n        }}>\n          <ListItemIcon>\n            <Fullscreen fontSize=\"small\" />\n          </ListItemIcon>\n          <ListItemText>Fullscreen</ListItemText>\n        </MenuItem>\n        \n        <MenuItem onClick={() => {\n          if (menuWidget) {\n            handleRefreshWidget(menuWidget);\n            handleCloseMenu();\n          }\n        }}>\n          <ListItemIcon>\n            <Refresh fontSize=\"small\" />\n          </ListItemIcon>\n          <ListItemText>Refresh</ListItemText>\n        </MenuItem>\n        \n        <MenuItem onClick={() => {\n          if (menuWidget) {\n            setSelectedWidget(widgets.find(w => w.id === menuWidget) || null);\n            setConfigDialogOpen(true);\n            handleCloseMenu();\n          }\n        }}>\n          <ListItemIcon>\n            <Settings fontSize=\"small\" />\n          </ListItemIcon>\n          <ListItemText>Configure</ListItemText>\n        </MenuItem>\n        \n        <Divider />\n        \n        <MenuItem onClick={() => {\n          if (menuWidget) {\n            handleToggleVisibility(menuWidget);\n            handleCloseMenu();\n          }\n        }}>\n          <ListItemIcon>\n            <VisibilityOff fontSize=\"small\" />\n          </ListItemIcon>\n          <ListItemText>Hide</ListItemText>\n        </MenuItem>\n        \n        <MenuItem onClick={() => {\n          if (menuWidget) {\n            handleToggleLock(menuWidget);\n            handleCloseMenu();\n          }\n        }}>\n          <ListItemIcon>\n            <Lock fontSize=\"small\" />\n          </ListItemIcon>\n          <ListItemText>Lock/Unlock</ListItemText>\n        </MenuItem>\n        \n        <MenuItem onClick={() => {\n          if (menuWidget) {\n            handleDuplicateWidget(menuWidget);\n          }\n        }}>\n          <ListItemIcon>\n            <ContentCopy fontSize=\"small\" />\n          </ListItemIcon>\n          <ListItemText>Duplicate</ListItemText>\n        </MenuItem>\n        \n        <MenuItem onClick={() => {\n          if (menuWidget) {\n            handleExportWidget(menuWidget);\n          }\n        }}>\n          <ListItemIcon>\n            <Download fontSize=\"small\" />\n          </ListItemIcon>\n          <ListItemText>Export</ListItemText>\n        </MenuItem>\n        \n        <Divider />\n        \n        <MenuItem onClick={() => {\n          if (menuWidget) {\n            handleRemoveWidget(menuWidget);\n          }\n        }} sx={{ color: 'error.main' }}>\n          <ListItemIcon>\n            <Delete fontSize=\"small\" color=\"error\" />\n          </ListItemIcon>\n          <ListItemText>Remove</ListItemText>\n        </MenuItem>\n      </Menu>\n\n      {/* Add Widget Dialog */}\n      <Dialog\n        open={addDialogOpen}\n        onClose={() => setAddDialogOpen(false)}\n        maxWidth=\"md\"\n        fullWidth\n      >\n        <DialogTitle>Add Widget</DialogTitle>\n        <DialogContent>\n          <Grid container spacing={2} sx={{ mt: 1 }}>\n            {widgetLibrary.map((item) => (\n              <Grid item xs={12} sm={6} key={item.id}>\n                <Paper\n                  sx={{\n                    p: 2,\n                    cursor: 'pointer',\n                    '&:hover': { bgcolor: 'action.hover' },\n                  }}\n                >\n                  <Box sx={{ display: 'flex', gap: 2 }}>\n                    <Box sx={{ color: 'primary.main' }}>\n                      {item.icon}\n                    </Box>\n                    <Box sx={{ flex: 1 }}>\n                      <Typography variant=\"subtitle1\" fontWeight=\"medium\">\n                        {item.title}\n                      </Typography>\n                      <Typography variant=\"caption\" color=\"text.secondary\">\n                        {item.description}\n                      </Typography>\n                      <Box sx={{ mt: 1, display: 'flex', gap: 1 }}>\n                        {item.sizes.map((size) => (\n                          <Button\n                            key={size}\n                            size=\"small\"\n                            variant=\"outlined\"\n                            onClick={() => handleAddWidget(item, size)}\n                          >\n                            {size}\n                          </Button>\n                        ))}\n                      </Box>\n                    </Box>\n                  </Box>\n                </Paper>\n              </Grid>\n            ))}\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setAddDialogOpen(false)}>Cancel</Button>\n        </DialogActions>\n      </Dialog>\n\n      {/* Floating Action Button for mobile */}\n      {allowEdit && !editMode && (\n        <Zoom in>\n          <Fab\n            color=\"primary\"\n            sx={{\n              position: 'fixed',\n              bottom: 16,\n              right: 16,\n            }}\n            onClick={() => setEditMode(true)}\n          >\n            <Edit />\n          </Fab>\n        </Zoom>\n      )}\n    </Box>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Dashboard\\DashboardHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Dashboard\\DashboardLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Dashboard\\EnhancedMetricsDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CardHeader' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Chip' is defined but never used.","line":22,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ButtonGroup' is defined but never used.","line":24,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Alert' is defined but never used.","line":25,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Tab' is defined but never used.","line":27,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Tabs' is defined but never used.","line":28,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TextField' is defined but never used.","line":35,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Divider' is defined but never used.","line":36,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Accordion' is defined but never used.","line":38,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AccordionSummary' is defined but never used.","line":39,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AccordionDetails' is defined but never used.","line":40,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Info' is defined but never used.","line":53,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":53,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'People' is defined but never used.","line":57,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":57,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Warning' is defined but never used.","line":60,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":60,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CheckCircle' is defined but never used.","line":61,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":61,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Error' is defined but never used.","line":62,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":62,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MoreVert' is defined but never used.","line":63,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":63,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DateRange' is defined but never used.","line":64,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":64,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Assessment' is defined but never used.","line":65,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":65,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ExpandMore' is defined but never used.","line":67,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":67,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Share' is defined but never used.","line":68,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":68,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CloudDownload' is defined but never used.","line":69,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":69,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FilterList' is defined but never used.","line":71,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":71,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TableChart' is defined but never used.","line":75,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":75,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Settings' is defined but never used.","line":76,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":76,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'RechartsPie' is defined but never used.","line":85,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":85,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Pie' is defined but never used.","line":86,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":86,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Cell' is defined but never used.","line":87,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":87,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'RadialBarChart' is defined but never used.","line":94,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":94,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'RadialBar' is defined but never used.","line":95,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":95,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ScatterChart' is defined but never used.","line":97,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":97,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Scatter' is defined but never used.","line":98,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":98,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FunnelChart' is defined but never used.","line":99,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":99,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Funnel' is defined but never used.","line":100,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":100,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'LabelList' is defined but never used.","line":101,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":101,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TreeMap' is defined but never used.","line":102,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":102,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Sankey' is defined but never used.","line":103,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":103,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'subDays' is defined but never used.","line":105,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":105,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'startOfDay' is defined but never used.","line":105,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":105,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'endOfDay' is defined but never used.","line":105,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":105,"endColumn":47},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'addHours' is defined but never used.","line":105,"column":49,"nodeType":null,"messageId":"unusedVar","endLine":105,"endColumn":57},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'selectedTab' is assigned a value but never used.","line":196,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":196,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setSelectedTab' is assigned a value but never used.","line":196,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":196,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setSelectedMetrics' is assigned a value but never used.","line":201,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":201,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'customDateRange' is assigned a value but never used.","line":202,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":202,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setCustomDateRange' is assigned a value but never used.","line":202,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":202,"endColumn":45},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":212,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":212,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4515,4518],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4515,4518],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'analytics' is assigned a value but never used.","line":214,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":214,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'totalMetrics' is assigned a value but never used.","line":229,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":229,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":344,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":344,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9308,9311],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9308,9311],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":360,"column":85,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":360,"endColumn":88,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9914,9917],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9914,9917],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":374,"column":90,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":374,"endColumn":93,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10477,10480],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10477,10480],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":52,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Enhanced Metrics Dashboard Component\n * Comprehensive analytics and metrics visualization with real-time updates\n */\n\nimport React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport {\n  Box,\n  Grid,\n  Paper,\n  Typography,\n  Card,\n  CardContent,\n  CardHeader,\n  IconButton,\n  Select,\n  MenuItem,\n  FormControl,\n  InputLabel,\n  Skeleton,\n  Tooltip,\n  Chip,\n  Button,\n  ButtonGroup,\n  Alert,\n  LinearProgress,\n  Tab,\n  Tabs,\n  Switch,\n  FormControlLabel,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  Divider,\n  Badge,\n  Accordion,\n  AccordionSummary,\n  AccordionDetails,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemIcon,\n  Avatar,\n} from '@mui/material';\nimport {\n  TrendingUp,\n  TrendingDown,\n  TrendingFlat,\n  Refresh,\n  Download,\n  Info,\n  AttachMoney,\n  Visibility,\n  ThumbUp,\n  People,\n  VideoLibrary,\n  Speed,\n  Warning,\n  CheckCircle,\n  Error,\n  MoreVert,\n  DateRange,\n  Assessment,\n  Timeline,\n  ExpandMore,\n  Share,\n  CloudDownload,\n  Fullscreen,\n  FilterList,\n  ShowChart,\n  PieChart,\n  BarChart as BarChartIcon,\n  TableChart,\n  Settings,\n} from '@mui/icons-material';\nimport {\n  LineChart,\n  Line,\n  AreaChart,\n  Area,\n  BarChart,\n  Bar,\n  PieChart as RechartsPie,\n  Pie,\n  Cell,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip as ChartTooltip,\n  Legend,\n  ResponsiveContainer,\n  RadialBarChart,\n  RadialBar,\n  ComposedChart,\n  ScatterChart,\n  Scatter,\n  FunnelChart,\n  Funnel,\n  LabelList,\n  TreeMap,\n  Sankey,\n} from 'recharts';\nimport { format, subDays, startOfDay, endOfDay, addHours } from 'date-fns';\nimport { useOptimizedStore } from '../../stores/optimizedStore';\nimport { useRealtimeData } from '../../hooks/useRealtimeData';\nimport { api } from '../../services/api';\n\n// Types\ninterface MetricCard {\n  id: string;\n  title: string;\n  value: number | string;\n  change: number;\n  changePercent: number;\n  trend: 'up' | 'down' | 'flat';\n  icon: React.ReactNode;\n  color: string;\n  suffix?: string;\n  prefix?: string;\n  target?: number;\n  description?: string;\n  sparklineData?: number[];\n}\n\ninterface ChartData {\n  timestamp: string;\n  date: string;\n  hour?: number;\n  views: number;\n  revenue: number;\n  subscribers: number;\n  engagement: number;\n  cost: number;\n  profit: number;\n  ctr: number;\n  watchTime: number;\n  impressions: number;\n}\n\ninterface ChannelPerformance {\n  channelId: string;\n  channelName: string;\n  videos: number;\n  views: number;\n  revenue: number;\n  subscribers: number;\n  avgEngagement: number;\n  growth: number;\n  avatar?: string;\n}\n\ninterface VideoPerformance {\n  videoId: string;\n  title: string;\n  channelName: string;\n  views: number;\n  engagement: number;\n  revenue: number;\n  publishedAt: string;\n  duration: number;\n  thumbnail: string;\n}\n\nconst CHART_COLORS = {\n  views: '#3f51b5',\n  revenue: '#4caf50',\n  subscribers: '#ff9800',\n  engagement: '#e91e63',\n  cost: '#f44336',\n  profit: '#2e7d32',\n  ctr: '#9c27b0',\n  watchTime: '#00bcd4',\n};\n\nconst TIME_RANGES = [\n  { value: '24h', label: '24 Hours' },\n  { value: '7d', label: '7 Days' },\n  { value: '30d', label: '30 Days' },\n  { value: '90d', label: '90 Days' },\n  { value: '1y', label: '1 Year' },\n];\n\nconst CHART_TYPES = [\n  { value: 'line', label: 'Line Chart', icon: <ShowChart /> },\n  { value: 'area', label: 'Area Chart', icon: <Timeline /> },\n  { value: 'bar', label: 'Bar Chart', icon: <BarChartIcon /> },\n  { value: 'pie', label: 'Pie Chart', icon: <PieChart /> },\n];\n\nexport const EnhancedMetricsDashboard: React.FC = () => {\n  // State management\n  const [timeRange, setTimeRange] = useState<string>('7d');\n  const [loading, setLoading] = useState(true);\n  const [selectedTab, setSelectedTab] = useState(0);\n  const [chartType, setChartType] = useState<string>('line');\n  const [autoRefresh, setAutoRefresh] = useState(true);\n  const [fullscreenChart, setFullscreenChart] = useState<string | null>(null);\n  const [showTargets, setShowTargets] = useState(true);\n  const [selectedMetrics, setSelectedMetrics] = useState<string[]>(['views', 'revenue', 'engagement']);\n  const [customDateRange, setCustomDateRange] = useState<{start: string, end: string}>({\n    start: '',\n    end: ''\n  });\n\n  // Data state\n  const [metricCards, setMetricCards] = useState<MetricCard[]>([]);\n  const [chartData, setChartData] = useState<ChartData[]>([]);\n  const [channelPerformance, setChannelPerformance] = useState<ChannelPerformance[]>([]);\n  const [topVideos, setTopVideos] = useState<VideoPerformance[]>([]);\n  const [realtimeMetrics, setRealtimeMetrics] = useState<any>(null);\n\n  const { analytics, channels, addNotification } = useOptimizedStore();\n\n  // Real-time data hook\n  const realtime = useRealtimeData('/ws/analytics');\n\n  // Memoized calculations\n  const processedChartData = useMemo(() => {\n    return chartData.map(item => ({\n      ...item,\n      date: format(new Date(item.timestamp), timeRange === '24h' ? 'HH:mm' : 'MMM dd'),\n      profit: item.revenue - item.cost,\n      roi: item.cost > 0 ? ((item.revenue - item.cost) / item.cost) * 100 : 0,\n    }));\n  }, [chartData, timeRange]);\n\n  const totalMetrics = useMemo(() => {\n    if (!chartData.length) return {};\n    \n    return chartData.reduce((acc, curr) => ({\n      views: (acc.views || 0) + curr.views,\n      revenue: (acc.revenue || 0) + curr.revenue,\n      cost: (acc.cost || 0) + curr.cost,\n      subscribers: Math.max(acc.subscribers || 0, curr.subscribers),\n      engagement: (acc.engagement || 0) + curr.engagement,\n      watchTime: (acc.watchTime || 0) + curr.watchTime,\n    }), {});\n  }, [chartData]);\n\n  // Fetch comprehensive dashboard data\n  const fetchDashboardData = useCallback(async () => {\n    try {\n      setLoading(true);\n\n      // Parallel API calls for better performance\n      const [\n        overviewResponse,\n        performanceResponse,\n        channelsResponse,\n        videosResponse,\n        realtimeResponse\n      ] = await Promise.all([\n        api.get(`/dashboard/overview`),\n        api.get(`/dashboard/performance?period=${timeRange}`),\n        api.get('/dashboard/channels'),\n        api.get('/videos/top?limit=10'),\n        api.get('/dashboard/realtime-stats')\n      ]);\n\n      // Process metric cards\n      const cards: MetricCard[] = [\n        {\n          id: 'views',\n          title: 'Total Views',\n          value: overviewResponse.data.total_views,\n          change: overviewResponse.data.views_change_24h,\n          changePercent: overviewResponse.data.views_change_percent,\n          trend: overviewResponse.data.views_change_24h >= 0 ? 'up' : 'down',\n          icon: <Visibility />,\n          color: CHART_COLORS.views,\n          target: 1000000,\n          description: 'Total video views across all channels',\n        },\n        {\n          id: 'revenue',\n          title: 'Revenue',\n          value: overviewResponse.data.total_revenue,\n          change: overviewResponse.data.revenue_change_24h,\n          changePercent: overviewResponse.data.revenue_change_percent,\n          trend: overviewResponse.data.revenue_change_24h >= 0 ? 'up' : 'down',\n          icon: <AttachMoney />,\n          color: CHART_COLORS.revenue,\n          prefix: '$',\n          target: 10000,\n          description: 'Total revenue generated',\n        },\n        {\n          id: 'videos',\n          title: 'Videos Generated',\n          value: overviewResponse.data.videos_today,\n          change: overviewResponse.data.videos_change,\n          changePercent: overviewResponse.data.videos_change_percent,\n          trend: overviewResponse.data.videos_change >= 0 ? 'up' : 'down',\n          icon: <VideoLibrary />,\n          color: '#9c27b0',\n          description: 'Videos generated today',\n        },\n        {\n          id: 'engagement',\n          title: 'Avg Engagement',\n          value: overviewResponse.data.avg_video_performance,\n          change: overviewResponse.data.engagement_change,\n          changePercent: overviewResponse.data.engagement_change_percent,\n          trend: overviewResponse.data.engagement_change >= 0 ? 'up' : 'down',\n          icon: <ThumbUp />,\n          color: CHART_COLORS.engagement,\n          suffix: '%',\n          target: 5.0,\n          description: 'Average engagement rate',\n        },\n        {\n          id: 'cost',\n          title: 'Total Cost',\n          value: overviewResponse.data.total_cost,\n          change: overviewResponse.data.cost_change_24h,\n          changePercent: overviewResponse.data.cost_change_percent,\n          trend: overviewResponse.data.cost_change_24h <= 0 ? 'up' : 'down', // Inverted for cost\n          icon: <Speed />,\n          color: CHART_COLORS.cost,\n          prefix: '$',\n          target: 3000,\n          description: 'Total operational costs',\n        },\n        {\n          id: 'profit',\n          title: 'Profit Margin',\n          value: overviewResponse.data.profit_margin,\n          change: overviewResponse.data.profit_change,\n          changePercent: overviewResponse.data.profit_change_percent,\n          trend: overviewResponse.data.profit_change >= 0 ? 'up' : 'down',\n          icon: <TrendingUp />,\n          color: CHART_COLORS.profit,\n          suffix: '%',\n          target: 70,\n          description: 'Profit margin percentage',\n        },\n      ];\n\n      setMetricCards(cards);\n\n      // Process chart data\n      const chartDataProcessed = performanceResponse.data.map((item: any) => ({\n        timestamp: item.period,\n        date: item.period,\n        views: item.views,\n        revenue: item.revenue,\n        subscribers: item.subscriber_growth,\n        engagement: item.engagement_rate,\n        cost: item.cost,\n        watchTime: item.watch_time_hours * 60, // Convert to minutes\n        impressions: item.views * 1.2, // Estimated\n        ctr: (item.views / (item.views * 1.2)) * 100, // Estimated CTR\n      }));\n\n      setChartData(chartDataProcessed);\n\n      // Process channel performance\n      const channelData: ChannelPerformance[] = channelsResponse.data.map((channel: any) => ({\n        channelId: channel.channel_id,\n        channelName: channel.channel_name,\n        videos: channel.video_count,\n        views: channel.total_views,\n        revenue: channel.total_views * 0.002, // Estimated revenue\n        subscribers: channel.subscriber_count,\n        avgEngagement: channel.performance_score,\n        growth: Math.random() * 20 - 10, // Mock growth data\n      }));\n\n      setChannelPerformance(channelData);\n\n      // Process top videos\n      const videoData: VideoPerformance[] = videosResponse.data.slice(0, 10).map((video: any) => ({\n        videoId: video.id,\n        title: video.title,\n        channelName: channels.list.find(c => c.id === video.channel_id)?.name || 'Unknown',\n        views: video.view_count || Math.floor(Math.random() * 50000),\n        engagement: Math.random() * 10,\n        revenue: (video.view_count || 0) * 0.002,\n        publishedAt: video.created_at,\n        duration: video.duration || Math.floor(Math.random() * 600) + 300,\n        thumbnail: video.thumbnail_url || '/placeholder-thumbnail.jpg',\n      }));\n\n      setTopVideos(videoData);\n      setRealtimeMetrics(realtimeResponse.data);\n      \n      setLoading(false);\n    } catch (error) {\n      console.error('Failed to fetch dashboard data:', error);\n      addNotification({\n        type: 'error',\n        message: 'Failed to load dashboard data',\n      });\n      setLoading(false);\n    }\n  }, [timeRange, channels.list, addNotification]);\n\n  // Effects\n  useEffect(() => {\n    fetchDashboardData();\n  }, [fetchDashboardData]);\n\n  // Auto-refresh effect\n  useEffect(() => {\n    if (!autoRefresh) return;\n    \n    const interval = setInterval(fetchDashboardData, 60000); // Refresh every minute\n    return () => clearInterval(interval);\n  }, [autoRefresh, fetchDashboardData]);\n\n  // Real-time updates effect\n  useEffect(() => {\n    if (realtime.lastMessage && realtime.lastMessage.type === 'dashboard_update') {\n      setRealtimeMetrics(realtime.lastMessage.data);\n      if (autoRefresh) {\n        fetchDashboardData();\n      }\n    }\n  }, [realtime.lastMessage, autoRefresh, fetchDashboardData]);\n\n  // Render metric card\n  const renderMetricCard = (metric: MetricCard) => {\n    const formatValue = (value: number | string) => {\n      if (typeof value === 'string') return value;\n      if (metric.prefix === '$') return `$${value.toLocaleString()}`;\n      if (metric.suffix === '%') return `${value.toFixed(1)}%`;\n      return value.toLocaleString();\n    };\n\n    const getTrendIcon = () => {\n      switch (metric.trend) {\n        case 'up':\n          return <TrendingUp color=\"success\" />;\n        case 'down':\n          return <TrendingDown color=\"error\" />;\n        default:\n          return <TrendingFlat color=\"action\" />;\n      }\n    };\n\n    const getTrendColor = () => {\n      switch (metric.trend) {\n        case 'up':\n          return metric.id === 'cost' ? 'error.main' : 'success.main';\n        case 'down':\n          return metric.id === 'cost' ? 'success.main' : 'error.main';\n        default:\n          return 'text.secondary';\n      }\n    };\n\n    return (\n      <Card key={metric.id} sx={{ height: '100%' }}>\n        <CardContent>\n          <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\n            <Box>\n              <Typography color=\"text.secondary\" gutterBottom variant=\"body2\">\n                {metric.title}\n              </Typography>\n              <Typography variant=\"h4\" component=\"div\" sx={{ color: metric.color }}>\n                {formatValue(metric.value)}\n              </Typography>\n              <Box display=\"flex\" alignItems=\"center\" mt={1}>\n                {getTrendIcon()}\n                <Typography\n                  variant=\"body2\"\n                  sx={{\n                    color: getTrendColor(),\n                    ml: 0.5,\n                  }}\n                >\n                  {metric.changePercent >= 0 ? '+' : ''}{metric.changePercent.toFixed(1)}%\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\" sx={{ ml: 1 }}>\n                  vs yesterday\n                </Typography>\n              </Box>\n            </Box>\n            <Avatar sx={{ bgcolor: metric.color, width: 56, height: 56 }}>\n              {metric.icon}\n            </Avatar>\n          </Box>\n          \n          {showTargets && metric.target && (\n            <Box mt={2}>\n              <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n                <Typography variant=\"caption\" color=\"text.secondary\">\n                  Progress to target\n                </Typography>\n                <Typography variant=\"caption\" color=\"text.secondary\">\n                  {formatValue(metric.target)}\n                </Typography>\n              </Box>\n              <LinearProgress\n                variant=\"determinate\"\n                value={Math.min((Number(metric.value) / metric.target) * 100, 100)}\n                sx={{\n                  mt: 1,\n                  backgroundColor: `${metric.color}20`,\n                  '& .MuiLinearProgress-bar': {\n                    backgroundColor: metric.color,\n                  },\n                }}\n              />\n            </Box>\n          )}\n          \n          {metric.description && (\n            <Typography variant=\"caption\" color=\"text.secondary\" sx={{ mt: 1, display: 'block' }}>\n              {metric.description}\n            </Typography>\n          )}\n        </CardContent>\n      </Card>\n    );\n  };\n\n  // Render chart based on selected type\n  const renderChart = (data: ChartData[], metrics: string[]) => {\n    const commonProps = {\n      data: processedChartData,\n      margin: { top: 5, right: 30, left: 20, bottom: 5 },\n    };\n\n    switch (chartType) {\n      case 'area':\n        return (\n          <ResponsiveContainer width=\"100%\" height={400}>\n            <AreaChart {...commonProps}>\n              <defs>\n                {metrics.map((metric) => (\n                  <linearGradient key={metric} id={`gradient-${metric}`} x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                    <stop offset=\"5%\" stopColor={CHART_COLORS[metric]} stopOpacity={0.8} />\n                    <stop offset=\"95%\" stopColor={CHART_COLORS[metric]} stopOpacity={0.1} />\n                  </linearGradient>\n                ))}\n              </defs>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"date\" />\n              <YAxis />\n              <ChartTooltip />\n              <Legend />\n              {metrics.map((metric) => (\n                <Area\n                  key={metric}\n                  type=\"monotone\"\n                  dataKey={metric}\n                  stroke={CHART_COLORS[metric]}\n                  fillOpacity={1}\n                  fill={`url(#gradient-${metric})`}\n                />\n              ))}\n            </AreaChart>\n          </ResponsiveContainer>\n        );\n      \n      case 'bar':\n        return (\n          <ResponsiveContainer width=\"100%\" height={400}>\n            <BarChart {...commonProps}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"date\" />\n              <YAxis />\n              <ChartTooltip />\n              <Legend />\n              {metrics.map((metric) => (\n                <Bar key={metric} dataKey={metric} fill={CHART_COLORS[metric]} />\n              ))}\n            </BarChart>\n          </ResponsiveContainer>\n        );\n      \n      case 'line':\n      default:\n        return (\n          <ResponsiveContainer width=\"100%\" height={400}>\n            <LineChart {...commonProps}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"date\" />\n              <YAxis />\n              <ChartTooltip />\n              <Legend />\n              {metrics.map((metric) => (\n                <Line\n                  key={metric}\n                  type=\"monotone\"\n                  dataKey={metric}\n                  stroke={CHART_COLORS[metric]}\n                  strokeWidth={2}\n                  dot={{ fill: CHART_COLORS[metric], strokeWidth: 2, r: 4 }}\n                  activeDot={{ r: 6 }}\n                />\n              ))}\n            </LineChart>\n          </ResponsiveContainer>\n        );\n    }\n  };\n\n  // Render performance comparison chart\n  const renderPerformanceChart = () => (\n    <ResponsiveContainer width=\"100%\" height={300}>\n      <ComposedChart data={channelPerformance}>\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"channelName\" angle={-45} textAnchor=\"end\" height={100} />\n        <YAxis yAxisId=\"left\" />\n        <YAxis yAxisId=\"right\" orientation=\"right\" />\n        <ChartTooltip />\n        <Legend />\n        <Bar yAxisId=\"left\" dataKey=\"videos\" fill=\"#8884d8\" name=\"Videos\" />\n        <Line yAxisId=\"right\" type=\"monotone\" dataKey=\"avgEngagement\" stroke=\"#ff7300\" name=\"Avg Engagement %\" />\n      </ComposedChart>\n    </ResponsiveContainer>\n  );\n\n  if (loading) {\n    return (\n      <Box p={3}>\n        <Grid container spacing={3}>\n          {[1, 2, 3, 4, 5, 6].map((i) => (\n            <Grid item xs={12} sm={6} md={4} key={i}>\n              <Skeleton variant=\"rectangular\" height={200} />\n            </Grid>\n          ))}\n        </Grid>\n      </Box>\n    );\n  }\n\n  return (\n    <Box p={3}>\n      {/* Header Controls */}\n      <Paper sx={{ p: 2, mb: 3 }}>\n        <Grid container spacing={2} alignItems=\"center\">\n          <Grid item xs>\n            <Typography variant=\"h5\">Analytics Dashboard</Typography>\n            {realtimeMetrics && (\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Last updated: {format(new Date(), 'MMM d, h:mm:ss a')} • \n                {realtimeMetrics.videos_generated_today} videos today • \n                ${realtimeMetrics.cost_today} spent\n              </Typography>\n            )}\n          </Grid>\n          \n          <Grid item>\n            <FormControl size=\"small\" sx={{ minWidth: 120 }}>\n              <InputLabel>Time Range</InputLabel>\n              <Select\n                value={timeRange}\n                label=\"Time Range\"\n                onChange={(e) => setTimeRange(e.target.value)}\n              >\n                {TIME_RANGES.map((range) => (\n                  <MenuItem key={range.value} value={range.value}>\n                    {range.label}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </Grid>\n          \n          <Grid item>\n            <FormControl size=\"small\" sx={{ minWidth: 120 }}>\n              <InputLabel>Chart Type</InputLabel>\n              <Select\n                value={chartType}\n                label=\"Chart Type\"\n                onChange={(e) => setChartType(e.target.value)}\n              >\n                {CHART_TYPES.map((type) => (\n                  <MenuItem key={type.value} value={type.value}>\n                    <Box display=\"flex\" alignItems=\"center\">\n                      {type.icon}\n                      <Box ml={1}>{type.label}</Box>\n                    </Box>\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </Grid>\n          \n          <Grid item>\n            <FormControlLabel\n              control={\n                <Switch\n                  checked={autoRefresh}\n                  onChange={(e) => setAutoRefresh(e.target.checked)}\n                />\n              }\n              label=\"Auto Refresh\"\n            />\n          </Grid>\n          \n          <Grid item>\n            <FormControlLabel\n              control={\n                <Switch\n                  checked={showTargets}\n                  onChange={(e) => setShowTargets(e.target.checked)}\n                />\n              }\n              label=\"Show Targets\"\n            />\n          </Grid>\n          \n          <Grid item>\n            <Tooltip title=\"Refresh Data\">\n              <IconButton onClick={fetchDashboardData}>\n                <Badge color=\"secondary\" variant=\"dot\" invisible={!autoRefresh}>\n                  <Refresh />\n                </Badge>\n              </IconButton>\n            </Tooltip>\n          </Grid>\n          \n          <Grid item>\n            <Button startIcon={<Download />} variant=\"outlined\">\n              Export\n            </Button>\n          </Grid>\n        </Grid>\n      </Paper>\n\n      {/* Metric Cards */}\n      <Grid container spacing={3} sx={{ mb: 3 }}>\n        {metricCards.map((metric) => (\n          <Grid item xs={12} sm={6} md={4} lg={2} key={metric.id}>\n            {renderMetricCard(metric)}\n          </Grid>\n        ))}\n      </Grid>\n\n      {/* Main Chart */}\n      <Paper sx={{ p: 2, mb: 3 }}>\n        <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\n          <Typography variant=\"h6\">Performance Trends</Typography>\n          <Box>\n            <IconButton onClick={() => setFullscreenChart('main')}>\n              <Fullscreen />\n            </IconButton>\n          </Box>\n        </Box>\n        {renderChart(chartData, selectedMetrics)}\n      </Paper>\n\n      {/* Secondary Charts and Tables */}\n      <Grid container spacing={3}>\n        {/* Channel Performance */}\n        <Grid item xs={12} lg={8}>\n          <Paper sx={{ p: 2 }}>\n            <Typography variant=\"h6\" gutterBottom>\n              Channel Performance Comparison\n            </Typography>\n            {renderPerformanceChart()}\n          </Paper>\n        </Grid>\n\n        {/* Top Videos */}\n        <Grid item xs={12} lg={4}>\n          <Paper sx={{ p: 2 }}>\n            <Typography variant=\"h6\" gutterBottom>\n              Top Performing Videos\n            </Typography>\n            <List>\n              {topVideos.slice(0, 5).map((video, index) => (\n                <ListItem key={video.videoId}>\n                  <ListItemIcon>\n                    <Avatar src={video.thumbnail} sx={{ width: 40, height: 40 }}>\n                      {index + 1}\n                    </Avatar>\n                  </ListItemIcon>\n                  <ListItemText\n                    primary={video.title}\n                    secondary={\n                      <Box>\n                        <Typography variant=\"caption\" display=\"block\">\n                          {video.channelName}\n                        </Typography>\n                        <Typography variant=\"caption\" color=\"primary\">\n                          {video.views.toLocaleString()} views • ${video.revenue.toFixed(2)}\n                        </Typography>\n                      </Box>\n                    }\n                  />\n                </ListItem>\n              ))}\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n\n      {/* Fullscreen Chart Dialog */}\n      <Dialog\n        open={fullscreenChart !== null}\n        onClose={() => setFullscreenChart(null)}\n        maxWidth=\"xl\"\n        fullWidth\n      >\n        <DialogTitle>\n          Performance Trends - Full View\n        </DialogTitle>\n        <DialogContent>\n          <Box height={600}>\n            {renderChart(chartData, selectedMetrics)}\n          </Box>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setFullscreenChart(null)}>Close</Button>\n          <Button startIcon={<Download />}>Export Chart</Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Dashboard\\MainDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Skeleton' is defined but never used.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ErrorBoundary' is defined but never used.","line":24,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ArrowDownward' is defined but never used.","line":36,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Warning' is defined but never used.","line":40,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Bar' is defined but never used.","line":43,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":43,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'formatDuration' is defined but never used.","line":58,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":58,"endColumn":54},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isMobile' is assigned a value but never used.","line":118,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":118,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isTablet' is assigned a value but never used.","line":119,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":119,"endColumn":17},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchDashboardData'. Either include it or remove the dependency array.","line":134,"column":6,"nodeType":"ArrayExpression","endLine":134,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchDashboardData]","fix":{"range":[3194,3196],"text":"[fetchDashboardData]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'handleRealtimeUpdate'. Either include it or remove the dependency array.","line":141,"column":6,"nodeType":"ArrayExpression","endLine":141,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [handleRealtimeUpdate, wsData]","fix":{"range":[3326,3334],"text":"[handleRealtimeUpdate, wsData]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":157,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":157,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3864,3867],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3864,3867],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":171,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":171,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4230,4233],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4230,4233],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":181,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":181,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4590,4593],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4590,4593],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":185,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":185,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4717,4720],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4717,4720],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'viewsChartData' is assigned a value but never used.","line":237,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":237,"endColumn":23}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\r\nimport {\r\n  Box,\r\n  Grid,\r\n  Paper,\r\n  Typography,\r\n  Card,\r\n  CardContent,\r\n  Button,\r\n  IconButton,\r\n  LinearProgress,\r\n  Chip,\r\n  Avatar,\r\n  List,\r\n  ListItem,\r\n  ListItemAvatar,\r\n  ListItemText,\r\n  Skeleton,\r\n  Alert,\r\n  useTheme,\r\n  useMediaQuery,\r\n} from '@mui/material';\r\nimport { DashboardSkeleton } from '../Loading/LoadingSkeleton';\r\nimport { ErrorBoundary } from '../ErrorBoundary';\r\nimport { useAnnounce } from '../Accessibility/ScreenReaderAnnouncer';\r\nimport {\r\n  TrendingUp,\r\n  VideoLibrary,\r\n  MonetizationOn,\r\n  Visibility,\r\n  Schedule,\r\n  PlayCircleOutline,\r\n  Add,\r\n  Refresh,\r\n  ArrowUpward,\r\n  ArrowDownward,\r\n  YouTube,\r\n  Analytics as AnalyticsIcon,\r\n  AutoAwesome,\r\n  Warning,\r\n  CheckCircle,\r\n} from '@mui/icons-material';\r\nimport { Line, Bar, Doughnut } from 'react-chartjs-2';\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  BarElement,\r\n  ArcElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  Filler,\r\n} from 'chart.js';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { formatNumber, formatCurrency, formatDuration } from '../../utils/formatters';\r\nimport { dashboardApi } from '../../services/api';\r\nimport { useWebSocket } from '../../hooks/useWebSocket';\r\n\r\n// Register ChartJS components\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  BarElement,\r\n  ArcElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  Filler\r\n);\r\n\r\ninterface DashboardStats {\r\n  totalChannels: number;\r\n  totalVideos: number;\r\n  totalViews: number;\r\n  totalRevenue: number;\r\n  totalCost: number;\r\n  profit: number;\r\n  avgEngagementRate: number;\r\n  videosInQueue: number;\r\n  videosPublishedToday: number;\r\n  monthlyGrowthRate: number;\r\n  bestPerformingVideo: {\r\n    id: string;\r\n    title: string;\r\n    views: number;\r\n    revenue: number;\r\n  } | null;\r\n}\r\n\r\ninterface RecentActivity {\r\n  id: string;\r\n  type: 'video_generated' | 'video_published' | 'channel_connected' | 'milestone_reached';\r\n  title: string;\r\n  description: string;\r\n  timestamp: string;\r\n  icon: React.ReactNode;\r\n  color: string;\r\n}\r\n\r\ninterface VideoInQueue {\r\n  id: string;\r\n  title: string;\r\n  channel: string;\r\n  status: 'generating' | 'scheduled' | 'ready';\r\n  progress?: number;\r\n  scheduledTime?: string;\r\n  thumbnail?: string;\r\n}\r\n\r\nexport const MainDashboard: React.FC = () => {\r\n  const theme = useTheme();\r\n  const navigate = useNavigate();\r\n  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));\r\n  const isTablet = useMediaQuery(theme.breakpoints.down('md'));\r\n  const { announce } = useAnnounce();\r\n  \r\n  const [stats, setStats] = useState<DashboardStats | null>(null);\r\n  const [recentActivity, setRecentActivity] = useState<RecentActivity[]>([]);\r\n  const [videosInQueue, setVideosInQueue] = useState<VideoInQueue[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [refreshing, setRefreshing] = useState(false);\r\n\r\n  // WebSocket for real-time updates\r\n  const { data: wsData, isConnected } = useWebSocket('/dashboard');\r\n\r\n  useEffect(() => {\r\n    fetchDashboardData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (wsData) {\r\n      // Handle real-time updates\r\n      handleRealtimeUpdate(wsData);\r\n    }\r\n  }, [wsData]);\r\n\r\n  const fetchDashboardData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const [statsRes, activityRes, queueRes] = await Promise.all([\r\n        dashboardApi.getStats(),\r\n        dashboardApi.getRecentActivity(),\r\n        dashboardApi.getVideoQueue(),\r\n      ]);\r\n      \r\n      setStats(statsRes.data);\r\n      setRecentActivity(formatActivity(activityRes.data));\r\n      setVideosInQueue(queueRes.data);\r\n      setError(null);\r\n      announce('Dashboard data loaded successfully', 'polite');\r\n    } catch (error: any) {\r\n      setError('Failed to load dashboard data. Please refresh to try again.');\r\n      console.error('Dashboard error:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleRefresh = async () => {\r\n    setRefreshing(true);\r\n    await fetchDashboardData();\r\n    setRefreshing(false);\r\n  };\r\n\r\n  const handleRealtimeUpdate = (data: any) => {\r\n    if (data.type === 'stats_update') {\r\n      setStats(data.stats);\r\n    } else if (data.type === 'new_activity') {\r\n      setRecentActivity(prev => [formatActivityItem(data.activity), ...prev].slice(0, 10));\r\n    } else if (data.type === 'queue_update') {\r\n      setVideosInQueue(data.queue);\r\n    }\r\n  };\r\n\r\n  const formatActivity = (activities: any[]): RecentActivity[] => {\r\n    return activities.map(formatActivityItem);\r\n  };\r\n\r\n  const formatActivityItem = (activity: any): RecentActivity => {\r\n    const typeConfig = {\r\n      video_generated: {\r\n        icon: <AutoAwesome />,\r\n        color: '#4caf50',\r\n      },\r\n      video_published: {\r\n        icon: <PlayCircleOutline />,\r\n        color: '#2196f3',\r\n      },\r\n      channel_connected: {\r\n        icon: <YouTube />,\r\n        color: '#f44336',\r\n      },\r\n      milestone_reached: {\r\n        icon: <TrendingUp />,\r\n        color: '#ff9800',\r\n      },\r\n    };\r\n\r\n    const config = typeConfig[activity.type as keyof typeof typeConfig];\r\n    \r\n    return {\r\n      ...activity,\r\n      icon: config.icon,\r\n      color: config.color,\r\n    };\r\n  };\r\n\r\n  // Chart data\r\n  const revenueChartData = {\r\n    labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],\r\n    datasets: [\r\n      {\r\n        label: 'Revenue',\r\n        data: [120, 150, 180, 200, 170, 220, 250],\r\n        borderColor: '#4caf50',\r\n        backgroundColor: 'rgba(76, 175, 80, 0.1)',\r\n        fill: true,\r\n        tension: 0.4,\r\n      },\r\n      {\r\n        label: 'Cost',\r\n        data: [30, 35, 40, 38, 42, 45, 48],\r\n        borderColor: '#f44336',\r\n        backgroundColor: 'rgba(244, 67, 54, 0.1)',\r\n        fill: true,\r\n        tension: 0.4,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const viewsChartData = {\r\n    labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],\r\n    datasets: [\r\n      {\r\n        label: 'Views',\r\n        data: [1200, 1900, 3000, 5000, 4000, 3000, 4500],\r\n        backgroundColor: 'rgba(103, 126, 234, 0.8)',\r\n      },\r\n    ],\r\n  };\r\n\r\n  const categoryChartData = {\r\n    labels: ['Gaming', 'Education', 'Tech', 'Entertainment', 'Music'],\r\n    datasets: [\r\n      {\r\n        data: [30, 25, 20, 15, 10],\r\n        backgroundColor: [\r\n          '#e91e63',\r\n          '#2196f3',\r\n          '#9c27b0',\r\n          '#ff9800',\r\n          '#4caf50',\r\n        ],\r\n      },\r\n    ],\r\n  };\r\n\r\n  const chartOptions = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    plugins: {\r\n      legend: {\r\n        display: false,\r\n      },\r\n    },\r\n    scales: {\r\n      y: {\r\n        beginAtZero: true,\r\n        grid: {\r\n          display: false,\r\n        },\r\n      },\r\n      x: {\r\n        grid: {\r\n          display: false,\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  if (loading) {\r\n    return <DashboardSkeleton />;\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <Alert severity=\"error\" action={\r\n        <Button color=\"inherit\" size=\"small\" onClick={handleRefresh}>\r\n          Retry\r\n        </Button>\r\n      }>\r\n        {error}\r\n      </Alert>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Box>\r\n      {/* Header */}\r\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 3 }}>\r\n        <Box>\r\n          <Typography variant=\"h4\" fontWeight=\"bold\" gutterBottom>\r\n            Dashboard\r\n          </Typography>\r\n          <Typography variant=\"body2\" color=\"text.secondary\">\r\n            Welcome back! Here's what's happening with your channels.\r\n          </Typography>\r\n        </Box>\r\n        <Box sx={{ display: 'flex', gap: 2, alignItems: 'center' }}>\r\n          {isConnected && (\r\n            <Chip\r\n              icon={<CheckCircle />}\r\n              label=\"Live\"\r\n              color=\"success\"\r\n              size=\"small\"\r\n            />\r\n          )}\r\n          <IconButton onClick={handleRefresh} disabled={refreshing}>\r\n            <Refresh className={refreshing ? 'spinning' : ''} />\r\n          </IconButton>\r\n          <Button\r\n            variant=\"contained\"\r\n            startIcon={<Add />}\r\n            onClick={() => navigate('/videos/generate')}\r\n            sx={{\r\n              background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n              '&:hover': {\r\n                background: 'linear-gradient(135deg, #5a6fd8 0%, #6a4290 100%)',\r\n              },\r\n            }}\r\n          >\r\n            Generate Video\r\n          </Button>\r\n        </Box>\r\n      </Box>\r\n\r\n      {/* Stats Cards */}\r\n      <Grid container spacing={3} sx={{ mb: 3 }}>\r\n        <Grid item xs={12} sm={6} md={3}>\r\n          <Card>\r\n            <CardContent>\r\n              <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>\r\n                <Box>\r\n                  <Typography color=\"text.secondary\" variant=\"body2\">\r\n                    Total Revenue\r\n                  </Typography>\r\n                  <Typography variant=\"h5\" fontWeight=\"bold\">\r\n                    {formatCurrency(stats?.totalRevenue || 0)}\r\n                  </Typography>\r\n                </Box>\r\n                <Avatar sx={{ bgcolor: 'success.light' }}>\r\n                  <MonetizationOn color=\"success\" />\r\n                </Avatar>\r\n              </Box>\r\n              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                <Chip\r\n                  icon={<ArrowUpward />}\r\n                  label=\"+12.5%\"\r\n                  size=\"small\"\r\n                  color=\"success\"\r\n                  variant=\"outlined\"\r\n                />\r\n                <Typography variant=\"caption\" color=\"text.secondary\">\r\n                  vs last month\r\n                </Typography>\r\n              </Box>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n\r\n        <Grid item xs={12} sm={6} md={3}>\r\n          <Card>\r\n            <CardContent>\r\n              <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>\r\n                <Box>\r\n                  <Typography color=\"text.secondary\" variant=\"body2\">\r\n                    Total Views\r\n                  </Typography>\r\n                  <Typography variant=\"h5\" fontWeight=\"bold\">\r\n                    {formatNumber(stats?.totalViews || 0)}\r\n                  </Typography>\r\n                </Box>\r\n                <Avatar sx={{ bgcolor: 'primary.light' }}>\r\n                  <Visibility color=\"primary\" />\r\n                </Avatar>\r\n              </Box>\r\n              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                <Chip\r\n                  icon={<ArrowUpward />}\r\n                  label=\"+18.2%\"\r\n                  size=\"small\"\r\n                  color=\"primary\"\r\n                  variant=\"outlined\"\r\n                />\r\n                <Typography variant=\"caption\" color=\"text.secondary\">\r\n                  vs last month\r\n                </Typography>\r\n              </Box>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n\r\n        <Grid item xs={12} sm={6} md={3}>\r\n          <Card>\r\n            <CardContent>\r\n              <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>\r\n                <Box>\r\n                  <Typography color=\"text.secondary\" variant=\"body2\">\r\n                    Videos Published\r\n                  </Typography>\r\n                  <Typography variant=\"h5\" fontWeight=\"bold\">\r\n                    {stats?.totalVideos || 0}\r\n                  </Typography>\r\n                </Box>\r\n                <Avatar sx={{ bgcolor: 'secondary.light' }}>\r\n                  <VideoLibrary color=\"secondary\" />\r\n                </Avatar>\r\n              </Box>\r\n              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                  {stats?.videosPublishedToday || 0} today\r\n                </Typography>\r\n              </Box>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n\r\n        <Grid item xs={12} sm={6} md={3}>\r\n          <Card>\r\n            <CardContent>\r\n              <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>\r\n                <Box>\r\n                  <Typography color=\"text.secondary\" variant=\"body2\">\r\n                    Profit Margin\r\n                  </Typography>\r\n                  <Typography variant=\"h5\" fontWeight=\"bold\">\r\n                    {((stats?.profit || 0) / (stats?.totalRevenue || 1) * 100).toFixed(1)}%\r\n                  </Typography>\r\n                </Box>\r\n                <Avatar sx={{ bgcolor: 'warning.light' }}>\r\n                  <TrendingUp color=\"warning\" />\r\n                </Avatar>\r\n              </Box>\r\n              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                <Typography variant=\"body2\" color=\"success.main\">\r\n                  {formatCurrency(stats?.profit || 0)} profit\r\n                </Typography>\r\n              </Box>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* Charts and Activity */}\r\n      <Grid container spacing={3}>\r\n        {/* Revenue Chart */}\r\n        <Grid item xs={12} md={8}>\r\n          <Paper sx={{ p: 3, height: 400 }}>\r\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>\r\n              <Typography variant=\"h6\" fontWeight=\"bold\">\r\n                Revenue & Cost Analysis\r\n              </Typography>\r\n              <Button\r\n                size=\"small\"\r\n                startIcon={<AnalyticsIcon />}\r\n                onClick={() => navigate('/analytics')}\r\n              >\r\n                View Details\r\n              </Button>\r\n            </Box>\r\n            <Box sx={{ height: 320 }}>\r\n              <Line data={revenueChartData} options={chartOptions} />\r\n            </Box>\r\n          </Paper>\r\n        </Grid>\r\n\r\n        {/* Video Queue */}\r\n        <Grid item xs={12} md={4}>\r\n          <Paper sx={{ p: 3, height: 400 }}>\r\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>\r\n              <Typography variant=\"h6\" fontWeight=\"bold\">\r\n                Video Queue ({videosInQueue.length})\r\n              </Typography>\r\n              <Button\r\n                size=\"small\"\r\n                onClick={() => navigate('/videos/queue')}\r\n              >\r\n                View All\r\n              </Button>\r\n            </Box>\r\n            <List sx={{ maxHeight: 320, overflow: 'auto' }}>\r\n              {videosInQueue.length === 0 ? (\r\n                <Box sx={{ textAlign: 'center', py: 4 }}>\r\n                  <Schedule sx={{ fontSize: 48, color: 'text.secondary', mb: 2 }} />\r\n                  <Typography color=\"text.secondary\">\r\n                    No videos in queue\r\n                  </Typography>\r\n                  <Button\r\n                    size=\"small\"\r\n                    startIcon={<Add />}\r\n                    onClick={() => navigate('/videos/generate')}\r\n                    sx={{ mt: 2 }}\r\n                  >\r\n                    Generate Video\r\n                  </Button>\r\n                </Box>\r\n              ) : (\r\n                videosInQueue.map((video) => (\r\n                  <ListItem\r\n                    key={video.id}\r\n                    sx={{\r\n                      border: '1px solid',\r\n                      borderColor: 'divider',\r\n                      borderRadius: 1,\r\n                      mb: 1,\r\n                    }}\r\n                  >\r\n                    <ListItemAvatar>\r\n                      <Avatar src={video.thumbnail} variant=\"rounded\">\r\n                        <VideoLibrary />\r\n                      </Avatar>\r\n                    </ListItemAvatar>\r\n                    <ListItemText\r\n                      primary={video.title}\r\n                      secondary={\r\n                        <Box>\r\n                          <Typography variant=\"caption\" color=\"text.secondary\">\r\n                            {video.channel}\r\n                          </Typography>\r\n                          {video.status === 'generating' && video.progress && (\r\n                            <LinearProgress\r\n                              variant=\"determinate\"\r\n                              value={video.progress}\r\n                              sx={{ mt: 1 }}\r\n                            />\r\n                          )}\r\n                          {video.status === 'scheduled' && (\r\n                            <Chip\r\n                              icon={<Schedule />}\r\n                              label={video.scheduledTime}\r\n                              size=\"small\"\r\n                              sx={{ mt: 1 }}\r\n                            />\r\n                          )}\r\n                        </Box>\r\n                      }\r\n                    />\r\n                  </ListItem>\r\n                ))\r\n              )}\r\n            </List>\r\n          </Paper>\r\n        </Grid>\r\n\r\n        {/* Recent Activity */}\r\n        <Grid item xs={12} md={6}>\r\n          <Paper sx={{ p: 3, height: 400 }}>\r\n            <Typography variant=\"h6\" fontWeight=\"bold\" sx={{ mb: 2 }}>\r\n              Recent Activity\r\n            </Typography>\r\n            <List sx={{ maxHeight: 340, overflow: 'auto' }}>\r\n              {recentActivity.map((activity) => (\r\n                <ListItem key={activity.id}>\r\n                  <ListItemAvatar>\r\n                    <Avatar sx={{ bgcolor: activity.color }}>\r\n                      {activity.icon}\r\n                    </Avatar>\r\n                  </ListItemAvatar>\r\n                  <ListItemText\r\n                    primary={activity.title}\r\n                    secondary={\r\n                      <Box>\r\n                        <Typography variant=\"body2\" color=\"text.secondary\">\r\n                          {activity.description}\r\n                        </Typography>\r\n                        <Typography variant=\"caption\" color=\"text.secondary\">\r\n                          {activity.timestamp}\r\n                        </Typography>\r\n                      </Box>\r\n                    }\r\n                  />\r\n                </ListItem>\r\n              ))}\r\n            </List>\r\n          </Paper>\r\n        </Grid>\r\n\r\n        {/* Category Performance */}\r\n        <Grid item xs={12} md={6}>\r\n          <Paper sx={{ p: 3, height: 400 }}>\r\n            <Typography variant=\"h6\" fontWeight=\"bold\" sx={{ mb: 2 }}>\r\n              Content Categories\r\n            </Typography>\r\n            <Box sx={{ height: 340, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\r\n              <Box sx={{ width: 280, height: 280 }}>\r\n                <Doughnut data={categoryChartData} />\r\n              </Box>\r\n            </Box>\r\n          </Paper>\r\n        </Grid>\r\n\r\n        {/* Best Performing Video */}\r\n        {stats?.bestPerformingVideo && (\r\n          <Grid item xs={12}>\r\n            <Paper sx={{ p: 3 }}>\r\n              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n                <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\r\n                  <Avatar sx={{ bgcolor: 'success.main', width: 56, height: 56 }}>\r\n                    <TrendingUp />\r\n                  </Avatar>\r\n                  <Box>\r\n                    <Typography variant=\"h6\" fontWeight=\"bold\">\r\n                      Best Performing Video\r\n                    </Typography>\r\n                    <Typography variant=\"body1\">\r\n                      {stats.bestPerformingVideo.title}\r\n                    </Typography>\r\n                    <Box sx={{ display: 'flex', gap: 3, mt: 1 }}>\r\n                      <Typography variant=\"body2\" color=\"text.secondary\">\r\n                        <strong>{formatNumber(stats.bestPerformingVideo.views)}</strong> views\r\n                      </Typography>\r\n                      <Typography variant=\"body2\" color=\"text.secondary\">\r\n                        <strong>{formatCurrency(stats.bestPerformingVideo.revenue)}</strong> revenue\r\n                      </Typography>\r\n                    </Box>\r\n                  </Box>\r\n                </Box>\r\n                <Button\r\n                  variant=\"outlined\"\r\n                  onClick={() => navigate(`/videos/${stats.bestPerformingVideo?.id}`)}\r\n                >\r\n                  View Details\r\n                </Button>\r\n              </Box>\r\n            </Paper>\r\n          </Grid>\r\n        )}\r\n      </Grid>\r\n    </Box>\r\n  );\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Dashboard\\MetricCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Dashboard\\MetricsDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CardHeader' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Select' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MenuItem' is defined but never used.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FormControl' is defined but never used.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'InputLabel' is defined but never used.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Tooltip' is defined but never used.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Info' is defined but never used.","line":36,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Error' is defined but never used.","line":45,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":45,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MoreVert' is defined but never used.","line":46,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DateRange' is defined but never used.","line":47,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":47,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Assessment' is defined but never used.","line":48,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'BarChart' is defined but never used.","line":56,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":56,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'PieChart' is defined but never used.","line":58,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":58,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Pie' is defined but never used.","line":59,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":59,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Cell' is defined but never used.","line":60,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":60,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'startOfDay' is defined but never used.","line":71,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":71,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'endOfDay' is defined but never used.","line":71,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":71,"endColumn":47},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'COLORS' is assigned a value but never used.","line":103,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":103,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'metrics' is assigned a value but never used.","line":109,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":109,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":109,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":109,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2085,2088],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2085,2088],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'channels' is assigned a value but never used.","line":113,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":113,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'startDate' is assigned a value but never used.","line":141,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":141,"endColumn":20},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchMetrics'. Either include it or remove the dependency array.","line":190,"column":6,"nodeType":"ArrayExpression","endLine":190,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [fetchMetrics, timeRange]","fix":{"range":[4709,4720],"text":"[fetchMetrics, timeRange]"}}]}],"suppressedMessages":[],"errorCount":22,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Metrics Dashboard Component\r\n * Comprehensive analytics and metrics visualization\r\n */\r\n\r\nimport React, { useState, useEffect, useMemo } from 'react';\r\nimport {\r\n  Box,\r\n  Grid,\r\n  Paper,\r\n  Typography,\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  IconButton,\r\n  Select,\r\n  MenuItem,\r\n  FormControl,\r\n  InputLabel,\r\n  Skeleton,\r\n  Tooltip,\r\n  Chip,\r\n  Button,\r\n  ButtonGroup,\r\n  Alert,\r\n  LinearProgress,\r\n  Tab,\r\n  Tabs,\r\n} from '@mui/material';\r\nimport {\r\n  TrendingUp,\r\n  TrendingDown,\r\n  TrendingFlat,\r\n  Refresh,\r\n  Download,\r\n  Info,\r\n  AttachMoney,\r\n  Visibility,\r\n  ThumbUp,\r\n  People,\r\n  VideoLibrary,\r\n  Speed,\r\n  Warning,\r\n  CheckCircle,\r\n  Error,\r\n  MoreVert,\r\n  DateRange,\r\n  Assessment,\r\n  Timeline,\r\n} from '@mui/icons-material';\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  AreaChart,\r\n  Area,\r\n  BarChart,\r\n  Bar,\r\n  PieChart,\r\n  Pie,\r\n  Cell,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip as ChartTooltip,\r\n  Legend,\r\n  ResponsiveContainer,\r\n  RadialBarChart,\r\n  RadialBar,\r\n  ComposedChart,\r\n} from 'recharts';\r\nimport { format, subDays, startOfDay, endOfDay } from 'date-fns';\r\nimport { useOptimizedStore } from '../../stores/optimizedStore';\r\nimport { useAnalyticsUpdates } from '../../hooks/useWebSocket';\r\nimport { api } from '../../services/api';\r\n\r\n// Types\r\ninterface MetricCard {\r\n  title: string;\r\n  value: number | string;\r\n  change: number;\r\n  trend: 'up' | 'down' | 'flat';\r\n  icon: React.ReactNode;\r\n  color: string;\r\n  suffix?: string;\r\n  prefix?: string;\r\n}\r\n\r\ninterface ChartData {\r\n  date: string;\r\n  views: number;\r\n  revenue: number;\r\n  subscribers: number;\r\n  engagement: number;\r\n}\r\n\r\ninterface PerformanceMetric {\r\n  name: string;\r\n  value: number;\r\n  target: number;\r\n  unit: string;\r\n}\r\n\r\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8'];\r\n\r\nexport const MetricsDashboard: React.FC = () => {\r\n  const [timeRange, setTimeRange] = useState<'24h' | '7d' | '30d' | '90d'>('7d');\r\n  const [loading, setLoading] = useState(true);\r\n  const [selectedTab, setSelectedTab] = useState(0);\r\n  const [metrics, setMetrics] = useState<any>(null);\r\n  const [chartData, setChartData] = useState<ChartData[]>([]);\r\n  const [performanceData, setPerformanceData] = useState<PerformanceMetric[]>([]);\r\n\r\n  const { analytics, channels } = useOptimizedStore();\r\n\r\n  // Use real-time updates\r\n  useAnalyticsUpdates();\r\n\r\n  // Fetch metrics data\r\n  const fetchMetrics = async () => {\r\n    try {\r\n      setLoading(true);\r\n\r\n      // Determine date range\r\n      let startDate: Date;\r\n      const endDate = new Date();\r\n      \r\n      switch (timeRange) {\r\n        case '24h':\r\n          startDate = subDays(endDate, 1);\r\n          break;\r\n        case '7d':\r\n          startDate = subDays(endDate, 7);\r\n          break;\r\n        case '30d':\r\n          startDate = subDays(endDate, 30);\r\n          break;\r\n        case '90d':\r\n          startDate = subDays(endDate, 90);\r\n          break;\r\n        default:\r\n          startDate = subDays(endDate, 7);\r\n      }\r\n\r\n      // Fetch data from API\r\n      const response = await api.post('/analytics/query', {\r\n        metric_types: ['views', 'revenue', 'subscribers', 'engagement_rate'],\r\n        time_range: timeRange === '24h' ? 'last_24_hours' : \r\n                     timeRange === '7d' ? 'last_7_days' :\r\n                     timeRange === '30d' ? 'last_30_days' : 'last_90_days',\r\n        aggregation_level: timeRange === '24h' ? 'hour' : 'day',\r\n      });\r\n\r\n      setMetrics(response.data);\r\n\r\n      // Generate chart data\r\n      const days = timeRange === '24h' ? 1 : \r\n                   timeRange === '7d' ? 7 :\r\n                   timeRange === '30d' ? 30 : 90;\r\n      \r\n      const newChartData: ChartData[] = [];\r\n      for (let i = days - 1; i >= 0; i--) {\r\n        const date = subDays(new Date(), i);\r\n        newChartData.push({\r\n          date: format(date, timeRange === '24h' ? 'HH:mm' : 'MMM dd'),\r\n          views: Math.floor(Math.random() * 10000) + 1000,\r\n          revenue: Math.random() * 500 + 100,\r\n          subscribers: Math.floor(Math.random() * 100) + 10,\r\n          engagement: Math.random() * 10 + 2,\r\n        });\r\n      }\r\n      setChartData(newChartData);\r\n\r\n      // Set performance data\r\n      setPerformanceData([\r\n        { name: 'CTR', value: 3.2, target: 4.0, unit: '%' },\r\n        { name: 'Watch Time', value: 4.5, target: 5.0, unit: 'min' },\r\n        { name: 'Retention', value: 65, target: 70, unit: '%' },\r\n        { name: 'Engagement', value: 8.5, target: 10, unit: '%' },\r\n      ]);\r\n\r\n      setLoading(false);\r\n    } catch (error) {\r\n      console.error('Failed to fetch metrics:', error);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchMetrics();\r\n  }, [timeRange]);\r\n\r\n  // Calculate metric cards\r\n  const metricCards: MetricCard[] = useMemo(() => {\r\n    if (!chartData.length) return [];\r\n\r\n    const current = chartData[chartData.length - 1];\r\n    const previous = chartData[chartData.length - 2] || current;\r\n\r\n    const calculateChange = (current: number, previous: number) => {\r\n      if (previous === 0) return 0;\r\n      return ((current - previous) / previous) * 100;\r\n    };\r\n\r\n    return [\r\n      {\r\n        title: 'Total Views',\r\n        value: current.views.toLocaleString(),\r\n        change: calculateChange(current.views, previous.views),\r\n        trend: current.views > previous.views ? 'up' : current.views < previous.views ? 'down' : 'flat',\r\n        icon: <Visibility />,\r\n        color: '#4CAF50',\r\n      },\r\n      {\r\n        title: 'Revenue',\r\n        value: current.revenue.toFixed(2),\r\n        change: calculateChange(current.revenue, previous.revenue),\r\n        trend: current.revenue > previous.revenue ? 'up' : current.revenue < previous.revenue ? 'down' : 'flat',\r\n        icon: <AttachMoney />,\r\n        color: '#2196F3',\r\n        prefix: '$',\r\n      },\r\n      {\r\n        title: 'New Subscribers',\r\n        value: current.subscribers.toLocaleString(),\r\n        change: calculateChange(current.subscribers, previous.subscribers),\r\n        trend: current.subscribers > previous.subscribers ? 'up' : current.subscribers < previous.subscribers ? 'down' : 'flat',\r\n        icon: <People />,\r\n        color: '#FF9800',\r\n      },\r\n      {\r\n        title: 'Engagement Rate',\r\n        value: current.engagement.toFixed(1),\r\n        change: calculateChange(current.engagement, previous.engagement),\r\n        trend: current.engagement > previous.engagement ? 'up' : current.engagement < previous.engagement ? 'down' : 'flat',\r\n        icon: <ThumbUp />,\r\n        color: '#9C27B0',\r\n        suffix: '%',\r\n      },\r\n    ];\r\n  }, [chartData]);\r\n\r\n  // Render metric card\r\n  const renderMetricCard = (card: MetricCard) => (\r\n    <Card key={card.title} sx={{ height: '100%' }}>\r\n      <CardContent>\r\n        <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"flex-start\">\r\n          <Box>\r\n            <Typography color=\"text.secondary\" gutterBottom variant=\"body2\">\r\n              {card.title}\r\n            </Typography>\r\n            <Typography variant=\"h4\" component=\"div\">\r\n              {card.prefix}{card.value}{card.suffix}\r\n            </Typography>\r\n            <Box display=\"flex\" alignItems=\"center\" mt={1}>\r\n              {card.trend === 'up' && <TrendingUp color=\"success\" fontSize=\"small\" />}\r\n              {card.trend === 'down' && <TrendingDown color=\"error\" fontSize=\"small\" />}\r\n              {card.trend === 'flat' && <TrendingFlat color=\"action\" fontSize=\"small\" />}\r\n              <Typography\r\n                variant=\"body2\"\r\n                color={card.trend === 'up' ? 'success.main' : card.trend === 'down' ? 'error.main' : 'text.secondary'}\r\n                ml={0.5}\r\n              >\r\n                {card.change > 0 ? '+' : ''}{card.change.toFixed(1)}%\r\n              </Typography>\r\n            </Box>\r\n          </Box>\r\n          <Box\r\n            sx={{\r\n              backgroundColor: `${card.color}20`,\r\n              borderRadius: 2,\r\n              p: 1,\r\n              display: 'flex',\r\n              alignItems: 'center',\r\n              justifyContent: 'center',\r\n            }}\r\n          >\r\n            {React.cloneElement(card.icon as React.ReactElement, {\r\n              sx: { color: card.color, fontSize: 32 },\r\n            })}\r\n          </Box>\r\n        </Box>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n\r\n  // Render performance gauge\r\n  const renderPerformanceGauge = (metric: PerformanceMetric) => {\r\n    const percentage = (metric.value / metric.target) * 100;\r\n    const color = percentage >= 90 ? '#4CAF50' : percentage >= 70 ? '#FF9800' : '#F44336';\r\n\r\n    return (\r\n      <Box key={metric.name} textAlign=\"center\">\r\n        <Typography variant=\"body2\" color=\"text.secondary\">\r\n          {metric.name}\r\n        </Typography>\r\n        <Box position=\"relative\" display=\"inline-flex\" mt={1}>\r\n          <ResponsiveContainer width={100} height={100}>\r\n            <RadialBarChart\r\n              cx=\"50%\"\r\n              cy=\"50%\"\r\n              innerRadius=\"60%\"\r\n              outerRadius=\"90%\"\r\n              data={[{ value: percentage, fill: color }]}\r\n              startAngle={90}\r\n              endAngle={-270}\r\n            >\r\n              <RadialBar dataKey=\"value\" cornerRadius={10} fill={color} />\r\n            </RadialBarChart>\r\n          </ResponsiveContainer>\r\n          <Box\r\n            position=\"absolute\"\r\n            top=\"50%\"\r\n            left=\"50%\"\r\n            sx={{\r\n              transform: 'translate(-50%, -50%)',\r\n            }}\r\n          >\r\n            <Typography variant=\"h6\">\r\n              {metric.value}{metric.unit}\r\n            </Typography>\r\n          </Box>\r\n        </Box>\r\n        <Typography variant=\"caption\" color=\"text.secondary\">\r\n          Target: {metric.target}{metric.unit}\r\n        </Typography>\r\n      </Box>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Box>\r\n      {/* Header */}\r\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\r\n        <Typography variant=\"h4\">Analytics Dashboard</Typography>\r\n        <Box display=\"flex\" gap={2}>\r\n          <ButtonGroup size=\"small\">\r\n            <Button\r\n              variant={timeRange === '24h' ? 'contained' : 'outlined'}\r\n              onClick={() => setTimeRange('24h')}\r\n            >\r\n              24H\r\n            </Button>\r\n            <Button\r\n              variant={timeRange === '7d' ? 'contained' : 'outlined'}\r\n              onClick={() => setTimeRange('7d')}\r\n            >\r\n              7D\r\n            </Button>\r\n            <Button\r\n              variant={timeRange === '30d' ? 'contained' : 'outlined'}\r\n              onClick={() => setTimeRange('30d')}\r\n            >\r\n              30D\r\n            </Button>\r\n            <Button\r\n              variant={timeRange === '90d' ? 'contained' : 'outlined'}\r\n              onClick={() => setTimeRange('90d')}\r\n            >\r\n              90D\r\n            </Button>\r\n          </ButtonGroup>\r\n          <Button startIcon={<Download />} variant=\"outlined\">\r\n            Export\r\n          </Button>\r\n          <IconButton onClick={fetchMetrics}>\r\n            <Refresh />\r\n          </IconButton>\r\n        </Box>\r\n      </Box>\r\n\r\n      {/* Real-time Status Bar */}\r\n      {analytics.realtime && (\r\n        <Alert severity=\"info\" sx={{ mb: 3 }}>\r\n          <Box display=\"flex\" gap={3}>\r\n            <Chip\r\n              icon={<Speed />}\r\n              label={`${analytics.realtime.activeViewers} Active Viewers`}\r\n              size=\"small\"\r\n            />\r\n            <Chip\r\n              icon={<VideoLibrary />}\r\n              label={`${analytics.realtime.videosProcessing} Videos Processing`}\r\n              size=\"small\"\r\n            />\r\n            <Chip\r\n              icon={<Timeline />}\r\n              label={`${analytics.realtime.apiCallsPerMinute} API Calls/min`}\r\n              size=\"small\"\r\n            />\r\n            <Chip\r\n              icon={analytics.realtime.errorRate < 0.01 ? <CheckCircle /> : <Warning />}\r\n              label={`${(analytics.realtime.errorRate * 100).toFixed(2)}% Error Rate`}\r\n              size=\"small\"\r\n              color={analytics.realtime.errorRate < 0.01 ? 'success' : 'warning'}\r\n            />\r\n          </Box>\r\n        </Alert>\r\n      )}\r\n\r\n      {/* Metric Cards */}\r\n      <Grid container spacing={3} mb={3}>\r\n        {loading ? (\r\n          [1, 2, 3, 4].map((i) => (\r\n            <Grid item xs={12} sm={6} md={3} key={i}>\r\n              <Skeleton variant=\"rectangular\" height={120} />\r\n            </Grid>\r\n          ))\r\n        ) : (\r\n          metricCards.map((card) => (\r\n            <Grid item xs={12} sm={6} md={3} key={card.title}>\r\n              {renderMetricCard(card)}\r\n            </Grid>\r\n          ))\r\n        )}\r\n      </Grid>\r\n\r\n      {/* Tabs */}\r\n      <Paper sx={{ mb: 3 }}>\r\n        <Tabs value={selectedTab} onChange={(_, v) => setSelectedTab(v)}>\r\n          <Tab label=\"Overview\" />\r\n          <Tab label=\"Performance\" />\r\n          <Tab label=\"Channels\" />\r\n          <Tab label=\"Revenue\" />\r\n          <Tab label=\"Engagement\" />\r\n        </Tabs>\r\n      </Paper>\r\n\r\n      {/* Tab Content */}\r\n      {selectedTab === 0 && (\r\n        <Grid container spacing={3}>\r\n          {/* Views Chart */}\r\n          <Grid item xs={12} md={8}>\r\n            <Paper sx={{ p: 2 }}>\r\n              <Typography variant=\"h6\" gutterBottom>\r\n                Views Over Time\r\n              </Typography>\r\n              <ResponsiveContainer width=\"100%\" height={300}>\r\n                <AreaChart data={chartData}>\r\n                  <CartesianGrid strokeDasharray=\"3 3\" />\r\n                  <XAxis dataKey=\"date\" />\r\n                  <YAxis />\r\n                  <ChartTooltip />\r\n                  <Area\r\n                    type=\"monotone\"\r\n                    dataKey=\"views\"\r\n                    stroke=\"#8884d8\"\r\n                    fill=\"#8884d8\"\r\n                    fillOpacity={0.6}\r\n                  />\r\n                </AreaChart>\r\n              </ResponsiveContainer>\r\n            </Paper>\r\n          </Grid>\r\n\r\n          {/* Performance Gauges */}\r\n          <Grid item xs={12} md={4}>\r\n            <Paper sx={{ p: 2, height: '100%' }}>\r\n              <Typography variant=\"h6\" gutterBottom>\r\n                Performance Metrics\r\n              </Typography>\r\n              <Grid container spacing={2} sx={{ mt: 1 }}>\r\n                {performanceData.map((metric) => (\r\n                  <Grid item xs={6} key={metric.name}>\r\n                    {renderPerformanceGauge(metric)}\r\n                  </Grid>\r\n                ))}\r\n              </Grid>\r\n            </Paper>\r\n          </Grid>\r\n\r\n          {/* Revenue & Subscribers Chart */}\r\n          <Grid item xs={12} md={6}>\r\n            <Paper sx={{ p: 2 }}>\r\n              <Typography variant=\"h6\" gutterBottom>\r\n                Revenue & Subscribers\r\n              </Typography>\r\n              <ResponsiveContainer width=\"100%\" height={300}>\r\n                <ComposedChart data={chartData}>\r\n                  <CartesianGrid strokeDasharray=\"3 3\" />\r\n                  <XAxis dataKey=\"date\" />\r\n                  <YAxis yAxisId=\"left\" />\r\n                  <YAxis yAxisId=\"right\" orientation=\"right\" />\r\n                  <ChartTooltip />\r\n                  <Legend />\r\n                  <Bar yAxisId=\"left\" dataKey=\"revenue\" fill=\"#82ca9d\" name=\"Revenue ($)\" />\r\n                  <Line\r\n                    yAxisId=\"right\"\r\n                    type=\"monotone\"\r\n                    dataKey=\"subscribers\"\r\n                    stroke=\"#ff7300\"\r\n                    name=\"New Subscribers\"\r\n                  />\r\n                </ComposedChart>\r\n              </ResponsiveContainer>\r\n            </Paper>\r\n          </Grid>\r\n\r\n          {/* Engagement Chart */}\r\n          <Grid item xs={12} md={6}>\r\n            <Paper sx={{ p: 2 }}>\r\n              <Typography variant=\"h6\" gutterBottom>\r\n                Engagement Rate\r\n              </Typography>\r\n              <ResponsiveContainer width=\"100%\" height={300}>\r\n                <LineChart data={chartData}>\r\n                  <CartesianGrid strokeDasharray=\"3 3\" />\r\n                  <XAxis dataKey=\"date\" />\r\n                  <YAxis />\r\n                  <ChartTooltip />\r\n                  <Line\r\n                    type=\"monotone\"\r\n                    dataKey=\"engagement\"\r\n                    stroke=\"#8884d8\"\r\n                    strokeWidth={2}\r\n                    dot={{ fill: '#8884d8' }}\r\n                  />\r\n                </LineChart>\r\n              </ResponsiveContainer>\r\n            </Paper>\r\n          </Grid>\r\n\r\n          {/* Top Videos */}\r\n          <Grid item xs={12}>\r\n            <Paper sx={{ p: 2 }}>\r\n              <Typography variant=\"h6\" gutterBottom>\r\n                Top Performing Videos\r\n              </Typography>\r\n              <Box sx={{ overflowX: 'auto' }}>\r\n                <Grid container spacing={2} sx={{ flexWrap: 'nowrap', minWidth: 800 }}>\r\n                  {[1, 2, 3, 4, 5].map((i) => (\r\n                    <Grid item key={i} sx={{ minWidth: 200 }}>\r\n                      <Card variant=\"outlined\">\r\n                        <CardContent>\r\n                          <Typography variant=\"body2\" noWrap>\r\n                            Video Title {i}\r\n                          </Typography>\r\n                          <Typography variant=\"h6\">\r\n                            {(Math.random() * 100000).toFixed(0)} views\r\n                          </Typography>\r\n                          <LinearProgress\r\n                            variant=\"determinate\"\r\n                            value={Math.random() * 100}\r\n                            sx={{ mt: 1 }}\r\n                          />\r\n                        </CardContent>\r\n                      </Card>\r\n                    </Grid>\r\n                  ))}\r\n                </Grid>\r\n              </Box>\r\n            </Paper>\r\n          </Grid>\r\n        </Grid>\r\n      )}\r\n    </Box>\r\n  );\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Dashboard\\RealTimeMetrics.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'LinearProgress' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Fade' is defined but never used.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Grow' is defined but never used.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Button' is defined but never used.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CheckCircle' is defined but never used.","line":32,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Warning' is defined but never used.","line":34,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Timer' is defined but never used.","line":38,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Update' is defined but never used.","line":39,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'channelId' is defined but never used.","line":79,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":79,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'animationRef' is assigned a value but never used.","line":90,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":90,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'sendMessage' is assigned a value but never used.","line":93,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":93,"endColumn":22}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef } from 'react';\nimport {\n  Box,\n  Card,\n  CardContent,\n  Typography,\n  Grid,\n  Chip,\n  LinearProgress,\n  CircularProgress,\n  IconButton,\n  Tooltip,\n  Badge,\n  Avatar,\n  useTheme,\n  Paper,\n  Skeleton,\n  Fade,\n  Grow,\n  Alert,\n  Button,\n} from '@mui/material';\nimport {\n  TrendingUp,\n  TrendingDown,\n  TrendingFlat,\n  AttachMoney,\n  Visibility,\n  ThumbUp,\n  Schedule,\n  CloudQueue,\n  CheckCircle,\n  Error,\n  Warning,\n  Refresh,\n  FiberManualRecord,\n  Speed,\n  Timer,\n  Update,\n  NotificationImportant,\n} from '@mui/icons-material';\nimport { format, formatDistanceToNow } from 'date-fns';\nimport { useWebSocket } from '../../hooks/useWebSocket';\nimport { AnimatePresence, motion } from 'framer-motion';\nimport CountUp from 'react-countup';\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  previousValue: number;\n  unit?: string;\n  trend: 'up' | 'down' | 'flat';\n  changePercent: number;\n  icon: React.ReactNode;\n  color: string;\n  sparklineData?: number[];\n  lastUpdated: Date;\n  isLive?: boolean;\n}\n\ninterface LiveEvent {\n  id: string;\n  type: 'video_published' | 'revenue_earned' | 'milestone_reached' | 'error' | 'warning';\n  title: string;\n  description: string;\n  timestamp: Date;\n  severity: 'info' | 'success' | 'warning' | 'error';\n}\n\ninterface RealTimeMetricsProps {\n  channelId?: string;\n  refreshInterval?: number;\n  showSparklines?: boolean;\n  compactMode?: boolean;\n}\n\nexport const RealTimeMetrics: React.FC<RealTimeMetricsProps> = ({\n  channelId,\n  refreshInterval = 5000,\n  showSparklines = true,\n  compactMode = false,\n}) => {\n  const theme = useTheme();\n  const [metrics, setMetrics] = useState<MetricData[]>([]);\n  const [liveEvents, setLiveEvents] = useState<LiveEvent[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [connectionStatus, setConnectionStatus] = useState<'connected' | 'connecting' | 'disconnected'>('connecting');\n  const [lastUpdate, setLastUpdate] = useState<Date>(new Date());\n  const animationRef = useRef<number>();\n\n  // WebSocket connection for real-time updates\n  const { sendMessage, lastMessage, readyState } = useWebSocket('/ws/metrics', {\n    shouldReconnect: () => true,\n    reconnectInterval: 3000,\n  });\n\n  // Initialize metrics\n  useEffect(() => {\n    const initialMetrics: MetricData[] = [\n      {\n        id: 'revenue',\n        label: 'Revenue Today',\n        value: 127.50,\n        previousValue: 112.30,\n        unit: '$',\n        trend: 'up',\n        changePercent: 13.5,\n        icon: <AttachMoney />,\n        color: theme.palette.success.main,\n        sparklineData: [100, 105, 110, 108, 115, 120, 127],\n        lastUpdated: new Date(),\n        isLive: true,\n      },\n      {\n        id: 'views',\n        label: 'Total Views',\n        value: 15234,\n        previousValue: 14500,\n        trend: 'up',\n        changePercent: 5.1,\n        icon: <Visibility />,\n        color: theme.palette.primary.main,\n        sparklineData: [14000, 14200, 14500, 14600, 14900, 15000, 15234],\n        lastUpdated: new Date(),\n        isLive: true,\n      },\n      {\n        id: 'engagement',\n        label: 'Engagement Rate',\n        value: 4.7,\n        previousValue: 4.2,\n        unit: '%',\n        trend: 'up',\n        changePercent: 11.9,\n        icon: <ThumbUp />,\n        color: theme.palette.secondary.main,\n        sparklineData: [4.0, 4.1, 4.2, 4.3, 4.5, 4.6, 4.7],\n        lastUpdated: new Date(),\n        isLive: true,\n      },\n      {\n        id: 'processing',\n        label: 'Videos Processing',\n        value: 3,\n        previousValue: 5,\n        trend: 'down',\n        changePercent: -40,\n        icon: <CloudQueue />,\n        color: theme.palette.warning.main,\n        lastUpdated: new Date(),\n        isLive: true,\n      },\n      {\n        id: 'scheduled',\n        label: 'Scheduled Today',\n        value: 8,\n        previousValue: 6,\n        trend: 'up',\n        changePercent: 33.3,\n        icon: <Schedule />,\n        color: theme.palette.info.main,\n        lastUpdated: new Date(),\n      },\n      {\n        id: 'health',\n        label: 'System Health',\n        value: 98,\n        previousValue: 95,\n        unit: '%',\n        trend: 'up',\n        changePercent: 3.2,\n        icon: <Speed />,\n        color: theme.palette.success.main,\n        lastUpdated: new Date(),\n        isLive: true,\n      },\n    ];\n\n    setMetrics(initialMetrics);\n    setLoading(false);\n  }, [theme]);\n\n  // Handle WebSocket messages\n  useEffect(() => {\n    if (lastMessage) {\n      try {\n        const data = JSON.parse(lastMessage.data);\n        \n        if (data.type === 'metric_update') {\n          setMetrics(prev => prev.map(metric =>\n            metric.id === data.metricId\n              ? {\n                  ...metric,\n                  previousValue: metric.value,\n                  value: data.value,\n                  trend: data.value > metric.value ? 'up' : data.value < metric.value ? 'down' : 'flat',\n                  changePercent: ((data.value - metric.value) / metric.value) * 100,\n                  lastUpdated: new Date(),\n                  sparklineData: metric.sparklineData ? [...metric.sparklineData.slice(1), data.value] : undefined,\n                }\n              : metric\n          ));\n          setLastUpdate(new Date());\n        }\n        \n        if (data.type === 'live_event') {\n          const newEvent: LiveEvent = {\n            id: `event-${Date.now()}`,\n            type: data.eventType,\n            title: data.title,\n            description: data.description,\n            timestamp: new Date(),\n            severity: data.severity || 'info',\n          };\n          setLiveEvents(prev => [newEvent, ...prev].slice(0, 10));\n        }\n      } catch (error) {\n        console.error('Error parsing WebSocket message:', error);\n      }\n    }\n  }, [lastMessage]);\n\n  // Connection status monitoring\n  useEffect(() => {\n    if (readyState === WebSocket.OPEN) {\n      setConnectionStatus('connected');\n    } else if (readyState === WebSocket.CONNECTING) {\n      setConnectionStatus('connecting');\n    } else {\n      setConnectionStatus('disconnected');\n    }\n  }, [readyState]);\n\n  // Simulate real-time updates (for demo)\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setMetrics(prev => prev.map(metric => {\n        if (metric.isLive) {\n          const change = (Math.random() - 0.5) * 10;\n          const newValue = Math.max(0, metric.value + change);\n          return {\n            ...metric,\n            previousValue: metric.value,\n            value: newValue,\n            trend: newValue > metric.value ? 'up' : newValue < metric.value ? 'down' : 'flat',\n            changePercent: ((newValue - metric.value) / metric.value) * 100,\n            lastUpdated: new Date(),\n            sparklineData: metric.sparklineData \n              ? [...metric.sparklineData.slice(1), newValue]\n              : undefined,\n          };\n        }\n        return metric;\n      }));\n      setLastUpdate(new Date());\n    }, refreshInterval);\n\n    return () => clearInterval(interval);\n  }, [refreshInterval]);\n\n  // Render trend icon\n  const getTrendIcon = (trend: 'up' | 'down' | 'flat', color: string) => {\n    switch (trend) {\n      case 'up':\n        return <TrendingUp sx={{ color, fontSize: 16 }} />;\n      case 'down':\n        return <TrendingDown sx={{ color: theme.palette.error.main, fontSize: 16 }} />;\n      default:\n        return <TrendingFlat sx={{ color: theme.palette.text.secondary, fontSize: 16 }} />;\n    }\n  };\n\n  // Render sparkline\n  const renderSparkline = (data?: number[]) => {\n    if (!data || !showSparklines) return null;\n    \n    const max = Math.max(...data);\n    const min = Math.min(...data);\n    const range = max - min || 1;\n    const width = 60;\n    const height = 30;\n    \n    const points = data.map((value, index) => {\n      const x = (index / (data.length - 1)) * width;\n      const y = height - ((value - min) / range) * height;\n      return `${x},${y}`;\n    }).join(' ');\n\n    return (\n      <svg width={width} height={height} style={{ marginLeft: 'auto' }}>\n        <polyline\n          points={points}\n          fill=\"none\"\n          stroke={theme.palette.primary.main}\n          strokeWidth=\"2\"\n        />\n      </svg>\n    );\n  };\n\n  // Render metric card\n  const renderMetricCard = (metric: MetricData) => (\n    <Grid item xs={12} sm={6} md={4} lg={2} key={metric.id}>\n      <motion.div\n        initial={{ scale: 0.9, opacity: 0 }}\n        animate={{ scale: 1, opacity: 1 }}\n        transition={{ duration: 0.3 }}\n      >\n        <Card\n          sx={{\n            height: '100%',\n            position: 'relative',\n            overflow: 'visible',\n            ...(metric.isLive && {\n              '&::before': {\n                content: '\"\"',\n                position: 'absolute',\n                top: 8,\n                right: 8,\n                width: 8,\n                height: 8,\n                borderRadius: '50%',\n                backgroundColor: theme.palette.success.main,\n                animation: 'pulse 2s infinite',\n              },\n            }),\n          }}\n        >\n          <CardContent sx={{ p: compactMode ? 1.5 : 2 }}>\n            <Box sx={{ display: 'flex', alignItems: 'flex-start', mb: 1 }}>\n              <Avatar\n                sx={{\n                  width: 32,\n                  height: 32,\n                  backgroundColor: `${metric.color}20`,\n                  color: metric.color,\n                }}\n              >\n                {metric.icon}\n              </Avatar>\n              {metric.isLive && (\n                <Tooltip title=\"Live data\">\n                  <FiberManualRecord\n                    sx={{\n                      fontSize: 10,\n                      color: theme.palette.success.main,\n                      ml: 'auto',\n                      animation: 'pulse 2s infinite',\n                    }}\n                  />\n                </Tooltip>\n              )}\n            </Box>\n            \n            <Typography variant=\"caption\" color=\"text.secondary\" display=\"block\">\n              {metric.label}\n            </Typography>\n            \n            <Box sx={{ display: 'flex', alignItems: 'baseline', gap: 0.5, my: 1 }}>\n              <Typography variant=\"h5\" fontWeight=\"bold\">\n                {metric.unit && metric.unit === '$' && metric.unit}\n                <CountUp\n                  start={metric.previousValue}\n                  end={metric.value}\n                  duration={1}\n                  decimals={metric.unit === '$' || metric.unit === '%' ? 2 : 0}\n                  preserveValue\n                />\n                {metric.unit && metric.unit !== '$' && metric.unit}\n              </Typography>\n            </Box>\n            \n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n              {getTrendIcon(metric.trend, metric.color)}\n              <Typography\n                variant=\"caption\"\n                sx={{\n                  color: metric.trend === 'up' \n                    ? theme.palette.success.main \n                    : metric.trend === 'down'\n                    ? theme.palette.error.main\n                    : theme.palette.text.secondary,\n                }}\n              >\n                {metric.changePercent > 0 ? '+' : ''}{metric.changePercent.toFixed(1)}%\n              </Typography>\n              {renderSparkline(metric.sparklineData)}\n            </Box>\n            \n            {!compactMode && (\n              <Typography variant=\"caption\" color=\"text.disabled\" display=\"block\" sx={{ mt: 1 }}>\n                {formatDistanceToNow(metric.lastUpdated, { addSuffix: true })}\n              </Typography>\n            )}\n          </CardContent>\n        </Card>\n      </motion.div>\n    </Grid>\n  );\n\n  // Render live events ticker\n  const renderLiveEvents = () => (\n    <Paper sx={{ p: 2, mt: 2 }}>\n      <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n        <Typography variant=\"h6\" fontWeight=\"bold\">\n          Live Activity\n        </Typography>\n        <Badge\n          badgeContent={liveEvents.length}\n          color=\"primary\"\n          sx={{ ml: 2 }}\n        >\n          <NotificationImportant />\n        </Badge>\n      </Box>\n      \n      <Box sx={{ maxHeight: 200, overflow: 'auto' }}>\n        <AnimatePresence>\n          {liveEvents.map((event) => (\n            <motion.div\n              key={event.id}\n              initial={{ x: -20, opacity: 0 }}\n              animate={{ x: 0, opacity: 1 }}\n              exit={{ x: 20, opacity: 0 }}\n              transition={{ duration: 0.3 }}\n            >\n              <Alert\n                severity={event.severity}\n                sx={{ mb: 1 }}\n                onClose={() => {\n                  setLiveEvents(prev => prev.filter(e => e.id !== event.id));\n                }}\n              >\n                <Typography variant=\"subtitle2\" fontWeight=\"medium\">\n                  {event.title}\n                </Typography>\n                <Typography variant=\"caption\" display=\"block\">\n                  {event.description}\n                </Typography>\n                <Typography variant=\"caption\" color=\"text.secondary\">\n                  {formatDistanceToNow(event.timestamp, { addSuffix: true })}\n                </Typography>\n              </Alert>\n            </motion.div>\n          ))}\n        </AnimatePresence>\n        \n        {liveEvents.length === 0 && (\n          <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\">\n            No recent activity\n          </Typography>\n        )}\n      </Box>\n    </Paper>\n  );\n\n  if (loading) {\n    return (\n      <Grid container spacing={2}>\n        {[1, 2, 3, 4, 5, 6].map((i) => (\n          <Grid item xs={12} sm={6} md={4} lg={2} key={i}>\n            <Card>\n              <CardContent>\n                <Skeleton variant=\"circular\" width={32} height={32} />\n                <Skeleton variant=\"text\" width=\"60%\" sx={{ mt: 1 }} />\n                <Skeleton variant=\"text\" width=\"40%\" height={32} />\n                <Skeleton variant=\"text\" width=\"30%\" />\n              </CardContent>\n            </Card>\n          </Grid>\n        ))}\n      </Grid>\n    );\n  }\n\n  return (\n    <Box>\n      {/* Connection Status */}\n      <Box sx={{ display: 'flex', alignItems: 'center', mb: 2, gap: 2 }}>\n        <Chip\n          icon={\n            connectionStatus === 'connected' ? (\n              <FiberManualRecord sx={{ fontSize: 12 }} />\n            ) : connectionStatus === 'connecting' ? (\n              <CircularProgress size={12} />\n            ) : (\n              <Error sx={{ fontSize: 12 }} />\n            )\n          }\n          label={\n            connectionStatus === 'connected'\n              ? 'Live'\n              : connectionStatus === 'connecting'\n              ? 'Connecting...'\n              : 'Disconnected'\n          }\n          color={\n            connectionStatus === 'connected'\n              ? 'success'\n              : connectionStatus === 'connecting'\n              ? 'warning'\n              : 'error'\n          }\n          size=\"small\"\n        />\n        \n        <Typography variant=\"caption\" color=\"text.secondary\">\n          Last updated: {format(lastUpdate, 'HH:mm:ss')}\n        </Typography>\n        \n        <IconButton size=\"small\" onClick={() => window.location.reload()}>\n          <Refresh fontSize=\"small\" />\n        </IconButton>\n      </Box>\n\n      {/* Metrics Grid */}\n      <Grid container spacing={2}>\n        {metrics.map(renderMetricCard)}\n      </Grid>\n\n      {/* Live Events */}\n      {!compactMode && renderLiveEvents()}\n\n      {/* CSS for pulse animation */}\n      <style>{`\n        @keyframes pulse {\n          0% { opacity: 1; }\n          50% { opacity: 0.5; }\n          100% { opacity: 1; }\n        }\n      `}</style>\n    </Box>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Dashboard\\RecentActivity.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Dashboard\\RevenueDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":1,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'InputLabel' is defined but never used.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Chip' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CalendarToday' is defined but never used.","line":29,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'PieChartIcon' is defined but never used.","line":31,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'subDays' is defined but never used.","line":51,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":51,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'startOfMonth' is defined but never used.","line":51,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":51,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'endOfMonth' is defined but never used.","line":51,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":51,"endColumn":51}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Card,\n  CardContent,\n  Typography,\n  Grid,\n  IconButton,\n  Select,\n  MenuItem,\n  FormControl,\n  InputLabel,\n  Button,\n  Tooltip,\n  Chip,\n  LinearProgress,\n  Alert,\n  ToggleButton,\n  ToggleButtonGroup,\n} from '@mui/material';\nimport {\n  TrendingUp,\n  TrendingDown,\n  AttachMoney,\n  Assessment,\n  Download,\n  Refresh,\n  Info,\n  CalendarToday,\n  ShowChart,\n  PieChart as PieChartIcon,\n  BarChart as BarChartIcon,\n} from '@mui/icons-material';\nimport {\n  LineChart,\n  Line,\n  AreaChart,\n  Area,\n  BarChart,\n  Bar,\n  PieChart,\n  Pie,\n  Cell,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip as RechartsTooltip,\n  Legend,\n  ResponsiveContainer,\n} from 'recharts';\nimport { format, subDays, startOfMonth, endOfMonth } from 'date-fns';\nimport { useRevenueData } from '../../hooks/useRevenueData';\nimport { formatCurrency, formatPercentage } from '../../utils/formatters';\n\ninterface RevenueDashboardProps {\n  userId?: number;\n  channelId?: number;\n  dateRange?: {\n    start: Date;\n    end: Date;\n  };\n}\n\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8', '#82CA9D'];\n\nexport const RevenueDashboard: React.FC<RevenueDashboardProps> = ({\n  userId,\n  channelId,\n  dateRange,\n}) => {\n  const [selectedPeriod, setSelectedPeriod] = useState<'daily' | 'weekly' | 'monthly'>('daily');\n  const [chartType, setChartType] = useState<'line' | 'bar' | 'area'>('line');\n  const [breakdownType, setBreakdownType] = useState<string>('source');\n  const [isExporting, setIsExporting] = useState(false);\n\n  const {\n    overview,\n    trends,\n    forecast,\n    breakdown,\n    channelRevenue,\n    loading,\n    error,\n    refetch,\n    exportData,\n  } = useRevenueData({\n    userId,\n    channelId,\n    dateRange,\n    period: selectedPeriod,\n    breakdownBy: breakdownType,\n  });\n\n  const handleExport = async (format: 'csv' | 'json') => {\n    setIsExporting(true);\n    try {\n      await exportData(format);\n    } finally {\n      setIsExporting(false);\n    }\n  };\n\n  const handlePeriodChange = (event: React.MouseEvent<HTMLElement>, newPeriod: string | null) => {\n    if (newPeriod) {\n      setSelectedPeriod(newPeriod as 'daily' | 'weekly' | 'monthly');\n    }\n  };\n\n  const renderRevenueCard = (title: string, value: number | string, trend?: number, icon?: React.ReactNode) => (\n    <Card sx={{ height: '100%', position: 'relative' }}>\n      <CardContent>\n        <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\n          <Typography color=\"textSecondary\" gutterBottom variant=\"body2\">\n            {title}\n          </Typography>\n          {icon}\n        </Box>\n        <Typography variant=\"h4\" component=\"div\" fontWeight=\"bold\">\n          {typeof value === 'number' ? formatCurrency(value) : value}\n        </Typography>\n        {trend !== undefined && (\n          <Box display=\"flex\" alignItems=\"center\" mt={1}>\n            {trend > 0 ? (\n              <TrendingUp color=\"success\" fontSize=\"small\" />\n            ) : (\n              <TrendingDown color=\"error\" fontSize=\"small\" />\n            )}\n            <Typography\n              variant=\"body2\"\n              color={trend > 0 ? 'success.main' : 'error.main'}\n              ml={0.5}\n            >\n              {formatPercentage(Math.abs(trend))}\n            </Typography>\n          </Box>\n        )}\n      </CardContent>\n    </Card>\n  );\n\n  const renderTrendsChart = () => {\n    if (!trends || trends.length === 0) return null;\n\n    const ChartComponent = chartType === 'bar' ? BarChart : chartType === 'area' ? AreaChart : LineChart;\n    const DataComponent = chartType === 'bar' ? Bar : chartType === 'area' ? Area : Line;\n\n    return (\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <ChartComponent data={trends}>\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis\n            dataKey=\"period\"\n            tickFormatter={(value) => format(new Date(value), 'MMM dd')}\n          />\n          <YAxis tickFormatter={(value) => `$${value}`} />\n          <RechartsTooltip\n            formatter={(value: number) => formatCurrency(value)}\n            labelFormatter={(label) => format(new Date(label), 'PPP')}\n          />\n          <Legend />\n          <DataComponent\n            type=\"monotone\"\n            dataKey=\"revenue\"\n            stroke=\"#8884d8\"\n            fill=\"#8884d8\"\n            strokeWidth={2}\n            name=\"Revenue\"\n          />\n          {chartType === 'area' && (\n            <Area\n              type=\"monotone\"\n              dataKey=\"revenue\"\n              stroke=\"#8884d8\"\n              fillOpacity={0.3}\n              fill=\"#8884d8\"\n            />\n          )}\n        </ChartComponent>\n      </ResponsiveContainer>\n    );\n  };\n\n  const renderBreakdownChart = () => {\n    if (!breakdown || breakdown.length === 0) return null;\n\n    return (\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <PieChart>\n          <Pie\n            data={breakdown}\n            cx=\"50%\"\n            cy=\"50%\"\n            labelLine={false}\n            label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\n            outerRadius={80}\n            fill=\"#8884d8\"\n            dataKey=\"revenue\"\n            nameKey={breakdownType === 'source' ? 'source' : breakdownType === 'content_type' ? 'content_type' : 'time_period'}\n          >\n            {breakdown.map((entry, index) => (\n              <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n            ))}\n          </Pie>\n          <RechartsTooltip formatter={(value: number) => formatCurrency(value)} />\n        </PieChart>\n      </ResponsiveContainer>\n    );\n  };\n\n  const renderForecastChart = () => {\n    if (!forecast || forecast.length === 0) return null;\n\n    return (\n      <ResponsiveContainer width=\"100%\" height={200}>\n        <AreaChart data={forecast}>\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis\n            dataKey=\"date\"\n            tickFormatter={(value) => format(new Date(value), 'MMM dd')}\n          />\n          <YAxis tickFormatter={(value) => `$${value}`} />\n          <RechartsTooltip\n            formatter={(value: number) => formatCurrency(value)}\n            labelFormatter={(label) => format(new Date(label), 'PPP')}\n          />\n          <Area\n            type=\"monotone\"\n            dataKey=\"predicted_revenue\"\n            stroke=\"#82ca9d\"\n            fill=\"#82ca9d\"\n            fillOpacity={0.6}\n            name=\"Predicted Revenue\"\n          />\n          <Area\n            type=\"monotone\"\n            dataKey=\"confidence_upper\"\n            stroke=\"#82ca9d\"\n            fill=\"#82ca9d\"\n            fillOpacity={0.2}\n            strokeDasharray=\"3 3\"\n            name=\"Upper Bound\"\n          />\n          <Area\n            type=\"monotone\"\n            dataKey=\"confidence_lower\"\n            stroke=\"#82ca9d\"\n            fill=\"#82ca9d\"\n            fillOpacity={0.2}\n            strokeDasharray=\"3 3\"\n            name=\"Lower Bound\"\n          />\n        </AreaChart>\n      </ResponsiveContainer>\n    );\n  };\n\n  if (loading) {\n    return (\n      <Box sx={{ width: '100%', mt: 2 }}>\n        <LinearProgress />\n      </Box>\n    );\n  }\n\n  if (error) {\n    return (\n      <Alert severity=\"error\" sx={{ mt: 2 }}>\n        {error}\n      </Alert>\n    );\n  }\n\n  return (\n    <Box sx={{ p: 3 }}>\n      {/* Header */}\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\n        <Typography variant=\"h4\" fontWeight=\"bold\">\n          Revenue Dashboard\n        </Typography>\n        <Box display=\"flex\" gap={2}>\n          <Button\n            startIcon={<Download />}\n            variant=\"outlined\"\n            onClick={() => handleExport('csv')}\n            disabled={isExporting}\n          >\n            Export CSV\n          </Button>\n          <Button\n            startIcon={<Download />}\n            variant=\"outlined\"\n            onClick={() => handleExport('json')}\n            disabled={isExporting}\n          >\n            Export JSON\n          </Button>\n          <IconButton onClick={refetch} disabled={loading}>\n            <Refresh />\n          </IconButton>\n        </Box>\n      </Box>\n\n      {/* Summary Cards */}\n      <Grid container spacing={3} mb={3}>\n        <Grid item xs={12} sm={6} md={3}>\n          {renderRevenueCard(\n            'Total Revenue',\n            overview?.total_revenue || 0,\n            overview?.revenue_growth,\n            <AttachMoney color=\"primary\" />\n          )}\n        </Grid>\n        <Grid item xs={12} sm={6} md={3}>\n          {renderRevenueCard(\n            'Avg. Revenue/Video',\n            overview?.average_revenue_per_video || 0,\n            undefined,\n            <Assessment color=\"secondary\" />\n          )}\n        </Grid>\n        <Grid item xs={12} sm={6} md={3}>\n          {renderRevenueCard(\n            'CPM',\n            `$${overview?.cpm?.toFixed(2) || '0.00'}`,\n            overview?.cpm_trend,\n            <ShowChart color=\"success\" />\n          )}\n        </Grid>\n        <Grid item xs={12} sm={6} md={3}>\n          {renderRevenueCard(\n            'RPM',\n            `$${overview?.rpm?.toFixed(2) || '0.00'}`,\n            overview?.rpm_trend,\n            <BarChartIcon color=\"info\" />\n          )}\n        </Grid>\n      </Grid>\n\n      {/* Revenue Trends */}\n      <Card sx={{ mb: 3 }}>\n        <CardContent>\n          <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\n            <Typography variant=\"h6\">Revenue Trends</Typography>\n            <Box display=\"flex\" gap={2}>\n              <ToggleButtonGroup\n                value={selectedPeriod}\n                exclusive\n                onChange={handlePeriodChange}\n                size=\"small\"\n              >\n                <ToggleButton value=\"daily\">Daily</ToggleButton>\n                <ToggleButton value=\"weekly\">Weekly</ToggleButton>\n                <ToggleButton value=\"monthly\">Monthly</ToggleButton>\n              </ToggleButtonGroup>\n              <ToggleButtonGroup\n                value={chartType}\n                exclusive\n                onChange={(e, val) => val && setChartType(val)}\n                size=\"small\"\n              >\n                <ToggleButton value=\"line\">\n                  <ShowChart />\n                </ToggleButton>\n                <ToggleButton value=\"bar\">\n                  <BarChartIcon />\n                </ToggleButton>\n                <ToggleButton value=\"area\">\n                  <Assessment />\n                </ToggleButton>\n              </ToggleButtonGroup>\n            </Box>\n          </Box>\n          {renderTrendsChart()}\n        </CardContent>\n      </Card>\n\n      {/* Revenue Breakdown and Forecast */}\n      <Grid container spacing={3}>\n        <Grid item xs={12} md={6}>\n          <Card sx={{ height: '100%' }}>\n            <CardContent>\n              <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\n                <Typography variant=\"h6\">Revenue Breakdown</Typography>\n                <FormControl size=\"small\" sx={{ minWidth: 120 }}>\n                  <Select\n                    value={breakdownType}\n                    onChange={(e) => setBreakdownType(e.target.value)}\n                  >\n                    <MenuItem value=\"source\">By Source</MenuItem>\n                    <MenuItem value=\"content_type\">By Content Type</MenuItem>\n                    <MenuItem value=\"video_length\">By Video Length</MenuItem>\n                    <MenuItem value=\"time_of_day\">By Time of Day</MenuItem>\n                  </Select>\n                </FormControl>\n              </Box>\n              {renderBreakdownChart()}\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} md={6}>\n          <Card sx={{ height: '100%' }}>\n            <CardContent>\n              <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\n                <Typography variant=\"h6\">Revenue Forecast</Typography>\n                <Tooltip title=\"Machine learning-based forecast with confidence intervals\">\n                  <IconButton size=\"small\">\n                    <Info />\n                  </IconButton>\n                </Tooltip>\n              </Box>\n              {renderForecastChart()}\n              {forecast && (\n                <Box mt={2}>\n                  <Typography variant=\"body2\" color=\"textSecondary\">\n                    Confidence: {formatPercentage(forecast.confidence || 0)}\n                  </Typography>\n                  <Typography variant=\"body2\" color=\"textSecondary\">\n                    Estimated 7-day revenue: {formatCurrency(forecast.estimated_total || 0)}\n                  </Typography>\n                </Box>\n              )}\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n\n      {/* Channel Revenue Table */}\n      {channelRevenue && channelRevenue.length > 0 && (\n        <Card sx={{ mt: 3 }}>\n          <CardContent>\n            <Typography variant=\"h6\" mb={2}>Channel Performance</Typography>\n            <Box sx={{ overflowX: 'auto' }}>\n              <table style={{ width: '100%', borderCollapse: 'collapse' }}>\n                <thead>\n                  <tr style={{ borderBottom: '2px solid #e0e0e0' }}>\n                    <th style={{ padding: '12px', textAlign: 'left' }}>Channel</th>\n                    <th style={{ padding: '12px', textAlign: 'right' }}>Revenue</th>\n                    <th style={{ padding: '12px', textAlign: 'right' }}>Videos</th>\n                    <th style={{ padding: '12px', textAlign: 'right' }}>Avg/Video</th>\n                    <th style={{ padding: '12px', textAlign: 'right' }}>Views</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {channelRevenue.map((channel) => (\n                    <tr key={channel.channel_id} style={{ borderBottom: '1px solid #f0f0f0' }}>\n                      <td style={{ padding: '12px' }}>{channel.channel_name}</td>\n                      <td style={{ padding: '12px', textAlign: 'right' }}>\n                        {formatCurrency(channel.revenue)}\n                      </td>\n                      <td style={{ padding: '12px', textAlign: 'right' }}>{channel.video_count}</td>\n                      <td style={{ padding: '12px', textAlign: 'right' }}>\n                        {formatCurrency(channel.revenue / channel.video_count)}\n                      </td>\n                      <td style={{ padding: '12px', textAlign: 'right' }}>\n                        {channel.total_views.toLocaleString()}\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </Box>\n          </CardContent>\n        </Card>\n      )}\n    </Box>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Dashboard\\VideoQueue.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":52,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1372,1375],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1372,1375],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react'\r\nimport {\r\n  Paper,\r\n  Typography,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemIcon,\r\n  Chip,\r\n  Box,\r\n  LinearProgress,\r\n} from '@mui/material'\r\nimport {\r\n  Schedule,\r\n  PlayCircleOutline,\r\n  CheckCircle,\r\n  HourglassEmpty,\r\n} from '@mui/icons-material'\r\n\r\ninterface VideoQueueProps {\r\n  queuedCount: number\r\n  processingCount: number\r\n  completedCount: number\r\n}\r\n\r\nconst mockQueueItems = [\r\n  { id: 1, title: 'Top 10 AI Tools for 2024', status: 'processing', progress: 65 },\r\n  { id: 2, title: 'How to Start a YouTube Channel', status: 'queued', progress: 0 },\r\n  { id: 3, title: 'Best Productivity Apps Review', status: 'processing', progress: 30 },\r\n  { id: 4, title: 'Machine Learning Basics', status: 'queued', progress: 0 },\r\n  { id: 5, title: 'Web Development Trends', status: 'completed', progress: 100 },\r\n]\r\n\r\nexport const VideoQueue: React.FC<VideoQueueProps> = ({\r\n  queuedCount,\r\n  processingCount,\r\n  completedCount,\r\n}) => {\r\n  const getStatusIcon = (status: string) => {\r\n    switch (status) {\r\n      case 'processing':\r\n        return <PlayCircleOutline color=\"warning\" />\r\n      case 'completed':\r\n        return <CheckCircle color=\"success\" />\r\n      case 'queued':\r\n        return <Schedule color=\"action\" />\r\n      default:\r\n        return <HourglassEmpty />\r\n    }\r\n  }\r\n\r\n  const getStatusColor = (status: string): any => {\r\n    switch (status) {\r\n      case 'processing':\r\n        return 'warning'\r\n      case 'completed':\r\n        return 'success'\r\n      case 'queued':\r\n        return 'default'\r\n      default:\r\n        return 'default'\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Paper sx={{ p: 3, height: '100%' }}>\r\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\r\n        <Typography variant=\"h6\">Video Queue</Typography>\r\n        <Box sx={{ display: 'flex', gap: 1 }}>\r\n          <Chip label={`Queued: ${queuedCount}`} size=\"small\" />\r\n          <Chip label={`Processing: ${processingCount}`} size=\"small\" color=\"warning\" />\r\n          <Chip label={`Completed: ${completedCount}`} size=\"small\" color=\"success\" />\r\n        </Box>\r\n      </Box>\r\n      <List>\r\n        {mockQueueItems.map((item) => (\r\n          <ListItem key={item.id} sx={{ px: 0 }}>\r\n            <ListItemIcon>{getStatusIcon(item.status)}</ListItemIcon>\r\n            <ListItemText\r\n              primary={item.title}\r\n              secondary={\r\n                <Box sx={{ mt: 1 }}>\r\n                  {item.status === 'processing' && (\r\n                    <LinearProgress\r\n                      variant=\"determinate\"\r\n                      value={item.progress}\r\n                      sx={{ height: 6, borderRadius: 3 }}\r\n                    />\r\n                  )}\r\n                  <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 1 }}>\r\n                    <Chip\r\n                      label={item.status}\r\n                      size=\"small\"\r\n                      color={getStatusColor(item.status)}\r\n                    />\r\n                    {item.status === 'processing' && (\r\n                      <Typography variant=\"caption\">{item.progress}%</Typography>\r\n                    )}\r\n                  </Box>\r\n                </Box>\r\n              }\r\n            />\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n    </Paper>\r\n  )\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\ErrorBoundary\\ErrorBoundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\ErrorBoundary\\ErrorFallback.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\ErrorBoundary\\RouteErrorBoundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\ErrorBoundary\\index.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":2,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":1,"column":25,"nodeType":"Identifier","messageId":"namedExport","endLine":1,"endColumn":42},{"ruleId":"react-refresh/only-export-components","severity":2,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":6,"column":10,"nodeType":"Identifier","messageId":"namedExport","endLine":6,"endColumn":25}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export { ErrorBoundary, withErrorBoundary } from './ErrorBoundary';\nexport { ErrorFallback, MinimalErrorFallback } from './ErrorFallback';\nexport { RouteErrorBoundary, AsyncBoundary } from './RouteErrorBoundary';\n\n// Export error recovery hook\nexport { useErrorHandler } from './useErrorHandler';","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\ErrorBoundary\\useErrorHandler.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":55,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1432,1435],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1432,1435],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback, useState } from 'react';\nimport { toast } from 'react-hot-toast';\n\ninterface ErrorHandlerOptions {\n  showToast?: boolean;\n  fallbackMessage?: string;\n  retryCount?: number;\n  retryDelay?: number;\n  onError?: (error: Error) => void;\n  onRetry?: () => void;\n}\n\nexport const useErrorHandler = (options: ErrorHandlerOptions = {}) => {\n  const {\n    showToast = true,\n    fallbackMessage = 'An error occurred',\n    retryCount = 3,\n    retryDelay = 1000,\n    onError,\n    onRetry,\n  } = options;\n\n  const [error, setError] = useState<Error | null>(null);\n  const [isRetrying, setIsRetrying] = useState(false);\n  const [attemptCount, setAttemptCount] = useState(0);\n\n  const handleError = useCallback(\n    (error: Error | unknown) => {\n      const errorObj = error instanceof Error ? error : new Error(String(error));\n      \n      setError(errorObj);\n      \n      // Log error\n      console.error('Error handled:', errorObj);\n      \n      // Show toast notification\n      if (showToast) {\n        toast.error(errorObj.message || fallbackMessage);\n      }\n      \n      // Call custom error handler\n      if (onError) {\n        onError(errorObj);\n      }\n      \n      // Log to error service in production\n      if (process.env.NODE_ENV === 'production') {\n        // sendToErrorService(errorObj);\n      }\n    },\n    [showToast, fallbackMessage, onError]\n  );\n\n  const retry = useCallback(\n    async (fn: () => Promise<any>) => {\n      if (attemptCount >= retryCount) {\n        toast.error('Maximum retry attempts reached');\n        return;\n      }\n\n      setIsRetrying(true);\n      setAttemptCount((prev) => prev + 1);\n\n      try {\n        await new Promise((resolve) => setTimeout(resolve, retryDelay));\n        const result = await fn();\n        \n        // Reset on success\n        setError(null);\n        setAttemptCount(0);\n        setIsRetrying(false);\n        \n        if (onRetry) {\n          onRetry();\n        }\n        \n        return result;\n      } catch (err) {\n        setIsRetrying(false);\n        handleError(err);\n        throw err;\n      }\n    },\n    [attemptCount, retryCount, retryDelay, handleError, onRetry]\n  );\n\n  const reset = useCallback(() => {\n    setError(null);\n    setAttemptCount(0);\n    setIsRetrying(false);\n  }, []);\n\n  const throwError = useCallback((error: Error | string) => {\n    const errorObj = error instanceof Error ? error : new Error(error);\n    handleError(errorObj);\n    throw errorObj;\n  }, [handleError]);\n\n  return {\n    error,\n    isRetrying,\n    attemptCount,\n    handleError,\n    retry,\n    reset,\n    throwError,\n  };\n};\n\n// Async error handler wrapper\nexport const withErrorHandling = async <T,>(\n  fn: () => Promise<T>,\n  options?: ErrorHandlerOptions\n): Promise<T | null> => {\n  try {\n    return await fn();\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : 'An error occurred';\n    \n    if (options?.showToast !== false) {\n      toast.error(options?.fallbackMessage || errorMessage);\n    }\n    \n    if (options?.onError) {\n      options.onError(error instanceof Error ? error : new Error(String(error)));\n    }\n    \n    console.error('Error in async operation:', error);\n    return null;\n  }\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Experiments\\ABTestDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Tooltip' is defined but never used.","line":29,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'List' is defined but never used.","line":32,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ListItem' is defined but never used.","line":33,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ListItemText' is defined but never used.","line":34,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Divider' is defined but never used.","line":35,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'LineChart' is defined but never used.","line":40,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Line' is defined but never used.","line":41,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'PauseIcon' is defined but never used.","line":51,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":51,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TrendingUpIcon' is defined but never used.","line":55,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":55,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ScienceIcon' is defined but never used.","line":56,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":56,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Variant' is defined but never used.","line":59,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":59,"endColumn":18},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":62,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":62,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1172,1175],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1172,1175],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":71,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":71,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1321,1324],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1321,1324],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchExperiments'. Either include it or remove the dependency array.","line":247,"column":6,"nodeType":"ArrayExpression","endLine":247,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [fetchExperiments, token]","fix":{"range":[5984,5991],"text":"[fetchExperiments, token]"}}]}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Card,\n  CardContent,\n  Grid,\n  Typography,\n  Button,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  Chip,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Alert,\n  LinearProgress,\n  IconButton,\n  Tooltip,\n  Tabs,\n  Tab,\n  List,\n  ListItem,\n  ListItemText,\n  Divider,\n} from '@mui/material';\nimport {\n  BarChart,\n  Bar,\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip as RechartsTooltip,\n  Legend,\n  ResponsiveContainer,\n  Cell,\n} from 'recharts';\nimport PlayArrowIcon from '@mui/icons-material/PlayArrow';\nimport PauseIcon from '@mui/icons-material/Pause';\nimport StopIcon from '@mui/icons-material/Stop';\nimport AddIcon from '@mui/icons-material/Add';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport TrendingUpIcon from '@mui/icons-material/TrendingUp';\nimport ScienceIcon from '@mui/icons-material/Science';\nimport { authStore } from '../../stores/authStore';\n\ninterface Variant {\n  name: string;\n  allocation: number;\n  config: Record<string, any>;\n  is_control: boolean;\n}\n\ninterface Experiment {\n  experiment_id: number;\n  name: string;\n  description: string;\n  status: string;\n  variants: any[];\n  target_metric: string;\n  start_date: string | null;\n  end_date: string | null;\n  winner_variant: string | null;\n}\n\ninterface ExperimentResults {\n  experiment_id: number;\n  name: string;\n  status: string;\n  variants: Array<{\n    name: string;\n    sample_size: number;\n    conversions: number;\n    conversion_rate: number;\n    confidence_interval: [number, number];\n    revenue: number;\n    avg_revenue_per_user: number;\n    p_value: number | null;\n    is_significant: boolean;\n    lift: number | null;\n  }>;\n  winner: string | null;\n  required_sample_size: number;\n  can_conclude: boolean;\n}\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: number;\n  value: number;\n}\n\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      {...other}\n    >\n      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}\n    </div>\n  );\n}\n\nexport const ABTestDashboard: React.FC = () => {\n  const [experiments, setExperiments] = useState<Experiment[]>([]);\n  const [selectedExperiment, setSelectedExperiment] = useState<ExperimentResults | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [createDialogOpen, setCreateDialogOpen] = useState(false);\n  const [activeTab, setActiveTab] = useState(0);\n  const [newExperiment, setNewExperiment] = useState({\n    name: '',\n    description: '',\n    hypothesis: '',\n    variants: [\n      { name: 'control', allocation: 50, config: {}, is_control: true },\n      { name: 'variant_a', allocation: 50, config: {}, is_control: false },\n    ],\n    target_metric: 'conversion_rate',\n    duration_days: 14,\n    min_sample_size: 100,\n  });\n  const { token } = authStore();\n\n  const fetchExperiments = async () => {\n    try {\n      const response = await fetch(\n        `${import.meta.env.VITE_API_URL || 'http://localhost:8000'}/api/v1/experiments/`,\n        {\n          headers: {\n            'Authorization': `Bearer ${token}`,\n          },\n        }\n      );\n      \n      if (response.ok) {\n        const data = await response.json();\n        setExperiments(data);\n      }\n    } catch (error) {\n      console.error('Error fetching experiments:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchExperimentResults = async (experimentId: number) => {\n    try {\n      const response = await fetch(\n        `${import.meta.env.VITE_API_URL || 'http://localhost:8000'}/api/v1/experiments/${experimentId}/results`,\n        {\n          headers: {\n            'Authorization': `Bearer ${token}`,\n          },\n        }\n      );\n      \n      if (response.ok) {\n        const data = await response.json();\n        setSelectedExperiment(data);\n      }\n    } catch (error) {\n      console.error('Error fetching experiment results:', error);\n    }\n  };\n\n  const createExperiment = async () => {\n    try {\n      const response = await fetch(\n        `${import.meta.env.VITE_API_URL || 'http://localhost:8000'}/api/v1/experiments/`,\n        {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${token}`,\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(newExperiment),\n        }\n      );\n      \n      if (response.ok) {\n        setCreateDialogOpen(false);\n        fetchExperiments();\n      }\n    } catch (error) {\n      console.error('Error creating experiment:', error);\n    }\n  };\n\n  const startExperiment = async (experimentId: number) => {\n    try {\n      const response = await fetch(\n        `${import.meta.env.VITE_API_URL || 'http://localhost:8000'}/api/v1/experiments/${experimentId}/start`,\n        {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${token}`,\n          },\n        }\n      );\n      \n      if (response.ok) {\n        fetchExperiments();\n      }\n    } catch (error) {\n      console.error('Error starting experiment:', error);\n    }\n  };\n\n  const concludeExperiment = async (experimentId: number, winner?: string) => {\n    try {\n      const response = await fetch(\n        `${import.meta.env.VITE_API_URL || 'http://localhost:8000'}/api/v1/experiments/${experimentId}/conclude`,\n        {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${token}`,\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ winner_variant: winner }),\n        }\n      );\n      \n      if (response.ok) {\n        fetchExperiments();\n      }\n    } catch (error) {\n      console.error('Error concluding experiment:', error);\n    }\n  };\n\n  useEffect(() => {\n    fetchExperiments();\n  }, [token]);\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'draft': return 'default';\n      case 'running': return 'primary';\n      case 'paused': return 'warning';\n      case 'completed': return 'success';\n      case 'archived': return 'default';\n      default: return 'default';\n    }\n  };\n\n  const formatPercentage = (value: number) => `${(value * 100).toFixed(2)}%`;\n\n  if (loading) {\n    return (\n      <Box sx={{ width: '100%' }}>\n        <LinearProgress />\n      </Box>\n    );\n  }\n\n  return (\n    <Box>\n      {/* Header */}\n      <Box sx={{ mb: 3, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n        <Typography variant=\"h4\" component=\"h2\">\n          A/B Testing Dashboard\n        </Typography>\n        <Button\n          variant=\"contained\"\n          startIcon={<AddIcon />}\n          onClick={() => setCreateDialogOpen(true)}\n        >\n          New Experiment\n        </Button>\n      </Box>\n\n      {/* Tabs */}\n      <Paper sx={{ mb: 3 }}>\n        <Tabs value={activeTab} onChange={(e, v) => setActiveTab(v)}>\n          <Tab label=\"Active Experiments\" />\n          <Tab label=\"Results & Analysis\" />\n          <Tab label=\"All Experiments\" />\n        </Tabs>\n      </Paper>\n\n      {/* Active Experiments */}\n      <TabPanel value={activeTab} index={0}>\n        <Grid container spacing={3}>\n          {experiments\n            .filter(exp => exp.status === 'running')\n            .map(experiment => (\n              <Grid item xs={12} md={6} lg={4} key={experiment.experiment_id}>\n                <Card>\n                  <CardContent>\n                    <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>\n                      <Typography variant=\"h6\">\n                        {experiment.name}\n                      </Typography>\n                      <Chip \n                        label={experiment.status}\n                        color={getStatusColor(experiment.status)}\n                        size=\"small\"\n                      />\n                    </Box>\n                    <Typography variant=\"body2\" color=\"textSecondary\" paragraph>\n                      {experiment.description}\n                    </Typography>\n                    <Typography variant=\"body2\">\n                      <strong>Target Metric:</strong> {experiment.target_metric}\n                    </Typography>\n                    <Typography variant=\"body2\">\n                      <strong>Variants:</strong> {experiment.variants.length}\n                    </Typography>\n                    {experiment.start_date && (\n                      <Typography variant=\"body2\">\n                        <strong>Started:</strong> {new Date(experiment.start_date).toLocaleDateString()}\n                      </Typography>\n                    )}\n                    <Box sx={{ mt: 2, display: 'flex', gap: 1 }}>\n                      <Button\n                        size=\"small\"\n                        startIcon={<VisibilityIcon />}\n                        onClick={() => fetchExperimentResults(experiment.experiment_id)}\n                      >\n                        View Results\n                      </Button>\n                      <IconButton\n                        size=\"small\"\n                        onClick={() => concludeExperiment(experiment.experiment_id)}\n                      >\n                        <StopIcon />\n                      </IconButton>\n                    </Box>\n                  </CardContent>\n                </Card>\n              </Grid>\n            ))}\n        </Grid>\n      </TabPanel>\n\n      {/* Results & Analysis */}\n      <TabPanel value={activeTab} index={1}>\n        {selectedExperiment ? (\n          <Box>\n            <Typography variant=\"h5\" gutterBottom>\n              {selectedExperiment.name}\n            </Typography>\n            \n            {/* Statistical Significance Alert */}\n            {selectedExperiment.can_conclude ? (\n              <Alert severity=\"success\" sx={{ mb: 3 }}>\n                This experiment has reached statistical significance and can be concluded.\n                {selectedExperiment.winner && ` Winner: ${selectedExperiment.winner}`}\n              </Alert>\n            ) : (\n              <Alert severity=\"info\" sx={{ mb: 3 }}>\n                More data needed for statistical significance. \n                Required sample size: {selectedExperiment.required_sample_size} per variant\n              </Alert>\n            )}\n\n            {/* Variant Performance Chart */}\n            <Paper sx={{ p: 2, mb: 3 }}>\n              <Typography variant=\"h6\" gutterBottom>\n                Conversion Rate by Variant\n              </Typography>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <BarChart data={selectedExperiment.variants}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"name\" />\n                  <YAxis tickFormatter={(value) => `${(value * 100).toFixed(1)}%`} />\n                  <RechartsTooltip formatter={(value: number) => formatPercentage(value)} />\n                  <Legend />\n                  <Bar dataKey=\"conversion_rate\" fill=\"#8884d8\">\n                    {selectedExperiment.variants.map((entry, index) => (\n                      <Cell \n                        key={`cell-${index}`} \n                        fill={entry.is_significant ? '#82ca9d' : '#8884d8'} \n                      />\n                    ))}\n                  </Bar>\n                </BarChart>\n              </ResponsiveContainer>\n            </Paper>\n\n            {/* Detailed Results Table */}\n            <TableContainer component={Paper}>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Variant</TableCell>\n                    <TableCell align=\"right\">Sample Size</TableCell>\n                    <TableCell align=\"right\">Conversions</TableCell>\n                    <TableCell align=\"right\">Conversion Rate</TableCell>\n                    <TableCell align=\"right\">Confidence Interval</TableCell>\n                    <TableCell align=\"right\">Lift</TableCell>\n                    <TableCell align=\"right\">P-Value</TableCell>\n                    <TableCell align=\"right\">Revenue</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {selectedExperiment.variants.map((variant) => (\n                    <TableRow key={variant.name}>\n                      <TableCell>\n                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                          {variant.name}\n                          {variant.name === 'control' && (\n                            <Chip label=\"Control\" size=\"small\" />\n                          )}\n                          {variant.is_significant && (\n                            <Chip label=\"Significant\" color=\"success\" size=\"small\" />\n                          )}\n                        </Box>\n                      </TableCell>\n                      <TableCell align=\"right\">{variant.sample_size}</TableCell>\n                      <TableCell align=\"right\">{variant.conversions}</TableCell>\n                      <TableCell align=\"right\">{formatPercentage(variant.conversion_rate)}</TableCell>\n                      <TableCell align=\"right\">\n                        [{formatPercentage(variant.confidence_interval[0])}, {formatPercentage(variant.confidence_interval[1])}]\n                      </TableCell>\n                      <TableCell align=\"right\">\n                        {variant.lift !== null ? (\n                          <Chip \n                            label={`${variant.lift > 0 ? '+' : ''}${variant.lift.toFixed(2)}%`}\n                            color={variant.lift > 0 ? 'success' : 'error'}\n                            size=\"small\"\n                          />\n                        ) : '-'}\n                      </TableCell>\n                      <TableCell align=\"right\">\n                        {variant.p_value !== null ? variant.p_value.toFixed(4) : '-'}\n                      </TableCell>\n                      <TableCell align=\"right\">${variant.revenue.toFixed(2)}</TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </TableContainer>\n          </Box>\n        ) : (\n          <Alert severity=\"info\">\n            Select an experiment to view detailed results\n          </Alert>\n        )}\n      </TabPanel>\n\n      {/* All Experiments */}\n      <TabPanel value={activeTab} index={2}>\n        <TableContainer component={Paper}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>Name</TableCell>\n                <TableCell>Status</TableCell>\n                <TableCell>Target Metric</TableCell>\n                <TableCell>Variants</TableCell>\n                <TableCell>Start Date</TableCell>\n                <TableCell>End Date</TableCell>\n                <TableCell>Winner</TableCell>\n                <TableCell>Actions</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {experiments.map((experiment) => (\n                <TableRow key={experiment.experiment_id}>\n                  <TableCell>{experiment.name}</TableCell>\n                  <TableCell>\n                    <Chip \n                      label={experiment.status}\n                      color={getStatusColor(experiment.status)}\n                      size=\"small\"\n                    />\n                  </TableCell>\n                  <TableCell>{experiment.target_metric}</TableCell>\n                  <TableCell>{experiment.variants.length}</TableCell>\n                  <TableCell>\n                    {experiment.start_date ? new Date(experiment.start_date).toLocaleDateString() : '-'}\n                  </TableCell>\n                  <TableCell>\n                    {experiment.end_date ? new Date(experiment.end_date).toLocaleDateString() : '-'}\n                  </TableCell>\n                  <TableCell>\n                    {experiment.winner_variant ? (\n                      <Chip label={experiment.winner_variant} color=\"success\" size=\"small\" />\n                    ) : '-'}\n                  </TableCell>\n                  <TableCell>\n                    {experiment.status === 'draft' && (\n                      <IconButton\n                        size=\"small\"\n                        onClick={() => startExperiment(experiment.experiment_id)}\n                      >\n                        <PlayArrowIcon />\n                      </IconButton>\n                    )}\n                    <IconButton\n                      size=\"small\"\n                      onClick={() => fetchExperimentResults(experiment.experiment_id)}\n                    >\n                      <VisibilityIcon />\n                    </IconButton>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </TabPanel>\n\n      {/* Create Experiment Dialog */}\n      <Dialog open={createDialogOpen} onClose={() => setCreateDialogOpen(false)} maxWidth=\"md\" fullWidth>\n        <DialogTitle>Create New A/B Test</DialogTitle>\n        <DialogContent>\n          <Grid container spacing={2} sx={{ mt: 1 }}>\n            <Grid item xs={12}>\n              <TextField\n                fullWidth\n                label=\"Experiment Name\"\n                value={newExperiment.name}\n                onChange={(e) => setNewExperiment({ ...newExperiment, name: e.target.value })}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                fullWidth\n                multiline\n                rows={2}\n                label=\"Description\"\n                value={newExperiment.description}\n                onChange={(e) => setNewExperiment({ ...newExperiment, description: e.target.value })}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                fullWidth\n                multiline\n                rows={2}\n                label=\"Hypothesis\"\n                value={newExperiment.hypothesis}\n                onChange={(e) => setNewExperiment({ ...newExperiment, hypothesis: e.target.value })}\n              />\n            </Grid>\n            <Grid item xs={12} md={6}>\n              <FormControl fullWidth>\n                <InputLabel>Target Metric</InputLabel>\n                <Select\n                  value={newExperiment.target_metric}\n                  onChange={(e) => setNewExperiment({ ...newExperiment, target_metric: e.target.value })}\n                >\n                  <MenuItem value=\"conversion_rate\">Conversion Rate</MenuItem>\n                  <MenuItem value=\"revenue\">Revenue</MenuItem>\n                  <MenuItem value=\"engagement\">Engagement</MenuItem>\n                  <MenuItem value=\"retention\">Retention</MenuItem>\n                </Select>\n              </FormControl>\n            </Grid>\n            <Grid item xs={12} md={3}>\n              <TextField\n                fullWidth\n                type=\"number\"\n                label=\"Duration (days)\"\n                value={newExperiment.duration_days}\n                onChange={(e) => setNewExperiment({ ...newExperiment, duration_days: parseInt(e.target.value) })}\n              />\n            </Grid>\n            <Grid item xs={12} md={3}>\n              <TextField\n                fullWidth\n                type=\"number\"\n                label=\"Min Sample Size\"\n                value={newExperiment.min_sample_size}\n                onChange={(e) => setNewExperiment({ ...newExperiment, min_sample_size: parseInt(e.target.value) })}\n              />\n            </Grid>\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setCreateDialogOpen(false)}>Cancel</Button>\n          <Button onClick={createExperiment} variant=\"contained\">Create</Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Export\\UniversalExportManager.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FormControl' is defined but never used.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'InputLabel' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Select' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MenuItem' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ListItemIcon' is defined but never used.","line":30,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'IconButton' is defined but never used.","line":32,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Divider' is defined but never used.","line":36,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Tooltip' is defined but never used.","line":39,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'EmailIcon' is defined but never used.","line":48,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CloudIcon' is defined but never used.","line":49,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":49,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'RenameIcon' is defined but never used.","line":50,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":50,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FilterIcon' is defined but never used.","line":51,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":51,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ScheduleIcon' is defined but never used.","line":52,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":52,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":71,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":71,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1432,1435],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1432,1435],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":81,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1615,1618],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1615,1618],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":83,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1711,1714],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1711,1714],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":84,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":84,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1750,1753],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1750,1753],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":85,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":85,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1786,1789],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1786,1789],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":194,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":194,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5185,5188],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5185,5188],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":259,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":259,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7314,7317],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7314,7317],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":269,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":269,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7572,7575],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7572,7575],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":285,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":285,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8049,8052],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8049,8052],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":289,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":289,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8186,8189],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8186,8189],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":312,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":312,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8826,8829],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8826,8829],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":315,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":315,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8985,8988],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8985,8988],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":344,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":344,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9936,9939],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9936,9939],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":348,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":348,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10073,10076],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10073,10076],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":433,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":433,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12245,12248],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12245,12248],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-refresh/only-export-components","severity":2,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":710,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":710,"endColumn":23}],"suppressedMessages":[],"errorCount":29,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Universal Export Manager\n * Provides comprehensive export functionality for all data throughout the application\n */\n\nimport React, { useState, useCallback } from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  FormGroup,\n  FormControlLabel,\n  Checkbox,\n  TextField,\n  Box,\n  Typography,\n  Alert,\n  LinearProgress,\n  Stepper,\n  Step,\n  StepLabel,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  IconButton,\n  Chip,\n  Paper,\n  Grid,\n  Divider,\n  RadioGroup,\n  Radio,\n  Tooltip\n} from '@mui/material';\nimport {\n  Download as DownloadIcon,\n  PictureAsPdf as PdfIcon,\n  TableChart as ExcelIcon,\n  Description as CsvIcon,\n  Code as JsonIcon,\n  Print as PrintIcon,\n  Email as EmailIcon,\n  CloudDownload as CloudIcon,\n  DriveFileRenameOutline as RenameIcon,\n  FilterList as FilterIcon,\n  Schedule as ScheduleIcon,\n  CheckCircle as CheckIcon,\n  Warning as WarningIcon\n} from '@mui/icons-material';\nimport { format } from 'date-fns';\nimport * as XLSX from 'xlsx';\nimport jsPDF from 'jspdf';\nimport 'jspdf-autotable';\nimport { saveAs } from 'file-saver';\n\n// Export types\nexport type ExportFormat = 'csv' | 'excel' | 'pdf' | 'json' | 'xml' | 'print';\n\nexport interface ExportConfig {\n  format: ExportFormat;\n  filename: string;\n  includeHeaders: boolean;\n  includeMetadata: boolean;\n  dateRange?: [Date, Date];\n  filters?: Record<string, any>;\n  columns?: string[];\n  customTemplate?: string;\n  compression?: boolean;\n  encryption?: boolean;\n  password?: string;\n}\n\nexport interface ExportData {\n  title: string;\n  data: any[];\n  columns?: { key: string; label: string; type?: string }[];\n  metadata?: Record<string, any>;\n  charts?: { type: string; data: any }[];\n  summary?: Record<string, any>;\n}\n\ninterface ExportManagerProps {\n  open: boolean;\n  onClose: () => void;\n  data: ExportData;\n  onExport?: (config: ExportConfig) => void;\n  allowedFormats?: ExportFormat[];\n}\n\nexport const UniversalExportManager: React.FC<ExportManagerProps> = ({\n  open,\n  onClose,\n  data,\n  onExport,\n  allowedFormats = ['csv', 'excel', 'pdf', 'json']\n}) => {\n  const [activeStep, setActiveStep] = useState(0);\n  const [exportConfig, setExportConfig] = useState<ExportConfig>({\n    format: 'excel',\n    filename: `${data.title.toLowerCase().replace(/\\s+/g, '_')}_${format(new Date(), 'yyyy-MM-dd')}`,\n    includeHeaders: true,\n    includeMetadata: true,\n    columns: data.columns?.map(c => c.key) || []\n  });\n  const [isExporting, setIsExporting] = useState(false);\n  const [exportProgress, setExportProgress] = useState(0);\n  const [exportError, setExportError] = useState<string | null>(null);\n  const [exportSuccess, setExportSuccess] = useState(false);\n\n  const steps = ['Select Format', 'Configure Options', 'Preview & Export'];\n\n  // Format configurations\n  const formatConfigs = {\n    csv: {\n      icon: <CsvIcon />,\n      label: 'CSV',\n      description: 'Comma-separated values, compatible with all spreadsheet applications',\n      color: 'success'\n    },\n    excel: {\n      icon: <ExcelIcon />,\n      label: 'Excel',\n      description: 'Microsoft Excel format with formatting and multiple sheets support',\n      color: 'primary'\n    },\n    pdf: {\n      icon: <PdfIcon />,\n      label: 'PDF',\n      description: 'Portable document format with charts and formatting',\n      color: 'error'\n    },\n    json: {\n      icon: <JsonIcon />,\n      label: 'JSON',\n      description: 'JavaScript Object Notation for developers and APIs',\n      color: 'info'\n    },\n    xml: {\n      icon: <JsonIcon />,\n      label: 'XML',\n      description: 'Extensible Markup Language for data interchange',\n      color: 'warning'\n    },\n    print: {\n      icon: <PrintIcon />,\n      label: 'Print',\n      description: 'Send directly to printer with print-friendly formatting',\n      color: 'default'\n    }\n  };\n\n  // Export to CSV\n  const exportToCSV = useCallback(() => {\n    const headers = exportConfig.includeHeaders && data.columns\n      ? data.columns.filter(c => exportConfig.columns?.includes(c.key)).map(c => c.label).join(',')\n      : '';\n    \n    const rows = data.data.map(row => {\n      return exportConfig.columns?.map(col => {\n        const value = row[col];\n        // Escape commas and quotes\n        if (typeof value === 'string' && (value.includes(',') || value.includes('\"'))) {\n          return `\"${value.replace(/\"/g, '\"\"')}\"`;\n        }\n        return value;\n      }).join(',');\n    }).join('\\n');\n    \n    let csvContent = headers ? `${headers}\\n${rows}` : rows;\n    \n    if (exportConfig.includeMetadata && data.metadata) {\n      const metadataRows = Object.entries(data.metadata)\n        .map(([key, value]) => `\"${key}\",\"${value}\"`)\n        .join('\\n');\n      csvContent = `Metadata\\n${metadataRows}\\n\\nData\\n${csvContent}`;\n    }\n    \n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n    saveAs(blob, `${exportConfig.filename}.csv`);\n  }, [data, exportConfig]);\n\n  // Export to Excel\n  const exportToExcel = useCallback(() => {\n    const workbook = XLSX.utils.book_new();\n    \n    // Main data sheet\n    const mainData = data.data.map(row => {\n      const exportRow: any = {};\n      exportConfig.columns?.forEach(col => {\n        const column = data.columns?.find(c => c.key === col);\n        exportRow[column?.label || col] = row[col];\n      });\n      return exportRow;\n    });\n    \n    const mainSheet = XLSX.utils.json_to_sheet(mainData);\n    XLSX.utils.book_append_sheet(workbook, mainSheet, 'Data');\n    \n    // Metadata sheet\n    if (exportConfig.includeMetadata && data.metadata) {\n      const metadataArray = Object.entries(data.metadata).map(([key, value]) => ({\n        Property: key,\n        Value: value\n      }));\n      const metadataSheet = XLSX.utils.json_to_sheet(metadataArray);\n      XLSX.utils.book_append_sheet(workbook, metadataSheet, 'Metadata');\n    }\n    \n    // Summary sheet\n    if (data.summary) {\n      const summaryArray = Object.entries(data.summary).map(([key, value]) => ({\n        Metric: key,\n        Value: value\n      }));\n      const summarySheet = XLSX.utils.json_to_sheet(summaryArray);\n      XLSX.utils.book_append_sheet(workbook, summarySheet, 'Summary');\n    }\n    \n    // Generate and save file\n    const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });\n    const blob = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\n    saveAs(blob, `${exportConfig.filename}.xlsx`);\n  }, [data, exportConfig]);\n\n  // Export to PDF\n  const exportToPDF = useCallback(() => {\n    const doc = new jsPDF();\n    \n    // Add title\n    doc.setFontSize(16);\n    doc.text(data.title, 14, 15);\n    \n    // Add metadata\n    if (exportConfig.includeMetadata && data.metadata) {\n      doc.setFontSize(10);\n      let yPosition = 30;\n      Object.entries(data.metadata).forEach(([key, value]) => {\n        doc.text(`${key}: ${value}`, 14, yPosition);\n        yPosition += 5;\n      });\n      yPosition += 5;\n    }\n    \n    // Add table\n    const tableColumns = data.columns\n      ?.filter(c => exportConfig.columns?.includes(c.key))\n      .map(c => c.label) || [];\n    \n    const tableRows = data.data.map(row => {\n      return exportConfig.columns?.map(col => row[col] || '');\n    });\n    \n    (doc as any).autoTable({\n      head: [tableColumns],\n      body: tableRows,\n      startY: exportConfig.includeMetadata ? 60 : 30,\n      theme: 'grid',\n      styles: { fontSize: 8 }\n    });\n    \n    // Add summary\n    if (data.summary) {\n      const finalY = (doc as any).lastAutoTable.finalY + 10;\n      doc.setFontSize(12);\n      doc.text('Summary', 14, finalY);\n      doc.setFontSize(10);\n      let summaryY = finalY + 5;\n      Object.entries(data.summary).forEach(([key, value]) => {\n        doc.text(`${key}: ${value}`, 14, summaryY);\n        summaryY += 5;\n      });\n    }\n    \n    doc.save(`${exportConfig.filename}.pdf`);\n  }, [data, exportConfig]);\n\n  // Export to JSON\n  const exportToJSON = useCallback(() => {\n    const exportData: any = {\n      title: data.title,\n      exportDate: new Date().toISOString(),\n      data: data.data.map(row => {\n        const exportRow: any = {};\n        exportConfig.columns?.forEach(col => {\n          exportRow[col] = row[col];\n        });\n        return exportRow;\n      })\n    };\n    \n    if (exportConfig.includeMetadata && data.metadata) {\n      exportData.metadata = data.metadata;\n    }\n    \n    if (data.summary) {\n      exportData.summary = data.summary;\n    }\n    \n    const jsonString = JSON.stringify(exportData, null, 2);\n    const blob = new Blob([jsonString], { type: 'application/json' });\n    saveAs(blob, `${exportConfig.filename}.json`);\n  }, [data, exportConfig]);\n\n  // Export to XML\n  const exportToXML = useCallback(() => {\n    const jsonToXml = (obj: any, rootName: string = 'root'): string => {\n      let xml = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n<${rootName}>`;\n      \n      const convertToXml = (data: any, indent: string = '  '): string => {\n        let result = '';\n        \n        if (Array.isArray(data)) {\n          data.forEach(item => {\n            result += `\\n${indent}<item>${convertToXml(item, indent + '  ')}\\n${indent}</item>`;\n          });\n        } else if (typeof data === 'object' && data !== null) {\n          Object.entries(data).forEach(([key, value]) => {\n            const safeKey = key.replace(/[^a-zA-Z0-9_]/g, '_');\n            if (typeof value === 'object') {\n              result += `\\n${indent}<${safeKey}>${convertToXml(value, indent + '  ')}\\n${indent}</${safeKey}>`;\n            } else {\n              result += `\\n${indent}<${safeKey}>${value}</${safeKey}>`;\n            }\n          });\n        } else {\n          result = String(data);\n        }\n        \n        return result;\n      };\n      \n      xml += convertToXml(obj);\n      xml += `\\n</${rootName}>`;\n      \n      return xml;\n    };\n    \n    const exportData: any = {\n      title: data.title,\n      exportDate: new Date().toISOString(),\n      data: data.data.map(row => {\n        const exportRow: any = {};\n        exportConfig.columns?.forEach(col => {\n          exportRow[col] = row[col];\n        });\n        return exportRow;\n      })\n    };\n    \n    if (exportConfig.includeMetadata && data.metadata) {\n      exportData.metadata = data.metadata;\n    }\n    \n    const xmlString = jsonToXml(exportData, 'export');\n    const blob = new Blob([xmlString], { type: 'application/xml' });\n    saveAs(blob, `${exportConfig.filename}.xml`);\n  }, [data, exportConfig]);\n\n  // Handle export\n  const handleExport = async () => {\n    setIsExporting(true);\n    setExportError(null);\n    setExportProgress(0);\n    \n    try {\n      // Simulate progress for better UX\n      const progressInterval = setInterval(() => {\n        setExportProgress(prev => Math.min(prev + 20, 90));\n      }, 200);\n      \n      switch (exportConfig.format) {\n        case 'csv':\n          exportToCSV();\n          break;\n        case 'excel':\n          exportToExcel();\n          break;\n        case 'pdf':\n          exportToPDF();\n          break;\n        case 'json':\n          exportToJSON();\n          break;\n        case 'xml':\n          exportToXML();\n          break;\n        case 'print':\n          window.print();\n          break;\n      }\n      \n      clearInterval(progressInterval);\n      setExportProgress(100);\n      setExportSuccess(true);\n      \n      // Call custom export handler if provided\n      onExport?.(exportConfig);\n      \n      // Close dialog after success\n      setTimeout(() => {\n        onClose();\n        setActiveStep(0);\n        setExportSuccess(false);\n        setExportProgress(0);\n      }, 1500);\n      \n    } catch (error) {\n      setExportError(error instanceof Error ? error.message : 'Export failed');\n    } finally {\n      setIsExporting(false);\n    }\n  };\n\n  // Handle column selection\n  const handleColumnToggle = (column: string) => {\n    setExportConfig(prev => ({\n      ...prev,\n      columns: prev.columns?.includes(column)\n        ? prev.columns.filter(c => c !== column)\n        : [...(prev.columns || []), column]\n    }));\n  };\n\n  // Get preview data\n  const getPreviewData = () => {\n    return data.data.slice(0, 5).map(row => {\n      const previewRow: any = {};\n      exportConfig.columns?.forEach(col => {\n        const column = data.columns?.find(c => c.key === col);\n        previewRow[column?.label || col] = row[col];\n      });\n      return previewRow;\n    });\n  };\n\n  const handleNext = () => {\n    setActiveStep(prev => prev + 1);\n  };\n\n  const handleBack = () => {\n    setActiveStep(prev => prev - 1);\n  };\n\n  return (\n    <Dialog\n      open={open}\n      onClose={onClose}\n      maxWidth=\"md\"\n      fullWidth\n      PaperProps={{\n        sx: { minHeight: 500 }\n      }}\n    >\n      <DialogTitle>\n        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n          <DownloadIcon />\n          Export {data.title}\n        </Box>\n      </DialogTitle>\n      \n      <DialogContent>\n        <Stepper activeStep={activeStep} sx={{ mb: 3 }}>\n          {steps.map(label => (\n            <Step key={label}>\n              <StepLabel>{label}</StepLabel>\n            </Step>\n          ))}\n        </Stepper>\n        \n        {activeStep === 0 && (\n          <Box>\n            <Typography variant=\"h6\" gutterBottom>\n              Select Export Format\n            </Typography>\n            <RadioGroup\n              value={exportConfig.format}\n              onChange={(e) => setExportConfig({ ...exportConfig, format: e.target.value as ExportFormat })}\n            >\n              <Grid container spacing={2}>\n                {allowedFormats.map(format => {\n                  const config = formatConfigs[format];\n                  return (\n                    <Grid item xs={12} sm={6} key={format}>\n                      <Paper\n                        sx={{\n                          p: 2,\n                          cursor: 'pointer',\n                          border: 2,\n                          borderColor: exportConfig.format === format ? 'primary.main' : 'transparent',\n                          '&:hover': {\n                            borderColor: 'primary.light'\n                          }\n                        }}\n                        onClick={() => setExportConfig({ ...exportConfig, format })}\n                      >\n                        <FormControlLabel\n                          value={format}\n                          control={<Radio />}\n                          label={\n                            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                              <Box sx={{ color: `${config.color}.main` }}>\n                                {config.icon}\n                              </Box>\n                              <Box>\n                                <Typography variant=\"subtitle1\">\n                                  {config.label}\n                                </Typography>\n                                <Typography variant=\"caption\" color=\"textSecondary\">\n                                  {config.description}\n                                </Typography>\n                              </Box>\n                            </Box>\n                          }\n                        />\n                      </Paper>\n                    </Grid>\n                  );\n                })}\n              </Grid>\n            </RadioGroup>\n          </Box>\n        )}\n        \n        {activeStep === 1 && (\n          <Box>\n            <Typography variant=\"h6\" gutterBottom>\n              Configure Export Options\n            </Typography>\n            \n            <Box sx={{ mb: 3 }}>\n              <TextField\n                fullWidth\n                label=\"Filename\"\n                value={exportConfig.filename}\n                onChange={(e) => setExportConfig({ ...exportConfig, filename: e.target.value })}\n                helperText={`File will be saved as ${exportConfig.filename}.${exportConfig.format}`}\n                margin=\"normal\"\n              />\n            </Box>\n            \n            <Box sx={{ mb: 3 }}>\n              <FormGroup>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      checked={exportConfig.includeHeaders}\n                      onChange={(e) => setExportConfig({ ...exportConfig, includeHeaders: e.target.checked })}\n                    />\n                  }\n                  label=\"Include column headers\"\n                />\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      checked={exportConfig.includeMetadata}\n                      onChange={(e) => setExportConfig({ ...exportConfig, includeMetadata: e.target.checked })}\n                    />\n                  }\n                  label=\"Include metadata\"\n                />\n                {exportConfig.format === 'excel' && (\n                  <FormControlLabel\n                    control={\n                      <Checkbox\n                        checked={exportConfig.compression || false}\n                        onChange={(e) => setExportConfig({ ...exportConfig, compression: e.target.checked })}\n                      />\n                    }\n                    label=\"Compress file\"\n                  />\n                )}\n              </FormGroup>\n            </Box>\n            \n            <Box>\n              <Typography variant=\"subtitle1\" gutterBottom>\n                Select Columns to Export\n              </Typography>\n              <Paper variant=\"outlined\" sx={{ p: 2, maxHeight: 200, overflow: 'auto' }}>\n                <FormGroup>\n                  {data.columns?.map(column => (\n                    <FormControlLabel\n                      key={column.key}\n                      control={\n                        <Checkbox\n                          checked={exportConfig.columns?.includes(column.key) || false}\n                          onChange={() => handleColumnToggle(column.key)}\n                        />\n                      }\n                      label={\n                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                          {column.label}\n                          {column.type && (\n                            <Chip label={column.type} size=\"small\" variant=\"outlined\" />\n                          )}\n                        </Box>\n                      }\n                    />\n                  ))}\n                </FormGroup>\n              </Paper>\n            </Box>\n          </Box>\n        )}\n        \n        {activeStep === 2 && (\n          <Box>\n            <Typography variant=\"h6\" gutterBottom>\n              Preview & Export\n            </Typography>\n            \n            {exportSuccess ? (\n              <Alert severity=\"success\" icon={<CheckIcon />}>\n                Export completed successfully!\n              </Alert>\n            ) : exportError ? (\n              <Alert severity=\"error\" icon={<WarningIcon />}>\n                {exportError}\n              </Alert>\n            ) : (\n              <>\n                <Alert severity=\"info\" sx={{ mb: 2 }}>\n                  <Typography variant=\"subtitle2\">Export Summary</Typography>\n                  <List dense>\n                    <ListItem>\n                      <ListItemText \n                        primary=\"Format\" \n                        secondary={formatConfigs[exportConfig.format].label}\n                      />\n                    </ListItem>\n                    <ListItem>\n                      <ListItemText \n                        primary=\"Filename\" \n                        secondary={`${exportConfig.filename}.${exportConfig.format}`}\n                      />\n                    </ListItem>\n                    <ListItem>\n                      <ListItemText \n                        primary=\"Records\" \n                        secondary={data.data.length}\n                      />\n                    </ListItem>\n                    <ListItem>\n                      <ListItemText \n                        primary=\"Columns\" \n                        secondary={exportConfig.columns?.length}\n                      />\n                    </ListItem>\n                  </List>\n                </Alert>\n                \n                <Typography variant=\"subtitle2\" gutterBottom>\n                  Data Preview (First 5 rows)\n                </Typography>\n                <Paper variant=\"outlined\" sx={{ p: 1, overflow: 'auto', maxHeight: 200 }}>\n                  <pre style={{ margin: 0, fontSize: '0.75rem' }}>\n                    {JSON.stringify(getPreviewData(), null, 2)}\n                  </pre>\n                </Paper>\n              </>\n            )}\n            \n            {isExporting && (\n              <Box sx={{ mt: 2 }}>\n                <LinearProgress variant=\"determinate\" value={exportProgress} />\n                <Typography variant=\"caption\" color=\"textSecondary\" sx={{ mt: 1 }}>\n                  Exporting... {exportProgress}%\n                </Typography>\n              </Box>\n            )}\n          </Box>\n        )}\n      </DialogContent>\n      \n      <DialogActions>\n        <Button onClick={onClose}>Cancel</Button>\n        {activeStep > 0 && (\n          <Button onClick={handleBack}>Back</Button>\n        )}\n        {activeStep < steps.length - 1 ? (\n          <Button \n            onClick={handleNext} \n            variant=\"contained\"\n            disabled={activeStep === 1 && exportConfig.columns?.length === 0}\n          >\n            Next\n          </Button>\n        ) : (\n          <Button\n            onClick={handleExport}\n            variant=\"contained\"\n            startIcon={<DownloadIcon />}\n            disabled={isExporting || exportSuccess}\n          >\n            Export\n          </Button>\n        )}\n      </DialogActions>\n    </Dialog>\n  );\n};\n\n// Export hook for easy integration\nexport const useExport = (data: ExportData) => {\n  const [isOpen, setIsOpen] = useState(false);\n  \n  const openExportDialog = useCallback(() => {\n    setIsOpen(true);\n  }, []);\n  \n  const closeExportDialog = useCallback(() => {\n    setIsOpen(false);\n  }, []);\n  \n  const ExportComponent = useCallback(() => (\n    <UniversalExportManager\n      open={isOpen}\n      onClose={closeExportDialog}\n      data={data}\n    />\n  ), [isOpen, data, closeExportDialog]);\n  \n  return {\n    openExportDialog,\n    closeExportDialog,\n    ExportComponent\n  };\n};\n\nexport default UniversalExportManager;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Export\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Layout\\Header.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ThemeToggle' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Switch' is defined but never used.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'InputAdornment' is defined but never used.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Speed' is defined but never used.","line":33,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setIsProcessing' is assigned a value but never used.","line":66,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":66,"endColumn":39}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\r\nimport { ThemeToggle } from '../ThemeToggle/ThemeToggle';\r\nimport {\r\n  AppBar,\r\n  Toolbar,\r\n  IconButton,\r\n  Typography,\r\n  Badge,\r\n  Menu,\r\n  MenuItem,\r\n  Box,\r\n  Avatar,\r\n  Tooltip,\r\n  Divider,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  Switch,\r\n  TextField,\r\n  InputAdornment,\r\n  Chip,\r\n  LinearProgress,\r\n} from '@mui/material';\r\nimport {\r\n  Notifications,\r\n  Search,\r\n  Settings,\r\n  Person,\r\n  ExitToApp,\r\n  DarkMode,\r\n  LightMode,\r\n  Help,\r\n  Feedback,\r\n  Speed,\r\n  CloudQueue,\r\n  CheckCircle,\r\n  Error,\r\n  Warning,\r\n  Info,\r\n  TrendingUp,\r\n  AttachMoney,\r\n} from '@mui/icons-material';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useAuthStore } from '../../stores/authStore';\r\n\r\ninterface HeaderProps {\r\n  darkMode?: boolean;\r\n  onToggleDarkMode?: () => void;\r\n}\r\n\r\ninterface Notification {\r\n  id: string;\r\n  type: 'success' | 'error' | 'warning' | 'info';\r\n  title: string;\r\n  message: string;\r\n  timestamp: Date;\r\n  read: boolean;\r\n}\r\n\r\nexport const Header: React.FC<HeaderProps> = ({ darkMode = false, onToggleDarkMode }) => {\r\n  const navigate = useNavigate();\r\n  const { user, logout } = useAuthStore();\r\n  \r\n  const [anchorElUser, setAnchorElUser] = useState<null | HTMLElement>(null);\r\n  const [anchorElNotif, setAnchorElNotif] = useState<null | HTMLElement>(null);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n  \r\n  // Mock notifications - in production, these would come from the backend\r\n  const [notifications, setNotifications] = useState<Notification[]>([\r\n    {\r\n      id: '1',\r\n      type: 'success',\r\n      title: 'Video Published',\r\n      message: 'Your video \"10 AI Tools\" was successfully published',\r\n      timestamp: new Date(Date.now() - 1000 * 60 * 5),\r\n      read: false,\r\n    },\r\n    {\r\n      id: '2',\r\n      type: 'info',\r\n      title: 'Processing Complete',\r\n      message: 'Video generation completed for 3 videos',\r\n      timestamp: new Date(Date.now() - 1000 * 60 * 30),\r\n      read: false,\r\n    },\r\n    {\r\n      id: '3',\r\n      type: 'warning',\r\n      title: 'Daily Limit Warning',\r\n      message: 'You have 2 videos remaining for today',\r\n      timestamp: new Date(Date.now() - 1000 * 60 * 60),\r\n      read: true,\r\n    },\r\n  ]);\r\n\r\n  const unreadCount = notifications.filter(n => !n.read).length;\r\n\r\n  const handleOpenUserMenu = (event: React.MouseEvent<HTMLElement>) => {\r\n    setAnchorElUser(event.currentTarget);\r\n  };\r\n\r\n  const handleCloseUserMenu = () => {\r\n    setAnchorElUser(null);\r\n  };\r\n\r\n  const handleOpenNotifications = (event: React.MouseEvent<HTMLElement>) => {\r\n    setAnchorElNotif(event.currentTarget);\r\n  };\r\n\r\n  const handleCloseNotifications = () => {\r\n    setAnchorElNotif(null);\r\n  };\r\n\r\n  const handleMarkAllRead = () => {\r\n    setNotifications(prev => prev.map(n => ({ ...n, read: true })));\r\n  };\r\n\r\n  const handleLogout = () => {\r\n    handleCloseUserMenu();\r\n    logout();\r\n    navigate('/auth/login');\r\n  };\r\n\r\n  const handleSearch = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    if (searchQuery.trim()) {\r\n      navigate(`/search?q=${encodeURIComponent(searchQuery)}`);\r\n    }\r\n  };\r\n\r\n  const getNotificationIcon = (type: Notification['type']) => {\r\n    switch (type) {\r\n      case 'success':\r\n        return <CheckCircle color=\"success\" fontSize=\"small\" />;\r\n      case 'error':\r\n        return <Error color=\"error\" fontSize=\"small\" />;\r\n      case 'warning':\r\n        return <Warning color=\"warning\" fontSize=\"small\" />;\r\n      case 'info':\r\n        return <Info color=\"info\" fontSize=\"small\" />;\r\n    }\r\n  };\r\n\r\n  const formatTimestamp = (date: Date) => {\r\n    const diff = Date.now() - date.getTime();\r\n    const minutes = Math.floor(diff / 60000);\r\n    const hours = Math.floor(diff / 3600000);\r\n    const days = Math.floor(diff / 86400000);\r\n    \r\n    if (minutes < 1) return 'Just now';\r\n    if (minutes < 60) return `${minutes}m ago`;\r\n    if (hours < 24) return `${hours}h ago`;\r\n    return `${days}d ago`;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <AppBar\r\n        position=\"fixed\"\r\n        sx={{\r\n          zIndex: (theme) => theme.zIndex.drawer + 1,\r\n          backdropFilter: 'blur(8px)',\r\n          backgroundColor: (theme) => \r\n            theme.palette.mode === 'dark' \r\n              ? 'rgba(18, 18, 18, 0.9)' \r\n              : 'rgba(255, 255, 255, 0.9)',\r\n        }}\r\n        elevation={0}\r\n      >\r\n        <Toolbar>\r\n          <Box sx={{ flexGrow: 1, display: 'flex', alignItems: 'center' }}>\r\n            <Box\r\n              component=\"form\"\r\n              onSubmit={handleSearch}\r\n              sx={{\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                backgroundColor: 'action.hover',\r\n                borderRadius: 2,\r\n                px: 2,\r\n                py: 0.5,\r\n                minWidth: 300,\r\n              }}\r\n            >\r\n              <Search sx={{ color: 'text.secondary', mr: 1 }} />\r\n              <TextField\r\n                placeholder=\"Search videos, channels, analytics...\"\r\n                variant=\"standard\"\r\n                value={searchQuery}\r\n                onChange={(e) => setSearchQuery(e.target.value)}\r\n                InputProps={{\r\n                  disableUnderline: true,\r\n                }}\r\n                sx={{ flex: 1 }}\r\n              />\r\n            </Box>\r\n            \r\n            {/* Quick Stats */}\r\n            <Box sx={{ display: 'flex', gap: 2, ml: 4 }}>\r\n              <Tooltip title=\"Today's Performance\">\r\n                <Chip\r\n                  icon={<TrendingUp />}\r\n                  label=\"+12.5%\"\r\n                  color=\"success\"\r\n                  size=\"small\"\r\n                />\r\n              </Tooltip>\r\n              <Tooltip title=\"Revenue Today\">\r\n                <Chip\r\n                  icon={<AttachMoney />}\r\n                  label=\"$127.50\"\r\n                  color=\"primary\"\r\n                  size=\"small\"\r\n                />\r\n              </Tooltip>\r\n              <Tooltip title=\"Processing Queue\">\r\n                <Chip\r\n                  icon={<CloudQueue />}\r\n                  label=\"3 Active\"\r\n                  color=\"warning\"\r\n                  size=\"small\"\r\n                />\r\n              </Tooltip>\r\n            </Box>\r\n          </Box>\r\n\r\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n            {/* Dark Mode Toggle */}\r\n            {onToggleDarkMode && (\r\n              <Tooltip title=\"Toggle Dark Mode\">\r\n                <IconButton onClick={onToggleDarkMode} color=\"inherit\">\r\n                  {darkMode ? <LightMode /> : <DarkMode />}\r\n                </IconButton>\r\n              </Tooltip>\r\n            )}\r\n\r\n            {/* Help */}\r\n            <Tooltip title=\"Help & Documentation\">\r\n              <IconButton\r\n                onClick={() => navigate('/help')}\r\n                color=\"inherit\"\r\n              >\r\n                <Help />\r\n              </IconButton>\r\n            </Tooltip>\r\n\r\n            {/* Notifications */}\r\n            <Tooltip title=\"Notifications\">\r\n              <IconButton\r\n                onClick={handleOpenNotifications}\r\n                color=\"inherit\"\r\n              >\r\n                <Badge badgeContent={unreadCount} color=\"error\">\r\n                  <Notifications />\r\n                </Badge>\r\n              </IconButton>\r\n            </Tooltip>\r\n\r\n            {/* User Menu */}\r\n            <Tooltip title=\"Account\">\r\n              <IconButton onClick={handleOpenUserMenu} sx={{ p: 0, ml: 2 }}>\r\n                <Avatar sx={{ width: 36, height: 36 }}>\r\n                  {user?.username[0].toUpperCase()}\r\n                </Avatar>\r\n              </IconButton>\r\n            </Tooltip>\r\n          </Box>\r\n        </Toolbar>\r\n        \r\n        {isProcessing && (\r\n          <LinearProgress\r\n            sx={{\r\n              position: 'absolute',\r\n              bottom: 0,\r\n              left: 0,\r\n              right: 0,\r\n            }}\r\n          />\r\n        )}\r\n      </AppBar>\r\n\r\n      {/* User Menu */}\r\n      <Menu\r\n        anchorEl={anchorElUser}\r\n        open={Boolean(anchorElUser)}\r\n        onClose={handleCloseUserMenu}\r\n        PaperProps={{\r\n          sx: { width: 280, mt: 1.5 }\r\n        }}\r\n      >\r\n        <Box sx={{ px: 2, py: 1.5 }}>\r\n          <Typography variant=\"subtitle1\" fontWeight=\"bold\">\r\n            {user?.full_name || user?.username}\r\n          </Typography>\r\n          <Typography variant=\"body2\" color=\"text.secondary\">\r\n            {user?.email}\r\n          </Typography>\r\n          <Chip\r\n            label={user?.subscription_tier}\r\n            size=\"small\"\r\n            color={user?.subscription_tier === 'enterprise' ? 'success' : 'primary'}\r\n            sx={{ mt: 1 }}\r\n          />\r\n        </Box>\r\n        \r\n        <Divider />\r\n        \r\n        <MenuItem onClick={() => { handleCloseUserMenu(); navigate('/settings/profile'); }}>\r\n          <ListItemIcon>\r\n            <Person fontSize=\"small\" />\r\n          </ListItemIcon>\r\n          <ListItemText>My Profile</ListItemText>\r\n        </MenuItem>\r\n        \r\n        <MenuItem onClick={() => { handleCloseUserMenu(); navigate('/settings'); }}>\r\n          <ListItemIcon>\r\n            <Settings fontSize=\"small\" />\r\n          </ListItemIcon>\r\n          <ListItemText>Settings</ListItemText>\r\n        </MenuItem>\r\n        \r\n        <MenuItem onClick={() => { handleCloseUserMenu(); navigate('/feedback'); }}>\r\n          <ListItemIcon>\r\n            <Feedback fontSize=\"small\" />\r\n          </ListItemIcon>\r\n          <ListItemText>Send Feedback</ListItemText>\r\n        </MenuItem>\r\n        \r\n        <Divider />\r\n        \r\n        <MenuItem onClick={handleLogout}>\r\n          <ListItemIcon>\r\n            <ExitToApp fontSize=\"small\" />\r\n          </ListItemIcon>\r\n          <ListItemText>Logout</ListItemText>\r\n        </MenuItem>\r\n      </Menu>\r\n\r\n      {/* Notifications Menu */}\r\n      <Menu\r\n        anchorEl={anchorElNotif}\r\n        open={Boolean(anchorElNotif)}\r\n        onClose={handleCloseNotifications}\r\n        PaperProps={{\r\n          sx: { width: 360, maxHeight: 480, mt: 1.5 }\r\n        }}\r\n      >\r\n        <Box sx={{ px: 2, py: 1.5, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n          <Typography variant=\"h6\">Notifications</Typography>\r\n          {unreadCount > 0 && (\r\n            <Typography\r\n              variant=\"body2\"\r\n              color=\"primary\"\r\n              sx={{ cursor: 'pointer' }}\r\n              onClick={handleMarkAllRead}\r\n            >\r\n              Mark all read\r\n            </Typography>\r\n          )}\r\n        </Box>\r\n        \r\n        <Divider />\r\n        \r\n        {notifications.length === 0 ? (\r\n          <Box sx={{ p: 3, textAlign: 'center' }}>\r\n            <Typography variant=\"body2\" color=\"text.secondary\">\r\n              No notifications\r\n            </Typography>\r\n          </Box>\r\n        ) : (\r\n          notifications.map(notification => (\r\n            <MenuItem\r\n              key={notification.id}\r\n              onClick={() => {\r\n                setNotifications(prev =>\r\n                  prev.map(n => n.id === notification.id ? { ...n, read: true } : n)\r\n                );\r\n              }}\r\n              sx={{\r\n                backgroundColor: notification.read ? 'transparent' : 'action.hover',\r\n                '&:hover': {\r\n                  backgroundColor: 'action.selected',\r\n                },\r\n              }}\r\n            >\r\n              <ListItemIcon>\r\n                {getNotificationIcon(notification.type)}\r\n              </ListItemIcon>\r\n              <Box sx={{ flex: 1 }}>\r\n                <Typography variant=\"body2\" fontWeight={notification.read ? 'normal' : 'bold'}>\r\n                  {notification.title}\r\n                </Typography>\r\n                <Typography variant=\"caption\" color=\"text.secondary\">\r\n                  {notification.message}\r\n                </Typography>\r\n                <Typography variant=\"caption\" display=\"block\" color=\"text.disabled\" sx={{ mt: 0.5 }}>\r\n                  {formatTimestamp(notification.timestamp)}\r\n                </Typography>\r\n              </Box>\r\n            </MenuItem>\r\n          ))\r\n        )}\r\n        \r\n        <Divider />\r\n        \r\n        <MenuItem\r\n          onClick={() => {\r\n            handleCloseNotifications();\r\n            navigate('/notifications');\r\n          }}\r\n          sx={{ justifyContent: 'center' }}\r\n        >\r\n          <Typography variant=\"body2\" color=\"primary\">\r\n            View All Notifications\r\n          </Typography>\r\n        </MenuItem>\r\n      </Menu>\r\n    </>\r\n  );\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Layout\\MobileLayout.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Drawer' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isTablet' is assigned a value but never used.","line":51,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":51,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setNotificationCount' is assigned a value but never used.","line":55,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":55,"endColumn":49},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'bottomNavItems'. Either include it or remove the dependency array.","line":82,"column":6,"nodeType":"ArrayExpression","endLine":82,"endColumn":25,"suggestions":[{"desc":"Update the dependencies array to be: [bottomNavItems, location.pathname]","fix":{"range":[2389,2408],"text":"[bottomNavItems, location.pathname]"}}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Mobile Layout Component\n * Provides responsive mobile-first layout for the application\n */\n\nimport React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Drawer,\n  AppBar,\n  Toolbar,\n  IconButton,\n  Typography,\n  useTheme,\n  useMediaQuery,\n  BottomNavigation,\n  BottomNavigationAction,\n  SwipeableDrawer,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Divider,\n  Badge,\n  Avatar,\n  Paper,\n} from '@mui/material';\nimport {\n  Menu as MenuIcon,\n  Dashboard as DashboardIcon,\n  VideoLibrary as VideoLibraryIcon,\n  Analytics as AnalyticsIcon,\n  Settings as SettingsIcon,\n  Home as HomeIcon,\n  Add as AddIcon,\n  Person as PersonIcon,\n  Notifications as NotificationsIcon,\n  Close as CloseIcon,\n} from '@mui/icons-material';\nimport { useNavigate, useLocation, Outlet } from 'react-router-dom';\n\ninterface MobileLayoutProps {\n  children?: React.ReactNode;\n}\n\nconst MobileLayout: React.FC<MobileLayoutProps> = ({ children }) => {\n  const theme = useTheme();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));\n  const isTablet = useMediaQuery(theme.breakpoints.between('sm', 'md'));\n  \n  const [drawerOpen, setDrawerOpen] = useState(false);\n  const [bottomNavValue, setBottomNavValue] = useState(0);\n  const [notificationCount, setNotificationCount] = useState(3);\n\n  // Navigation items for drawer\n  const navigationItems = [\n    { label: 'Dashboard', icon: <DashboardIcon />, path: '/dashboard' },\n    { label: 'Videos', icon: <VideoLibraryIcon />, path: '/videos' },\n    { label: 'Analytics', icon: <AnalyticsIcon />, path: '/analytics' },\n    { label: 'Settings', icon: <SettingsIcon />, path: '/settings' },\n  ];\n\n  // Bottom navigation items for mobile\n  const bottomNavItems = [\n    { label: 'Home', icon: <HomeIcon />, path: '/dashboard' },\n    { label: 'Videos', icon: <VideoLibraryIcon />, path: '/videos' },\n    { label: 'Create', icon: <AddIcon />, path: '/videos/new' },\n    { label: 'Analytics', icon: <AnalyticsIcon />, path: '/analytics' },\n    { label: 'Profile', icon: <PersonIcon />, path: '/profile' },\n  ];\n\n  useEffect(() => {\n    // Update bottom navigation based on current path\n    const currentIndex = bottomNavItems.findIndex(item => \n      location.pathname.startsWith(item.path)\n    );\n    if (currentIndex !== -1) {\n      setBottomNavValue(currentIndex);\n    }\n  }, [location.pathname]);\n\n  const handleDrawerToggle = () => {\n    setDrawerOpen(!drawerOpen);\n  };\n\n  const handleNavigation = (path: string) => {\n    navigate(path);\n    setDrawerOpen(false);\n  };\n\n  const handleBottomNavChange = (_event: React.SyntheticEvent, newValue: number) => {\n    setBottomNavValue(newValue);\n    navigate(bottomNavItems[newValue].path);\n  };\n\n  const drawerContent = (\n    <Box sx={{ width: 280, height: '100%', display: 'flex', flexDirection: 'column' }}>\n      {/* Drawer Header */}\n      <Box sx={{ p: 2, display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n        <Typography variant=\"h6\" fontWeight=\"bold\">\n          YTEmpire\n        </Typography>\n        <IconButton onClick={handleDrawerToggle} size=\"small\">\n          <CloseIcon />\n        </IconButton>\n      </Box>\n      \n      <Divider />\n      \n      {/* User Info */}\n      <Box sx={{ p: 2, display: 'flex', alignItems: 'center', gap: 2 }}>\n        <Avatar sx={{ width: 48, height: 48 }}>U</Avatar>\n        <Box>\n          <Typography variant=\"subtitle1\" fontWeight=\"medium\">\n            User Name\n          </Typography>\n          <Typography variant=\"caption\" color=\"text.secondary\">\n            Premium Plan\n          </Typography>\n        </Box>\n      </Box>\n      \n      <Divider />\n      \n      {/* Navigation Items */}\n      <List sx={{ flex: 1, py: 1 }}>\n        {navigationItems.map((item) => (\n          <ListItem\n            button\n            key={item.label}\n            onClick={() => handleNavigation(item.path)}\n            selected={location.pathname.startsWith(item.path)}\n            sx={{\n              mx: 1,\n              borderRadius: 1,\n              '&.Mui-selected': {\n                backgroundColor: theme.palette.primary.main + '20',\n                '&:hover': {\n                  backgroundColor: theme.palette.primary.main + '30',\n                },\n              },\n            }}\n          >\n            <ListItemIcon sx={{ minWidth: 40 }}>\n              {item.icon}\n            </ListItemIcon>\n            <ListItemText primary={item.label} />\n          </ListItem>\n        ))}\n      </List>\n      \n      <Divider />\n      \n      {/* Quick Stats */}\n      <Box sx={{ p: 2 }}>\n        <Typography variant=\"caption\" color=\"text.secondary\" gutterBottom>\n          QUICK STATS\n        </Typography>\n        <Box sx={{ mt: 1, display: 'flex', flexDirection: 'column', gap: 0.5 }}>\n          <Typography variant=\"body2\">\n            Active Videos: <strong>24</strong>\n          </Typography>\n          <Typography variant=\"body2\">\n            Today's Views: <strong>1,234</strong>\n          </Typography>\n          <Typography variant=\"body2\">\n            Revenue: <strong>$456</strong>\n          </Typography>\n        </Box>\n      </Box>\n    </Box>\n  );\n\n  return (\n    <Box sx={{ display: 'flex', flexDirection: 'column', height: '100vh' }}>\n      {/* App Bar for Mobile */}\n      {isMobile && (\n        <AppBar \n          position=\"fixed\" \n          elevation={0}\n          sx={{ \n            backgroundColor: theme.palette.background.paper,\n            color: theme.palette.text.primary,\n            borderBottom: `1px solid ${theme.palette.divider}`,\n          }}\n        >\n          <Toolbar sx={{ px: 2 }}>\n            <IconButton\n              edge=\"start\"\n              onClick={handleDrawerToggle}\n              sx={{ mr: 2 }}\n            >\n              <MenuIcon />\n            </IconButton>\n            \n            <Typography variant=\"h6\" sx={{ flexGrow: 1 }}>\n              YTEmpire\n            </Typography>\n            \n            <IconButton>\n              <Badge badgeContent={notificationCount} color=\"error\">\n                <NotificationsIcon />\n              </Badge>\n            </IconButton>\n          </Toolbar>\n        </AppBar>\n      )}\n\n      {/* Drawer for Mobile/Tablet */}\n      <SwipeableDrawer\n        anchor=\"left\"\n        open={drawerOpen}\n        onClose={() => setDrawerOpen(false)}\n        onOpen={() => setDrawerOpen(true)}\n        sx={{\n          '& .MuiDrawer-paper': {\n            width: 280,\n            boxSizing: 'border-box',\n          },\n        }}\n      >\n        {drawerContent}\n      </SwipeableDrawer>\n\n      {/* Main Content Area */}\n      <Box\n        component=\"main\"\n        sx={{\n          flexGrow: 1,\n          overflow: 'auto',\n          pt: isMobile ? 7 : 0,\n          pb: isMobile ? 7 : 0,\n          px: isMobile ? 2 : 3,\n          py: 2,\n          backgroundColor: theme.palette.background.default,\n        }}\n      >\n        {children || <Outlet />}\n      </Box>\n\n      {/* Bottom Navigation for Mobile */}\n      {isMobile && (\n        <Paper\n          elevation={8}\n          sx={{\n            position: 'fixed',\n            bottom: 0,\n            left: 0,\n            right: 0,\n            zIndex: theme.zIndex.appBar,\n          }}\n        >\n          <BottomNavigation\n            value={bottomNavValue}\n            onChange={handleBottomNavChange}\n            showLabels={false}\n            sx={{\n              height: 56,\n              '& .MuiBottomNavigationAction-root': {\n                minWidth: 'auto',\n                padding: '6px 0',\n              },\n            }}\n          >\n            {bottomNavItems.map((item) => (\n              <BottomNavigationAction\n                key={item.label}\n                label={item.label}\n                icon={item.label === 'Create' ? (\n                  <Box\n                    sx={{\n                      width: 48,\n                      height: 48,\n                      borderRadius: '50%',\n                      backgroundColor: theme.palette.primary.main,\n                      display: 'flex',\n                      alignItems: 'center',\n                      justifyContent: 'center',\n                      color: 'white',\n                      transform: 'translateY(-8px)',\n                      boxShadow: theme.shadows[4],\n                    }}\n                  >\n                    {item.icon}\n                  </Box>\n                ) : (\n                  item.icon\n                )}\n              />\n            ))}\n          </BottomNavigation>\n        </Paper>\n      )}\n    </Box>\n  );\n};\n\nexport default MobileLayout;\n\n// Export additional mobile-specific components\nexport const MobileHeader: React.FC<{ title: string; onMenuClick?: () => void }> = ({ \n  title, \n  onMenuClick \n}) => (\n  <AppBar position=\"static\" elevation={0} color=\"transparent\">\n    <Toolbar>\n      {onMenuClick && (\n        <IconButton edge=\"start\" onClick={onMenuClick} sx={{ mr: 2 }}>\n          <MenuIcon />\n        </IconButton>\n      )}\n      <Typography variant=\"h6\" sx={{ flexGrow: 1 }}>\n        {title}\n      </Typography>\n    </Toolbar>\n  </AppBar>\n);\n\nexport const MobileCard: React.FC<{ children: React.ReactNode }> = ({ children }) => (\n  <Paper\n    elevation={0}\n    sx={{\n      p: 2,\n      mb: 2,\n      borderRadius: 2,\n      border: (theme) => `1px solid ${theme.palette.divider}`,\n    }}\n  >\n    {children}\n  </Paper>\n);","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Layout\\Sidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Loading\\LoadingButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Loading\\LoadingOverlay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Loading\\LoadingSkeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Loading\\index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Mobile\\MobileOptimizedDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Card' is defined but never used.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CardContent' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'List' is defined but never used.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ListItem' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Drawer' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Skeleton' is defined but never used.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handlePullToRefresh' is assigned a value but never used.","line":112,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":112,"endColumn":28}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Mobile Optimized Dashboard Component\n * Demonstrates extended mobile responsive design features\n */\nimport React, { useState, useEffect } from 'react';\nimport { \n  Box, \n  Card, \n  CardContent, \n  Typography, \n  IconButton,\n  Avatar,\n  List,\n  ListItem,\n  Drawer,\n  AppBar,\n  Toolbar,\n  Badge,\n  Fab,\n  Skeleton\n} from '@mui/material';\nimport {\n  Menu as MenuIcon,\n  Search as SearchIcon,\n  Close as CloseIcon,\n  Add as AddIcon,\n  Notifications as NotificationsIcon,\n  TrendingUp as TrendingUpIcon,\n  TrendingDown as TrendingDownIcon,\n  Refresh as RefreshIcon\n} from '@mui/icons-material';\n\ninterface MobileDataCard {\n  title: string;\n  value: string;\n  change: number;\n  changeType: 'positive' | 'negative' | 'neutral';\n  icon?: React.ReactNode;\n}\n\ninterface MobileListItem {\n  id: string;\n  title: string;\n  subtitle: string;\n  avatar: string;\n  action?: React.ReactNode;\n}\n\nconst MobileOptimizedDashboard: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [activeTab, setActiveTab] = useState('dashboard');\n  const [showMobileModal, setShowMobileModal] = useState(false);\n\n  // Sample data\n  const dataCards: MobileDataCard[] = [\n    {\n      title: 'Total Revenue',\n      value: '$12,450',\n      change: 15.3,\n      changeType: 'positive',\n      icon: <TrendingUpIcon />\n    },\n    {\n      title: 'Video Views',\n      value: '2.4M',\n      change: -5.2,\n      changeType: 'negative',\n      icon: <TrendingDownIcon />\n    },\n    {\n      title: 'Subscribers',\n      value: '48.2K',\n      change: 8.7,\n      changeType: 'positive'\n    },\n    {\n      title: 'Avg. Cost/Video',\n      value: '$2.45',\n      change: -12.1,\n      changeType: 'positive'\n    }\n  ];\n\n  const listItems: MobileListItem[] = [\n    {\n      id: '1',\n      title: 'Gaming Channel Update',\n      subtitle: 'Video published 2 hours ago',\n      avatar: '/avatars/gaming.jpg'\n    },\n    {\n      id: '2', \n      title: 'Tech Review Generated',\n      subtitle: 'Processing completed successfully',\n      avatar: '/avatars/tech.jpg'\n    },\n    {\n      id: '3',\n      title: 'Cooking Tutorial',\n      subtitle: 'Scheduled for tomorrow 9 AM',\n      avatar: '/avatars/cooking.jpg'\n    }\n  ];\n\n  useEffect(() => {\n    // Simulate loading\n    setTimeout(() => setIsLoading(false), 2000);\n  }, []);\n\n  const handlePullToRefresh = async () => {\n    setIsRefreshing(true);\n    // Simulate API call\n    setTimeout(() => {\n      setIsRefreshing(false);\n    }, 1500);\n  };\n\n  const renderDataCard = (card: MobileDataCard, index: number) => (\n    <div key={index} className=\"data-card-mobile\">\n      <div className=\"data-card-mobile-header\">\n        <span className=\"data-card-mobile-title\">{card.title}</span>\n        {card.icon}\n      </div>\n      <div className=\"data-card-mobile-value\">{card.value}</div>\n      <div className={`data-card-mobile-change ${card.changeType}`}>\n        {card.changeType === 'positive' ? '↗' : '↘'} {Math.abs(card.change)}%\n      </div>\n    </div>\n  );\n\n  const renderListItem = (item: MobileListItem) => (\n    <div key={item.id} className=\"mobile-list-item\">\n      <div className=\"mobile-list-item-avatar\">\n        <Avatar sx={{ width: 40, height: 40 }}>{item.title[0]}</Avatar>\n      </div>\n      <div className=\"mobile-list-item-content\">\n        <div className=\"mobile-list-item-title\">{item.title}</div>\n        <div className=\"mobile-list-item-subtitle\">{item.subtitle}</div>\n      </div>\n      <div className=\"mobile-list-item-action\">\n        <IconButton size=\"small\">\n          <MenuIcon />\n        </IconButton>\n      </div>\n    </div>\n  );\n\n  const renderSkeleton = () => (\n    <Box sx={{ p: 2 }}>\n      {[1, 2, 3, 4].map((index) => (\n        <div key={index} className=\"skeleton skeleton-card\" />\n      ))}\n    </Box>\n  );\n\n  return (\n    <Box className=\"mobile-dashboard-container\">\n      {/* Mobile App Bar */}\n      <AppBar position=\"sticky\" sx={{ display: { md: 'none' } }}>\n        <Toolbar>\n          <IconButton edge=\"start\" color=\"inherit\">\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" sx={{ flexGrow: 1 }}>\n            YTEmpire\n          </Typography>\n          <IconButton color=\"inherit\">\n            <Badge badgeContent={4} color=\"error\">\n              <NotificationsIcon />\n            </Badge>\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n\n      {/* Pull to Refresh Container */}\n      <div className={`mobile-pull-refresh ${isRefreshing ? 'pulling' : ''}`}>\n        <div className=\"mobile-pull-indicator\">\n          <RefreshIcon />\n        </div>\n\n        {/* Search Bar */}\n        <Box sx={{ p: 2, display: { md: 'none' } }}>\n          <div className=\"mobile-search-container\">\n            <SearchIcon className=\"mobile-search-icon\" />\n            <input\n              className=\"mobile-search-input\"\n              placeholder=\"Search channels, videos...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n            />\n            {searchQuery && (\n              <button\n                className=\"mobile-search-clear\"\n                onClick={() => setSearchQuery('')}\n              >\n                <CloseIcon />\n              </button>\n            )}\n          </div>\n        </Box>\n\n        {/* Main Content */}\n        <Box sx={{ \n          pb: { xs: 8, md: 0 }, // Bottom padding for mobile nav\n          px: 2\n        }}>\n          {isLoading ? (\n            renderSkeleton()\n          ) : (\n            <>\n              {/* Data Cards Grid */}\n              <Box sx={{ \n                display: 'grid',\n                gridTemplateColumns: { \n                  xs: '1fr',\n                  sm: '1fr 1fr',\n                  lg: '1fr 1fr 1fr 1fr'\n                },\n                gap: 2,\n                mb: 3\n              }}>\n                {dataCards.map(renderDataCard)}\n              </Box>\n\n              {/* Mobile List */}\n              <div className=\"mobile-list\">\n                {listItems.map(renderListItem)}\n              </div>\n\n              {/* Chart Container with Horizontal Scroll */}\n              <Box sx={{ mt: 3 }}>\n                <Typography variant=\"h6\" gutterBottom>\n                  Performance Overview\n                </Typography>\n                <div className=\"mobile-chart\">\n                  <div className=\"mobile-chart-scroll\">\n                    <Box sx={{ \n                      height: 200,\n                      background: 'linear-gradient(45deg, #f3f4f6, #e5e7eb)',\n                      borderRadius: 1,\n                      display: 'flex',\n                      alignItems: 'center',\n                      justifyContent: 'center',\n                      minWidth: 400\n                    }}>\n                      <Typography color=\"textSecondary\">\n                        Chart Component Placeholder\n                      </Typography>\n                    </Box>\n                  </div>\n                </div>\n              </Box>\n\n              {/* Form Example */}\n              <Box sx={{ mt: 3 }}>\n                <Typography variant=\"h6\" gutterBottom>\n                  Quick Actions\n                </Typography>\n                <form className=\"form-mobile-stack\">\n                  <div className=\"form-mobile-group\">\n                    <label>Video Title</label>\n                    <input\n                      type=\"text\"\n                      placeholder=\"Enter video title...\"\n                      style={{\n                        padding: '12px',\n                        border: '1px solid #d1d5db',\n                        borderRadius: '8px',\n                        fontSize: '16px'\n                      }}\n                    />\n                  </div>\n                  <div className=\"form-mobile-row two-cols\">\n                    <div className=\"form-mobile-group\">\n                      <label>Category</label>\n                      <select\n                        style={{\n                          padding: '12px',\n                          border: '1px solid #d1d5db',\n                          borderRadius: '8px',\n                          fontSize: '16px'\n                        }}\n                      >\n                        <option>Gaming</option>\n                        <option>Tech</option>\n                        <option>Cooking</option>\n                      </select>\n                    </div>\n                    <div className=\"form-mobile-group\">\n                      <label>Priority</label>\n                      <select\n                        style={{\n                          padding: '12px',\n                          border: '1px solid #d1d5db',\n                          borderRadius: '8px',\n                          fontSize: '16px'\n                        }}\n                      >\n                        <option>High</option>\n                        <option>Medium</option>\n                        <option>Low</option>\n                      </select>\n                    </div>\n                  </div>\n                  <button\n                    type=\"submit\"\n                    className=\"btn-responsive\"\n                    style={{\n                      background: '#3b82f6',\n                      color: 'white',\n                      border: 'none',\n                      borderRadius: '8px',\n                      padding: '12px 24px',\n                      fontSize: '16px',\n                      fontWeight: 600\n                    }}\n                  >\n                    Generate Video\n                  </button>\n                </form>\n              </Box>\n            </>\n          )}\n        </Box>\n      </div>\n\n      {/* Mobile Bottom Navigation */}\n      <Box sx={{ display: { md: 'none' } }}>\n        <div className=\"mobile-nav-tabs\">\n          {[\n            { id: 'dashboard', label: 'Dashboard', icon: '📊' },\n            { id: 'videos', label: 'Videos', icon: '🎥' },\n            { id: 'analytics', label: 'Analytics', icon: '📈' },\n            { id: 'settings', label: 'Settings', icon: '⚙️' }\n          ].map((tab) => (\n            <a\n              key={tab.id}\n              href=\"#\"\n              className={`mobile-nav-tab ${activeTab === tab.id ? 'active' : ''}`}\n              onClick={(e) => {\n                e.preventDefault();\n                setActiveTab(tab.id);\n              }}\n            >\n              <span className=\"mobile-nav-tab-icon\">{tab.icon}</span>\n              <span className=\"mobile-nav-tab-label\">{tab.label}</span>\n            </a>\n          ))}\n        </div>\n      </Box>\n\n      {/* Floating Action Button */}\n      <Fab\n        color=\"primary\"\n        sx={{\n          position: 'fixed',\n          bottom: { xs: 80, md: 20 },\n          right: 20,\n          display: { md: 'none' }\n        }}\n        onClick={() => setShowMobileModal(true)}\n      >\n        <AddIcon />\n      </Fab>\n\n      {/* Full Screen Mobile Modal */}\n      <div className={`mobile-modal-fullscreen ${showMobileModal ? 'active' : ''}`}>\n        <div className=\"mobile-modal-header\">\n          <button\n            className=\"mobile-modal-close\"\n            onClick={() => setShowMobileModal(false)}\n          >\n            <CloseIcon />\n          </button>\n          <div className=\"mobile-modal-title\">New Video</div>\n          <button\n            style={{\n              background: '#3b82f6',\n              color: 'white',\n              border: 'none',\n              borderRadius: '6px',\n              padding: '8px 16px',\n              fontSize: '14px',\n              fontWeight: 600\n            }}\n          >\n            Save\n          </button>\n        </div>\n        <div className=\"mobile-modal-body\">\n          <Typography paragraph>\n            This is a full-screen mobile modal optimized for mobile devices.\n            It slides up from the bottom and provides a native app-like experience.\n          </Typography>\n          \n          <form className=\"form-mobile-stack\">\n            <div className=\"form-mobile-group\">\n              <label>Title</label>\n              <input\n                type=\"text\"\n                placeholder=\"Video title...\"\n                style={{\n                  padding: '12px',\n                  border: '1px solid #d1d5db',\n                  borderRadius: '8px',\n                  fontSize: '16px'\n                }}\n              />\n            </div>\n            \n            <div className=\"form-mobile-group\">\n              <label>Description</label>\n              <textarea\n                placeholder=\"Video description...\"\n                rows={4}\n                style={{\n                  padding: '12px',\n                  border: '1px solid #d1d5db',\n                  borderRadius: '8px',\n                  fontSize: '16px',\n                  resize: 'vertical'\n                }}\n              />\n            </div>\n\n            <div className=\"form-mobile-row two-cols\">\n              <div className=\"form-mobile-group\">\n                <label>Duration</label>\n                <select\n                  style={{\n                    padding: '12px',\n                    border: '1px solid #d1d5db',\n                    borderRadius: '8px',\n                    fontSize: '16px'\n                  }}\n                >\n                  <option>Short (&lt; 1 min)</option>\n                  <option>Medium (1-5 min)</option>\n                  <option>Long (&gt; 5 min)</option>\n                </select>\n              </div>\n              \n              <div className=\"form-mobile-group\">\n                <label>Quality</label>\n                <select\n                  style={{\n                    padding: '12px',\n                    border: '1px solid #d1d5db',\n                    borderRadius: '8px',\n                    fontSize: '16px'\n                  }}\n                >\n                  <option>High</option>\n                  <option>Medium</option>\n                  <option>Auto</option>\n                </select>\n              </div>\n            </div>\n          </form>\n        </div>\n      </div>\n\n      {/* Modal Overlay */}\n      {showMobileModal && (\n        <div\n          style={{\n            position: 'fixed',\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n            background: 'rgba(0, 0, 0, 0.3)',\n            zIndex: 9998\n          }}\n          onClick={() => setShowMobileModal(false)}\n        />\n      )}\n    </Box>\n  );\n};\n\nexport default MobileOptimizedDashboard;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Mobile\\MobileResponsiveSystem.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":6,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ListItemSecondaryAction' is defined but never used.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Fab' is defined but never used.","line":23,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Skeleton' is defined but never used.","line":24,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Tabs' is defined but never used.","line":29,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Tab' is defined but never used.","line":30,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Chip' is defined but never used.","line":31,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Snackbar' is defined but never used.","line":37,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Paper' is defined but never used.","line":39,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Dialog' is defined but never used.","line":44,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":44,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DialogTitle' is defined but never used.","line":45,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":45,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DialogContent' is defined but never used.","line":46,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DialogActions' is defined but never used.","line":47,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":47,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TextField' is defined but never used.","line":48,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FormControl' is defined but never used.","line":49,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":49,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'InputLabel' is defined but never used.","line":50,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":50,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Select' is defined but never used.","line":51,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":51,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MenuItem' is defined but never used.","line":52,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":52,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Switch' is defined but never used.","line":53,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":53,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FormControlLabel' is defined but never used.","line":54,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":54,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SearchIcon' is defined but never used.","line":60,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":60,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CloseIcon' is defined but never used.","line":61,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":61,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'RefreshIcon' is defined but never used.","line":66,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":66,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DownloadIcon' is defined but never used.","line":75,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":75,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'PlayIcon' is defined but never used.","line":77,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":77,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ScheduleIcon' is defined but never used.","line":82,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":82,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'format' is defined but never used.","line":87,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":87,"endColumn":16},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":114,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":114,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2233,2236],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2233,2236],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isTablet' is assigned a value but never used.","line":199,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":199,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isSmallMobile' is assigned a value but never used.","line":200,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":200,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setNotifications' is assigned a value but never used.","line":209,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":209,"endColumn":41},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":209,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":209,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4950,4953],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4950,4953],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":571,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":571,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15191,15194],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15191,15194],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":33,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Mobile Responsive System\n * Comprehensive mobile-first design system with adaptive layouts\n */\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport {\n  Box,\n  Card,\n  CardContent,\n  Typography,\n  IconButton,\n  Avatar,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n  ListItemSecondaryAction,\n  Drawer,\n  AppBar,\n  Toolbar,\n  Badge,\n  Fab,\n  Skeleton,\n  Button,\n  SwipeableDrawer,\n  BottomNavigation,\n  BottomNavigationAction,\n  Tabs,\n  Tab,\n  Chip,\n  LinearProgress,\n  CircularProgress,\n  SpeedDial,\n  SpeedDialAction,\n  SpeedDialIcon,\n  Snackbar,\n  Alert,\n  Paper,\n  Grid,\n  useMediaQuery,\n  useTheme,\n  Collapse,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Switch,\n  FormControlLabel,\n  Divider,\n  Stack,\n} from '@mui/material';\nimport {\n  Menu as MenuIcon,\n  Search as SearchIcon,\n  Close as CloseIcon,\n  Add as AddIcon,\n  Notifications as NotificationsIcon,\n  TrendingUp as TrendingUpIcon,\n  TrendingDown as TrendingDownIcon,\n  Refresh as RefreshIcon,\n  Home as HomeIcon,\n  Analytics as AnalyticsIcon,\n  VideoLibrary as VideoLibraryIcon,\n  Settings as SettingsIcon,\n  AccountCircle as AccountIcon,\n  ExpandMore as ExpandMoreIcon,\n  ExpandLess as ExpandLessIcon,\n  Share as ShareIcon,\n  Download as DownloadIcon,\n  MoreVert as MoreVertIcon,\n  PlayArrow as PlayIcon,\n  Pause as PauseIcon,\n  AttachMoney as MoneyIcon,\n  Visibility as ViewsIcon,\n  ThumbUp as LikesIcon,\n  Schedule as ScheduleIcon,\n  CloudUpload as UploadIcon,\n  Edit as EditIcon,\n  Delete as DeleteIcon,\n} from '@mui/icons-material';\nimport { format } from 'date-fns';\nimport { useOptimizedStore } from '../../stores/optimizedStore';\n\n// Types\ninterface MobileMetric {\n  id: string;\n  title: string;\n  value: string | number;\n  change: number;\n  changeType: 'positive' | 'negative' | 'neutral';\n  icon: React.ReactNode;\n  color: string;\n  subtitle?: string;\n}\n\ninterface MobileCard {\n  id: string;\n  title: string;\n  subtitle: string;\n  avatar?: string;\n  status: 'active' | 'pending' | 'completed' | 'failed';\n  progress?: number;\n  actions?: Array<{\n    icon: React.ReactNode;\n    label: string;\n    action: () => void;\n  }>;\n  metadata?: Record<string, any>;\n}\n\ninterface NavigationTab {\n  label: string;\n  icon: React.ReactNode;\n  badge?: number;\n  disabled?: boolean;\n}\n\n// Custom hooks for mobile features\nconst useSwipeGestures = (onSwipeLeft?: () => void, onSwipeRight?: () => void) => {\n  const [touchStart, setTouchStart] = useState<number | null>(null);\n  const [touchEnd, setTouchEnd] = useState<number | null>(null);\n\n  const minSwipeDistance = 50;\n\n  const onTouchStart = (e: React.TouchEvent) => {\n    setTouchEnd(null);\n    setTouchStart(e.targetTouches[0].clientX);\n  };\n\n  const onTouchMove = (e: React.TouchEvent) => {\n    setTouchEnd(e.targetTouches[0].clientX);\n  };\n\n  const onTouchEnd = () => {\n    if (!touchStart || !touchEnd) return;\n    \n    const distance = touchStart - touchEnd;\n    const isLeftSwipe = distance > minSwipeDistance;\n    const isRightSwipe = distance < -minSwipeDistance;\n\n    if (isLeftSwipe && onSwipeLeft) onSwipeLeft();\n    if (isRightSwipe && onSwipeRight) onSwipeRight();\n  };\n\n  return {\n    onTouchStart,\n    onTouchMove,\n    onTouchEnd,\n  };\n};\n\nconst usePullToRefresh = (onRefresh: () => Promise<void>) => {\n  const [isPulling, setIsPulling] = useState(false);\n  const [pullDistance, setPullDistance] = useState(0);\n  const startY = useRef<number>(0);\n  const currentY = useRef<number>(0);\n\n  const handleTouchStart = (e: React.TouchEvent) => {\n    startY.current = e.touches[0].clientY;\n  };\n\n  const handleTouchMove = (e: React.TouchEvent) => {\n    currentY.current = e.touches[0].clientY;\n    const distance = currentY.current - startY.current;\n    \n    if (distance > 0 && window.scrollY === 0) {\n      e.preventDefault();\n      setPullDistance(Math.min(distance, 100));\n      setIsPulling(distance > 60);\n    }\n  };\n\n  const handleTouchEnd = async () => {\n    if (isPulling && pullDistance > 60) {\n      await onRefresh();\n    }\n    setIsPulling(false);\n    setPullDistance(0);\n  };\n\n  return {\n    isPulling,\n    pullDistance,\n    handleTouchStart,\n    handleTouchMove,\n    handleTouchEnd,\n  };\n};\n\nexport const MobileResponsiveSystem: React.FC = () => {\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('md'));\n  const isTablet = useMediaQuery(theme.breakpoints.between('sm', 'lg'));\n  const isSmallMobile = useMediaQuery('(max-width:400px)');\n\n  // State management\n  const [bottomNavValue, setBottomNavValue] = useState(0);\n  const [drawerOpen, setDrawerOpen] = useState(false);\n  const [selectedTab, setSelectedTab] = useState(0);\n  const [refreshing, setRefreshing] = useState(false);\n  const [speedDialOpen, setSpeedDialOpen] = useState(false);\n  const [expandedCard, setExpandedCard] = useState<string | null>(null);\n  const [notifications, setNotifications] = useState<any[]>([]);\n  const [showNotifications, setShowNotifications] = useState(false);\n\n  const { addNotification } = useOptimizedStore();\n\n  // Sample data\n  const metrics: MobileMetric[] = [\n    {\n      id: 'revenue',\n      title: 'Revenue',\n      value: '$12,450',\n      change: 15.3,\n      changeType: 'positive',\n      icon: <MoneyIcon />,\n      color: '#4caf50',\n      subtitle: 'vs last month',\n    },\n    {\n      id: 'views',\n      title: 'Views',\n      value: '2.4M',\n      change: -5.2,\n      changeType: 'negative',\n      icon: <ViewsIcon />,\n      color: '#2196f3',\n      subtitle: 'total views',\n    },\n    {\n      id: 'videos',\n      title: 'Videos',\n      value: 156,\n      change: 12.0,\n      changeType: 'positive',\n      icon: <VideoLibraryIcon />,\n      color: '#ff9800',\n      subtitle: 'generated',\n    },\n    {\n      id: 'engagement',\n      title: 'Engagement',\n      value: '4.2%',\n      change: 0.8,\n      changeType: 'positive',\n      icon: <LikesIcon />,\n      color: '#e91e63',\n      subtitle: 'avg rate',\n    },\n  ];\n\n  const cards: MobileCard[] = [\n    {\n      id: '1',\n      title: 'Tech Review Video',\n      subtitle: 'Processing • 78% complete',\n      status: 'active',\n      progress: 78,\n      avatar: '/tech-avatar.jpg',\n      actions: [\n        { icon: <PauseIcon />, label: 'Pause', action: () => {} },\n        { icon: <MoreVertIcon />, label: 'More', action: () => {} },\n      ],\n    },\n    {\n      id: '2',\n      title: 'Gaming Highlights',\n      subtitle: 'Scheduled for 2:00 PM',\n      status: 'pending',\n      avatar: '/gaming-avatar.jpg',\n      actions: [\n        { icon: <EditIcon />, label: 'Edit', action: () => {} },\n        { icon: <DeleteIcon />, label: 'Delete', action: () => {} },\n      ],\n    },\n    {\n      id: '3',\n      title: 'Product Review',\n      subtitle: 'Published • 1.2K views',\n      status: 'completed',\n      avatar: '/product-avatar.jpg',\n      actions: [\n        { icon: <ShareIcon />, label: 'Share', action: () => {} },\n        { icon: <AnalyticsIcon />, label: 'Analytics', action: () => {} },\n      ],\n    },\n  ];\n\n  const navigationTabs: NavigationTab[] = [\n    { label: 'Home', icon: <HomeIcon />, badge: 0 },\n    { label: 'Videos', icon: <VideoLibraryIcon />, badge: 3 },\n    { label: 'Analytics', icon: <AnalyticsIcon /> },\n    { label: 'Profile', icon: <AccountIcon /> },\n  ];\n\n  // Hooks\n  const swipeGestures = useSwipeGestures(\n    () => setSelectedTab(prev => Math.min(prev + 1, 3)),\n    () => setSelectedTab(prev => Math.max(prev - 1, 0))\n  );\n\n  const pullToRefresh = usePullToRefresh(async () => {\n    setRefreshing(true);\n    // Simulate API call\n    await new Promise(resolve => setTimeout(resolve, 1500));\n    setRefreshing(false);\n    addNotification({\n      type: 'success',\n      message: 'Dashboard refreshed',\n    });\n  });\n\n  // Mobile-specific components\n  const MobileHeader = () => (\n    <AppBar position=\"sticky\" elevation={0}>\n      <Toolbar>\n        <IconButton\n          edge=\"start\"\n          color=\"inherit\"\n          onClick={() => setDrawerOpen(true)}\n          sx={{ mr: 2 }}\n        >\n          <MenuIcon />\n        </IconButton>\n        \n        <Typography variant=\"h6\" sx={{ flexGrow: 1 }}>\n          YTEmpire\n        </Typography>\n        \n        <IconButton color=\"inherit\" onClick={() => setShowNotifications(true)}>\n          <Badge badgeContent={notifications.length} color=\"error\">\n            <NotificationsIcon />\n          </Badge>\n        </IconButton>\n      </Toolbar>\n      \n      {/* Pull to refresh indicator */}\n      {pullToRefresh.isPulling && (\n        <Box\n          sx={{\n            position: 'absolute',\n            top: '100%',\n            left: '50%',\n            transform: 'translateX(-50%)',\n            zIndex: 1000,\n          }}\n        >\n          <CircularProgress size={24} />\n        </Box>\n      )}\n    </AppBar>\n  );\n\n  const MobileMetricCard = ({ metric }: { metric: MobileMetric }) => {\n    const getTrendColor = () => {\n      switch (metric.changeType) {\n        case 'positive': return '#4caf50';\n        case 'negative': return '#f44336';\n        default: return '#757575';\n      }\n    };\n\n    const getTrendIcon = () => {\n      switch (metric.changeType) {\n        case 'positive': return <TrendingUpIcon fontSize=\"small\" />;\n        case 'negative': return <TrendingDownIcon fontSize=\"small\" />;\n        default: return null;\n      }\n    };\n\n    return (\n      <Card \n        sx={{ \n          height: '100%',\n          background: `linear-gradient(135deg, ${metric.color}10, ${metric.color}05)`,\n          border: `1px solid ${metric.color}20`,\n        }}\n      >\n        <CardContent sx={{ pb: 2, '&:last-child': { pb: 2 } }}>\n          <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\n            <Box sx={{ color: metric.color, opacity: 0.8 }}>\n              {metric.icon}\n            </Box>\n            <Box textAlign=\"right\">\n              <Typography variant=\"h5\" component=\"div\" fontWeight=\"bold\">\n                {metric.value}\n              </Typography>\n              <Typography variant=\"caption\" color=\"text.secondary\">\n                {metric.title}\n              </Typography>\n            </Box>\n          </Box>\n          \n          <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\" mt={1}>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              {metric.subtitle}\n            </Typography>\n            <Box display=\"flex\" alignItems=\"center\" sx={{ color: getTrendColor() }}>\n              {getTrendIcon()}\n              <Typography variant=\"body2\" sx={{ ml: 0.5 }}>\n                {metric.change > 0 ? '+' : ''}{metric.change}%\n              </Typography>\n            </Box>\n          </Box>\n        </CardContent>\n      </Card>\n    );\n  };\n\n  const MobileVideoCard = ({ card }: { card: MobileCard }) => {\n    const isExpanded = expandedCard === card.id;\n    \n    const getStatusColor = () => {\n      switch (card.status) {\n        case 'active': return '#2196f3';\n        case 'pending': return '#ff9800';\n        case 'completed': return '#4caf50';\n        case 'failed': return '#f44336';\n        default: return '#757575';\n      }\n    };\n\n    return (\n      <Card sx={{ mb: 2 }}>\n        <CardContent sx={{ pb: 1, '&:last-child': { pb: 1 } }}>\n          <Box display=\"flex\" alignItems=\"center\">\n            <Avatar\n              src={card.avatar}\n              sx={{ \n                mr: 2, \n                bgcolor: getStatusColor(),\n                width: 48,\n                height: 48,\n              }}\n            >\n              {card.title[0]}\n            </Avatar>\n            \n            <Box flexGrow={1} minWidth={0}>\n              <Typography variant=\"subtitle1\" noWrap>\n                {card.title}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\" noWrap>\n                {card.subtitle}\n              </Typography>\n              \n              {card.progress !== undefined && (\n                <Box mt={1}>\n                  <LinearProgress \n                    variant=\"determinate\" \n                    value={card.progress} \n                    sx={{ \n                      height: 4, \n                      borderRadius: 2,\n                      backgroundColor: `${getStatusColor()}20`,\n                      '& .MuiLinearProgress-bar': {\n                        backgroundColor: getStatusColor(),\n                      },\n                    }} \n                  />\n                  <Typography variant=\"caption\" color=\"text.secondary\">\n                    {card.progress}% complete\n                  </Typography>\n                </Box>\n              )}\n            </Box>\n            \n            <IconButton \n              size=\"small\" \n              onClick={() => setExpandedCard(isExpanded ? null : card.id)}\n            >\n              {isExpanded ? <ExpandLessIcon /> : <ExpandMoreIcon />}\n            </IconButton>\n          </Box>\n        </CardContent>\n        \n        <Collapse in={isExpanded}>\n          <CardContent sx={{ pt: 0 }}>\n            <Divider sx={{ mb: 2 }} />\n            <Stack direction=\"row\" spacing={1} flexWrap=\"wrap\">\n              {card.actions?.map((action, index) => (\n                <Button\n                  key={index}\n                  size=\"small\"\n                  startIcon={action.icon}\n                  onClick={action.action}\n                  variant=\"outlined\"\n                  sx={{ mb: 1 }}\n                >\n                  {action.label}\n                </Button>\n              ))}\n            </Stack>\n          </CardContent>\n        </Collapse>\n      </Card>\n    );\n  };\n\n  const MobileBottomNav = () => (\n    <BottomNavigation\n      value={bottomNavValue}\n      onChange={(event, newValue) => {\n        setBottomNavValue(newValue);\n        setSelectedTab(newValue);\n      }}\n      showLabels\n      sx={{\n        position: 'fixed',\n        bottom: 0,\n        left: 0,\n        right: 0,\n        zIndex: 1000,\n        borderTop: 1,\n        borderColor: 'divider',\n      }}\n    >\n      {navigationTabs.map((tab, index) => (\n        <BottomNavigationAction\n          key={index}\n          label={tab.label}\n          icon={\n            <Badge badgeContent={tab.badge} color=\"error\">\n              {tab.icon}\n            </Badge>\n          }\n          disabled={tab.disabled}\n        />\n      ))}\n    </BottomNavigation>\n  );\n\n  const MobileSpeedDial = () => (\n    <SpeedDial\n      ariaLabel=\"Quick Actions\"\n      sx={{ \n        position: 'fixed', \n        bottom: isMobile ? 80 : 16, \n        right: 16,\n        zIndex: 999,\n      }}\n      icon={<SpeedDialIcon />}\n      open={speedDialOpen}\n      onOpen={() => setSpeedDialOpen(true)}\n      onClose={() => setSpeedDialOpen(false)}\n    >\n      <SpeedDialAction\n        icon={<AddIcon />}\n        tooltipTitle=\"New Video\"\n        onClick={() => setSpeedDialOpen(false)}\n      />\n      <SpeedDialAction\n        icon={<UploadIcon />}\n        tooltipTitle=\"Upload\"\n        onClick={() => setSpeedDialOpen(false)}\n      />\n      <SpeedDialAction\n        icon={<AnalyticsIcon />}\n        tooltipTitle=\"Analytics\"\n        onClick={() => setSpeedDialOpen(false)}\n      />\n    </SpeedDial>\n  );\n\n  const TabPanel = ({ children, value, index }: any) => (\n    <Box\n      role=\"tabpanel\"\n      hidden={value !== index}\n      sx={{ \n        minHeight: 'calc(100vh - 128px)', // Account for app bar and bottom nav\n        pb: isMobile ? 10 : 2, // Extra padding for bottom nav\n      }}\n      {...swipeGestures}\n      {...pullToRefresh}\n    >\n      {value === index && (\n        <Box p={2}>\n          {children}\n        </Box>\n      )}\n    </Box>\n  );\n\n  if (!isMobile) {\n    // Desktop/tablet layout\n    return (\n      <Box>\n        <Typography variant=\"h4\" gutterBottom>\n          Desktop Dashboard\n        </Typography>\n        <Typography variant=\"body1\" color=\"text.secondary\">\n          This is the desktop version. Mobile responsive features are optimized for mobile devices.\n        </Typography>\n      </Box>\n    );\n  }\n\n  return (\n    <Box sx={{ flexGrow: 1 }}>\n      <MobileHeader />\n      \n      {/* Main Content */}\n      <Box>\n        <TabPanel value={selectedTab} index={0}>\n          {/* Dashboard Tab */}\n          <Typography variant=\"h5\" gutterBottom>\n            Dashboard\n          </Typography>\n          \n          <Grid container spacing={2} sx={{ mb: 3 }}>\n            {metrics.map((metric) => (\n              <Grid item xs={6} key={metric.id}>\n                <MobileMetricCard metric={metric} />\n              </Grid>\n            ))}\n          </Grid>\n          \n          <Typography variant=\"h6\" gutterBottom>\n            Recent Activity\n          </Typography>\n          {cards.map((card) => (\n            <MobileVideoCard key={card.id} card={card} />\n          ))}\n        </TabPanel>\n        \n        <TabPanel value={selectedTab} index={1}>\n          {/* Videos Tab */}\n          <Typography variant=\"h5\" gutterBottom>\n            Videos\n          </Typography>\n          {cards.map((card) => (\n            <MobileVideoCard key={card.id} card={card} />\n          ))}\n        </TabPanel>\n        \n        <TabPanel value={selectedTab} index={2}>\n          {/* Analytics Tab */}\n          <Typography variant=\"h5\" gutterBottom>\n            Analytics\n          </Typography>\n          <Alert severity=\"info\" sx={{ mb: 2 }}>\n            Swipe left or right to navigate between tabs\n          </Alert>\n          <Grid container spacing={2}>\n            {metrics.map((metric) => (\n              <Grid item xs={12} sm={6} key={metric.id}>\n                <MobileMetricCard metric={metric} />\n              </Grid>\n            ))}\n          </Grid>\n        </TabPanel>\n        \n        <TabPanel value={selectedTab} index={3}>\n          {/* Profile Tab */}\n          <Typography variant=\"h5\" gutterBottom>\n            Profile\n          </Typography>\n          <Card>\n            <CardContent>\n              <Box display=\"flex\" alignItems=\"center\" mb={2}>\n                <Avatar sx={{ width: 56, height: 56, mr: 2 }}>\n                  U\n                </Avatar>\n                <Box>\n                  <Typography variant=\"h6\">User Name</Typography>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    user@example.com\n                  </Typography>\n                </Box>\n              </Box>\n              \n              <List>\n                <ListItem>\n                  <ListItemText primary=\"Settings\" />\n                  <SettingsIcon />\n                </ListItem>\n                <ListItem>\n                  <ListItemText primary=\"Help & Support\" />\n                </ListItem>\n                <ListItem>\n                  <ListItemText primary=\"Sign Out\" />\n                </ListItem>\n              </List>\n            </CardContent>\n          </Card>\n        </TabPanel>\n      </Box>\n      \n      {/* Bottom Navigation */}\n      <MobileBottomNav />\n      \n      {/* Speed Dial */}\n      <MobileSpeedDial />\n      \n      {/* Side Drawer */}\n      <SwipeableDrawer\n        anchor=\"left\"\n        open={drawerOpen}\n        onClose={() => setDrawerOpen(false)}\n        onOpen={() => setDrawerOpen(true)}\n        disableSwipeToOpen={false}\n      >\n        <Box sx={{ width: 250, pt: 2 }}>\n          <Typography variant=\"h6\" sx={{ px: 2, mb: 2 }}>\n            Menu\n          </Typography>\n          <List>\n            {navigationTabs.map((tab, index) => (\n              <ListItem \n                key={index}\n                onClick={() => {\n                  setSelectedTab(index);\n                  setBottomNavValue(index);\n                  setDrawerOpen(false);\n                }}\n              >\n                <ListItemAvatar>\n                  <Avatar sx={{ bgcolor: 'primary.main' }}>\n                    {tab.icon}\n                  </Avatar>\n                </ListItemAvatar>\n                <ListItemText primary={tab.label} />\n                {tab.badge && tab.badge > 0 && (\n                  <Badge badgeContent={tab.badge} color=\"error\" />\n                )}\n              </ListItem>\n            ))}\n          </List>\n        </Box>\n      </SwipeableDrawer>\n      \n      {/* Notifications Drawer */}\n      <Drawer\n        anchor=\"right\"\n        open={showNotifications}\n        onClose={() => setShowNotifications(false)}\n      >\n        <Box sx={{ width: 300, p: 2 }}>\n          <Typography variant=\"h6\" gutterBottom>\n            Notifications\n          </Typography>\n          {notifications.length === 0 ? (\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              No notifications\n            </Typography>\n          ) : (\n            <List>\n              {notifications.map((notification, index) => (\n                <ListItem key={index}>\n                  <ListItemText\n                    primary={notification.title}\n                    secondary={notification.message}\n                  />\n                </ListItem>\n              ))}\n            </List>\n          )}\n        </Box>\n      </Drawer>\n      \n      {/* Loading Indicator */}\n      {refreshing && (\n        <Box\n          sx={{\n            position: 'fixed',\n            top: '50%',\n            left: '50%',\n            transform: 'translate(-50%, -50%)',\n            zIndex: 2000,\n          }}\n        >\n          <CircularProgress />\n        </Box>\n      )}\n    </Box>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Monitoring\\CostTrackingDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":1,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'IconButton' is defined but never used.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Dialog' is defined but never used.","line":22,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DialogTitle' is defined but never used.","line":23,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DialogContent' is defined but never used.","line":24,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DialogActions' is defined but never used.","line":25,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TextField' is defined but never used.","line":26,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FormControl' is defined but never used.","line":27,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'InputLabel' is defined but never used.","line":28,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Select' is defined but never used.","line":29,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MenuItem' is defined but never used.","line":30,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Switch' is defined but never used.","line":31,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FormControlLabel' is defined but never used.","line":32,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Tooltip' is defined but never used.","line":33,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Divider' is defined but never used.","line":36,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CheckCircle' is defined but never used.","line":43,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":43,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Error' is defined but never used.","line":44,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":44,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Settings' is defined but never used.","line":45,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":45,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Download' is defined but never used.","line":46,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Refresh' is defined but never used.","line":47,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":47,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'PieChart' is defined but never used.","line":54,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":54,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'BarChart' is defined but never used.","line":55,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":55,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ShowChart' is defined but never used.","line":56,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":56,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ArrowDownward' is defined but never used.","line":58,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":58,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Info' is defined but never used.","line":59,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":59,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'LineChart' is defined but never used.","line":63,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":63,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Line' is defined but never used.","line":64,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":64,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'RechartsBarChart' is defined but never used.","line":75,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":75,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Bar' is defined but never used.","line":76,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":76,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'startOfDay' is defined but never used.","line":78,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":78,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'endOfDay' is defined but never used.","line":78,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":78,"endColumn":47},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'BudgetLimit' is defined but never used.","line":113,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":113,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'timeRange' is assigned a value but never used.","line":123,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":123,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setTimeRange' is assigned a value but never used.","line":123,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":123,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'settingsOpen' is assigned a value but never used.","line":124,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":124,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setSettingsOpen' is assigned a value but never used.","line":124,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":124,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'selectedService' is assigned a value but never used.","line":125,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":125,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setSelectedService' is assigned a value but never used.","line":125,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":125,"endColumn":45},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":543,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":543,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16681,16684],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16681,16684],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":39,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Grid,\n  Card,\n  CardContent,\n  Typography,\n  LinearProgress,\n  Chip,\n  Alert,\n  Button,\n  IconButton,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  Tabs,\n  Tab,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Switch,\n  FormControlLabel,\n  Tooltip,\n  Avatar,\n  useTheme,\n  Divider,\n} from '@mui/material';\nimport {\n  AttachMoney,\n  TrendingUp,\n  TrendingDown,\n  Warning,\n  CheckCircle,\n  Error,\n  Settings,\n  Download,\n  Refresh,\n  NotificationImportant,\n  Speed,\n  CloudQueue,\n  Memory,\n  Storage,\n  Timeline,\n  PieChart,\n  BarChart,\n  ShowChart,\n  ArrowUpward,\n  ArrowDownward,\n  Info,\n} from '@mui/icons-material';\nimport {\n  ResponsiveContainer,\n  LineChart,\n  Line,\n  AreaChart,\n  Area,\n  PieChart as RechartsPieChart,\n  Pie,\n  Cell,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip as RechartsTooltip,\n  Legend,\n  BarChart as RechartsBarChart,\n  Bar,\n} from 'recharts';\nimport { format, subDays, startOfDay, endOfDay } from 'date-fns';\n\ninterface CostMetric {\n  service: string;\n  icon: React.ReactNode;\n  currentCost: number;\n  previousCost: number;\n  budget: number;\n  usage: number;\n  trend: 'up' | 'down' | 'stable';\n  color: string;\n}\n\ninterface ServiceCost {\n  id: string;\n  name: string;\n  provider: string;\n  category: string;\n  costToday: number;\n  costYesterday: number;\n  costThisMonth: number;\n  callsToday: number;\n  avgCostPerCall: number;\n  status: 'normal' | 'warning' | 'critical';\n}\n\ninterface CostAlert {\n  id: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  title: string;\n  description: string;\n  timestamp: Date;\n  action?: string;\n}\n\ninterface BudgetLimit {\n  service: string;\n  daily: number;\n  monthly: number;\n  alertThreshold: number;\n}\n\nexport const CostTrackingDashboard: React.FC = () => {\n  const theme = useTheme();\n  const [tabValue, setTabValue] = useState(0);\n  const [timeRange, setTimeRange] = useState('today');\n  const [settingsOpen, setSettingsOpen] = useState(false);\n  const [selectedService, setSelectedService] = useState<ServiceCost | null>(null);\n  \n  const [costMetrics] = useState<CostMetric[]>([\n    {\n      service: 'OpenAI',\n      icon: <Memory />,\n      currentCost: 45.67,\n      previousCost: 38.92,\n      budget: 50.00,\n      usage: 91.34,\n      trend: 'up',\n      color: theme.palette.primary.main,\n    },\n    {\n      service: 'ElevenLabs',\n      icon: <CloudQueue />,\n      currentCost: 18.23,\n      previousCost: 20.15,\n      budget: 20.00,\n      usage: 91.15,\n      trend: 'down',\n      color: theme.palette.secondary.main,\n    },\n    {\n      service: 'Google Cloud',\n      icon: <Storage />,\n      currentCost: 8.45,\n      previousCost: 7.82,\n      budget: 10.00,\n      usage: 84.50,\n      trend: 'up',\n      color: theme.palette.success.main,\n    },\n    {\n      service: 'YouTube API',\n      icon: <CloudQueue />,\n      currentCost: 2.15,\n      previousCost: 2.15,\n      budget: 5.00,\n      usage: 43.00,\n      trend: 'stable',\n      color: theme.palette.warning.main,\n    },\n  ]);\n\n  const [serviceCosts] = useState<ServiceCost[]>([\n    {\n      id: '1',\n      name: 'GPT-4 Turbo',\n      provider: 'OpenAI',\n      category: 'Script Generation',\n      costToday: 32.45,\n      costYesterday: 28.90,\n      costThisMonth: 945.67,\n      callsToday: 234,\n      avgCostPerCall: 0.14,\n      status: 'warning',\n    },\n    {\n      id: '2',\n      name: 'GPT-3.5 Turbo',\n      provider: 'OpenAI',\n      category: 'Script Generation',\n      costToday: 13.22,\n      costYesterday: 10.02,\n      costThisMonth: 312.45,\n      callsToday: 567,\n      avgCostPerCall: 0.02,\n      status: 'normal',\n    },\n    {\n      id: '3',\n      name: 'ElevenLabs Voice',\n      provider: 'ElevenLabs',\n      category: 'Voice Synthesis',\n      costToday: 18.23,\n      costYesterday: 20.15,\n      costThisMonth: 523.89,\n      callsToday: 89,\n      avgCostPerCall: 0.20,\n      status: 'warning',\n    },\n    {\n      id: '4',\n      name: 'DALL-E 3',\n      provider: 'OpenAI',\n      category: 'Image Generation',\n      costToday: 5.67,\n      costYesterday: 4.23,\n      costThisMonth: 156.78,\n      callsToday: 45,\n      avgCostPerCall: 0.13,\n      status: 'normal',\n    },\n  ]);\n\n  const [alerts] = useState<CostAlert[]>([\n    {\n      id: '1',\n      severity: 'high',\n      title: 'OpenAI Daily Budget Alert',\n      description: 'OpenAI costs at 91% of daily budget ($45.67/$50.00)',\n      timestamp: new Date(),\n      action: 'Consider switching to GPT-3.5 for remaining videos today',\n    },\n    {\n      id: '2',\n      severity: 'medium',\n      title: 'Cost Optimization Opportunity',\n      description: 'Switching 30% of GPT-4 calls to GPT-3.5 could save $15/day',\n      timestamp: new Date(Date.now() - 1000 * 60 * 30),\n      action: 'Review script generation settings',\n    },\n    {\n      id: '3',\n      severity: 'low',\n      title: 'Monthly Projection Update',\n      description: 'Current spending trend projects $2,850 for this month',\n      timestamp: new Date(Date.now() - 1000 * 60 * 60 * 2),\n    },\n  ]);\n\n  // Mock data for charts\n  const dailyCostData = Array.from({ length: 7 }, (_, i) => ({\n    date: format(subDays(new Date(), 6 - i), 'MM/dd'),\n    openai: 35 + Math.random() * 15,\n    elevenlabs: 15 + Math.random() * 8,\n    google: 5 + Math.random() * 5,\n    total: 0,\n  })).map(d => ({ ...d, total: d.openai + d.elevenlabs + d.google }));\n\n  const costBreakdown = [\n    { name: 'Script Generation', value: 45.67, percentage: 45 },\n    { name: 'Voice Synthesis', value: 18.23, percentage: 18 },\n    { name: 'Image Generation', value: 8.45, percentage: 8 },\n    { name: 'Video Rendering', value: 12.34, percentage: 12 },\n    { name: 'API Calls', value: 5.67, percentage: 6 },\n    { name: 'Storage', value: 10.64, percentage: 11 },\n  ];\n\n  const COLORS = [\n    theme.palette.primary.main,\n    theme.palette.secondary.main,\n    theme.palette.success.main,\n    theme.palette.warning.main,\n    theme.palette.error.main,\n    theme.palette.info.main,\n  ];\n\n  const getTrendIcon = (trend: string) => {\n    switch (trend) {\n      case 'up': return <TrendingUp color=\"error\" fontSize=\"small\" />;\n      case 'down': return <TrendingDown color=\"success\" fontSize=\"small\" />;\n      default: return <ArrowUpward color=\"action\" fontSize=\"small\" />;\n    }\n  };\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case 'critical': return 'error';\n      case 'high': return 'error';\n      case 'medium': return 'warning';\n      case 'low': return 'info';\n      default: return 'default';\n    }\n  };\n\n  const totalCostToday = costMetrics.reduce((sum, m) => sum + m.currentCost, 0);\n  const totalBudget = costMetrics.reduce((sum, m) => sum + m.budget, 0);\n  const budgetUsagePercent = (totalCostToday / totalBudget) * 100;\n\n  return (\n    <Box>\n      {/* Header Metrics */}\n      <Grid container spacing={3} sx={{ mb: 3 }}>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n                <Avatar sx={{ bgcolor: 'primary.main', mr: 2 }}>\n                  <AttachMoney />\n                </Avatar>\n                <Box sx={{ flex: 1 }}>\n                  <Typography variant=\"h4\" fontWeight=\"bold\">\n                    ${totalCostToday.toFixed(2)}\n                  </Typography>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    Total Cost Today\n                  </Typography>\n                </Box>\n                {getTrendIcon('up')}\n              </Box>\n              <LinearProgress\n                variant=\"determinate\"\n                value={budgetUsagePercent}\n                color={budgetUsagePercent > 90 ? 'error' : budgetUsagePercent > 70 ? 'warning' : 'primary'}\n              />\n              <Typography variant=\"caption\" color=\"text.secondary\" sx={{ mt: 1, display: 'block' }}>\n                {budgetUsagePercent.toFixed(1)}% of daily budget\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n                <Avatar sx={{ bgcolor: 'success.main', mr: 2 }}>\n                  <Speed />\n                </Avatar>\n                <Box sx={{ flex: 1 }}>\n                  <Typography variant=\"h4\" fontWeight=\"bold\">\n                    $0.97\n                  </Typography>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    Avg Cost per Video\n                  </Typography>\n                </Box>\n                <Chip label=\"-12%\" size=\"small\" color=\"success\" />\n              </Box>\n              <Typography variant=\"caption\" color=\"success.main\">\n                Optimized from $1.10 yesterday\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n                <Avatar sx={{ bgcolor: 'warning.main', mr: 2 }}>\n                  <Timeline />\n                </Avatar>\n                <Box sx={{ flex: 1 }}>\n                  <Typography variant=\"h4\" fontWeight=\"bold\">\n                    $2,850\n                  </Typography>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    Monthly Projection\n                  </Typography>\n                </Box>\n              </Box>\n              <Typography variant=\"caption\" color=\"text.secondary\">\n                Based on current usage trends\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n                <Avatar sx={{ bgcolor: 'error.main', mr: 2 }}>\n                  <NotificationImportant />\n                </Avatar>\n                <Box sx={{ flex: 1 }}>\n                  <Typography variant=\"h4\" fontWeight=\"bold\">\n                    {alerts.filter(a => a.severity === 'high' || a.severity === 'critical').length}\n                  </Typography>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    Active Alerts\n                  </Typography>\n                </Box>\n              </Box>\n              <Button size=\"small\" variant=\"outlined\">\n                View All\n              </Button>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n\n      {/* Service Cost Breakdown */}\n      <Grid container spacing={3} sx={{ mb: 3 }}>\n        {costMetrics.map((metric) => (\n          <Grid item xs={12} sm={6} md={3} key={metric.service}>\n            <Card>\n              <CardContent>\n                <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\n                  <Avatar sx={{ bgcolor: `${metric.color}20`, color: metric.color, width: 32, height: 32 }}>\n                    {metric.icon}\n                  </Avatar>\n                  <Typography variant=\"subtitle2\" sx={{ ml: 1, flex: 1 }}>\n                    {metric.service}\n                  </Typography>\n                  {metric.usage > 90 && (\n                    <Warning color=\"warning\" fontSize=\"small\" />\n                  )}\n                </Box>\n                \n                <Typography variant=\"h6\" fontWeight=\"bold\">\n                  ${metric.currentCost.toFixed(2)}\n                </Typography>\n                \n                <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5, mb: 1 }}>\n                  {getTrendIcon(metric.trend)}\n                  <Typography variant=\"caption\" color={metric.trend === 'up' ? 'error.main' : 'success.main'}>\n                    {metric.trend === 'up' ? '+' : '-'}\n                    {Math.abs(metric.currentCost - metric.previousCost).toFixed(2)} from yesterday\n                  </Typography>\n                </Box>\n                \n                <Box sx={{ mb: 0.5 }}>\n                  <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>\n                    <Typography variant=\"caption\">Budget</Typography>\n                    <Typography variant=\"caption\" fontWeight=\"bold\">\n                      ${metric.budget.toFixed(2)}\n                    </Typography>\n                  </Box>\n                  <LinearProgress\n                    variant=\"determinate\"\n                    value={metric.usage}\n                    color={metric.usage > 90 ? 'error' : metric.usage > 70 ? 'warning' : 'primary'}\n                  />\n                </Box>\n              </CardContent>\n            </Card>\n          </Grid>\n        ))}\n      </Grid>\n\n      {/* Charts and Tables */}\n      <Tabs value={tabValue} onChange={(e, v) => setTabValue(v)} sx={{ mb: 2 }}>\n        <Tab label=\"Overview\" />\n        <Tab label=\"Service Details\" />\n        <Tab label=\"Trends\" />\n        <Tab label=\"Optimization\" />\n      </Tabs>\n\n      {/* Overview Tab */}\n      {tabValue === 0 && (\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={8}>\n            <Card>\n              <CardContent>\n                <Typography variant=\"h6\" fontWeight=\"bold\" gutterBottom>\n                  7-Day Cost Trend\n                </Typography>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <AreaChart data={dailyCostData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"date\" />\n                    <YAxis />\n                    <RechartsTooltip />\n                    <Legend />\n                    <Area type=\"monotone\" dataKey=\"openai\" stackId=\"1\" stroke={COLORS[0]} fill={COLORS[0]} />\n                    <Area type=\"monotone\" dataKey=\"elevenlabs\" stackId=\"1\" stroke={COLORS[1]} fill={COLORS[1]} />\n                    <Area type=\"monotone\" dataKey=\"google\" stackId=\"1\" stroke={COLORS[2]} fill={COLORS[2]} />\n                  </AreaChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n          </Grid>\n\n          <Grid item xs={12} md={4}>\n            <Card>\n              <CardContent>\n                <Typography variant=\"h6\" fontWeight=\"bold\" gutterBottom>\n                  Cost Distribution\n                </Typography>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <RechartsPieChart>\n                    <Pie\n                      data={costBreakdown}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      label={(entry) => `${entry.percentage}%`}\n                      outerRadius={80}\n                      fill=\"#8884d8\"\n                      dataKey=\"value\"\n                    >\n                      {costBreakdown.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                      ))}\n                    </Pie>\n                    <RechartsTooltip />\n                  </RechartsPieChart>\n                </ResponsiveContainer>\n                \n                <Box sx={{ mt: 2 }}>\n                  {costBreakdown.map((item, index) => (\n                    <Box key={item.name} sx={{ display: 'flex', alignItems: 'center', mb: 0.5 }}>\n                      <Box\n                        sx={{\n                          width: 12,\n                          height: 12,\n                          borderRadius: '50%',\n                          bgcolor: COLORS[index % COLORS.length],\n                          mr: 1,\n                        }}\n                      />\n                      <Typography variant=\"caption\" sx={{ flex: 1 }}>\n                        {item.name}\n                      </Typography>\n                      <Typography variant=\"caption\" fontWeight=\"bold\">\n                        ${item.value.toFixed(2)}\n                      </Typography>\n                    </Box>\n                  ))}\n                </Box>\n              </CardContent>\n            </Card>\n          </Grid>\n\n          {/* Alerts */}\n          <Grid item xs={12}>\n            <Card>\n              <CardContent>\n                <Typography variant=\"h6\" fontWeight=\"bold\" gutterBottom>\n                  Cost Alerts\n                </Typography>\n                {alerts.map(alert => (\n                  <Alert\n                    key={alert.id}\n                    severity={getSeverityColor(alert.severity) as any}\n                    sx={{ mb: 1 }}\n                    action={\n                      alert.action && (\n                        <Button size=\"small\">\n                          Take Action\n                        </Button>\n                      )\n                    }\n                  >\n                    <Typography variant=\"subtitle2\" fontWeight=\"bold\">\n                      {alert.title}\n                    </Typography>\n                    <Typography variant=\"body2\">\n                      {alert.description}\n                    </Typography>\n                    {alert.action && (\n                      <Typography variant=\"caption\" display=\"block\" sx={{ mt: 0.5 }}>\n                        Recommendation: {alert.action}\n                      </Typography>\n                    )}\n                  </Alert>\n                ))}\n              </CardContent>\n            </Card>\n          </Grid>\n        </Grid>\n      )}\n\n      {/* Service Details Tab */}\n      {tabValue === 1 && (\n        <TableContainer component={Paper}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>Service</TableCell>\n                <TableCell>Provider</TableCell>\n                <TableCell>Category</TableCell>\n                <TableCell align=\"right\">Cost Today</TableCell>\n                <TableCell align=\"right\">Yesterday</TableCell>\n                <TableCell align=\"right\">This Month</TableCell>\n                <TableCell align=\"right\">Calls Today</TableCell>\n                <TableCell align=\"right\">Avg Cost/Call</TableCell>\n                <TableCell>Status</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {serviceCosts.map(service => (\n                <TableRow key={service.id}>\n                  <TableCell>{service.name}</TableCell>\n                  <TableCell>{service.provider}</TableCell>\n                  <TableCell>{service.category}</TableCell>\n                  <TableCell align=\"right\">${service.costToday.toFixed(2)}</TableCell>\n                  <TableCell align=\"right\">${service.costYesterday.toFixed(2)}</TableCell>\n                  <TableCell align=\"right\">${service.costThisMonth.toFixed(2)}</TableCell>\n                  <TableCell align=\"right\">{service.callsToday}</TableCell>\n                  <TableCell align=\"right\">${service.avgCostPerCall.toFixed(3)}</TableCell>\n                  <TableCell>\n                    <Chip\n                      label={service.status}\n                      size=\"small\"\n                      color={service.status === 'warning' ? 'warning' : service.status === 'critical' ? 'error' : 'success'}\n                    />\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      )}\n    </Box>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Monitoring\\LiveVideoGenerationMonitor.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'List' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ListItem' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ListItemIcon' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ListItemText' is defined but never used.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ListItemSecondaryAction' is defined but never used.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Badge' is defined but never used.","line":26,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Tooltip' is defined but never used.","line":27,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Dialog' is defined but never used.","line":28,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DialogTitle' is defined but never used.","line":29,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DialogContent' is defined but never used.","line":30,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DialogActions' is defined but never used.","line":31,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Stop' is defined but never used.","line":38,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Warning' is defined but never used.","line":41,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Schedule' is defined but never used.","line":42,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":42,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CloudQueue' is defined but never used.","line":43,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":43,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Analytics' is defined but never used.","line":49,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":49,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Refresh' is defined but never used.","line":51,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":51,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Storage' is defined but never used.","line":58,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":58,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AutoFixHigh' is defined but never used.","line":61,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":61,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'BugReport' is defined but never used.","line":62,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":62,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AnimatePresence' is defined but never used.","line":65,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":65,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'motion' is defined but never used.","line":65,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":65,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'theme' is assigned a value but never used.","line":159,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":159,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'selectedTask' is assigned a value but never used.","line":161,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":161,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setSelectedTask' is assigned a value but never used.","line":161,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":161,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'detailsDialog' is assigned a value but never used.","line":163,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":163,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setDetailsDialog' is assigned a value but never used.","line":163,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":163,"endColumn":41},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setSystemMetrics' is assigned a value but never used.","line":164,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":164,"endColumn":41},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":370,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":370,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9747,9750],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9747,9750],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":480,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":480,"endColumn":43}],"suppressedMessages":[],"errorCount":30,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef } from 'react';\nimport {\n  Box,\n  Grid,\n  Card,\n  CardContent,\n  Typography,\n  LinearProgress,\n  CircularProgress,\n  Chip,\n  Alert,\n  Button,\n  IconButton,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  ListItemSecondaryAction,\n  Paper,\n  Stepper,\n  Step,\n  StepLabel,\n  StepContent,\n  Collapse,\n  Avatar,\n  Badge,\n  Tooltip,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  useTheme,\n  Divider,\n} from '@mui/material';\nimport {\n  PlayCircle,\n  Pause,\n  Stop,\n  CheckCircle,\n  Error,\n  Warning,\n  Schedule,\n  CloudQueue,\n  Movie,\n  Mic,\n  Image,\n  TextFields,\n  Upload,\n  Analytics,\n  Cancel,\n  Refresh,\n  ExpandMore,\n  ExpandLess,\n  Speed,\n  Timer,\n  AttachMoney,\n  Memory,\n  Storage,\n  TrendingUp,\n  VideoCall,\n  AutoFixHigh,\n  BugReport,\n} from '@mui/icons-material';\nimport { format, formatDistanceToNow, addMinutes } from 'date-fns';\nimport { AnimatePresence, motion } from 'framer-motion';\n\ninterface VideoGenerationTask {\n  id: string;\n  title: string;\n  channelId: string;\n  channelName: string;\n  status: 'queued' | 'processing' | 'completed' | 'failed' | 'paused';\n  currentStep: number;\n  totalSteps: number;\n  progress: number;\n  startTime: Date;\n  estimatedCompletion: Date;\n  steps: GenerationStep[];\n  metrics: {\n    costSoFar: number;\n    estimatedTotalCost: number;\n    processingTime: number;\n    gpuUsage: number;\n    memoryUsage: number;\n  };\n  errors?: string[];\n  warnings?: string[];\n}\n\ninterface GenerationStep {\n  id: string;\n  name: string;\n  description: string;\n  status: 'pending' | 'processing' | 'completed' | 'failed' | 'skipped';\n  progress: number;\n  startTime?: Date;\n  endTime?: Date;\n  duration?: number;\n  cost?: number;\n  output?: string;\n  error?: string;\n  retryCount?: number;\n  maxRetries?: number;\n}\n\nconst generationSteps: GenerationStep[] = [\n  {\n    id: 'analyze',\n    name: 'Trend Analysis',\n    description: 'Analyzing trending topics and keywords',\n    status: 'pending',\n    progress: 0,\n  },\n  {\n    id: 'script',\n    name: 'Script Generation',\n    description: 'Creating optimized script with AI',\n    status: 'pending',\n    progress: 0,\n  },\n  {\n    id: 'voice',\n    name: 'Voice Synthesis',\n    description: 'Converting script to natural speech',\n    status: 'pending',\n    progress: 0,\n  },\n  {\n    id: 'visuals',\n    name: 'Visual Generation',\n    description: 'Creating thumbnail and visual assets',\n    status: 'pending',\n    progress: 0,\n  },\n  {\n    id: 'render',\n    name: 'Video Rendering',\n    description: 'Assembling final video file',\n    status: 'pending',\n    progress: 0,\n  },\n  {\n    id: 'quality',\n    name: 'Quality Check',\n    description: 'Validating content quality and compliance',\n    status: 'pending',\n    progress: 0,\n  },\n  {\n    id: 'upload',\n    name: 'YouTube Upload',\n    description: 'Publishing to YouTube channel',\n    status: 'pending',\n    progress: 0,\n  },\n];\n\nexport const LiveVideoGenerationMonitor: React.FC = () => {\n  const theme = useTheme();\n  const [tasks, setTasks] = useState<VideoGenerationTask[]>([]);\n  const [selectedTask, setSelectedTask] = useState<VideoGenerationTask | null>(null);\n  const [expandedTasks, setExpandedTasks] = useState<string[]>([]);\n  const [detailsDialog, setDetailsDialog] = useState(false);\n  const [systemMetrics, setSystemMetrics] = useState({\n    activeJobs: 3,\n    queuedJobs: 8,\n    completedToday: 45,\n    failedToday: 2,\n    avgProcessingTime: 8.5,\n    totalCostToday: 127.50,\n    gpuUtilization: 75,\n    memoryUsage: 62,\n  });\n  const intervalRef = useRef<NodeJS.Timeout>();\n\n  useEffect(() => {\n    // Initialize with mock data\n    setTasks([\n      {\n        id: '1',\n        title: '10 AI Tools That Will Change Your Life',\n        channelId: 'ch1',\n        channelName: 'Tech Insights',\n        status: 'processing',\n        currentStep: 3,\n        totalSteps: 7,\n        progress: 42,\n        startTime: new Date(Date.now() - 1000 * 60 * 5),\n        estimatedCompletion: addMinutes(new Date(), 3),\n        steps: generationSteps.map((step, index) => ({\n          ...step,\n          status: index < 3 ? 'completed' : index === 3 ? 'processing' : 'pending',\n          progress: index < 3 ? 100 : index === 3 ? 60 : 0,\n        })),\n        metrics: {\n          costSoFar: 0.45,\n          estimatedTotalCost: 1.20,\n          processingTime: 300,\n          gpuUsage: 82,\n          memoryUsage: 4096,\n        },\n      },\n      {\n        id: '2',\n        title: 'Quantum Computing Explained Simply',\n        channelId: 'ch2',\n        channelName: 'Science Daily',\n        status: 'processing',\n        currentStep: 1,\n        totalSteps: 7,\n        progress: 15,\n        startTime: new Date(Date.now() - 1000 * 60 * 2),\n        estimatedCompletion: addMinutes(new Date(), 6),\n        steps: generationSteps.map((step, index) => ({\n          ...step,\n          status: index === 0 ? 'processing' : 'pending',\n          progress: index === 0 ? 75 : 0,\n        })),\n        metrics: {\n          costSoFar: 0.12,\n          estimatedTotalCost: 1.15,\n          processingTime: 120,\n          gpuUsage: 45,\n          memoryUsage: 2048,\n        },\n      },\n      {\n        id: '3',\n        title: 'Top 5 Productivity Apps 2024',\n        channelId: 'ch1',\n        channelName: 'Tech Insights',\n        status: 'queued',\n        currentStep: 0,\n        totalSteps: 7,\n        progress: 0,\n        startTime: new Date(),\n        estimatedCompletion: addMinutes(new Date(), 12),\n        steps: generationSteps.map(step => ({ ...step })),\n        metrics: {\n          costSoFar: 0,\n          estimatedTotalCost: 1.10,\n          processingTime: 0,\n          gpuUsage: 0,\n          memoryUsage: 0,\n        },\n      },\n    ]);\n\n    // Simulate real-time updates\n    intervalRef.current = setInterval(() => {\n      setTasks(prev => prev.map(task => {\n        if (task.status === 'processing') {\n          const newProgress = Math.min(task.progress + Math.random() * 5, 100);\n          const currentStepIndex = task.currentStep - 1;\n          const updatedSteps = [...task.steps];\n          \n          if (currentStepIndex >= 0 && currentStepIndex < updatedSteps.length) {\n            updatedSteps[currentStepIndex].progress = Math.min(\n              updatedSteps[currentStepIndex].progress + Math.random() * 10,\n              100\n            );\n            \n            if (updatedSteps[currentStepIndex].progress >= 100) {\n              updatedSteps[currentStepIndex].status = 'completed';\n              if (currentStepIndex + 1 < updatedSteps.length) {\n                updatedSteps[currentStepIndex + 1].status = 'processing';\n              }\n            }\n          }\n\n          return {\n            ...task,\n            progress: newProgress,\n            currentStep: updatedSteps.filter(s => s.status === 'completed').length + 1,\n            steps: updatedSteps,\n            metrics: {\n              ...task.metrics,\n              costSoFar: task.metrics.costSoFar + Math.random() * 0.01,\n              processingTime: task.metrics.processingTime + 1,\n            },\n            status: newProgress >= 100 ? 'completed' : 'processing',\n          };\n        }\n        return task;\n      }));\n    }, 1000);\n\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, []);\n\n  const handleToggleExpand = (taskId: string) => {\n    setExpandedTasks(prev =>\n      prev.includes(taskId)\n        ? prev.filter(id => id !== taskId)\n        : [...prev, taskId]\n    );\n  };\n\n  const handlePauseTask = (taskId: string) => {\n    setTasks(prev => prev.map(task =>\n      task.id === taskId ? { ...task, status: 'paused' } : task\n    ));\n  };\n\n  const handleResumeTask = (taskId: string) => {\n    setTasks(prev => prev.map(task =>\n      task.id === taskId ? { ...task, status: 'processing' } : task\n    ));\n  };\n\n  const handleCancelTask = (taskId: string) => {\n    setTasks(prev => prev.filter(task => task.id !== taskId));\n  };\n\n  const handleRetryStep = (taskId: string, stepId: string) => {\n    // Retry logic\n    console.log('Retrying step', stepId, 'for task', taskId);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'completed': return 'success';\n      case 'processing': return 'primary';\n      case 'failed': return 'error';\n      case 'paused': return 'warning';\n      case 'queued': return 'default';\n      default: return 'default';\n    }\n  };\n\n  const getStepIcon = (stepId: string) => {\n    switch (stepId) {\n      case 'analyze': return <TrendingUp />;\n      case 'script': return <TextFields />;\n      case 'voice': return <Mic />;\n      case 'visuals': return <Image />;\n      case 'render': return <Movie />;\n      case 'quality': return <CheckCircle />;\n      case 'upload': return <Upload />;\n      default: return <PlayCircle />;\n    }\n  };\n\n  const renderTaskCard = (task: VideoGenerationTask) => {\n    const isExpanded = expandedTasks.includes(task.id);\n\n    return (\n      <Card key={task.id} sx={{ mb: 2 }}>\n        <CardContent>\n          {/* Task Header */}\n          <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n            <Avatar sx={{ bgcolor: 'primary.main', mr: 2 }}>\n              <VideoCall />\n            </Avatar>\n            <Box sx={{ flex: 1 }}>\n              <Typography variant=\"subtitle1\" fontWeight=\"bold\">\n                {task.title}\n              </Typography>\n              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                <Typography variant=\"caption\" color=\"text.secondary\">\n                  {task.channelName}\n                </Typography>\n                <Chip\n                  label={task.status}\n                  size=\"small\"\n                  color={getStatusColor(task.status) as any}\n                />\n                <Typography variant=\"caption\" color=\"text.secondary\">\n                  Started {formatDistanceToNow(task.startTime, { addSuffix: true })}\n                </Typography>\n              </Box>\n            </Box>\n            <Box sx={{ display: 'flex', gap: 1 }}>\n              {task.status === 'processing' && (\n                <IconButton size=\"small\" onClick={() => handlePauseTask(task.id)}>\n                  <Pause />\n                </IconButton>\n              )}\n              {task.status === 'paused' && (\n                <IconButton size=\"small\" onClick={() => handleResumeTask(task.id)}>\n                  <PlayCircle />\n                </IconButton>\n              )}\n              <IconButton size=\"small\" onClick={() => handleCancelTask(task.id)}>\n                <Cancel />\n              </IconButton>\n              <IconButton\n                size=\"small\"\n                onClick={() => handleToggleExpand(task.id)}\n              >\n                {isExpanded ? <ExpandLess /> : <ExpandMore />}\n              </IconButton>\n            </Box>\n          </Box>\n\n          {/* Progress Bar */}\n          <Box sx={{ mb: 2 }}>\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>\n              <Typography variant=\"body2\">\n                Step {task.currentStep} of {task.totalSteps}\n              </Typography>\n              <Typography variant=\"body2\" fontWeight=\"bold\">\n                {task.progress.toFixed(0)}%\n              </Typography>\n            </Box>\n            <LinearProgress\n              variant=\"determinate\"\n              value={task.progress}\n              sx={{ height: 8, borderRadius: 1 }}\n            />\n          </Box>\n\n          {/* Quick Metrics */}\n          <Grid container spacing={2}>\n            <Grid item xs={6} sm={3}>\n              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                <Timer fontSize=\"small\" color=\"action\" />\n                <Box>\n                  <Typography variant=\"caption\" color=\"text.secondary\">\n                    Est. Time\n                  </Typography>\n                  <Typography variant=\"body2\" fontWeight=\"bold\">\n                    {format(task.estimatedCompletion, 'HH:mm')}\n                  </Typography>\n                </Box>\n              </Box>\n            </Grid>\n            <Grid item xs={6} sm={3}>\n              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                <AttachMoney fontSize=\"small\" color=\"action\" />\n                <Box>\n                  <Typography variant=\"caption\" color=\"text.secondary\">\n                    Cost\n                  </Typography>\n                  <Typography variant=\"body2\" fontWeight=\"bold\">\n                    ${task.metrics.costSoFar.toFixed(2)} / ${task.metrics.estimatedTotalCost.toFixed(2)}\n                  </Typography>\n                </Box>\n              </Box>\n            </Grid>\n            <Grid item xs={6} sm={3}>\n              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                <Speed fontSize=\"small\" color=\"action\" />\n                <Box>\n                  <Typography variant=\"caption\" color=\"text.secondary\">\n                    GPU Usage\n                  </Typography>\n                  <Typography variant=\"body2\" fontWeight=\"bold\">\n                    {task.metrics.gpuUsage}%\n                  </Typography>\n                </Box>\n              </Box>\n            </Grid>\n            <Grid item xs={6} sm={3}>\n              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                <Memory fontSize=\"small\" color=\"action\" />\n                <Box>\n                  <Typography variant=\"caption\" color=\"text.secondary\">\n                    Memory\n                  </Typography>\n                  <Typography variant=\"body2\" fontWeight=\"bold\">\n                    {(task.metrics.memoryUsage / 1024).toFixed(1)} GB\n                  </Typography>\n                </Box>\n              </Box>\n            </Grid>\n          </Grid>\n\n          {/* Detailed Steps */}\n          <Collapse in={isExpanded}>\n            <Divider sx={{ my: 2 }} />\n            <Typography variant=\"subtitle2\" fontWeight=\"bold\" gutterBottom>\n              Generation Pipeline\n            </Typography>\n            <Stepper activeStep={task.currentStep - 1} orientation=\"vertical\">\n              {task.steps.map((step, index) => (\n                <Step key={step.id} completed={step.status === 'completed'}>\n                  <StepLabel\n                    error={step.status === 'failed'}\n                    icon={getStepIcon(step.id)}\n                  >\n                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                      {step.name}\n                      {step.status === 'processing' && (\n                        <CircularProgress size={16} />\n                      )}\n                      {step.status === 'completed' && (\n                        <CheckCircle fontSize=\"small\" color=\"success\" />\n                      )}\n                      {step.status === 'failed' && (\n                        <Error fontSize=\"small\" color=\"error\" />\n                      )}\n                    </Box>\n                  </StepLabel>\n                  <StepContent>\n                    <Typography variant=\"caption\" color=\"text.secondary\">\n                      {step.description}\n                    </Typography>\n                    {step.status === 'processing' && (\n                      <Box sx={{ mt: 1 }}>\n                        <LinearProgress\n                          variant=\"determinate\"\n                          value={step.progress}\n                          sx={{ height: 4 }}\n                        />\n                      </Box>\n                    )}\n                    {step.error && (\n                      <Alert severity=\"error\" sx={{ mt: 1 }}>\n                        {step.error}\n                        <Button\n                          size=\"small\"\n                          onClick={() => handleRetryStep(task.id, step.id)}\n                          sx={{ ml: 1 }}\n                        >\n                          Retry\n                        </Button>\n                      </Alert>\n                    )}\n                  </StepContent>\n                </Step>\n              ))}\n            </Stepper>\n          </Collapse>\n        </CardContent>\n      </Card>\n    );\n  };\n\n  return (\n    <Box>\n      {/* System Metrics */}\n      <Grid container spacing={2} sx={{ mb: 3 }}>\n        <Grid item xs={6} sm={3}>\n          <Paper sx={{ p: 2, textAlign: 'center' }}>\n            <Typography variant=\"h4\" fontWeight=\"bold\" color=\"primary\">\n              {systemMetrics.activeJobs}\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              Active Jobs\n            </Typography>\n          </Paper>\n        </Grid>\n        <Grid item xs={6} sm={3}>\n          <Paper sx={{ p: 2, textAlign: 'center' }}>\n            <Typography variant=\"h4\" fontWeight=\"bold\" color=\"warning.main\">\n              {systemMetrics.queuedJobs}\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              Queued\n            </Typography>\n          </Paper>\n        </Grid>\n        <Grid item xs={6} sm={3}>\n          <Paper sx={{ p: 2, textAlign: 'center' }}>\n            <Typography variant=\"h4\" fontWeight=\"bold\" color=\"success.main\">\n              {systemMetrics.completedToday}\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              Completed Today\n            </Typography>\n          </Paper>\n        </Grid>\n        <Grid item xs={6} sm={3}>\n          <Paper sx={{ p: 2, textAlign: 'center' }}>\n            <Typography variant=\"h4\" fontWeight=\"bold\">\n              ${systemMetrics.totalCostToday.toFixed(2)}\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              Total Cost Today\n            </Typography>\n          </Paper>\n        </Grid>\n      </Grid>\n\n      {/* Resource Usage */}\n      <Card sx={{ mb: 3 }}>\n        <CardContent>\n          <Typography variant=\"h6\" fontWeight=\"bold\" gutterBottom>\n            System Resources\n          </Typography>\n          <Grid container spacing={2}>\n            <Grid item xs={12} sm={6}>\n              <Box sx={{ mb: 1 }}>\n                <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 0.5 }}>\n                  <Typography variant=\"body2\">GPU Utilization</Typography>\n                  <Typography variant=\"body2\" fontWeight=\"bold\">\n                    {systemMetrics.gpuUtilization}%\n                  </Typography>\n                </Box>\n                <LinearProgress\n                  variant=\"determinate\"\n                  value={systemMetrics.gpuUtilization}\n                  color={systemMetrics.gpuUtilization > 80 ? 'warning' : 'primary'}\n                />\n              </Box>\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <Box sx={{ mb: 1 }}>\n                <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 0.5 }}>\n                  <Typography variant=\"body2\">Memory Usage</Typography>\n                  <Typography variant=\"body2\" fontWeight=\"bold\">\n                    {systemMetrics.memoryUsage}%\n                  </Typography>\n                </Box>\n                <LinearProgress\n                  variant=\"determinate\"\n                  value={systemMetrics.memoryUsage}\n                  color={systemMetrics.memoryUsage > 80 ? 'warning' : 'primary'}\n                />\n              </Box>\n            </Grid>\n          </Grid>\n        </CardContent>\n      </Card>\n\n      {/* Active Tasks */}\n      <Typography variant=\"h6\" fontWeight=\"bold\" gutterBottom>\n        Video Generation Pipeline\n      </Typography>\n      {tasks.map(renderTaskCard)}\n    </Box>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Monitoring\\SystemHealthMonitors.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CircularProgress' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'IconButton' is defined but never used.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ListItemSecondaryAction' is defined but never used.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Table' is defined but never used.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TableBody' is defined but never used.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TableCell' is defined but never used.","line":22,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TableContainer' is defined but never used.","line":23,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TableHead' is defined but never used.","line":24,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TableRow' is defined but never used.","line":25,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Tooltip' is defined but never used.","line":26,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Divider' is defined but never used.","line":30,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Security' is defined but never used.","line":41,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Router' is defined but never used.","line":45,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":45,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Dns' is defined but never used.","line":46,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Settings' is defined but never used.","line":49,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":49,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Timeline' is defined but never used.","line":50,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":50,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FiberManualRecord' is defined but never used.","line":51,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":51,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SignalWifi4Bar' is defined but never used.","line":52,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":52,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SignalWifi2Bar' is defined but never used.","line":53,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":53,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SignalWifiOff' is defined but never used.","line":54,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":54,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TrendingUp' is defined but never used.","line":55,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":55,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TrendingDown' is defined but never used.","line":56,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":56,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Schedule' is defined but never used.","line":57,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":57,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'BugReport' is defined but never used.","line":58,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":58,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AreaChart' is defined but never used.","line":65,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":65,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Area' is defined but never used.","line":66,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":66,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setRefreshInterval' is assigned a value but never used.","line":116,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":116,"endColumn":45},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":534,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":534,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16120,16123],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16120,16123],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":587,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":587,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18381,18384],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18381,18384],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":29,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef } from 'react';\nimport {\n  Box,\n  Grid,\n  Card,\n  CardContent,\n  Typography,\n  LinearProgress,\n  CircularProgress,\n  Chip,\n  Alert,\n  Button,\n  IconButton,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  ListItemSecondaryAction,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Tooltip,\n  Badge,\n  Avatar,\n  useTheme,\n  Divider,\n} from '@mui/material';\nimport {\n  CheckCircle,\n  Error,\n  Warning,\n  Info,\n  Speed,\n  Memory,\n  Storage,\n  CloudQueue,\n  Security,\n  Api,\n  Database,\n  NetworkCheck,\n  Router,\n  Dns,\n  VpnKey,\n  Refresh,\n  Settings,\n  Timeline,\n  FiberManualRecord,\n  SignalWifi4Bar,\n  SignalWifi2Bar,\n  SignalWifiOff,\n  TrendingUp,\n  TrendingDown,\n  Schedule,\n  BugReport,\n  Build,\n} from '@mui/icons-material';\nimport {\n  ResponsiveContainer,\n  LineChart,\n  Line,\n  AreaChart,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip as RechartsTooltip,\n} from 'recharts';\nimport { format, subMinutes } from 'date-fns';\n\ninterface Service {\n  id: string;\n  name: string;\n  category: string;\n  status: 'operational' | 'degraded' | 'outage' | 'maintenance';\n  uptime: number;\n  responseTime: number;\n  lastChecked: Date;\n  icon: React.ReactNode;\n  endpoint?: string;\n  errorRate?: number;\n  dependencies?: string[];\n}\n\ninterface SystemMetric {\n  timestamp: Date;\n  cpu: number;\n  memory: number;\n  disk: number;\n  network: number;\n  requests: number;\n  errors: number;\n}\n\ninterface Incident {\n  id: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  service: string;\n  title: string;\n  description: string;\n  startTime: Date;\n  endTime?: Date;\n  status: 'investigating' | 'identified' | 'monitoring' | 'resolved';\n  impact: string;\n}\n\nexport const SystemHealthMonitors: React.FC = () => {\n  const theme = useTheme();\n  const [services, setServices] = useState<Service[]>([]);\n  const [systemMetrics, setSystemMetrics] = useState<SystemMetric[]>([]);\n  const [incidents, setIncidents] = useState<Incident[]>([]);\n  const [autoRefresh, setAutoRefresh] = useState(true);\n  const [refreshInterval, setRefreshInterval] = useState(30);\n  const intervalRef = useRef<NodeJS.Timeout>();\n\n  useEffect(() => {\n    // Initialize services\n    setServices([\n      {\n        id: 'api',\n        name: 'API Gateway',\n        category: 'Core',\n        status: 'operational',\n        uptime: 99.99,\n        responseTime: 125,\n        lastChecked: new Date(),\n        icon: <Api />,\n        endpoint: 'https://api.ytempire.com',\n        errorRate: 0.01,\n      },\n      {\n        id: 'database',\n        name: 'PostgreSQL',\n        category: 'Database',\n        status: 'operational',\n        uptime: 99.95,\n        responseTime: 15,\n        lastChecked: new Date(),\n        icon: <Database />,\n        errorRate: 0.02,\n      },\n      {\n        id: 'redis',\n        name: 'Redis Cache',\n        category: 'Cache',\n        status: 'operational',\n        uptime: 99.98,\n        responseTime: 2,\n        lastChecked: new Date(),\n        icon: <Memory />,\n        errorRate: 0.001,\n      },\n      {\n        id: 'celery',\n        name: 'Celery Workers',\n        category: 'Queue',\n        status: 'operational',\n        uptime: 99.90,\n        responseTime: 500,\n        lastChecked: new Date(),\n        icon: <CloudQueue />,\n        errorRate: 0.05,\n      },\n      {\n        id: 'openai',\n        name: 'OpenAI API',\n        category: 'External',\n        status: 'operational',\n        uptime: 99.5,\n        responseTime: 1200,\n        lastChecked: new Date(),\n        icon: <Memory />,\n        errorRate: 0.1,\n      },\n      {\n        id: 'elevenlabs',\n        name: 'ElevenLabs API',\n        category: 'External',\n        status: 'degraded',\n        uptime: 98.5,\n        responseTime: 2500,\n        lastChecked: new Date(),\n        icon: <CloudQueue />,\n        errorRate: 0.8,\n      },\n      {\n        id: 'youtube',\n        name: 'YouTube API',\n        category: 'External',\n        status: 'operational',\n        uptime: 99.9,\n        responseTime: 450,\n        lastChecked: new Date(),\n        icon: <Api />,\n        errorRate: 0.02,\n      },\n      {\n        id: 'storage',\n        name: 'S3 Storage',\n        category: 'Storage',\n        status: 'operational',\n        uptime: 99.999,\n        responseTime: 200,\n        lastChecked: new Date(),\n        icon: <Storage />,\n        errorRate: 0.001,\n      },\n      {\n        id: 'cdn',\n        name: 'CloudFront CDN',\n        category: 'Network',\n        status: 'operational',\n        uptime: 99.99,\n        responseTime: 50,\n        lastChecked: new Date(),\n        icon: <NetworkCheck />,\n        errorRate: 0.001,\n      },\n      {\n        id: 'auth',\n        name: 'Authentication',\n        category: 'Security',\n        status: 'operational',\n        uptime: 99.99,\n        responseTime: 100,\n        lastChecked: new Date(),\n        icon: <VpnKey />,\n        errorRate: 0.01,\n      },\n    ]);\n\n    // Initialize system metrics\n    const initialMetrics = Array.from({ length: 60 }, (_, i) => ({\n      timestamp: subMinutes(new Date(), 59 - i),\n      cpu: 40 + Math.random() * 30,\n      memory: 50 + Math.random() * 20,\n      disk: 60 + Math.random() * 10,\n      network: 30 + Math.random() * 40,\n      requests: Math.floor(100 + Math.random() * 50),\n      errors: Math.floor(Math.random() * 5),\n    }));\n    setSystemMetrics(initialMetrics);\n\n    // Initialize incidents\n    setIncidents([\n      {\n        id: '1',\n        severity: 'medium',\n        service: 'ElevenLabs API',\n        title: 'Increased Response Times',\n        description: 'ElevenLabs API experiencing higher than normal response times',\n        startTime: new Date(Date.now() - 1000 * 60 * 30),\n        status: 'monitoring',\n        impact: 'Voice synthesis may take longer than usual',\n      },\n      {\n        id: '2',\n        severity: 'low',\n        service: 'Celery Workers',\n        title: 'Scheduled Maintenance',\n        description: 'Routine maintenance window for worker updates',\n        startTime: new Date(Date.now() + 1000 * 60 * 60 * 2),\n        status: 'identified',\n        impact: 'Video processing capacity reduced by 20% during maintenance',\n      },\n    ]);\n  }, []);\n\n  useEffect(() => {\n    if (autoRefresh) {\n      intervalRef.current = setInterval(() => {\n        // Update services with random changes\n        setServices(prev => prev.map(service => ({\n          ...service,\n          responseTime: Math.max(1, service.responseTime + (Math.random() - 0.5) * 20),\n          lastChecked: new Date(),\n          errorRate: Math.max(0, (service.errorRate || 0) + (Math.random() - 0.5) * 0.01),\n        })));\n\n        // Add new metric point\n        setSystemMetrics(prev => {\n          const newMetric = {\n            timestamp: new Date(),\n            cpu: 40 + Math.random() * 30,\n            memory: 50 + Math.random() * 20,\n            disk: 60 + Math.random() * 10,\n            network: 30 + Math.random() * 40,\n            requests: Math.floor(100 + Math.random() * 50),\n            errors: Math.floor(Math.random() * 5),\n          };\n          return [...prev.slice(1), newMetric];\n        });\n      }, refreshInterval * 1000);\n    }\n\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, [autoRefresh, refreshInterval]);\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'operational': return 'success';\n      case 'degraded': return 'warning';\n      case 'outage': return 'error';\n      case 'maintenance': return 'info';\n      default: return 'default';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'operational': return <CheckCircle color=\"success\" />;\n      case 'degraded': return <Warning color=\"warning\" />;\n      case 'outage': return <Error color=\"error\" />;\n      case 'maintenance': return <Build color=\"info\" />;\n      default: return <Info />;\n    }\n  };\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case 'critical': return 'error';\n      case 'high': return 'error';\n      case 'medium': return 'warning';\n      case 'low': return 'info';\n      default: return 'default';\n    }\n  };\n\n  const getUptimeColor = (uptime: number) => {\n    if (uptime >= 99.9) return theme.palette.success.main;\n    if (uptime >= 99) return theme.palette.warning.main;\n    return theme.palette.error.main;\n  };\n\n  const operationalCount = services.filter(s => s.status === 'operational').length;\n  const overallStatus = services.every(s => s.status === 'operational')\n    ? 'operational'\n    : services.some(s => s.status === 'outage')\n    ? 'partial outage'\n    : 'degraded';\n\n  const latestMetric = systemMetrics[systemMetrics.length - 1] || {\n    cpu: 0,\n    memory: 0,\n    disk: 0,\n    network: 0,\n    requests: 0,\n    errors: 0,\n  };\n\n  return (\n    <Box>\n      {/* Overall Status */}\n      <Card sx={{ mb: 3 }}>\n        <CardContent>\n          <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\n              {overallStatus === 'operational' ? (\n                <CheckCircle color=\"success\" sx={{ fontSize: 48 }} />\n              ) : overallStatus === 'partial outage' ? (\n                <Error color=\"error\" sx={{ fontSize: 48 }} />\n              ) : (\n                <Warning color=\"warning\" sx={{ fontSize: 48 }} />\n              )}\n              <Box>\n                <Typography variant=\"h5\" fontWeight=\"bold\">\n                  System Status: {overallStatus === 'operational' ? 'All Systems Operational' : overallStatus === 'degraded' ? 'Degraded Performance' : 'Partial Outage'}\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  {operationalCount} of {services.length} services operational\n                </Typography>\n              </Box>\n            </Box>\n            <Box sx={{ display: 'flex', gap: 1 }}>\n              <FormControlLabel\n                control={\n                  <Switch\n                    checked={autoRefresh}\n                    onChange={(e) => setAutoRefresh(e.target.checked)}\n                  />\n                }\n                label={`Auto-refresh (${refreshInterval}s)`}\n              />\n              <Button variant=\"outlined\" startIcon={<Refresh />}>\n                Refresh Now\n              </Button>\n            </Box>\n          </Box>\n        </CardContent>\n      </Card>\n\n      {/* System Metrics */}\n      <Grid container spacing={3} sx={{ mb: 3 }}>\n        <Grid item xs={6} sm={3}>\n          <Paper sx={{ p: 2 }}>\n            <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\n              <Speed fontSize=\"small\" sx={{ mr: 1 }} />\n              <Typography variant=\"subtitle2\">CPU Usage</Typography>\n            </Box>\n            <Typography variant=\"h4\" fontWeight=\"bold\">\n              {latestMetric.cpu.toFixed(1)}%\n            </Typography>\n            <LinearProgress\n              variant=\"determinate\"\n              value={latestMetric.cpu}\n              color={latestMetric.cpu > 80 ? 'error' : latestMetric.cpu > 60 ? 'warning' : 'primary'}\n            />\n          </Paper>\n        </Grid>\n\n        <Grid item xs={6} sm={3}>\n          <Paper sx={{ p: 2 }}>\n            <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\n              <Memory fontSize=\"small\" sx={{ mr: 1 }} />\n              <Typography variant=\"subtitle2\">Memory</Typography>\n            </Box>\n            <Typography variant=\"h4\" fontWeight=\"bold\">\n              {latestMetric.memory.toFixed(1)}%\n            </Typography>\n            <LinearProgress\n              variant=\"determinate\"\n              value={latestMetric.memory}\n              color={latestMetric.memory > 80 ? 'error' : latestMetric.memory > 60 ? 'warning' : 'primary'}\n            />\n          </Paper>\n        </Grid>\n\n        <Grid item xs={6} sm={3}>\n          <Paper sx={{ p: 2 }}>\n            <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\n              <Storage fontSize=\"small\" sx={{ mr: 1 }} />\n              <Typography variant=\"subtitle2\">Disk Usage</Typography>\n            </Box>\n            <Typography variant=\"h4\" fontWeight=\"bold\">\n              {latestMetric.disk.toFixed(1)}%\n            </Typography>\n            <LinearProgress\n              variant=\"determinate\"\n              value={latestMetric.disk}\n              color={latestMetric.disk > 80 ? 'error' : latestMetric.disk > 60 ? 'warning' : 'primary'}\n            />\n          </Paper>\n        </Grid>\n\n        <Grid item xs={6} sm={3}>\n          <Paper sx={{ p: 2 }}>\n            <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\n              <NetworkCheck fontSize=\"small\" sx={{ mr: 1 }} />\n              <Typography variant=\"subtitle2\">Network I/O</Typography>\n            </Box>\n            <Typography variant=\"h4\" fontWeight=\"bold\">\n              {latestMetric.network.toFixed(1)} Mbps\n            </Typography>\n            <LinearProgress\n              variant=\"determinate\"\n              value={Math.min(100, latestMetric.network)}\n              color=\"primary\"\n            />\n          </Paper>\n        </Grid>\n      </Grid>\n\n      {/* Services Status Grid */}\n      <Typography variant=\"h6\" fontWeight=\"bold\" gutterBottom>\n        Service Status\n      </Typography>\n      <Grid container spacing={2} sx={{ mb: 3 }}>\n        {services.map(service => (\n          <Grid item xs={12} sm={6} md={4} key={service.id}>\n            <Card>\n              <CardContent>\n                <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n                  <Avatar sx={{ bgcolor: 'action.selected', mr: 2 }}>\n                    {service.icon}\n                  </Avatar>\n                  <Box sx={{ flex: 1 }}>\n                    <Typography variant=\"subtitle1\" fontWeight=\"medium\">\n                      {service.name}\n                    </Typography>\n                    <Typography variant=\"caption\" color=\"text.secondary\">\n                      {service.category}\n                    </Typography>\n                  </Box>\n                  {getStatusIcon(service.status)}\n                </Box>\n\n                <Grid container spacing={1}>\n                  <Grid item xs={6}>\n                    <Typography variant=\"caption\" color=\"text.secondary\">\n                      Uptime\n                    </Typography>\n                    <Typography variant=\"body2\" fontWeight=\"bold\" color={getUptimeColor(service.uptime)}>\n                      {service.uptime.toFixed(2)}%\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Typography variant=\"caption\" color=\"text.secondary\">\n                      Response Time\n                    </Typography>\n                    <Typography variant=\"body2\" fontWeight=\"bold\">\n                      {service.responseTime}ms\n                    </Typography>\n                  </Grid>\n                  {service.errorRate !== undefined && (\n                    <>\n                      <Grid item xs={6}>\n                        <Typography variant=\"caption\" color=\"text.secondary\">\n                          Error Rate\n                        </Typography>\n                        <Typography variant=\"body2\" fontWeight=\"bold\" color={service.errorRate > 0.5 ? 'error' : 'inherit'}>\n                          {service.errorRate.toFixed(2)}%\n                        </Typography>\n                      </Grid>\n                      <Grid item xs={6}>\n                        <Typography variant=\"caption\" color=\"text.secondary\">\n                          Last Check\n                        </Typography>\n                        <Typography variant=\"body2\">\n                          {format(service.lastChecked, 'HH:mm:ss')}\n                        </Typography>\n                      </Grid>\n                    </>\n                  )}\n                </Grid>\n\n                {service.status !== 'operational' && (\n                  <Alert severity={getStatusColor(service.status) as any} sx={{ mt: 2 }}>\n                    <Typography variant=\"caption\">\n                      {service.status === 'degraded' ? 'Service experiencing degraded performance' :\n                       service.status === 'outage' ? 'Service is currently unavailable' :\n                       'Service under maintenance'}\n                    </Typography>\n                  </Alert>\n                )}\n              </CardContent>\n            </Card>\n          </Grid>\n        ))}\n      </Grid>\n\n      {/* System Metrics Chart */}\n      <Card sx={{ mb: 3 }}>\n        <CardContent>\n          <Typography variant=\"h6\" fontWeight=\"bold\" gutterBottom>\n            System Performance (Last 60 Minutes)\n          </Typography>\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <LineChart data={systemMetrics}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis\n                dataKey=\"timestamp\"\n                tickFormatter={(timestamp) => format(timestamp, 'HH:mm')}\n              />\n              <YAxis />\n              <RechartsTooltip\n                labelFormatter={(timestamp) => format(timestamp, 'HH:mm:ss')}\n              />\n              <Line type=\"monotone\" dataKey=\"cpu\" stroke={theme.palette.primary.main} name=\"CPU %\" dot={false} />\n              <Line type=\"monotone\" dataKey=\"memory\" stroke={theme.palette.secondary.main} name=\"Memory %\" dot={false} />\n              <Line type=\"monotone\" dataKey=\"disk\" stroke={theme.palette.success.main} name=\"Disk %\" dot={false} />\n              <Line type=\"monotone\" dataKey=\"network\" stroke={theme.palette.warning.main} name=\"Network Mbps\" dot={false} />\n            </LineChart>\n          </ResponsiveContainer>\n        </CardContent>\n      </Card>\n\n      {/* Active Incidents */}\n      {incidents.length > 0 && (\n        <Card>\n          <CardContent>\n            <Typography variant=\"h6\" fontWeight=\"bold\" gutterBottom>\n              Active Incidents\n            </Typography>\n            <List>\n              {incidents.map(incident => (\n                <ListItem key={incident.id}>\n                  <ListItemIcon>\n                    <Badge\n                      badgeContent={incident.severity}\n                      color={getSeverityColor(incident.severity) as any}\n                    >\n                      <Warning />\n                    </Badge>\n                  </ListItemIcon>\n                  <ListItemText\n                    primary={\n                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                        <Typography variant=\"subtitle1\" fontWeight=\"medium\">\n                          {incident.title}\n                        </Typography>\n                        <Chip\n                          label={incident.status}\n                          size=\"small\"\n                          color={incident.status === 'resolved' ? 'success' : 'warning'}\n                        />\n                      </Box>\n                    }\n                    secondary={\n                      <Box>\n                        <Typography variant=\"body2\" color=\"text.secondary\">\n                          Service: {incident.service} • {incident.description}\n                        </Typography>\n                        <Typography variant=\"caption\" color=\"warning.main\">\n                          Impact: {incident.impact}\n                        </Typography>\n                        <Typography variant=\"caption\" display=\"block\" color=\"text.secondary\">\n                          Started: {format(incident.startTime, 'PPp')}\n                        </Typography>\n                      </Box>\n                    }\n                  />\n                </ListItem>\n              ))}\n            </List>\n          </CardContent>\n        </Card>\n      )}\n    </Box>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Navigation\\EnhancedNavigation.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Tooltip' is defined but never used.","line":28,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isTablet' is assigned a value but never used.","line":77,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":77,"endColumn":17}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  AppBar,\n  Toolbar,\n  IconButton,\n  Typography,\n  Drawer,\n  List,\n  ListItem,\n  ListItemButton,\n  ListItemIcon,\n  ListItemText,\n  Divider,\n  Badge,\n  Avatar,\n  Collapse,\n  Chip,\n  InputBase,\n  Paper,\n  useMediaQuery,\n  useTheme,\n  SwipeableDrawer,\n  BottomNavigation,\n  BottomNavigationAction,\n  Fab,\n  Zoom,\n  Tooltip,\n  Menu,\n  MenuItem,\n  alpha,\n} from '@mui/material';\nimport {\n  Menu as MenuIcon,\n  Search as SearchIcon,\n  Close as CloseIcon,\n  Dashboard,\n  VideoLibrary,\n  Analytics,\n  YouTube,\n  AttachMoney,\n  Settings,\n  Notifications,\n  ExpandLess,\n  ExpandMore,\n  Add,\n  Person,\n  ChevronLeft,\n  KeyboardArrowDown,\n  Home,\n  TrendingUp,\n  CloudQueue,\n  Schedule,\n  PlayCircle,\n  BarChart,\n  Help,\n  Feedback,\n  Logout,\n} from '@mui/icons-material';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { HelpTooltip } from '../Common/HelpTooltip';\n\ninterface NavigationItem {\n  id: string;\n  label: string;\n  icon: React.ReactNode;\n  path?: string;\n  children?: NavigationItem[];\n  badge?: string | number;\n  helpText?: string;\n  quickAction?: () => void;\n}\n\nexport const EnhancedNavigation: React.FC = () => {\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('md'));\n  const isTablet = useMediaQuery(theme.breakpoints.between('sm', 'md'));\n  const navigate = useNavigate();\n  const location = useLocation();\n  \n  const [mobileOpen, setMobileOpen] = useState(false);\n  const [searchOpen, setSearchOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [expandedItems, setExpandedItems] = useState<string[]>([]);\n  const [bottomNavValue, setBottomNavValue] = useState(0);\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n  const [showFab, setShowFab] = useState(true);\n  const [lastScrollY, setLastScrollY] = useState(0);\n\n  // Navigation items with help text\n  const navigationItems: NavigationItem[] = [\n    {\n      id: 'dashboard',\n      label: 'Dashboard',\n      icon: <Dashboard />,\n      path: '/dashboard',\n      helpText: 'View your overall performance metrics and activity',\n    },\n    {\n      id: 'videos',\n      label: 'Videos',\n      icon: <VideoLibrary />,\n      badge: '3',\n      helpText: 'Manage your video creation and publishing',\n      children: [\n        {\n          id: 'create',\n          label: 'Create New',\n          icon: <Add />,\n          path: '/videos/create',\n          helpText: 'Start creating a new video with AI assistance',\n        },\n        {\n          id: 'library',\n          label: 'Video Library',\n          icon: <PlayCircle />,\n          path: '/videos/library',\n          helpText: 'Browse all your created videos',\n        },\n        {\n          id: 'scheduled',\n          label: 'Scheduled',\n          icon: <Schedule />,\n          path: '/videos/scheduled',\n          badge: '5',\n          helpText: 'View and manage scheduled uploads',\n        },\n        {\n          id: 'processing',\n          label: 'Processing',\n          icon: <CloudQueue />,\n          path: '/videos/processing',\n          badge: '2',\n          helpText: 'Track videos currently being generated',\n        },\n      ],\n    },\n    {\n      id: 'channels',\n      label: 'Channels',\n      icon: <YouTube />,\n      path: '/channels',\n      helpText: 'Manage your YouTube channels',\n    },\n    {\n      id: 'analytics',\n      label: 'Analytics',\n      icon: <Analytics />,\n      path: '/analytics',\n      helpText: 'Deep dive into your performance data',\n      children: [\n        {\n          id: 'overview',\n          label: 'Overview',\n          icon: <BarChart />,\n          path: '/analytics/overview',\n        },\n        {\n          id: 'trends',\n          label: 'Trends',\n          icon: <TrendingUp />,\n          path: '/analytics/trends',\n        },\n      ],\n    },\n    {\n      id: 'monetization',\n      label: 'Monetization',\n      icon: <AttachMoney />,\n      path: '/monetization',\n      helpText: 'Track revenue and manage billing',\n    },\n  ];\n\n  // Handle scroll for FAB visibility\n  useEffect(() => {\n    const handleScroll = () => {\n      const currentScrollY = window.scrollY;\n      setShowFab(currentScrollY < lastScrollY || currentScrollY < 100);\n      setLastScrollY(currentScrollY);\n    };\n\n    if (isMobile) {\n      window.addEventListener('scroll', handleScroll, { passive: true });\n      return () => window.removeEventListener('scroll', handleScroll);\n    }\n  }, [lastScrollY, isMobile]);\n\n  const handleDrawerToggle = () => {\n    setMobileOpen(!mobileOpen);\n  };\n\n  const handleSearchToggle = () => {\n    setSearchOpen(!searchOpen);\n    if (!searchOpen) {\n      setTimeout(() => {\n        document.getElementById('search-input')?.focus();\n      }, 100);\n    }\n  };\n\n  const handleExpandClick = (itemId: string) => {\n    setExpandedItems(prev =>\n      prev.includes(itemId)\n        ? prev.filter(id => id !== itemId)\n        : [...prev, itemId]\n    );\n  };\n\n  const handleQuickAction = (event: React.MouseEvent<HTMLElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleQuickActionClose = () => {\n    setAnchorEl(null);\n  };\n\n  const isActive = (path?: string) => {\n    return path === location.pathname;\n  };\n\n  const renderNavigationItem = (item: NavigationItem, depth = 0) => {\n    const hasChildren = item.children && item.children.length > 0;\n    const isExpanded = expandedItems.includes(item.id);\n    const active = isActive(item.path);\n\n    return (\n      <React.Fragment key={item.id}>\n        <ListItem disablePadding sx={{ display: 'block' }}>\n          <ListItemButton\n            onClick={() => {\n              if (item.path) {\n                navigate(item.path);\n                if (isMobile) setMobileOpen(false);\n              } else if (hasChildren) {\n                handleExpandClick(item.id);\n              }\n            }}\n            sx={{\n              minHeight: 48,\n              px: depth > 0 ? 4 : 2.5,\n              backgroundColor: active ? alpha(theme.palette.primary.main, 0.08) : 'transparent',\n              borderLeft: active ? `3px solid ${theme.palette.primary.main}` : '3px solid transparent',\n              '&:hover': {\n                backgroundColor: alpha(theme.palette.primary.main, 0.04),\n              },\n            }}\n          >\n            <ListItemIcon\n              sx={{\n                minWidth: 40,\n                color: active ? 'primary.main' : 'text.secondary',\n              }}\n            >\n              {item.icon}\n            </ListItemIcon>\n            <ListItemText\n              primary={\n                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                  <Typography variant=\"body2\" fontWeight={active ? 600 : 400}>\n                    {item.label}\n                  </Typography>\n                  {item.badge && (\n                    <Chip\n                      label={item.badge}\n                      size=\"small\"\n                      color={active ? 'primary' : 'default'}\n                      sx={{ height: 20, fontSize: 11 }}\n                    />\n                  )}\n                  {item.helpText && !isMobile && (\n                    <HelpTooltip\n                      title={item.helpText}\n                      size=\"small\"\n                    />\n                  )}\n                </Box>\n              }\n            />\n            {hasChildren && (\n              <IconButton size=\"small\" edge=\"end\">\n                {isExpanded ? <ExpandLess /> : <ExpandMore />}\n              </IconButton>\n            )}\n          </ListItemButton>\n        </ListItem>\n        {hasChildren && (\n          <Collapse in={isExpanded} timeout=\"auto\" unmountOnExit>\n            <List component=\"div\" disablePadding>\n              {item.children!.map(child => renderNavigationItem(child, depth + 1))}\n            </List>\n          </Collapse>\n        )}\n      </React.Fragment>\n    );\n  };\n\n  const drawer = (\n    <Box sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}>\n      {/* Drawer Header */}\n      <Box sx={{ p: 2, display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n        <Typography variant=\"h6\" fontWeight=\"bold\" color=\"primary\">\n          YTEmpire\n        </Typography>\n        {isMobile && (\n          <IconButton onClick={handleDrawerToggle}>\n            <ChevronLeft />\n          </IconButton>\n        )}\n      </Box>\n      \n      <Divider />\n      \n      {/* User Section */}\n      <Box sx={{ p: 2 }}>\n        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1.5 }}>\n          <Avatar sx={{ width: 40, height: 40 }}>U</Avatar>\n          <Box sx={{ flex: 1 }}>\n            <Typography variant=\"subtitle2\" fontWeight=\"medium\">\n              User Name\n            </Typography>\n            <Chip label=\"Pro\" size=\"small\" color=\"primary\" sx={{ height: 18 }} />\n          </Box>\n          <IconButton size=\"small\">\n            <KeyboardArrowDown />\n          </IconButton>\n        </Box>\n      </Box>\n      \n      <Divider />\n      \n      {/* Navigation List */}\n      <List sx={{ flex: 1, overflow: 'auto', py: 0 }}>\n        {navigationItems.map(item => renderNavigationItem(item))}\n      </List>\n      \n      <Divider />\n      \n      {/* Bottom Actions */}\n      <List>\n        <ListItemButton onClick={() => navigate('/help')}>\n          <ListItemIcon>\n            <Help />\n          </ListItemIcon>\n          <ListItemText primary=\"Help & Support\" />\n        </ListItemButton>\n        <ListItemButton onClick={() => navigate('/settings')}>\n          <ListItemIcon>\n            <Settings />\n          </ListItemIcon>\n          <ListItemText primary=\"Settings\" />\n        </ListItemButton>\n      </List>\n    </Box>\n  );\n\n  return (\n    <>\n      {/* Top App Bar */}\n      <AppBar\n        position=\"fixed\"\n        elevation={0}\n        sx={{\n          backgroundColor: 'background.paper',\n          borderBottom: 1,\n          borderColor: 'divider',\n          backdropFilter: 'blur(10px)',\n        }}\n      >\n        <Toolbar>\n          {isMobile && (\n            <IconButton\n              edge=\"start\"\n              onClick={handleDrawerToggle}\n              sx={{ mr: 2 }}\n            >\n              <MenuIcon />\n            </IconButton>\n          )}\n          \n          {!searchOpen ? (\n            <>\n              <Typography variant=\"h6\" sx={{ flexGrow: 1, fontWeight: 'bold' }}>\n                {isMobile ? 'YTE' : 'YTEmpire'}\n              </Typography>\n              \n              {/* Search */}\n              <IconButton onClick={handleSearchToggle}>\n                <SearchIcon />\n              </IconButton>\n              \n              {/* Notifications */}\n              <IconButton>\n                <Badge badgeContent={4} color=\"error\">\n                  <Notifications />\n                </Badge>\n              </IconButton>\n              \n              {/* Profile */}\n              {!isMobile && (\n                <IconButton onClick={handleQuickAction}>\n                  <Avatar sx={{ width: 32, height: 32 }}>U</Avatar>\n                </IconButton>\n              )}\n            </>\n          ) : (\n            <Paper\n              sx={{\n                display: 'flex',\n                alignItems: 'center',\n                width: '100%',\n                px: 2,\n                py: 0.5,\n                backgroundColor: 'background.default',\n              }}\n              elevation={0}\n            >\n              <SearchIcon sx={{ color: 'text.secondary', mr: 1 }} />\n              <InputBase\n                id=\"search-input\"\n                placeholder=\"Search videos, channels, analytics...\"\n                fullWidth\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                onKeyPress={(e) => {\n                  if (e.key === 'Enter') {\n                    // Handle search\n                    setSearchOpen(false);\n                  }\n                }}\n              />\n              <IconButton onClick={handleSearchToggle}>\n                <CloseIcon />\n              </IconButton>\n            </Paper>\n          )}\n        </Toolbar>\n      </AppBar>\n      \n      {/* Side Drawer */}\n      {isMobile ? (\n        <SwipeableDrawer\n          anchor=\"left\"\n          open={mobileOpen}\n          onClose={() => setMobileOpen(false)}\n          onOpen={() => setMobileOpen(true)}\n          sx={{\n            '& .MuiDrawer-paper': {\n              width: 280,\n              boxSizing: 'border-box',\n            },\n          }}\n        >\n          {drawer}\n        </SwipeableDrawer>\n      ) : (\n        <Drawer\n          variant=\"permanent\"\n          sx={{\n            width: 280,\n            flexShrink: 0,\n            '& .MuiDrawer-paper': {\n              width: 280,\n              boxSizing: 'border-box',\n              top: 64,\n              height: 'calc(100% - 64px)',\n            },\n          }}\n        >\n          {drawer}\n        </Drawer>\n      )}\n      \n      {/* Mobile Bottom Navigation */}\n      {isMobile && (\n        <Paper\n          sx={{\n            position: 'fixed',\n            bottom: 0,\n            left: 0,\n            right: 0,\n            zIndex: theme.zIndex.appBar,\n          }}\n          elevation={3}\n        >\n          <BottomNavigation\n            value={bottomNavValue}\n            onChange={(event, newValue) => {\n              setBottomNavValue(newValue);\n            }}\n            showLabels\n          >\n            <BottomNavigationAction\n              label=\"Home\"\n              icon={<Home />}\n              onClick={() => navigate('/dashboard')}\n            />\n            <BottomNavigationAction\n              label=\"Videos\"\n              icon={<VideoLibrary />}\n              onClick={() => navigate('/videos')}\n            />\n            <BottomNavigationAction\n              label=\"Analytics\"\n              icon={<Analytics />}\n              onClick={() => navigate('/analytics')}\n            />\n            <BottomNavigationAction\n              label=\"More\"\n              icon={<Person />}\n              onClick={handleQuickAction}\n            />\n          </BottomNavigation>\n        </Paper>\n      )}\n      \n      {/* Floating Action Button */}\n      {isMobile && (\n        <Zoom in={showFab}>\n          <Fab\n            color=\"primary\"\n            sx={{\n              position: 'fixed',\n              bottom: 72,\n              right: 16,\n            }}\n            onClick={() => navigate('/videos/create')}\n          >\n            <Add />\n          </Fab>\n        </Zoom>\n      )}\n      \n      {/* Quick Actions Menu */}\n      <Menu\n        anchorEl={anchorEl}\n        open={Boolean(anchorEl)}\n        onClose={handleQuickActionClose}\n      >\n        <MenuItem onClick={() => { navigate('/settings'); handleQuickActionClose(); }}>\n          <ListItemIcon>\n            <Settings fontSize=\"small\" />\n          </ListItemIcon>\n          <ListItemText>Settings</ListItemText>\n        </MenuItem>\n        <MenuItem onClick={() => { navigate('/feedback'); handleQuickActionClose(); }}>\n          <ListItemIcon>\n            <Feedback fontSize=\"small\" />\n          </ListItemIcon>\n          <ListItemText>Feedback</ListItemText>\n        </MenuItem>\n        <Divider />\n        <MenuItem onClick={() => { /* logout */ handleQuickActionClose(); }}>\n          <ListItemIcon>\n            <Logout fontSize=\"small\" />\n          </ListItemIcon>\n          <ListItemText>Logout</ListItemText>\n        </MenuItem>\n      </Menu>\n    </>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Onboarding\\OnboardingFlow.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":1,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'StepContent' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'IconButton' is defined but never used.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Dialog' is defined but never used.","line":22,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DialogTitle' is defined but never used.","line":23,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DialogContent' is defined but never used.","line":24,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DialogActions' is defined but never used.","line":25,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Radio' is defined but never used.","line":34,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'RadioGroup' is defined but never used.","line":35,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Tooltip' is defined but never used.","line":36,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Zoom' is defined but never used.","line":38,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Grow' is defined but never used.","line":39,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Slide' is defined but never used.","line":40,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'RadioButtonUnchecked' is defined but never used.","line":48,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Business' is defined but never used.","line":50,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":50,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'VideoLibrary' is defined but never used.","line":52,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":52,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Skip' is defined but never used.","line":57,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":57,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Help' is defined but never used.","line":58,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":58,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Lightbulb' is defined but never used.","line":60,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":60,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Star' is defined but never used.","line":61,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":61,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'EmojiEvents' is defined but never used.","line":62,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":62,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Speed' is defined but never used.","line":65,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":65,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Groups' is defined but never used.","line":67,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":67,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Close' is defined but never used.","line":71,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":71,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Info' is defined but never used.","line":72,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":72,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ContentCopy' is defined but never used.","line":73,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":73,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Link' is defined but never used.","line":74,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":74,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Security' is defined but never used.","line":75,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":75,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CloudUpload' is defined but never used.","line":76,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":76,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Schedule' is defined but never used.","line":77,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":77,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Dashboard' is defined but never used.","line":78,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":78,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'NavigateNext' is defined but never used.","line":79,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":79,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'showTutorial' is assigned a value but never used.","line":132,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":132,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'tutorialStep' is assigned a value but never used.","line":133,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":133,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setTutorialStep' is assigned a value but never used.","line":133,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":133,"endColumn":39}],"suppressedMessages":[],"errorCount":35,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Card,\n  CardContent,\n  Typography,\n  Button,\n  Stepper,\n  Step,\n  StepLabel,\n  StepContent,\n  TextField,\n  Select,\n  MenuItem,\n  FormControl,\n  InputLabel,\n  Chip,\n  Avatar,\n  IconButton,\n  LinearProgress,\n  Alert,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Paper,\n  Grid,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  FormControlLabel,\n  Checkbox,\n  Radio,\n  RadioGroup,\n  Tooltip,\n  Fade,\n  Zoom,\n  Grow,\n  Slide,\n  useTheme,\n  useMediaQuery,\n  Backdrop,\n  CircularProgress,\n} from '@mui/material';\nimport {\n  CheckCircle,\n  RadioButtonUnchecked,\n  Person,\n  Business,\n  YouTube,\n  VideoLibrary,\n  Settings,\n  Celebration,\n  ArrowForward,\n  ArrowBack,\n  Skip,\n  Help,\n  PlayCircle,\n  Lightbulb,\n  Star,\n  EmojiEvents,\n  TrendingUp,\n  AttachMoney,\n  Speed,\n  AutoAwesome,\n  Groups,\n  School,\n  Rocket,\n  Check,\n  Close,\n  Info,\n  ContentCopy,\n  Link,\n  Security,\n  CloudUpload,\n  Schedule,\n  Dashboard,\n  NavigateNext,\n  FiberManualRecord,\n} from '@mui/icons-material';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport Confetti from 'react-confetti';\n\ninterface OnboardingStep {\n  id: string;\n  title: string;\n  description: string;\n  icon: React.ReactNode;\n  completed: boolean;\n  skippable: boolean;\n}\n\ninterface UserProfile {\n  name: string;\n  email: string;\n  company?: string;\n  role: string;\n  experience: string;\n  goals: string[];\n  contentType: string[];\n  uploadFrequency: string;\n  teamSize: string;\n}\n\ninterface ChannelConnection {\n  id: string;\n  name: string;\n  handle: string;\n  subscribers: number;\n  connected: boolean;\n  verified: boolean;\n}\n\ninterface TutorialStep {\n  id: string;\n  title: string;\n  description: string;\n  element: string;\n  position: 'top' | 'bottom' | 'left' | 'right';\n  action?: string;\n}\n\nexport const OnboardingFlow: React.FC = () => {\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));\n  \n  const [activeStep, setActiveStep] = useState(0);\n  const [completedSteps, setCompletedSteps] = useState<number[]>([]);\n  const [showWelcome, setShowWelcome] = useState(true);\n  const [showCelebration, setShowCelebration] = useState(false);\n  const [showTutorial, setShowTutorial] = useState(false);\n  const [tutorialStep, setTutorialStep] = useState(0);\n  const [loading, setLoading] = useState(false);\n  \n  // User data\n  const [userProfile, setUserProfile] = useState<UserProfile>({\n    name: '',\n    email: '',\n    company: '',\n    role: '',\n    experience: '',\n    goals: [],\n    contentType: [],\n    uploadFrequency: '',\n    teamSize: '',\n  });\n  \n  const [channels, setChannels] = useState<ChannelConnection[]>([]);\n  const [selectedPlan, setSelectedPlan] = useState('');\n  const [preferences, setPreferences] = useState({\n    autoUpload: true,\n    emailNotifications: true,\n    aiOptimization: true,\n    qualityCheck: true,\n  });\n\n  const steps: OnboardingStep[] = [\n    {\n      id: 'welcome',\n      title: 'Welcome to YTEmpire',\n      description: 'Let\\'s get you started with automated YouTube success',\n      icon: <Celebration />,\n      completed: false,\n      skippable: false,\n    },\n    {\n      id: 'profile',\n      title: 'Create Your Profile',\n      description: 'Tell us about yourself and your goals',\n      icon: <Person />,\n      completed: false,\n      skippable: false,\n    },\n    {\n      id: 'channels',\n      title: 'Connect YouTube Channels',\n      description: 'Link your YouTube channels for automation',\n      icon: <YouTube />,\n      completed: false,\n      skippable: false,\n    },\n    {\n      id: 'preferences',\n      title: 'Set Your Preferences',\n      description: 'Customize how YTEmpire works for you',\n      icon: <Settings />,\n      completed: false,\n      skippable: true,\n    },\n    {\n      id: 'tutorial',\n      title: 'Quick Tutorial',\n      description: 'Learn the basics in 2 minutes',\n      icon: <School />,\n      completed: false,\n      skippable: true,\n    },\n  ];\n\n  const tutorialSteps: TutorialStep[] = [\n    {\n      id: 't1',\n      title: 'Dashboard Overview',\n      description: 'This is your command center. See all your metrics and activities at a glance.',\n      element: 'dashboard',\n      position: 'bottom',\n    },\n    {\n      id: 't2',\n      title: 'Create Your First Video',\n      description: 'Click here to start creating AI-powered videos automatically.',\n      element: 'create-video',\n      position: 'right',\n      action: 'Click the button',\n    },\n    {\n      id: 't3',\n      title: 'Channel Management',\n      description: 'Manage all your YouTube channels from one place.',\n      element: 'channels',\n      position: 'bottom',\n    },\n    {\n      id: 't4',\n      title: 'Analytics & Insights',\n      description: 'Track performance and optimize your content strategy.',\n      element: 'analytics',\n      position: 'left',\n    },\n    {\n      id: 't5',\n      title: 'Automation Settings',\n      description: 'Configure auto-upload schedules and AI optimization.',\n      element: 'settings',\n      position: 'top',\n    },\n  ];\n\n  const plans = [\n    {\n      id: 'starter',\n      name: 'Starter',\n      price: '$29/mo',\n      features: ['5 videos/day', '1 channel', 'Basic analytics', 'Email support'],\n      recommended: false,\n    },\n    {\n      id: 'pro',\n      name: 'Professional',\n      price: '$99/mo',\n      features: ['25 videos/day', '5 channels', 'Advanced analytics', 'Priority support', 'Custom branding'],\n      recommended: true,\n    },\n    {\n      id: 'enterprise',\n      name: 'Enterprise',\n      price: '$299/mo',\n      features: ['Unlimited videos', 'Unlimited channels', 'Custom AI models', 'Dedicated support', 'API access'],\n      recommended: false,\n    },\n  ];\n\n  const handleNext = () => {\n    if (activeStep === steps.length - 1) {\n      handleComplete();\n    } else {\n      setCompletedSteps([...completedSteps, activeStep]);\n      setActiveStep((prev) => prev + 1);\n    }\n  };\n\n  const handleBack = () => {\n    setActiveStep((prev) => prev - 1);\n  };\n\n  const handleSkip = () => {\n    if (steps[activeStep].skippable) {\n      handleNext();\n    }\n  };\n\n  const handleComplete = () => {\n    setShowCelebration(true);\n    setTimeout(() => {\n      setShowCelebration(false);\n      // Navigate to dashboard\n    }, 5000);\n  };\n\n  const connectChannel = async () => {\n    setLoading(true);\n    // Simulate OAuth flow\n    setTimeout(() => {\n      setChannels([\n        {\n          id: '1',\n          name: 'Tech Insights Daily',\n          handle: '@techinsights',\n          subscribers: 1250,\n          connected: true,\n          verified: true,\n        },\n      ]);\n      setLoading(false);\n    }, 2000);\n  };\n\n  const renderWelcomeScreen = () => (\n    <Fade in={showWelcome} timeout={1000}>\n      <Box\n        sx={{\n          minHeight: '100vh',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          background: `linear-gradient(135deg, ${theme.palette.primary.main} 0%, ${theme.palette.secondary.main} 100%)`,\n        }}\n      >\n        <motion.div\n          initial={{ scale: 0.8, opacity: 0 }}\n          animate={{ scale: 1, opacity: 1 }}\n          transition={{ duration: 0.5 }}\n        >\n          <Card sx={{ maxWidth: 600, p: 4 }}>\n            <CardContent sx={{ textAlign: 'center' }}>\n              <motion.div\n                animate={{ rotate: 360 }}\n                transition={{ duration: 2, repeat: Infinity, ease: \"linear\" }}\n              >\n                <Avatar\n                  sx={{\n                    width: 100,\n                    height: 100,\n                    bgcolor: 'primary.main',\n                    mx: 'auto',\n                    mb: 3,\n                  }}\n                >\n                  <Rocket sx={{ fontSize: 50 }} />\n                </Avatar>\n              </motion.div>\n              \n              <Typography variant=\"h3\" fontWeight=\"bold\" gutterBottom>\n                Welcome to YTEmpire!\n              </Typography>\n              \n              <Typography variant=\"h6\" color=\"text.secondary\" paragraph>\n                Your AI-powered YouTube automation platform\n              </Typography>\n              \n              <Box sx={{ my: 4 }}>\n                <Grid container spacing={2}>\n                  <Grid item xs={12} sm={4}>\n                    <Paper sx={{ p: 2, bgcolor: 'primary.light', color: 'primary.contrastText' }}>\n                      <AutoAwesome sx={{ fontSize: 40, mb: 1 }} />\n                      <Typography variant=\"subtitle1\" fontWeight=\"bold\">\n                        AI-Powered\n                      </Typography>\n                      <Typography variant=\"body2\">\n                        Generate videos automatically\n                      </Typography>\n                    </Paper>\n                  </Grid>\n                  <Grid item xs={12} sm={4}>\n                    <Paper sx={{ p: 2, bgcolor: 'secondary.light', color: 'secondary.contrastText' }}>\n                      <TrendingUp sx={{ fontSize: 40, mb: 1 }} />\n                      <Typography variant=\"subtitle1\" fontWeight=\"bold\">\n                        Grow Faster\n                      </Typography>\n                      <Typography variant=\"body2\">\n                        10x your channel growth\n                      </Typography>\n                    </Paper>\n                  </Grid>\n                  <Grid item xs={12} sm={4}>\n                    <Paper sx={{ p: 2, bgcolor: 'success.light', color: 'success.contrastText' }}>\n                      <AttachMoney sx={{ fontSize: 40, mb: 1 }} />\n                      <Typography variant=\"subtitle1\" fontWeight=\"bold\">\n                        Monetize\n                      </Typography>\n                      <Typography variant=\"body2\">\n                        Maximize revenue potential\n                      </Typography>\n                    </Paper>\n                  </Grid>\n                </Grid>\n              </Box>\n              \n              <Typography variant=\"body1\" paragraph>\n                Let's set up your account in just 5 easy steps\n              </Typography>\n              \n              <Button\n                variant=\"contained\"\n                size=\"large\"\n                endIcon={<ArrowForward />}\n                onClick={() => setShowWelcome(false)}\n                sx={{ mt: 2 }}\n              >\n                Get Started\n              </Button>\n              \n              <Typography variant=\"caption\" display=\"block\" sx={{ mt: 2 }}>\n                Setup takes less than 5 minutes\n              </Typography>\n            </CardContent>\n          </Card>\n        </motion.div>\n      </Box>\n    </Fade>\n  );\n\n  const renderProfileStep = () => (\n    <Box>\n      <Typography variant=\"h5\" fontWeight=\"bold\" gutterBottom>\n        Tell us about yourself\n      </Typography>\n      <Typography variant=\"body2\" color=\"text.secondary\" paragraph>\n        This helps us personalize your experience\n      </Typography>\n      \n      <Grid container spacing={3}>\n        <Grid item xs={12} sm={6}>\n          <TextField\n            fullWidth\n            label=\"Your Name\"\n            value={userProfile.name}\n            onChange={(e) => setUserProfile({ ...userProfile, name: e.target.value })}\n            required\n          />\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <TextField\n            fullWidth\n            label=\"Email\"\n            type=\"email\"\n            value={userProfile.email}\n            onChange={(e) => setUserProfile({ ...userProfile, email: e.target.value })}\n            required\n          />\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <TextField\n            fullWidth\n            label=\"Company (Optional)\"\n            value={userProfile.company}\n            onChange={(e) => setUserProfile({ ...userProfile, company: e.target.value })}\n          />\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <FormControl fullWidth>\n            <InputLabel>Your Role</InputLabel>\n            <Select\n              value={userProfile.role}\n              onChange={(e) => setUserProfile({ ...userProfile, role: e.target.value })}\n              label=\"Your Role\"\n            >\n              <MenuItem value=\"content-creator\">Content Creator</MenuItem>\n              <MenuItem value=\"marketer\">Digital Marketer</MenuItem>\n              <MenuItem value=\"business-owner\">Business Owner</MenuItem>\n              <MenuItem value=\"agency\">Agency</MenuItem>\n              <MenuItem value=\"other\">Other</MenuItem>\n            </Select>\n          </FormControl>\n        </Grid>\n        \n        <Grid item xs={12}>\n          <Typography variant=\"subtitle1\" gutterBottom>\n            What are your main goals? (Select all that apply)\n          </Typography>\n          <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>\n            {['Grow subscribers', 'Increase revenue', 'Save time', 'Improve quality', 'Scale content'].map((goal) => (\n              <Chip\n                key={goal}\n                label={goal}\n                onClick={() => {\n                  const goals = userProfile.goals.includes(goal)\n                    ? userProfile.goals.filter(g => g !== goal)\n                    : [...userProfile.goals, goal];\n                  setUserProfile({ ...userProfile, goals });\n                }}\n                color={userProfile.goals.includes(goal) ? 'primary' : 'default'}\n                icon={userProfile.goals.includes(goal) ? <Check /> : undefined}\n              />\n            ))}\n          </Box>\n        </Grid>\n        \n        <Grid item xs={12}>\n          <FormControl fullWidth>\n            <InputLabel>How often do you plan to upload?</InputLabel>\n            <Select\n              value={userProfile.uploadFrequency}\n              onChange={(e) => setUserProfile({ ...userProfile, uploadFrequency: e.target.value })}\n              label=\"How often do you plan to upload?\"\n            >\n              <MenuItem value=\"daily\">Daily</MenuItem>\n              <MenuItem value=\"few-times-week\">Few times a week</MenuItem>\n              <MenuItem value=\"weekly\">Weekly</MenuItem>\n              <MenuItem value=\"monthly\">Monthly</MenuItem>\n            </Select>\n          </FormControl>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n\n  const renderChannelsStep = () => (\n    <Box>\n      <Typography variant=\"h5\" fontWeight=\"bold\" gutterBottom>\n        Connect Your YouTube Channels\n      </Typography>\n      <Typography variant=\"body2\" color=\"text.secondary\" paragraph>\n        We'll need permission to manage your YouTube channels\n      </Typography>\n      \n      <Alert severity=\"info\" sx={{ mb: 3 }}>\n        <Typography variant=\"body2\">\n          YTEmpire uses OAuth 2.0 for secure authentication. We never store your YouTube password.\n        </Typography>\n      </Alert>\n      \n      {channels.length === 0 ? (\n        <Paper sx={{ p: 4, textAlign: 'center', bgcolor: 'grey.50' }}>\n          <YouTube sx={{ fontSize: 60, color: 'error.main', mb: 2 }} />\n          <Typography variant=\"h6\" gutterBottom>\n            No channels connected yet\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\" paragraph>\n            Connect your YouTube channel to start creating and publishing videos automatically\n          </Typography>\n          \n          <Box sx={{ mt: 3 }}>\n            <Typography variant=\"subtitle2\" gutterBottom>\n              Authorization Steps:\n            </Typography>\n            <List sx={{ maxWidth: 400, mx: 'auto', textAlign: 'left' }}>\n              <ListItem>\n                <ListItemIcon>\n                  <FiberManualRecord sx={{ fontSize: 8 }} />\n                </ListItemIcon>\n                <ListItemText primary=\"Click the connect button below\" />\n              </ListItem>\n              <ListItem>\n                <ListItemIcon>\n                  <FiberManualRecord sx={{ fontSize: 8 }} />\n                </ListItemIcon>\n                <ListItemText primary=\"Sign in to your YouTube account\" />\n              </ListItem>\n              <ListItem>\n                <ListItemIcon>\n                  <FiberManualRecord sx={{ fontSize: 8 }} />\n                </ListItemIcon>\n                <ListItemText primary=\"Grant YTEmpire permission to manage videos\" />\n              </ListItem>\n              <ListItem>\n                <ListItemIcon>\n                  <FiberManualRecord sx={{ fontSize: 8 }} />\n                </ListItemIcon>\n                <ListItemText primary=\"You're all set!\" />\n              </ListItem>\n            </List>\n          </Box>\n          \n          <Button\n            variant=\"contained\"\n            color=\"error\"\n            size=\"large\"\n            startIcon={<YouTube />}\n            onClick={connectChannel}\n            disabled={loading}\n            sx={{ mt: 2 }}\n          >\n            {loading ? 'Connecting...' : 'Connect YouTube Channel'}\n          </Button>\n        </Paper>\n      ) : (\n        <Box>\n          {channels.map((channel) => (\n            <Paper key={channel.id} sx={{ p: 2, mb: 2 }}>\n              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\n                  <Avatar sx={{ bgcolor: 'error.main' }}>\n                    <YouTube />\n                  </Avatar>\n                  <Box>\n                    <Typography variant=\"subtitle1\" fontWeight=\"bold\">\n                      {channel.name}\n                    </Typography>\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      {channel.handle} • {channel.subscribers.toLocaleString()} subscribers\n                    </Typography>\n                  </Box>\n                </Box>\n                <Chip\n                  label=\"Connected\"\n                  color=\"success\"\n                  icon={<CheckCircle />}\n                />\n              </Box>\n            </Paper>\n          ))}\n          \n          <Button\n            variant=\"outlined\"\n            startIcon={<Add />}\n            sx={{ mt: 2 }}\n          >\n            Add Another Channel\n          </Button>\n        </Box>\n      )}\n    </Box>\n  );\n\n  const renderPreferencesStep = () => (\n    <Box>\n      <Typography variant=\"h5\" fontWeight=\"bold\" gutterBottom>\n        Set Your Preferences\n      </Typography>\n      <Typography variant=\"body2\" color=\"text.secondary\" paragraph>\n        Customize how YTEmpire works for you\n      </Typography>\n      \n      <Grid container spacing={3}>\n        <Grid item xs={12}>\n          <Typography variant=\"h6\" gutterBottom>\n            Choose Your Plan\n          </Typography>\n          <Grid container spacing={2}>\n            {plans.map((plan) => (\n              <Grid item xs={12} sm={4} key={plan.id}>\n                <Paper\n                  sx={{\n                    p: 2,\n                    border: 2,\n                    borderColor: selectedPlan === plan.id ? 'primary.main' : 'divider',\n                    cursor: 'pointer',\n                    position: 'relative',\n                  }}\n                  onClick={() => setSelectedPlan(plan.id)}\n                >\n                  {plan.recommended && (\n                    <Chip\n                      label=\"RECOMMENDED\"\n                      color=\"primary\"\n                      size=\"small\"\n                      sx={{ position: 'absolute', top: -10, right: 10 }}\n                    />\n                  )}\n                  <Typography variant=\"h6\" fontWeight=\"bold\">\n                    {plan.name}\n                  </Typography>\n                  <Typography variant=\"h4\" color=\"primary.main\" sx={{ my: 1 }}>\n                    {plan.price}\n                  </Typography>\n                  <List dense>\n                    {plan.features.map((feature, index) => (\n                      <ListItem key={index} sx={{ px: 0 }}>\n                        <ListItemIcon sx={{ minWidth: 28 }}>\n                          <CheckCircle fontSize=\"small\" color=\"success\" />\n                        </ListItemIcon>\n                        <ListItemText primary={feature} />\n                      </ListItem>\n                    ))}\n                  </List>\n                </Paper>\n              </Grid>\n            ))}\n          </Grid>\n        </Grid>\n        \n        <Grid item xs={12}>\n          <Typography variant=\"h6\" gutterBottom>\n            Automation Settings\n          </Typography>\n          <List>\n            <ListItem>\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    checked={preferences.autoUpload}\n                    onChange={(e) => setPreferences({ ...preferences, autoUpload: e.target.checked })}\n                  />\n                }\n                label=\"Auto-upload videos when ready\"\n              />\n            </ListItem>\n            <ListItem>\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    checked={preferences.emailNotifications}\n                    onChange={(e) => setPreferences({ ...preferences, emailNotifications: e.target.checked })}\n                  />\n                }\n                label=\"Email notifications for important updates\"\n              />\n            </ListItem>\n            <ListItem>\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    checked={preferences.aiOptimization}\n                    onChange={(e) => setPreferences({ ...preferences, aiOptimization: e.target.checked })}\n                  />\n                }\n                label=\"AI optimization for titles and descriptions\"\n              />\n            </ListItem>\n            <ListItem>\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    checked={preferences.qualityCheck}\n                    onChange={(e) => setPreferences({ ...preferences, qualityCheck: e.target.checked })}\n                  />\n                }\n                label=\"Quality check before publishing\"\n              />\n            </ListItem>\n          </List>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n\n  const renderTutorialStep = () => (\n    <Box>\n      <Typography variant=\"h5\" fontWeight=\"bold\" gutterBottom>\n        Quick Tutorial\n      </Typography>\n      <Typography variant=\"body2\" color=\"text.secondary\" paragraph>\n        Learn the basics in just 2 minutes\n      </Typography>\n      \n      <Paper sx={{ p: 3, bgcolor: 'primary.light', color: 'primary.contrastText', mb: 3 }}>\n        <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\n          <PlayCircle sx={{ fontSize: 40 }} />\n          <Box>\n            <Typography variant=\"h6\">\n              Interactive Walkthrough\n            </Typography>\n            <Typography variant=\"body2\">\n              We'll guide you through the main features step by step\n            </Typography>\n          </Box>\n        </Box>\n      </Paper>\n      \n      <Grid container spacing={2}>\n        {tutorialSteps.map((step, index) => (\n          <Grid item xs={12} key={step.id}>\n            <Paper sx={{ p: 2 }}>\n              <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\n                <Avatar sx={{ bgcolor: 'primary.main' }}>\n                  {index + 1}\n                </Avatar>\n                <Box sx={{ flex: 1 }}>\n                  <Typography variant=\"subtitle1\" fontWeight=\"bold\">\n                    {step.title}\n                  </Typography>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    {step.description}\n                  </Typography>\n                </Box>\n              </Box>\n            </Paper>\n          </Grid>\n        ))}\n      </Grid>\n      \n      <Box sx={{ mt: 3, textAlign: 'center' }}>\n        <Button\n          variant=\"contained\"\n          size=\"large\"\n          startIcon={<PlayCircle />}\n          onClick={() => setShowTutorial(true)}\n        >\n          Start Interactive Tutorial\n        </Button>\n        \n        <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 2 }}>\n          You can always access this tutorial later from the Help menu\n        </Typography>\n      </Box>\n    </Box>\n  );\n\n  const renderStepContent = (step: number) => {\n    switch (step) {\n      case 0:\n        return null; // Welcome screen is separate\n      case 1:\n        return renderProfileStep();\n      case 2:\n        return renderChannelsStep();\n      case 3:\n        return renderPreferencesStep();\n      case 4:\n        return renderTutorialStep();\n      default:\n        return null;\n    }\n  };\n\n  if (showWelcome) {\n    return renderWelcomeScreen();\n  }\n\n  return (\n    <Box sx={{ maxWidth: 900, mx: 'auto', p: 3 }}>\n      {showCelebration && (\n        <Confetti\n          width={window.innerWidth}\n          height={window.innerHeight}\n          recycle={false}\n          numberOfPieces={200}\n        />\n      )}\n      \n      <Box sx={{ mb: 4 }}>\n        <LinearProgress\n          variant=\"determinate\"\n          value={(completedSteps.length / steps.length) * 100}\n          sx={{ height: 8, borderRadius: 1 }}\n        />\n        <Typography variant=\"caption\" color=\"text.secondary\" sx={{ mt: 1, display: 'block' }}>\n          Step {activeStep + 1} of {steps.length}\n        </Typography>\n      </Box>\n      \n      <Stepper activeStep={activeStep} orientation={isMobile ? 'vertical' : 'horizontal'}>\n        {steps.map((step, index) => (\n          <Step key={step.id} completed={completedSteps.includes(index)}>\n            <StepLabel\n              icon={step.icon}\n              optional={\n                step.skippable && (\n                  <Typography variant=\"caption\">Optional</Typography>\n                )\n              }\n            >\n              {step.title}\n            </StepLabel>\n          </Step>\n        ))}\n      </Stepper>\n      \n      <Box sx={{ mt: 4 }}>\n        <AnimatePresence mode=\"wait\">\n          <motion.div\n            key={activeStep}\n            initial={{ opacity: 0, x: 20 }}\n            animate={{ opacity: 1, x: 0 }}\n            exit={{ opacity: 0, x: -20 }}\n            transition={{ duration: 0.3 }}\n          >\n            {renderStepContent(activeStep)}\n          </motion.div>\n        </AnimatePresence>\n      </Box>\n      \n      <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 4 }}>\n        <Button\n          disabled={activeStep === 0}\n          onClick={handleBack}\n          startIcon={<ArrowBack />}\n        >\n          Back\n        </Button>\n        \n        <Box sx={{ display: 'flex', gap: 2 }}>\n          {steps[activeStep].skippable && (\n            <Button onClick={handleSkip}>\n              Skip\n            </Button>\n          )}\n          <Button\n            variant=\"contained\"\n            onClick={handleNext}\n            endIcon={activeStep === steps.length - 1 ? <Celebration /> : <ArrowForward />}\n          >\n            {activeStep === steps.length - 1 ? 'Complete Setup' : 'Continue'}\n          </Button>\n        </Box>\n      </Box>\n      \n      {/* Loading Backdrop */}\n      <Backdrop open={loading} sx={{ zIndex: theme.zIndex.drawer + 1 }}>\n        <CircularProgress color=\"inherit\" />\n      </Backdrop>\n    </Box>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\PWA\\InstallPrompt.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Computer' is defined but never used.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":11}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  Typography,\n  Box,\n  IconButton,\n  Alert,\n  Chip,\n} from '@mui/material';\nimport {\n  GetApp,\n  Close,\n  PhoneIphone,\n  Computer,\n  OfflinePin,\n  Speed,\n  Notifications,\n} from '@mui/icons-material';\nimport { usePWA } from '../../contexts/PWAContext';\n\nexport const InstallPrompt: React.FC = () => {\n  const { isInstallable, installApp, isInstalled } = usePWA();\n  const [open, setOpen] = useState(false);\n  const [dismissed, setDismissed] = useState(false);\n\n  useEffect(() => {\n    // Check if user has previously dismissed the prompt\n    const wasDismissed = localStorage.getItem('pwa-prompt-dismissed');\n    if (wasDismissed) {\n      setDismissed(true);\n    }\n\n    // Show prompt after 30 seconds if installable and not dismissed\n    const timer = setTimeout(() => {\n      if (isInstallable && !wasDismissed && !isInstalled) {\n        setOpen(true);\n      }\n    }, 30000);\n\n    return () => clearTimeout(timer);\n  }, [isInstallable, isInstalled]);\n\n  const handleInstall = async () => {\n    await installApp();\n    setOpen(false);\n  };\n\n  const handleDismiss = () => {\n    setOpen(false);\n    setDismissed(true);\n    localStorage.setItem('pwa-prompt-dismissed', 'true');\n  };\n\n  const handleRemindLater = () => {\n    setOpen(false);\n    // Show again in next session\n  };\n\n  if (!isInstallable || dismissed || isInstalled) {\n    return null;\n  }\n\n  return (\n    <>\n      {/* Floating install button */}\n      <Box\n        sx={{\n          position: 'fixed',\n          bottom: 20,\n          right: 20,\n          zIndex: 1000,\n          display: { xs: 'block', md: 'none' },\n        }}\n      >\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          startIcon={<GetApp />}\n          onClick={() => setOpen(true)}\n          sx={{\n            borderRadius: 20,\n            boxShadow: 3,\n          }}\n        >\n          Install App\n        </Button>\n      </Box>\n\n      {/* Install dialog */}\n      <Dialog\n        open={open}\n        onClose={handleRemindLater}\n        maxWidth=\"sm\"\n        fullWidth\n        PaperProps={{\n          sx: {\n            borderRadius: 2,\n            backgroundImage: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\n            color: 'white',\n          },\n        }}\n      >\n        <DialogTitle>\n          <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\n            <Typography variant=\"h5\" fontWeight=\"bold\">\n              Install YTEmpire\n            </Typography>\n            <IconButton\n              edge=\"end\"\n              color=\"inherit\"\n              onClick={handleDismiss}\n              aria-label=\"close\"\n            >\n              <Close />\n            </IconButton>\n          </Box>\n        </DialogTitle>\n\n        <DialogContent>\n          <Box sx={{ textAlign: 'center', py: 2 }}>\n            <Box\n              sx={{\n                width: 80,\n                height: 80,\n                margin: '0 auto',\n                mb: 3,\n                backgroundColor: 'white',\n                borderRadius: 2,\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n              }}\n            >\n              <Typography variant=\"h3\" sx={{ color: '#667eea' }}>\n                YT\n              </Typography>\n            </Box>\n\n            <Typography variant=\"body1\" sx={{ mb: 3 }}>\n              Install YTEmpire on your device for a better experience\n            </Typography>\n\n            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2, mb: 3 }}>\n              <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\n                <OfflinePin />\n                <Typography variant=\"body2\">Work offline with cached data</Typography>\n              </Box>\n              <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\n                <Speed />\n                <Typography variant=\"body2\">Faster loading and performance</Typography>\n              </Box>\n              <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\n                <Notifications />\n                <Typography variant=\"body2\">Get push notifications</Typography>\n              </Box>\n              <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\n                <PhoneIphone />\n                <Typography variant=\"body2\">Add to home screen</Typography>\n              </Box>\n            </Box>\n\n            <Alert\n              severity=\"info\"\n              sx={{\n                backgroundColor: 'rgba(255, 255, 255, 0.1)',\n                color: 'white',\n                '& .MuiAlert-icon': {\n                  color: 'white',\n                },\n              }}\n            >\n              No app store needed. Installs directly from your browser!\n            </Alert>\n          </Box>\n        </DialogContent>\n\n        <DialogActions sx={{ px: 3, pb: 3 }}>\n          <Button\n            onClick={handleRemindLater}\n            sx={{ color: 'white' }}\n          >\n            Maybe Later\n          </Button>\n          <Button\n            onClick={handleInstall}\n            variant=\"contained\"\n            sx={{\n              backgroundColor: 'white',\n              color: '#667eea',\n              '&:hover': {\n                backgroundColor: 'rgba(255, 255, 255, 0.9)',\n              },\n            }}\n            startIcon={<GetApp />}\n          >\n            Install Now\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n\n// Offline indicator component\nexport const OfflineIndicator: React.FC = () => {\n  const { isOnline, offlineReady } = usePWA();\n\n  if (isOnline) {\n    return null;\n  }\n\n  return (\n    <Chip\n      label={offlineReady ? 'Offline Mode' : 'No Connection'}\n      color={offlineReady ? 'warning' : 'error'}\n      size=\"small\"\n      sx={{\n        position: 'fixed',\n        top: 70,\n        left: '50%',\n        transform: 'translateX(-50%)',\n        zIndex: 1300,\n      }}\n    />\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Performance\\PerformanceDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'BarChart' is defined but never used.","line":24,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Bar' is defined but never used.","line":25,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setAutoRefresh' is assigned a value but never used.","line":96,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":96,"endColumn":37},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchPerformanceData'. Either include it or remove the dependency array.","line":143,"column":6,"nodeType":"ArrayExpression","endLine":143,"endColumn":26,"suggestions":[{"desc":"Update the dependencies array to be: [token, autoRefresh, fetchPerformanceData]","fix":{"range":[3327,3347],"text":"[token, autoRefresh, fetchPerformanceData]"}}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Card,\n  CardContent,\n  Grid,\n  Typography,\n  Alert,\n  LinearProgress,\n  Chip,\n  List,\n  ListItem,\n  ListItemText,\n  Divider,\n  Paper,\n  IconButton,\n  Tooltip,\n} from '@mui/material';\nimport {\n  LineChart,\n  Line,\n  AreaChart,\n  Area,\n  BarChart,\n  Bar,\n  PieChart,\n  Pie,\n  Cell,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip as RechartsTooltip,\n  Legend,\n  ResponsiveContainer,\n} from 'recharts';\nimport RefreshIcon from '@mui/icons-material/Refresh';\nimport SpeedIcon from '@mui/icons-material/Speed';\nimport ErrorIcon from '@mui/icons-material/Error';\nimport WarningIcon from '@mui/icons-material/Warning';\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\nimport { authStore } from '../../stores/authStore';\n\ninterface PerformanceMetrics {\n  current: {\n    request_rate: number;\n    average_latency: number;\n    error_rate: number;\n    throughput: number;\n  };\n  historical: Array<{\n    timestamp: string;\n    request_rate: number;\n    average_latency: number;\n    error_rate: number;\n  }>;\n  slow_endpoints: Array<{\n    endpoint: string;\n    method: string;\n    avg_duration: number;\n    count: number;\n  }>;\n  error_rates: {\n    '4xx_errors': number;\n    '5xx_errors': number;\n    timeout_errors: number;\n    total_errors: number;\n  };\n  database: {\n    average_query_time: number;\n    slow_query_count: number;\n    connection_pool_usage: number;\n    deadlock_count: number;\n  };\n  system: {\n    cpu_usage: number;\n    memory_usage: number;\n    disk_usage: number;\n    network_io: {\n      bytes_sent: number;\n      bytes_recv: number;\n    };\n  };\n}\n\ninterface PerformanceAlert {\n  type: string;\n  severity: 'warning' | 'critical' | 'info';\n  message: string;\n  timestamp: string;\n}\n\nexport const PerformanceDashboard: React.FC = () => {\n  const [metrics, setMetrics] = useState<PerformanceMetrics | null>(null);\n  const [alerts, setAlerts] = useState<PerformanceAlert[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [autoRefresh, setAutoRefresh] = useState(true);\n  const { token } = authStore();\n\n  const fetchPerformanceData = async () => {\n    try {\n      const headers = {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json',\n      };\n\n      // Fetch performance overview\n      const overviewResponse = await fetch(\n        `${import.meta.env.VITE_API_URL || 'http://localhost:8000'}/api/v1/performance/overview`,\n        { headers }\n      );\n      \n      if (overviewResponse.ok) {\n        const data = await overviewResponse.json();\n        setMetrics(data);\n      }\n\n      // Fetch alerts\n      const alertsResponse = await fetch(\n        `${import.meta.env.VITE_API_URL || 'http://localhost:8000'}/api/v1/performance/alerts`,\n        { headers }\n      );\n      \n      if (alertsResponse.ok) {\n        const alertData = await alertsResponse.json();\n        setAlerts(alertData);\n      }\n    } catch (error) {\n      console.error('Error fetching performance data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchPerformanceData();\n    \n    // Auto-refresh every 30 seconds\n    const interval = autoRefresh ? setInterval(fetchPerformanceData, 30000) : null;\n    \n    return () => {\n      if (interval) clearInterval(interval);\n    };\n  }, [token, autoRefresh]);\n\n  const getStatusColor = (value: number, thresholds: { good: number; warning: number }) => {\n    if (value < thresholds.good) return '#4caf50';\n    if (value < thresholds.warning) return '#ff9800';\n    return '#f44336';\n  };\n\n  const formatBytes = (bytes: number) => {\n    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n    if (bytes === 0) return '0 Bytes';\n    const i = Math.floor(Math.log(bytes) / Math.log(1024));\n    return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];\n  };\n\n  if (loading) {\n    return (\n      <Box sx={{ width: '100%' }}>\n        <LinearProgress />\n      </Box>\n    );\n  }\n\n  if (!metrics) {\n    return (\n      <Alert severity=\"error\">\n        Failed to load performance metrics. Please try again later.\n      </Alert>\n    );\n  }\n\n  // Prepare chart data\n  const errorPieData = [\n    { name: '4xx Errors', value: metrics.error_rates['4xx_errors'], color: '#ff9800' },\n    { name: '5xx Errors', value: metrics.error_rates['5xx_errors'], color: '#f44336' },\n    { name: 'Timeouts', value: metrics.error_rates.timeout_errors, color: '#9c27b0' },\n  ];\n\n  return (\n    <Box>\n      {/* Header */}\n      <Box sx={{ mb: 3, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n        <Typography variant=\"h4\" component=\"h2\">\n          Performance Monitoring\n        </Typography>\n        <Box>\n          <Tooltip title=\"Refresh\">\n            <IconButton onClick={fetchPerformanceData}>\n              <RefreshIcon />\n            </IconButton>\n          </Tooltip>\n        </Box>\n      </Box>\n\n      {/* Alerts */}\n      {alerts.length > 0 && (\n        <Box sx={{ mb: 3 }}>\n          {alerts.map((alert, index) => (\n            <Alert \n              key={index}\n              severity={alert.severity === 'critical' ? 'error' : alert.severity}\n              sx={{ mb: 1 }}\n              icon={\n                alert.severity === 'critical' ? <ErrorIcon /> :\n                alert.severity === 'warning' ? <WarningIcon /> :\n                <CheckCircleIcon />\n              }\n            >\n              {alert.message}\n            </Alert>\n          ))}\n        </Box>\n      )}\n\n      {/* Key Metrics */}\n      <Grid container spacing={3} sx={{ mb: 3 }}>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Typography color=\"textSecondary\" gutterBottom>\n                Request Rate\n              </Typography>\n              <Typography variant=\"h4\">\n                {metrics.current.request_rate.toFixed(0)}\n                <Typography variant=\"body2\" component=\"span\" sx={{ ml: 1 }}>\n                  req/s\n                </Typography>\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Typography color=\"textSecondary\" gutterBottom>\n                Average Latency\n              </Typography>\n              <Typography \n                variant=\"h4\"\n                sx={{ \n                  color: getStatusColor(\n                    metrics.current.average_latency,\n                    { good: 200, warning: 500 }\n                  )\n                }}\n              >\n                {metrics.current.average_latency.toFixed(0)}\n                <Typography variant=\"body2\" component=\"span\" sx={{ ml: 1 }}>\n                  ms\n                </Typography>\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Typography color=\"textSecondary\" gutterBottom>\n                Error Rate\n              </Typography>\n              <Typography \n                variant=\"h4\"\n                sx={{ \n                  color: getStatusColor(\n                    metrics.current.error_rate,\n                    { good: 1, warning: 5 }\n                  )\n                }}\n              >\n                {metrics.current.error_rate.toFixed(2)}%\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Typography color=\"textSecondary\" gutterBottom>\n                Throughput\n              </Typography>\n              <Typography variant=\"h4\">\n                {metrics.current.throughput.toFixed(0)}\n                <Typography variant=\"body2\" component=\"span\" sx={{ ml: 1 }}>\n                  ops/s\n                </Typography>\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n\n      {/* Performance Trends */}\n      <Grid container spacing={3} sx={{ mb: 3 }}>\n        <Grid item xs={12} md={6}>\n          <Paper sx={{ p: 2 }}>\n            <Typography variant=\"h6\" gutterBottom>\n              Latency Trend\n            </Typography>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <LineChart data={metrics.historical}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis \n                  dataKey=\"timestamp\" \n                  tickFormatter={(value) => new Date(value).toLocaleTimeString()}\n                />\n                <YAxis />\n                <RechartsTooltip />\n                <Legend />\n                <Line \n                  type=\"monotone\" \n                  dataKey=\"average_latency\" \n                  stroke=\"#8884d8\" \n                  name=\"Latency (ms)\"\n                />\n              </LineChart>\n            </ResponsiveContainer>\n          </Paper>\n        </Grid>\n\n        <Grid item xs={12} md={6}>\n          <Paper sx={{ p: 2 }}>\n            <Typography variant=\"h6\" gutterBottom>\n              Request Rate Trend\n            </Typography>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <AreaChart data={metrics.historical}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis \n                  dataKey=\"timestamp\" \n                  tickFormatter={(value) => new Date(value).toLocaleTimeString()}\n                />\n                <YAxis />\n                <RechartsTooltip />\n                <Legend />\n                <Area \n                  type=\"monotone\" \n                  dataKey=\"request_rate\" \n                  stroke=\"#82ca9d\" \n                  fill=\"#82ca9d\"\n                  name=\"Requests/s\"\n                />\n              </AreaChart>\n            </ResponsiveContainer>\n          </Paper>\n        </Grid>\n      </Grid>\n\n      {/* System Resources */}\n      <Grid container spacing={3} sx={{ mb: 3 }}>\n        <Grid item xs={12} md={4}>\n          <Paper sx={{ p: 2 }}>\n            <Typography variant=\"h6\" gutterBottom>\n              System Resources\n            </Typography>\n            <Box sx={{ mt: 2 }}>\n              <Typography variant=\"body2\" color=\"textSecondary\">\n                CPU Usage\n              </Typography>\n              <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                <LinearProgress \n                  variant=\"determinate\" \n                  value={metrics.system.cpu_usage} \n                  sx={{ flexGrow: 1, mr: 2, height: 8 }}\n                  color={metrics.system.cpu_usage > 80 ? 'error' : 'primary'}\n                />\n                <Typography>{metrics.system.cpu_usage.toFixed(1)}%</Typography>\n              </Box>\n            </Box>\n            <Box sx={{ mt: 2 }}>\n              <Typography variant=\"body2\" color=\"textSecondary\">\n                Memory Usage\n              </Typography>\n              <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                <LinearProgress \n                  variant=\"determinate\" \n                  value={metrics.system.memory_usage} \n                  sx={{ flexGrow: 1, mr: 2, height: 8 }}\n                  color={metrics.system.memory_usage > 90 ? 'error' : 'primary'}\n                />\n                <Typography>{metrics.system.memory_usage.toFixed(1)}%</Typography>\n              </Box>\n            </Box>\n            <Box sx={{ mt: 2 }}>\n              <Typography variant=\"body2\" color=\"textSecondary\">\n                Disk Usage\n              </Typography>\n              <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                <LinearProgress \n                  variant=\"determinate\" \n                  value={metrics.system.disk_usage} \n                  sx={{ flexGrow: 1, mr: 2, height: 8 }}\n                  color={metrics.system.disk_usage > 85 ? 'error' : 'primary'}\n                />\n                <Typography>{metrics.system.disk_usage.toFixed(1)}%</Typography>\n              </Box>\n            </Box>\n            <Divider sx={{ my: 2 }} />\n            <Typography variant=\"body2\" color=\"textSecondary\">\n              Network I/O\n            </Typography>\n            <Typography variant=\"body2\">\n              ↑ {formatBytes(metrics.system.network_io.bytes_sent)} | \n              ↓ {formatBytes(metrics.system.network_io.bytes_recv)}\n            </Typography>\n          </Paper>\n        </Grid>\n\n        <Grid item xs={12} md={4}>\n          <Paper sx={{ p: 2 }}>\n            <Typography variant=\"h6\" gutterBottom>\n              Database Performance\n            </Typography>\n            <List>\n              <ListItem>\n                <ListItemText \n                  primary=\"Avg Query Time\"\n                  secondary={`${metrics.database.average_query_time.toFixed(2)} ms`}\n                />\n              </ListItem>\n              <ListItem>\n                <ListItemText \n                  primary=\"Slow Queries\"\n                  secondary={\n                    <Chip \n                      label={metrics.database.slow_query_count}\n                      color={metrics.database.slow_query_count > 5 ? 'error' : 'default'}\n                      size=\"small\"\n                    />\n                  }\n                />\n              </ListItem>\n              <ListItem>\n                <ListItemText \n                  primary=\"Connection Pool\"\n                  secondary={\n                    <LinearProgress \n                      variant=\"determinate\" \n                      value={metrics.database.connection_pool_usage}\n                    />\n                  }\n                />\n              </ListItem>\n              <ListItem>\n                <ListItemText \n                  primary=\"Deadlocks\"\n                  secondary={\n                    <Chip \n                      label={metrics.database.deadlock_count}\n                      color={metrics.database.deadlock_count > 0 ? 'warning' : 'success'}\n                      size=\"small\"\n                    />\n                  }\n                />\n              </ListItem>\n            </List>\n          </Paper>\n        </Grid>\n\n        <Grid item xs={12} md={4}>\n          <Paper sx={{ p: 2 }}>\n            <Typography variant=\"h6\" gutterBottom>\n              Error Breakdown\n            </Typography>\n            <ResponsiveContainer width=\"100%\" height={250}>\n              <PieChart>\n                <Pie\n                  data={errorPieData}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  labelLine={false}\n                  label={(entry) => `${entry.name}: ${entry.value}`}\n                  outerRadius={80}\n                  fill=\"#8884d8\"\n                  dataKey=\"value\"\n                >\n                  {errorPieData.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={entry.color} />\n                  ))}\n                </Pie>\n                <RechartsTooltip />\n              </PieChart>\n            </ResponsiveContainer>\n          </Paper>\n        </Grid>\n      </Grid>\n\n      {/* Slow Endpoints */}\n      <Paper sx={{ p: 2 }}>\n        <Typography variant=\"h6\" gutterBottom>\n          Slowest Endpoints\n        </Typography>\n        <List>\n          {metrics.slow_endpoints.map((endpoint, index) => (\n            <React.Fragment key={index}>\n              <ListItem>\n                <ListItemText\n                  primary={\n                    <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                      <Chip \n                        label={endpoint.method} \n                        size=\"small\" \n                        sx={{ mr: 1 }}\n                        color={endpoint.method === 'GET' ? 'success' : 'primary'}\n                      />\n                      <Typography>{endpoint.endpoint}</Typography>\n                    </Box>\n                  }\n                  secondary={\n                    <Box sx={{ display: 'flex', gap: 2, mt: 1 }}>\n                      <Typography variant=\"body2\">\n                        Avg: {endpoint.avg_duration.toFixed(2)}s\n                      </Typography>\n                      <Typography variant=\"body2\">\n                        Count: {endpoint.count}\n                      </Typography>\n                    </Box>\n                  }\n                />\n                <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                  <SpeedIcon \n                    sx={{ \n                      color: endpoint.avg_duration > 2 ? '#f44336' : \n                             endpoint.avg_duration > 1 ? '#ff9800' : '#4caf50'\n                    }}\n                  />\n                </Box>\n              </ListItem>\n              {index < metrics.slow_endpoints.length - 1 && <Divider />}\n            </React.Fragment>\n          ))}\n        </List>\n      </Paper>\n    </Box>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Reports\\CustomReports.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useMemo' is defined but never used.","line":6,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":47},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DatePicker' is defined but never used.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Tooltip' is defined but never used.","line":30,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Alert' is defined but never used.","line":31,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Divider' is defined but never used.","line":36,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DownloadIcon' is defined but never used.","line":39,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SettingsIcon' is defined but never used.","line":45,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":45,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FilterIcon' is defined but never used.","line":46,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DashboardIcon' is defined but never used.","line":52,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":52,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'BarChart' is defined but never used.","line":55,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":55,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Bar' is defined but never used.","line":55,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":55,"endColumn":40},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":70,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1540,1543],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1540,1543],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":96,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":96,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2032,2035],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2032,2035],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":100,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":100,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2091,2094],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2091,2094],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'reportData'. Either exclude it or remove the dependency array.","line":232,"column":6,"nodeType":"ArrayExpression","endLine":232,"endColumn":18,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[7931,7943],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'reportData'. Either exclude it or remove the dependency array.","line":238,"column":6,"nodeType":"ArrayExpression","endLine":238,"endColumn":18,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[8153,8165],"text":"[]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":696,"column":88,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":696,"endColumn":91,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[24126,24129],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[24126,24129],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":716,"column":85,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":716,"endColumn":88,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[24897,24900],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[24897,24900],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":16,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Custom Reporting Component\n * Allows users to create, customize, and export detailed reports\n */\n\nimport React, { useState, useCallback, useMemo } from 'react';\nimport {\n  Box,\n  Paper,\n  Typography,\n  Grid,\n  Button,\n  Select,\n  MenuItem,\n  FormControl,\n  InputLabel,\n  Checkbox,\n  FormControlLabel,\n  FormGroup,\n  DatePicker,\n  Tabs,\n  Tab,\n  IconButton,\n  Chip,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  Tooltip,\n  Alert,\n  LinearProgress,\n  Card,\n  CardContent,\n  Stack,\n  Divider\n} from '@mui/material';\nimport {\n  Download as DownloadIcon,\n  Schedule as ScheduleIcon,\n  Share as ShareIcon,\n  Save as SaveIcon,\n  Add as AddIcon,\n  Delete as DeleteIcon,\n  Settings as SettingsIcon,\n  FilterList as FilterIcon,\n  PictureAsPdf as PdfIcon,\n  TableChart as ExcelIcon,\n  Description as CsvIcon,\n  Email as EmailIcon,\n  Refresh as RefreshIcon,\n  Dashboard as DashboardIcon\n} from '@mui/icons-material';\nimport { DateRangePicker } from '@mui/x-date-pickers-pro';\nimport { LineChart, Line, BarChart, Bar, PieChart, Pie, Cell, XAxis, YAxis, CartesianGrid, Tooltip as ChartTooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { format, subDays, startOfWeek, endOfWeek, startOfMonth, endOfMonth } from 'date-fns';\n\n// Types\ninterface ReportMetric {\n  id: string;\n  name: string;\n  category: string;\n  selected: boolean;\n  aggregation: 'sum' | 'avg' | 'min' | 'max' | 'count';\n}\n\ninterface ReportFilter {\n  field: string;\n  operator: 'equals' | 'contains' | 'greater' | 'less' | 'between';\n  value: any;\n}\n\ninterface ReportSchedule {\n  frequency: 'daily' | 'weekly' | 'monthly';\n  time: string;\n  recipients: string[];\n  format: 'pdf' | 'excel' | 'csv';\n}\n\ninterface SavedReport {\n  id: string;\n  name: string;\n  description: string;\n  metrics: string[];\n  filters: ReportFilter[];\n  dateRange: [Date, Date];\n  createdAt: Date;\n  lastRun: Date;\n  schedule?: ReportSchedule;\n}\n\ninterface ReportData {\n  metrics: Record<string, number>;\n  charts: {\n    type: 'line' | 'bar' | 'pie';\n    data: any[];\n  }[];\n  tables: {\n    headers: string[];\n    rows: any[][];\n  }[];\n}\n\nconst AVAILABLE_METRICS: ReportMetric[] = [\n  // Video Metrics\n  { id: 'total_videos', name: 'Total Videos', category: 'Videos', selected: true, aggregation: 'sum' },\n  { id: 'published_videos', name: 'Published Videos', category: 'Videos', selected: true, aggregation: 'sum' },\n  { id: 'avg_video_length', name: 'Average Video Length', category: 'Videos', selected: false, aggregation: 'avg' },\n  { id: 'avg_generation_time', name: 'Avg Generation Time', category: 'Videos', selected: false, aggregation: 'avg' },\n  \n  // Performance Metrics\n  { id: 'total_views', name: 'Total Views', category: 'Performance', selected: true, aggregation: 'sum' },\n  { id: 'total_watch_time', name: 'Total Watch Time', category: 'Performance', selected: true, aggregation: 'sum' },\n  { id: 'avg_view_duration', name: 'Avg View Duration', category: 'Performance', selected: false, aggregation: 'avg' },\n  { id: 'click_through_rate', name: 'Click-Through Rate', category: 'Performance', selected: false, aggregation: 'avg' },\n  { id: 'engagement_rate', name: 'Engagement Rate', category: 'Performance', selected: false, aggregation: 'avg' },\n  \n  // Revenue Metrics\n  { id: 'total_revenue', name: 'Total Revenue', category: 'Revenue', selected: true, aggregation: 'sum' },\n  { id: 'ad_revenue', name: 'Ad Revenue', category: 'Revenue', selected: false, aggregation: 'sum' },\n  { id: 'rpm', name: 'RPM', category: 'Revenue', selected: false, aggregation: 'avg' },\n  { id: 'cpm', name: 'CPM', category: 'Revenue', selected: false, aggregation: 'avg' },\n  \n  // Cost Metrics\n  { id: 'total_cost', name: 'Total Cost', category: 'Costs', selected: true, aggregation: 'sum' },\n  { id: 'cost_per_video', name: 'Cost per Video', category: 'Costs', selected: false, aggregation: 'avg' },\n  { id: 'ai_costs', name: 'AI Service Costs', category: 'Costs', selected: false, aggregation: 'sum' },\n  { id: 'profit_margin', name: 'Profit Margin', category: 'Costs', selected: false, aggregation: 'avg' },\n  \n  // Channel Metrics\n  { id: 'subscriber_count', name: 'Subscribers', category: 'Channel', selected: false, aggregation: 'sum' },\n  { id: 'subscriber_growth', name: 'Subscriber Growth', category: 'Channel', selected: false, aggregation: 'sum' },\n  { id: 'channel_health_score', name: 'Channel Health Score', category: 'Channel', selected: false, aggregation: 'avg' }\n];\n\nconst PRESET_DATE_RANGES = [\n  { label: 'Last 7 Days', getValue: () => [subDays(new Date(), 7), new Date()] },\n  { label: 'Last 30 Days', getValue: () => [subDays(new Date(), 30), new Date()] },\n  { label: 'This Week', getValue: () => [startOfWeek(new Date()), endOfWeek(new Date())] },\n  { label: 'This Month', getValue: () => [startOfMonth(new Date()), endOfMonth(new Date())] },\n  { label: 'Last Month', getValue: () => {\n    const lastMonth = subDays(startOfMonth(new Date()), 1);\n    return [startOfMonth(lastMonth), endOfMonth(lastMonth)];\n  }}\n];\n\nexport const CustomReports: React.FC = () => {\n  // State\n  const [selectedMetrics, setSelectedMetrics] = useState<ReportMetric[]>(\n    AVAILABLE_METRICS.filter(m => m.selected)\n  );\n  const [dateRange, setDateRange] = useState<[Date, Date]>([\n    subDays(new Date(), 30),\n    new Date()\n  ]);\n  const [filters, setFilters] = useState<ReportFilter[]>([]);\n  const [savedReports, setSavedReports] = useState<SavedReport[]>([]);\n  const [currentTab, setCurrentTab] = useState(0);\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [reportData, setReportData] = useState<ReportData | null>(null);\n  const [scheduleDialog, setScheduleDialog] = useState(false);\n  const [saveDialog, setSaveDialog] = useState(false);\n  const [reportName, setReportName] = useState('');\n  const [reportDescription, setReportDescription] = useState('');\n  const [schedule, setSchedule] = useState<ReportSchedule>({\n    frequency: 'weekly',\n    time: '09:00',\n    recipients: [],\n    format: 'pdf'\n  });\n\n  // Generate mock report data\n  const generateReportData = useCallback(async () => {\n    setIsGenerating(true);\n    \n    // Simulate API call\n    await new Promise(resolve => setTimeout(resolve, 1500));\n    \n    // Generate mock data based on selected metrics\n    const metrics: Record<string, number> = {};\n    selectedMetrics.forEach(metric => {\n      const baseValue = Math.random() * 10000;\n      metrics[metric.id] = metric.aggregation === 'avg' \n        ? parseFloat((Math.random() * 100).toFixed(2))\n        : Math.floor(baseValue);\n    });\n    \n    // Generate chart data\n    const chartData = Array.from({ length: 30 }, (_, i) => ({\n      date: format(subDays(new Date(), 30 - i), 'MMM dd'),\n      views: Math.floor(Math.random() * 5000),\n      revenue: parseFloat((Math.random() * 500).toFixed(2)),\n      videos: Math.floor(Math.random() * 10)\n    }));\n    \n    // Generate table data\n    const tableData = Array.from({ length: 10 }, (_, i) => [\n      `Video ${i + 1}`,\n      Math.floor(Math.random() * 100000),\n      parseFloat((Math.random() * 100).toFixed(2)),\n      format(subDays(new Date(), i), 'yyyy-MM-dd')\n    ]);\n    \n    setReportData({\n      metrics,\n      charts: [\n        { type: 'line', data: chartData },\n        { \n          type: 'pie', \n          data: [\n            { name: 'Ad Revenue', value: 4500 },\n            { name: 'Sponsorships', value: 2200 },\n            { name: 'Affiliates', value: 1800 },\n            { name: 'Other', value: 500 }\n          ]\n        }\n      ],\n      tables: [{\n        headers: ['Video Title', 'Views', 'Revenue ($)', 'Published Date'],\n        rows: tableData\n      }]\n    });\n    \n    setIsGenerating(false);\n  }, [selectedMetrics]);\n\n  // Export functions\n  const exportToPDF = useCallback(() => {\n    // In production, use jsPDF or similar\n    console.log('Exporting to PDF...');\n    alert('PDF export initiated. Report will be downloaded shortly.');\n  }, [reportData]);\n\n  const exportToExcel = useCallback(() => {\n    // In production, use xlsx or similar\n    console.log('Exporting to Excel...');\n    alert('Excel export initiated. Report will be downloaded shortly.');\n  }, [reportData]);\n\n  const exportToCSV = useCallback(() => {\n    if (!reportData) return;\n    \n    // Convert metrics to CSV\n    let csv = 'Metric,Value\\n';\n    Object.entries(reportData.metrics).forEach(([key, value]) => {\n      const metric = AVAILABLE_METRICS.find(m => m.id === key);\n      csv += `\"${metric?.name || key}\",${value}\\n`;\n    });\n    \n    // Add table data\n    if (reportData.tables.length > 0) {\n      csv += '\\n\\nDetailed Data\\n';\n      csv += reportData.tables[0].headers.join(',') + '\\n';\n      reportData.tables[0].rows.forEach(row => {\n        csv += row.join(',') + '\\n';\n      });\n    }\n    \n    // Download CSV\n    const blob = new Blob([csv], { type: 'text/csv' });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `report_${format(new Date(), 'yyyy-MM-dd')}.csv`;\n    a.click();\n  }, [reportData]);\n\n  // Save report\n  const saveReport = useCallback(() => {\n    const newReport: SavedReport = {\n      id: Date.now().toString(),\n      name: reportName,\n      description: reportDescription,\n      metrics: selectedMetrics.map(m => m.id),\n      filters,\n      dateRange,\n      createdAt: new Date(),\n      lastRun: new Date()\n    };\n    \n    setSavedReports([...savedReports, newReport]);\n    setSaveDialog(false);\n    setReportName('');\n    setReportDescription('');\n  }, [reportName, reportDescription, selectedMetrics, filters, dateRange, savedReports]);\n\n  // Load saved report\n  const loadSavedReport = useCallback((report: SavedReport) => {\n    const metrics = AVAILABLE_METRICS.map(m => ({\n      ...m,\n      selected: report.metrics.includes(m.id)\n    }));\n    setSelectedMetrics(metrics.filter(m => m.selected));\n    setFilters(report.filters);\n    setDateRange(report.dateRange);\n    generateReportData();\n  }, [generateReportData]);\n\n  // Metric selection\n  const toggleMetric = useCallback((metricId: string) => {\n    setSelectedMetrics(prev => {\n      const metric = AVAILABLE_METRICS.find(m => m.id === metricId);\n      if (!metric) return prev;\n      \n      const exists = prev.find(m => m.id === metricId);\n      if (exists) {\n        return prev.filter(m => m.id !== metricId);\n      } else {\n        return [...prev, metric];\n      }\n    });\n  }, []);\n\n  // Render metric categories\n  const renderMetricCategories = () => {\n    const categories = [...new Set(AVAILABLE_METRICS.map(m => m.category))];\n    \n    return categories.map(category => (\n      <Box key={category} sx={{ mb: 2 }}>\n        <Typography variant=\"subtitle2\" gutterBottom sx={{ fontWeight: 'bold' }}>\n          {category}\n        </Typography>\n        <FormGroup row>\n          {AVAILABLE_METRICS\n            .filter(m => m.category === category)\n            .map(metric => (\n              <FormControlLabel\n                key={metric.id}\n                control={\n                  <Checkbox\n                    checked={selectedMetrics.some(m => m.id === metric.id)}\n                    onChange={() => toggleMetric(metric.id)}\n                    size=\"small\"\n                  />\n                }\n                label={\n                  <Typography variant=\"body2\">{metric.name}</Typography>\n                }\n                sx={{ mr: 2 }}\n              />\n            ))}\n        </FormGroup>\n      </Box>\n    ));\n  };\n\n  // Render charts\n  const renderCharts = () => {\n    if (!reportData) return null;\n    \n    return (\n      <Grid container spacing={3}>\n        {/* Line Chart */}\n        <Grid item xs={12} lg={8}>\n          <Paper sx={{ p: 2 }}>\n            <Typography variant=\"h6\" gutterBottom>\n              Trend Analysis\n            </Typography>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <LineChart data={reportData.charts[0].data}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"date\" />\n                <YAxis />\n                <ChartTooltip />\n                <Legend />\n                <Line type=\"monotone\" dataKey=\"views\" stroke=\"#8884d8\" />\n                <Line type=\"monotone\" dataKey=\"revenue\" stroke=\"#82ca9d\" />\n                <Line type=\"monotone\" dataKey=\"videos\" stroke=\"#ffc658\" />\n              </LineChart>\n            </ResponsiveContainer>\n          </Paper>\n        </Grid>\n        \n        {/* Pie Chart */}\n        <Grid item xs={12} lg={4}>\n          <Paper sx={{ p: 2 }}>\n            <Typography variant=\"h6\" gutterBottom>\n              Revenue Breakdown\n            </Typography>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <PieChart>\n                <Pie\n                  data={reportData.charts[1].data}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  outerRadius={80}\n                  fill=\"#8884d8\"\n                  dataKey=\"value\"\n                  label\n                >\n                  {reportData.charts[1].data.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={['#0088FE', '#00C49F', '#FFBB28', '#FF8042'][index % 4]} />\n                  ))}\n                </Pie>\n                <ChartTooltip />\n              </PieChart>\n            </ResponsiveContainer>\n          </Paper>\n        </Grid>\n      </Grid>\n    );\n  };\n\n  return (\n    <Box sx={{ p: 3 }}>\n      <Typography variant=\"h4\" gutterBottom>\n        Custom Reports\n      </Typography>\n      \n      <Tabs value={currentTab} onChange={(e, v) => setCurrentTab(v)} sx={{ mb: 3 }}>\n        <Tab label=\"Create Report\" icon={<AddIcon />} />\n        <Tab label=\"Saved Reports\" icon={<SaveIcon />} />\n        <Tab label=\"Scheduled Reports\" icon={<ScheduleIcon />} />\n      </Tabs>\n      \n      {currentTab === 0 && (\n        <>\n          {/* Report Configuration */}\n          <Grid container spacing={3}>\n            {/* Date Range Selection */}\n            <Grid item xs={12}>\n              <Paper sx={{ p: 2 }}>\n                <Typography variant=\"h6\" gutterBottom>\n                  Date Range\n                </Typography>\n                <Stack direction=\"row\" spacing={2} alignItems=\"center\">\n                  {PRESET_DATE_RANGES.map(preset => (\n                    <Button\n                      key={preset.label}\n                      variant=\"outlined\"\n                      size=\"small\"\n                      onClick={() => setDateRange(preset.getValue() as [Date, Date])}\n                    >\n                      {preset.label}\n                    </Button>\n                  ))}\n                  <DateRangePicker\n                    value={dateRange}\n                    onChange={(newValue) => setDateRange(newValue as [Date, Date])}\n                    renderInput={(startProps, endProps) => (\n                      <React.Fragment>\n                        <TextField {...startProps} size=\"small\" />\n                        <Box sx={{ mx: 2 }}> to </Box>\n                        <TextField {...endProps} size=\"small\" />\n                      </React.Fragment>\n                    )}\n                  />\n                </Stack>\n              </Paper>\n            </Grid>\n            \n            {/* Metric Selection */}\n            <Grid item xs={12}>\n              <Paper sx={{ p: 2 }}>\n                <Typography variant=\"h6\" gutterBottom>\n                  Select Metrics\n                </Typography>\n                {renderMetricCategories()}\n                <Box sx={{ mt: 2 }}>\n                  <Chip\n                    label={`${selectedMetrics.length} metrics selected`}\n                    color=\"primary\"\n                    sx={{ mr: 1 }}\n                  />\n                </Box>\n              </Paper>\n            </Grid>\n            \n            {/* Generate Button */}\n            <Grid item xs={12}>\n              <Box sx={{ display: 'flex', gap: 2 }}>\n                <Button\n                  variant=\"contained\"\n                  size=\"large\"\n                  startIcon={<RefreshIcon />}\n                  onClick={generateReportData}\n                  disabled={isGenerating || selectedMetrics.length === 0}\n                >\n                  Generate Report\n                </Button>\n                <Button\n                  variant=\"outlined\"\n                  startIcon={<SaveIcon />}\n                  onClick={() => setSaveDialog(true)}\n                  disabled={!reportData}\n                >\n                  Save Report\n                </Button>\n                <Button\n                  variant=\"outlined\"\n                  startIcon={<ScheduleIcon />}\n                  onClick={() => setScheduleDialog(true)}\n                  disabled={!reportData}\n                >\n                  Schedule Report\n                </Button>\n              </Box>\n            </Grid>\n          </Grid>\n          \n          {/* Loading State */}\n          {isGenerating && (\n            <Box sx={{ mt: 3 }}>\n              <LinearProgress />\n              <Typography variant=\"body2\" sx={{ mt: 1 }}>\n                Generating report...\n              </Typography>\n            </Box>\n          )}\n          \n          {/* Report Results */}\n          {reportData && !isGenerating && (\n            <Box sx={{ mt: 3 }}>\n              {/* Export Buttons */}\n              <Box sx={{ mb: 3, display: 'flex', gap: 2 }}>\n                <Button\n                  variant=\"contained\"\n                  startIcon={<PdfIcon />}\n                  onClick={exportToPDF}\n                  color=\"error\"\n                >\n                  Export PDF\n                </Button>\n                <Button\n                  variant=\"contained\"\n                  startIcon={<ExcelIcon />}\n                  onClick={exportToExcel}\n                  color=\"success\"\n                >\n                  Export Excel\n                </Button>\n                <Button\n                  variant=\"contained\"\n                  startIcon={<CsvIcon />}\n                  onClick={exportToCSV}\n                >\n                  Export CSV\n                </Button>\n                <Button\n                  variant=\"outlined\"\n                  startIcon={<EmailIcon />}\n                >\n                  Email Report\n                </Button>\n                <Button\n                  variant=\"outlined\"\n                  startIcon={<ShareIcon />}\n                >\n                  Share Report\n                </Button>\n              </Box>\n              \n              {/* Metrics Summary */}\n              <Grid container spacing={2} sx={{ mb: 3 }}>\n                {Object.entries(reportData.metrics).map(([key, value]) => {\n                  const metric = AVAILABLE_METRICS.find(m => m.id === key);\n                  return (\n                    <Grid item xs={12} sm={6} md={3} key={key}>\n                      <Card>\n                        <CardContent>\n                          <Typography color=\"textSecondary\" gutterBottom variant=\"body2\">\n                            {metric?.name || key}\n                          </Typography>\n                          <Typography variant=\"h5\">\n                            {typeof value === 'number' && value > 1000 \n                              ? value.toLocaleString()\n                              : value}\n                          </Typography>\n                        </CardContent>\n                      </Card>\n                    </Grid>\n                  );\n                })}\n              </Grid>\n              \n              {/* Charts */}\n              {renderCharts()}\n              \n              {/* Data Table */}\n              {reportData.tables.length > 0 && (\n                <Paper sx={{ mt: 3, p: 2 }}>\n                  <Typography variant=\"h6\" gutterBottom>\n                    Detailed Data\n                  </Typography>\n                  <Box sx={{ overflowX: 'auto' }}>\n                    <table style={{ width: '100%', borderCollapse: 'collapse' }}>\n                      <thead>\n                        <tr>\n                          {reportData.tables[0].headers.map((header, i) => (\n                            <th key={i} style={{ \n                              padding: '8px', \n                              borderBottom: '2px solid #ddd',\n                              textAlign: 'left'\n                            }}>\n                              {header}\n                            </th>\n                          ))}\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {reportData.tables[0].rows.map((row, i) => (\n                          <tr key={i}>\n                            {row.map((cell, j) => (\n                              <td key={j} style={{ \n                                padding: '8px', \n                                borderBottom: '1px solid #eee' \n                              }}>\n                                {cell}\n                              </td>\n                            ))}\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                  </Box>\n                </Paper>\n              )}\n            </Box>\n          )}\n        </>\n      )}\n      \n      {currentTab === 1 && (\n        <Grid container spacing={2}>\n          {savedReports.map(report => (\n            <Grid item xs={12} md={6} lg={4} key={report.id}>\n              <Card>\n                <CardContent>\n                  <Typography variant=\"h6\">{report.name}</Typography>\n                  <Typography variant=\"body2\" color=\"textSecondary\" paragraph>\n                    {report.description}\n                  </Typography>\n                  <Typography variant=\"caption\" display=\"block\">\n                    Created: {format(report.createdAt, 'MMM dd, yyyy')}\n                  </Typography>\n                  <Typography variant=\"caption\" display=\"block\">\n                    Last Run: {format(report.lastRun, 'MMM dd, yyyy HH:mm')}\n                  </Typography>\n                  <Box sx={{ mt: 2, display: 'flex', gap: 1 }}>\n                    <Button \n                      size=\"small\" \n                      variant=\"contained\"\n                      onClick={() => loadSavedReport(report)}\n                    >\n                      Load\n                    </Button>\n                    <Button size=\"small\" variant=\"outlined\">\n                      Edit\n                    </Button>\n                    <IconButton size=\"small\" color=\"error\">\n                      <DeleteIcon />\n                    </IconButton>\n                  </Box>\n                </CardContent>\n              </Card>\n            </Grid>\n          ))}\n        </Grid>\n      )}\n      \n      {/* Save Report Dialog */}\n      <Dialog open={saveDialog} onClose={() => setSaveDialog(false)} maxWidth=\"sm\" fullWidth>\n        <DialogTitle>Save Report Configuration</DialogTitle>\n        <DialogContent>\n          <TextField\n            fullWidth\n            label=\"Report Name\"\n            value={reportName}\n            onChange={(e) => setReportName(e.target.value)}\n            margin=\"normal\"\n          />\n          <TextField\n            fullWidth\n            label=\"Description\"\n            value={reportDescription}\n            onChange={(e) => setReportDescription(e.target.value)}\n            multiline\n            rows={3}\n            margin=\"normal\"\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setSaveDialog(false)}>Cancel</Button>\n          <Button onClick={saveReport} variant=\"contained\">Save</Button>\n        </DialogActions>\n      </Dialog>\n      \n      {/* Schedule Report Dialog */}\n      <Dialog open={scheduleDialog} onClose={() => setScheduleDialog(false)} maxWidth=\"sm\" fullWidth>\n        <DialogTitle>Schedule Report</DialogTitle>\n        <DialogContent>\n          <FormControl fullWidth margin=\"normal\">\n            <InputLabel>Frequency</InputLabel>\n            <Select\n              value={schedule.frequency}\n              onChange={(e) => setSchedule({ ...schedule, frequency: e.target.value as any })}\n            >\n              <MenuItem value=\"daily\">Daily</MenuItem>\n              <MenuItem value=\"weekly\">Weekly</MenuItem>\n              <MenuItem value=\"monthly\">Monthly</MenuItem>\n            </Select>\n          </FormControl>\n          <TextField\n            fullWidth\n            type=\"time\"\n            label=\"Time\"\n            value={schedule.time}\n            onChange={(e) => setSchedule({ ...schedule, time: e.target.value })}\n            margin=\"normal\"\n            InputLabelProps={{ shrink: true }}\n          />\n          <FormControl fullWidth margin=\"normal\">\n            <InputLabel>Format</InputLabel>\n            <Select\n              value={schedule.format}\n              onChange={(e) => setSchedule({ ...schedule, format: e.target.value as any })}\n            >\n              <MenuItem value=\"pdf\">PDF</MenuItem>\n              <MenuItem value=\"excel\">Excel</MenuItem>\n              <MenuItem value=\"csv\">CSV</MenuItem>\n            </Select>\n          </FormControl>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setScheduleDialog(false)}>Cancel</Button>\n          <Button variant=\"contained\">Schedule</Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Reports\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\ThemeToggle\\ThemeToggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\UILibrary\\ComponentLibrary.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CardProps' is defined but never used.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Avatar' is defined but never used.","line":24,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AvatarProps' is defined but never used.","line":25,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Tooltip' is defined but never used.","line":26,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TooltipProps' is defined but never used.","line":27,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Grow' is defined but never used.","line":29,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Zoom' is defined but never used.","line":30,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Modal' is defined but never used.","line":32,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Close' is defined but never used.","line":41,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Info' is defined but never used.","line":42,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":42,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Warning' is defined but never used.","line":43,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":43,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ErrorIcon' is defined but never used.","line":44,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":44,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CheckCircle' is defined but never used.","line":46,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'RadioButtonUnchecked' is defined but never used.","line":47,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":47,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'rotate' is assigned a value but never used.","line":75,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":75,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'theme' is assigned a value but never used.","line":230,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":230,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'exclusive' is assigned a value but never used.","line":624,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":624,"endColumn":12}],"suppressedMessages":[],"errorCount":17,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Component Library Expansion\r\n * Reusable UI components for consistent design across the application\r\n */\r\n\r\nimport React, { ReactNode, useState, useEffect, useRef } from 'react';\r\nimport {\r\n  Box,\r\n  Button as MuiButton,\r\n  ButtonProps,\r\n  Card as MuiCard,\r\n  CardProps,\r\n  CircularProgress,\r\n  Skeleton,\r\n  Typography,\r\n  IconButton,\r\n  Paper,\r\n  Alert,\r\n  AlertProps,\r\n  Chip,\r\n  ChipProps,\r\n  Badge,\r\n  BadgeProps,\r\n  Avatar,\r\n  AvatarProps,\r\n  Tooltip,\r\n  TooltipProps,\r\n  Fade,\r\n  Grow,\r\n  Zoom,\r\n  Slide,\r\n  Modal,\r\n  Backdrop,\r\n  styled,\r\n  keyframes,\r\n  useTheme,\r\n  alpha,\r\n} from '@mui/material';\r\nimport {\r\n  Check,\r\n  Close,\r\n  Info,\r\n  Warning,\r\n  Error as ErrorIcon,\r\n  ContentCopy,\r\n  CheckCircle,\r\n  RadioButtonUnchecked,\r\n  CloudUpload,\r\n  Visibility,\r\n  VisibilityOff,\r\n} from '@mui/icons-material';\r\n\r\n// ============= Animations =============\r\nconst pulse = keyframes`\r\n  0% {\r\n    box-shadow: 0 0 0 0 rgba(33, 150, 243, 0.7);\r\n  }\r\n  70% {\r\n    box-shadow: 0 0 0 10px rgba(33, 150, 243, 0);\r\n  }\r\n  100% {\r\n    box-shadow: 0 0 0 0 rgba(33, 150, 243, 0);\r\n  }\r\n`;\r\n\r\nconst shimmer = keyframes`\r\n  0% {\r\n    background-position: -1000px 0;\r\n  }\r\n  100% {\r\n    background-position: 1000px 0;\r\n  }\r\n`;\r\n\r\nconst rotate = keyframes`\r\n  from {\r\n    transform: rotate(0deg);\r\n  }\r\n  to {\r\n    transform: rotate(360deg);\r\n  }\r\n`;\r\n\r\n// ============= Loading Components =============\r\nexport const LoadingButton: React.FC<ButtonProps & { loading?: boolean }> = ({\r\n  loading,\r\n  children,\r\n  disabled,\r\n  startIcon,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <MuiButton\r\n      {...props}\r\n      disabled={disabled || loading}\r\n      startIcon={loading ? <CircularProgress size={20} /> : startIcon}\r\n    >\r\n      {children}\r\n    </MuiButton>\r\n  );\r\n};\r\n\r\nexport const SkeletonCard: React.FC<{ height?: number; animate?: boolean }> = ({\r\n  height = 200,\r\n  animate = true,\r\n}) => {\r\n  return (\r\n    <MuiCard sx={{ height, overflow: 'hidden' }}>\r\n      <Skeleton\r\n        variant=\"rectangular\"\r\n        height={height}\r\n        animation={animate ? 'pulse' : false}\r\n        sx={{\r\n          background: animate\r\n            ? `linear-gradient(90deg, transparent, rgba(255,255,255,0.1), transparent)`\r\n            : undefined,\r\n          animation: animate ? `${shimmer} 2s infinite` : undefined,\r\n        }}\r\n      />\r\n    </MuiCard>\r\n  );\r\n};\r\n\r\nexport const LoadingOverlay: React.FC<{ open: boolean; message?: string }> = ({\r\n  open,\r\n  message = 'Loading...',\r\n}) => {\r\n  return (\r\n    <Backdrop\r\n      sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }}\r\n      open={open}\r\n    >\r\n      <Box textAlign=\"center\">\r\n        <CircularProgress color=\"inherit\" />\r\n        {message && (\r\n          <Typography variant=\"body1\" sx={{ mt: 2 }}>\r\n            {message}\r\n          </Typography>\r\n        )}\r\n      </Box>\r\n    </Backdrop>\r\n  );\r\n};\r\n\r\n// ============= Status Components =============\r\nexport interface StatusBadgeProps extends BadgeProps {\r\n  status: 'online' | 'offline' | 'busy' | 'away';\r\n}\r\n\r\nexport const StatusBadge: React.FC<StatusBadgeProps> = ({ status, children, ...props }) => {\r\n  const colors = {\r\n    online: '#44b700',\r\n    offline: '#757575',\r\n    busy: '#f44336',\r\n    away: '#ff9800',\r\n  };\r\n\r\n  const StyledBadge = styled(Badge)(({ theme }) => ({\r\n    '& .MuiBadge-badge': {\r\n      backgroundColor: colors[status],\r\n      color: colors[status],\r\n      boxShadow: `0 0 0 2px ${theme.palette.background.paper}`,\r\n      '&::after': {\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        borderRadius: '50%',\r\n        animation: status === 'online' ? `${pulse} 1.5s infinite` : undefined,\r\n        border: '1px solid currentColor',\r\n        content: '\"\"',\r\n      },\r\n    },\r\n  }));\r\n\r\n  return (\r\n    <StyledBadge\r\n      overlap=\"circular\"\r\n      anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\r\n      variant=\"dot\"\r\n      {...props}\r\n    >\r\n      {children}\r\n    </StyledBadge>\r\n  );\r\n};\r\n\r\nexport const StatusChip: React.FC<ChipProps & { status: string }> = ({ status, ...props }) => {\r\n  const getColor = () => {\r\n    switch (status.toLowerCase()) {\r\n      case 'active':\r\n      case 'success':\r\n      case 'completed':\r\n        return 'success';\r\n      case 'pending':\r\n      case 'processing':\r\n      case 'warning':\r\n        return 'warning';\r\n      case 'error':\r\n      case 'failed':\r\n      case 'cancelled':\r\n        return 'error';\r\n      default:\r\n        return 'default';\r\n    }\r\n  };\r\n\r\n  return <Chip size=\"small\" label={status} color={getColor()} {...props} />;\r\n};\r\n\r\n// ============= Card Components =============\r\nexport interface MetricCardProps {\r\n  title: string;\r\n  value: string | number;\r\n  change?: number;\r\n  icon?: ReactNode;\r\n  color?: string;\r\n  loading?: boolean;\r\n}\r\n\r\nexport const MetricCard: React.FC<MetricCardProps> = ({\r\n  title,\r\n  value,\r\n  change,\r\n  icon,\r\n  color = '#2196F3',\r\n  loading,\r\n}) => {\r\n  const theme = useTheme();\r\n\r\n  if (loading) {\r\n    return (\r\n      <MuiCard>\r\n        <Box p={2}>\r\n          <Skeleton variant=\"text\" width=\"60%\" />\r\n          <Skeleton variant=\"text\" width=\"40%\" height={40} />\r\n          <Skeleton variant=\"text\" width=\"30%\" />\r\n        </Box>\r\n      </MuiCard>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <MuiCard>\r\n      <Box p={2}>\r\n        <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\r\n          <Box>\r\n            <Typography color=\"text.secondary\" gutterBottom variant=\"body2\">\r\n              {title}\r\n            </Typography>\r\n            <Typography variant=\"h4\">{value}</Typography>\r\n            {change !== undefined && (\r\n              <Typography\r\n                variant=\"body2\"\r\n                color={change >= 0 ? 'success.main' : 'error.main'}\r\n                sx={{ mt: 1 }}\r\n              >\r\n                {change >= 0 ? '+' : ''}{change}%\r\n              </Typography>\r\n            )}\r\n          </Box>\r\n          {icon && (\r\n            <Box\r\n              sx={{\r\n                backgroundColor: alpha(color, 0.1),\r\n                borderRadius: 2,\r\n                p: 1.5,\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n              }}\r\n            >\r\n              {React.cloneElement(icon as React.ReactElement, {\r\n                sx: { color, fontSize: 32 },\r\n              })}\r\n            </Box>\r\n          )}\r\n        </Box>\r\n      </Box>\r\n    </MuiCard>\r\n  );\r\n};\r\n\r\nexport const GlassCard = styled(MuiCard)(({ theme }) => ({\r\n  background: alpha(theme.palette.background.paper, 0.8),\r\n  backdropFilter: 'blur(10px)',\r\n  border: `1px solid ${alpha(theme.palette.divider, 0.1)}`,\r\n  transition: 'all 0.3s ease',\r\n  '&:hover': {\r\n    transform: 'translateY(-4px)',\r\n    boxShadow: theme.shadows[8],\r\n  },\r\n}));\r\n\r\n// ============= Input Components =============\r\nexport interface CopyableTextProps {\r\n  text: string;\r\n  variant?: 'body1' | 'body2' | 'caption';\r\n  showIcon?: boolean;\r\n}\r\n\r\nexport const CopyableText: React.FC<CopyableTextProps> = ({\r\n  text,\r\n  variant = 'body2',\r\n  showIcon = true,\r\n}) => {\r\n  const [copied, setCopied] = useState(false);\r\n\r\n  const handleCopy = async () => {\r\n    try {\r\n      await navigator.clipboard.writeText(text);\r\n      setCopied(true);\r\n      setTimeout(() => setCopied(false), 2000);\r\n    } catch (err) {\r\n      console.error('Failed to copy:', err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box display=\"flex\" alignItems=\"center\" gap={1}>\r\n      <Typography variant={variant} sx={{ fontFamily: 'monospace' }}>\r\n        {text}\r\n      </Typography>\r\n      {showIcon && (\r\n        <IconButton size=\"small\" onClick={handleCopy}>\r\n          {copied ? <Check fontSize=\"small\" /> : <ContentCopy fontSize=\"small\" />}\r\n        </IconButton>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport interface FileUploadProps {\r\n  onFileSelect: (files: FileList) => void;\r\n  accept?: string;\r\n  multiple?: boolean;\r\n  maxSize?: number; // in MB\r\n  disabled?: boolean;\r\n}\r\n\r\nexport const FileUploadButton: React.FC<FileUploadProps> = ({\r\n  onFileSelect,\r\n  accept,\r\n  multiple,\r\n  maxSize,\r\n  disabled,\r\n}) => {\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const handleClick = () => {\r\n    inputRef.current?.click();\r\n  };\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const files = e.target.files;\r\n    if (!files) return;\r\n\r\n    if (maxSize) {\r\n      const oversizedFiles = Array.from(files).filter(\r\n        (file) => file.size > maxSize * 1024 * 1024\r\n      );\r\n      if (oversizedFiles.length > 0) {\r\n        setError(`File size must be less than ${maxSize}MB`);\r\n        return;\r\n      }\r\n    }\r\n\r\n    setError(null);\r\n    onFileSelect(files);\r\n  };\r\n\r\n  return (\r\n    <Box>\r\n      <input\r\n        ref={inputRef}\r\n        type=\"file\"\r\n        accept={accept}\r\n        multiple={multiple}\r\n        onChange={handleChange}\r\n        style={{ display: 'none' }}\r\n      />\r\n      <MuiButton\r\n        variant=\"outlined\"\r\n        startIcon={<CloudUpload />}\r\n        onClick={handleClick}\r\n        disabled={disabled}\r\n      >\r\n        Upload File\r\n      </MuiButton>\r\n      {error && (\r\n        <Typography variant=\"caption\" color=\"error\" sx={{ mt: 1 }}>\r\n          {error}\r\n        </Typography>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\n// ============= Notification Components =============\r\nexport interface ToastProps extends AlertProps {\r\n  open: boolean;\r\n  message: string;\r\n  autoHideDuration?: number;\r\n  onClose: () => void;\r\n}\r\n\r\nexport const Toast: React.FC<ToastProps> = ({\r\n  open,\r\n  message,\r\n  autoHideDuration = 6000,\r\n  onClose,\r\n  severity = 'info',\r\n  ...props\r\n}) => {\r\n  useEffect(() => {\r\n    if (open && autoHideDuration) {\r\n      const timer = setTimeout(onClose, autoHideDuration);\r\n      return () => clearTimeout(timer);\r\n    }\r\n  }, [open, autoHideDuration, onClose]);\r\n\r\n  return (\r\n    <Slide direction=\"up\" in={open} mountOnEnter unmountOnExit>\r\n      <Alert\r\n        severity={severity}\r\n        onClose={onClose}\r\n        sx={{\r\n          position: 'fixed',\r\n          bottom: 24,\r\n          right: 24,\r\n          zIndex: 9999,\r\n          minWidth: 300,\r\n        }}\r\n        {...props}\r\n      >\r\n        {message}\r\n      </Alert>\r\n    </Slide>\r\n  );\r\n};\r\n\r\n// ============= Progress Components =============\r\nexport interface StepperProps {\r\n  steps: string[];\r\n  activeStep: number;\r\n  completed?: number[];\r\n}\r\n\r\nexport const ProgressStepper: React.FC<StepperProps> = ({ steps, activeStep, completed = [] }) => {\r\n  return (\r\n    <Box display=\"flex\" alignItems=\"center\">\r\n      {steps.map((step, index) => (\r\n        <React.Fragment key={step}>\r\n          <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\r\n            <Box\r\n              sx={{\r\n                width: 32,\r\n                height: 32,\r\n                borderRadius: '50%',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                backgroundColor:\r\n                  completed.includes(index) || index < activeStep\r\n                    ? 'primary.main'\r\n                    : index === activeStep\r\n                    ? 'primary.light'\r\n                    : 'grey.300',\r\n                color: 'white',\r\n                fontWeight: 'bold',\r\n              }}\r\n            >\r\n              {completed.includes(index) ? (\r\n                <Check fontSize=\"small\" />\r\n              ) : (\r\n                <Typography variant=\"caption\">{index + 1}</Typography>\r\n              )}\r\n            </Box>\r\n            <Typography\r\n              variant=\"caption\"\r\n              sx={{\r\n                mt: 0.5,\r\n                color: index <= activeStep ? 'text.primary' : 'text.secondary',\r\n              }}\r\n            >\r\n              {step}\r\n            </Typography>\r\n          </Box>\r\n          {index < steps.length - 1 && (\r\n            <Box\r\n              sx={{\r\n                flex: 1,\r\n                height: 2,\r\n                mx: 1,\r\n                backgroundColor: index < activeStep ? 'primary.main' : 'grey.300',\r\n              }}\r\n            />\r\n          )}\r\n        </React.Fragment>\r\n      ))}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport const CircularProgressWithLabel: React.FC<{ value: number; size?: number }> = ({\r\n  value,\r\n  size = 60,\r\n}) => {\r\n  return (\r\n    <Box position=\"relative\" display=\"inline-flex\">\r\n      <CircularProgress variant=\"determinate\" value={value} size={size} />\r\n      <Box\r\n        position=\"absolute\"\r\n        top=\"50%\"\r\n        left=\"50%\"\r\n        sx={{\r\n          transform: 'translate(-50%, -50%)',\r\n        }}\r\n      >\r\n        <Typography variant=\"caption\" component=\"div\" color=\"text.secondary\">\r\n          {`${Math.round(value)}%`}\r\n        </Typography>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\n// ============= Data Display Components =============\r\nexport interface EmptyStateProps {\r\n  title: string;\r\n  description?: string;\r\n  icon?: ReactNode;\r\n  action?: ReactNode;\r\n}\r\n\r\nexport const EmptyState: React.FC<EmptyStateProps> = ({ title, description, icon, action }) => {\r\n  return (\r\n    <Paper\r\n      sx={{\r\n        p: 4,\r\n        textAlign: 'center',\r\n        backgroundColor: 'background.default',\r\n      }}\r\n    >\r\n      {icon && (\r\n        <Box sx={{ fontSize: 64, color: 'text.secondary', mb: 2 }}>\r\n          {icon}\r\n        </Box>\r\n      )}\r\n      <Typography variant=\"h6\" gutterBottom>\r\n        {title}\r\n      </Typography>\r\n      {description && (\r\n        <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\r\n          {description}\r\n        </Typography>\r\n      )}\r\n      {action && <Box mt={2}>{action}</Box>}\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport interface StatCardProps {\r\n  label: string;\r\n  value: string | number;\r\n  icon?: ReactNode;\r\n  trend?: 'up' | 'down' | 'stable';\r\n  trendValue?: string;\r\n}\r\n\r\nexport const StatCard: React.FC<StatCardProps> = ({\r\n  label,\r\n  value,\r\n  icon,\r\n  trend,\r\n  trendValue,\r\n}) => {\r\n  const getTrendColor = () => {\r\n    switch (trend) {\r\n      case 'up': return 'success.main';\r\n      case 'down': return 'error.main';\r\n      default: return 'text.secondary';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Paper sx={{ p: 2 }}>\r\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"flex-start\">\r\n        <Box>\r\n          <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\r\n            {label}\r\n          </Typography>\r\n          <Typography variant=\"h5\">{value}</Typography>\r\n          {trend && trendValue && (\r\n            <Typography variant=\"caption\" color={getTrendColor()}>\r\n              {trend === 'up' ? '↑' : trend === 'down' ? '↓' : '→'} {trendValue}\r\n            </Typography>\r\n          )}\r\n        </Box>\r\n        {icon && (\r\n          <Box sx={{ color: 'primary.main', opacity: 0.6 }}>\r\n            {icon}\r\n          </Box>\r\n        )}\r\n      </Box>\r\n    </Paper>\r\n  );\r\n};\r\n\r\n// ============= Interactive Components =============\r\nexport interface ToggleButtonGroupProps {\r\n  options: { value: string; label: string; icon?: ReactNode }[];\r\n  value: string;\r\n  onChange: (value: string) => void;\r\n  exclusive?: boolean;\r\n}\r\n\r\nexport const StyledToggleButtonGroup: React.FC<ToggleButtonGroupProps> = ({\r\n  options,\r\n  value,\r\n  onChange,\r\n  exclusive = true,\r\n}) => {\r\n  return (\r\n    <Paper sx={{ p: 0.5, display: 'inline-flex' }}>\r\n      {options.map((option) => (\r\n        <MuiButton\r\n          key={option.value}\r\n          size=\"small\"\r\n          variant={value === option.value ? 'contained' : 'text'}\r\n          onClick={() => onChange(option.value)}\r\n          startIcon={option.icon}\r\n          sx={{ mx: 0.5 }}\r\n        >\r\n          {option.label}\r\n        </MuiButton>\r\n      ))}\r\n    </Paper>\r\n  );\r\n};\r\n\r\n// ============= Animation Wrappers =============\r\nexport const FadeIn: React.FC<{ children: ReactNode; delay?: number }> = ({\r\n  children,\r\n  delay = 0,\r\n}) => {\r\n  const [show, setShow] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const timer = setTimeout(() => setShow(true), delay);\r\n    return () => clearTimeout(timer);\r\n  }, [delay]);\r\n\r\n  return (\r\n    <Fade in={show} timeout={1000}>\r\n      <Box>{children}</Box>\r\n    </Fade>\r\n  );\r\n};\r\n\r\nexport const SlideIn: React.FC<{\r\n  children: ReactNode;\r\n  direction?: 'left' | 'right' | 'up' | 'down';\r\n}> = ({ children, direction = 'up' }) => {\r\n  return (\r\n    <Slide direction={direction} in={true} timeout={500}>\r\n      <Box>{children}</Box>\r\n    </Slide>\r\n  );\r\n};\r\n\r\n// ============= Utility Components =============\r\nexport const Divider: React.FC<{ text?: string }> = ({ text }) => {\r\n  return (\r\n    <Box display=\"flex\" alignItems=\"center\" my={2}>\r\n      <Box flex={1} height={1} bgcolor=\"divider\" />\r\n      {text && (\r\n        <>\r\n          <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mx: 2 }}>\r\n            {text}\r\n          </Typography>\r\n          <Box flex={1} height={1} bgcolor=\"divider\" />\r\n        </>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport const PasswordField: React.FC<{\r\n  value: string;\r\n  onChange: (value: string) => void;\r\n  label?: string;\r\n}> = ({ value, onChange, label = 'Password' }) => {\r\n  const [showPassword, setShowPassword] = useState(false);\r\n\r\n  return (\r\n    <Box position=\"relative\">\r\n      <input\r\n        type={showPassword ? 'text' : 'password'}\r\n        value={value}\r\n        onChange={(e) => onChange(e.target.value)}\r\n        placeholder={label}\r\n        style={{\r\n          width: '100%',\r\n          padding: '12px',\r\n          paddingRight: '40px',\r\n          border: '1px solid #ccc',\r\n          borderRadius: '4px',\r\n          fontSize: '16px',\r\n        }}\r\n      />\r\n      <IconButton\r\n        size=\"small\"\r\n        onClick={() => setShowPassword(!showPassword)}\r\n        sx={{\r\n          position: 'absolute',\r\n          right: 8,\r\n          top: '50%',\r\n          transform: 'translateY(-50%)',\r\n        }}\r\n      >\r\n        {showPassword ? <VisibilityOff /> : <Visibility />}\r\n      </IconButton>\r\n    </Box>\r\n  );\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\UserJourney\\BetaUserJourneyOptimizer.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":1,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Dialog' is defined but never used.","line":28,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DialogTitle' is defined but never used.","line":29,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DialogContent' is defined but never used.","line":30,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DialogActions' is defined but never used.","line":31,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TextField' is defined but never used.","line":32,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Badge' is defined but never used.","line":40,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Tooltip' is defined but never used.","line":41,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AccessTime' is defined but never used.","line":54,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":54,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'VisibilityOff' is defined but never used.","line":58,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":58,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ThumbUp' is defined but never used.","line":59,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":59,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ThumbDown' is defined but never used.","line":60,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":60,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Comment' is defined but never used.","line":61,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":61,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Share' is defined but never used.","line":62,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":62,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TimelineIcon' is defined but never used.","line":63,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":63,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Assessment' is defined but never used.","line":64,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":64,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Psychology' is defined but never used.","line":65,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":65,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'NavigateBefore' is defined but never used.","line":70,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":70,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Groups' is defined but never used.","line":72,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":72,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TrendingUp' is defined but never used.","line":73,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":73,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TrendingDown' is defined but never used.","line":74,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":74,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Delete' is defined but never used.","line":76,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":76,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'formatDuration' is defined but never used.","line":78,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":78,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'playbackSpeed' is assigned a value but never used.","line":146,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":146,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'currentActionIndex' is assigned a value but never used.","line":148,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":148,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setCurrentActionIndex' is assigned a value but never used.","line":148,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":148,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'showHeatmap' is assigned a value but never used.","line":150,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":150,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setShowHeatmap' is assigned a value but never used.","line":150,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":150,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'selectedPainPoint' is assigned a value but never used.","line":151,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":151,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setSelectedPainPoint' is assigned a value but never used.","line":151,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":151,"endColumn":49},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":626,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":626,"endColumn":45}],"suppressedMessages":[],"errorCount":31,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Grid,\n  Card,\n  CardContent,\n  CardHeader,\n  Typography,\n  Button,\n  IconButton,\n  Chip,\n  Alert,\n  Timeline,\n  TimelineItem,\n  TimelineSeparator,\n  TimelineConnector,\n  TimelineContent,\n  TimelineDot,\n  TimelineOppositeContent,\n  Paper,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  ListItemSecondaryAction,\n  Avatar,\n  LinearProgress,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  Rating,\n  Stepper,\n  Step,\n  StepLabel,\n  StepContent,\n  Tabs,\n  Tab,\n  Badge,\n  Tooltip,\n  useTheme,\n  Divider,\n} from '@mui/material';\nimport {\n  PlayCircle,\n  Pause,\n  FastForward,\n  FastRewind,\n  BugReport,\n  CheckCircle,\n  Warning,\n  Error,\n  AccessTime,\n  Mouse,\n  TouchApp,\n  Visibility,\n  VisibilityOff,\n  ThumbUp,\n  ThumbDown,\n  Comment,\n  Share,\n  Timeline as TimelineIcon,\n  Assessment,\n  Psychology,\n  EmojiEmotions,\n  SentimentDissatisfied,\n  SentimentNeutral,\n  NavigateNext,\n  NavigateBefore,\n  Person,\n  Groups,\n  TrendingUp,\n  TrendingDown,\n  Edit,\n  Delete,\n} from '@mui/icons-material';\nimport { format, formatDuration } from 'date-fns';\n\ninterface SessionRecording {\n  id: string;\n  userId: string;\n  userName: string;\n  startTime: Date;\n  endTime: Date;\n  duration: number;\n  pages: string[];\n  actions: UserAction[];\n  painPoints: PainPoint[];\n  sentiment: 'positive' | 'neutral' | 'negative';\n  completionRate: number;\n  device: 'desktop' | 'mobile' | 'tablet';\n}\n\ninterface UserAction {\n  id: string;\n  timestamp: Date;\n  type: 'click' | 'scroll' | 'input' | 'navigation' | 'error' | 'rage_click' | 'dead_click';\n  element: string;\n  page: string;\n  value?: string;\n  duration?: number;\n  coordinates?: { x: number; y: number };\n  success: boolean;\n}\n\ninterface PainPoint {\n  id: string;\n  type: 'confusion' | 'frustration' | 'error' | 'abandonment' | 'slow_task';\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  page: string;\n  element: string;\n  description: string;\n  timestamp: Date;\n  duration: number;\n  recommendation: string;\n  impactedUsers: number;\n}\n\ninterface JourneyStep {\n  id: string;\n  name: string;\n  expectedDuration: number;\n  actualDuration: number;\n  completionRate: number;\n  dropoffRate: number;\n  painPoints: number;\n  satisfaction: number;\n}\n\ninterface WireframeImprovement {\n  id: string;\n  page: string;\n  component: string;\n  currentDesign: string;\n  proposedDesign: string;\n  reason: string;\n  impact: 'high' | 'medium' | 'low';\n  effort: 'high' | 'medium' | 'low';\n  status: 'pending' | 'in_progress' | 'completed' | 'tested';\n}\n\nexport const BetaUserJourneyOptimizer: React.FC = () => {\n  const theme = useTheme();\n  const [selectedSession, setSelectedSession] = useState<SessionRecording | null>(null);\n  const [playbackSpeed, setPlaybackSpeed] = useState(1);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentActionIndex, setCurrentActionIndex] = useState(0);\n  const [tabValue, setTabValue] = useState(0);\n  const [showHeatmap, setShowHeatmap] = useState(false);\n  const [selectedPainPoint, setSelectedPainPoint] = useState<PainPoint | null>(null);\n\n  // Mock data\n  const [sessions] = useState<SessionRecording[]>([\n    {\n      id: '1',\n      userId: 'beta_user_1',\n      userName: 'John Doe',\n      startTime: new Date('2024-01-15T10:30:00'),\n      endTime: new Date('2024-01-15T10:45:00'),\n      duration: 900,\n      pages: ['/dashboard', '/videos/create', '/channels', '/analytics'],\n      actions: [\n        {\n          id: 'a1',\n          timestamp: new Date('2024-01-15T10:30:00'),\n          type: 'navigation',\n          element: 'dashboard',\n          page: '/dashboard',\n          success: true,\n        },\n        {\n          id: 'a2',\n          timestamp: new Date('2024-01-15T10:31:00'),\n          type: 'click',\n          element: 'create_video_button',\n          page: '/dashboard',\n          success: true,\n        },\n        {\n          id: 'a3',\n          timestamp: new Date('2024-01-15T10:32:00'),\n          type: 'rage_click',\n          element: 'generate_script_button',\n          page: '/videos/create',\n          success: false,\n        },\n        {\n          id: 'a4',\n          timestamp: new Date('2024-01-15T10:33:00'),\n          type: 'error',\n          element: 'script_generation',\n          page: '/videos/create',\n          success: false,\n        },\n      ],\n      painPoints: [\n        {\n          id: 'pp1',\n          type: 'frustration',\n          severity: 'high',\n          page: '/videos/create',\n          element: 'generate_script_button',\n          description: 'User clicked multiple times on generate button with no response',\n          timestamp: new Date('2024-01-15T10:32:00'),\n          duration: 15,\n          recommendation: 'Add loading indicator and disable button during processing',\n          impactedUsers: 12,\n        },\n        {\n          id: 'pp2',\n          type: 'confusion',\n          severity: 'medium',\n          page: '/dashboard',\n          element: 'metrics_section',\n          description: 'User hovered over metrics without understanding what they mean',\n          timestamp: new Date('2024-01-15T10:30:30'),\n          duration: 8,\n          recommendation: 'Add tooltips explaining each metric',\n          impactedUsers: 8,\n        },\n      ],\n      sentiment: 'negative',\n      completionRate: 65,\n      device: 'desktop',\n    },\n    {\n      id: '2',\n      userId: 'beta_user_2',\n      userName: 'Jane Smith',\n      startTime: new Date('2024-01-15T11:00:00'),\n      endTime: new Date('2024-01-15T11:20:00'),\n      duration: 1200,\n      pages: ['/onboarding', '/dashboard', '/channels', '/videos/create', '/analytics'],\n      actions: [],\n      painPoints: [\n        {\n          id: 'pp3',\n          type: 'slow_task',\n          severity: 'medium',\n          page: '/channels',\n          element: 'channel_setup',\n          description: 'Channel connection took longer than expected',\n          timestamp: new Date('2024-01-15T11:05:00'),\n          duration: 45,\n          recommendation: 'Optimize API calls and add progress indicator',\n          impactedUsers: 15,\n        },\n      ],\n      sentiment: 'positive',\n      completionRate: 85,\n      device: 'desktop',\n    },\n  ]);\n\n  const [painPointsSummary] = useState<PainPoint[]>([\n    {\n      id: 'pp_summary_1',\n      type: 'frustration',\n      severity: 'critical',\n      page: '/videos/create',\n      element: 'script_generation',\n      description: 'Script generation fails without clear error message',\n      timestamp: new Date(),\n      duration: 0,\n      recommendation: 'Implement proper error handling with actionable messages',\n      impactedUsers: 25,\n    },\n    {\n      id: 'pp_summary_2',\n      type: 'confusion',\n      severity: 'high',\n      page: '/onboarding',\n      element: 'channel_connection',\n      description: 'Users confused about YouTube authorization process',\n      timestamp: new Date(),\n      duration: 0,\n      recommendation: 'Add step-by-step visual guide for authorization',\n      impactedUsers: 18,\n    },\n    {\n      id: 'pp_summary_3',\n      type: 'abandonment',\n      severity: 'high',\n      page: '/analytics',\n      element: 'complex_charts',\n      description: 'Users leave analytics page due to overwhelming information',\n      timestamp: new Date(),\n      duration: 0,\n      recommendation: 'Simplify initial view with progressive disclosure',\n      impactedUsers: 15,\n    },\n  ]);\n\n  const [journeySteps] = useState<JourneyStep[]>([\n    {\n      id: 'step1',\n      name: 'Sign Up & Onboarding',\n      expectedDuration: 300,\n      actualDuration: 480,\n      completionRate: 92,\n      dropoffRate: 8,\n      painPoints: 3,\n      satisfaction: 3.5,\n    },\n    {\n      id: 'step2',\n      name: 'Channel Connection',\n      expectedDuration: 120,\n      actualDuration: 240,\n      completionRate: 85,\n      dropoffRate: 15,\n      painPoints: 5,\n      satisfaction: 3.0,\n    },\n    {\n      id: 'step3',\n      name: 'First Video Creation',\n      expectedDuration: 600,\n      actualDuration: 900,\n      completionRate: 72,\n      dropoffRate: 28,\n      painPoints: 8,\n      satisfaction: 2.8,\n    },\n    {\n      id: 'step4',\n      name: 'Video Publishing',\n      expectedDuration: 180,\n      actualDuration: 200,\n      completionRate: 95,\n      dropoffRate: 5,\n      painPoints: 1,\n      satisfaction: 4.2,\n    },\n    {\n      id: 'step5',\n      name: 'Analytics Review',\n      expectedDuration: 300,\n      actualDuration: 180,\n      completionRate: 88,\n      dropoffRate: 12,\n      painPoints: 4,\n      satisfaction: 3.8,\n    },\n  ]);\n\n  const [wireframeImprovements] = useState<WireframeImprovement[]>([\n    {\n      id: 'wi1',\n      page: '/videos/create',\n      component: 'Script Generation Button',\n      currentDesign: 'Single button with no feedback',\n      proposedDesign: 'Button with loading state, progress indicator, and disable on click',\n      reason: 'Users clicking multiple times due to no feedback',\n      impact: 'high',\n      effort: 'low',\n      status: 'in_progress',\n    },\n    {\n      id: 'wi2',\n      page: '/dashboard',\n      component: 'Metrics Cards',\n      currentDesign: 'Numbers only without context',\n      proposedDesign: 'Add tooltips, trend indicators, and comparison to previous period',\n      reason: 'Users confused about metric meanings',\n      impact: 'medium',\n      effort: 'low',\n      status: 'pending',\n    },\n    {\n      id: 'wi3',\n      page: '/onboarding',\n      component: 'Channel Authorization',\n      currentDesign: 'Text instructions only',\n      proposedDesign: 'Visual step-by-step guide with screenshots',\n      reason: 'High dropout rate during authorization',\n      impact: 'high',\n      effort: 'medium',\n      status: 'pending',\n    },\n    {\n      id: 'wi4',\n      page: '/analytics',\n      component: 'Initial View',\n      currentDesign: 'All charts visible at once',\n      proposedDesign: 'Summary view with expandable sections',\n      reason: 'Information overload causing abandonment',\n      impact: 'high',\n      effort: 'medium',\n      status: 'tested',\n    },\n  ]);\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case 'critical': return theme.palette.error.main;\n      case 'high': return theme.palette.warning.main;\n      case 'medium': return theme.palette.info.main;\n      case 'low': return theme.palette.success.main;\n      default: return theme.palette.grey[500];\n    }\n  };\n\n  const getSentimentIcon = (sentiment: string) => {\n    switch (sentiment) {\n      case 'positive': return <EmojiEmotions color=\"success\" />;\n      case 'negative': return <SentimentDissatisfied color=\"error\" />;\n      default: return <SentimentNeutral color=\"action\" />;\n    }\n  };\n\n  const getActionIcon = (type: string) => {\n    switch (type) {\n      case 'click': return <Mouse />;\n      case 'rage_click': return <Warning color=\"error\" />;\n      case 'error': return <Error color=\"error\" />;\n      case 'navigation': return <NavigateNext />;\n      default: return <TouchApp />;\n    }\n  };\n\n  const renderSessionRecordings = () => (\n    <Grid container spacing={3}>\n      {/* Session List */}\n      <Grid item xs={12} md={4}>\n        <Card>\n          <CardHeader title=\"Session Recordings\" />\n          <CardContent>\n            <List>\n              {sessions.map((session) => (\n                <ListItem\n                  key={session.id}\n                  button\n                  selected={selectedSession?.id === session.id}\n                  onClick={() => setSelectedSession(session)}\n                >\n                  <ListItemIcon>\n                    <Avatar>\n                      <Person />\n                    </Avatar>\n                  </ListItemIcon>\n                  <ListItemText\n                    primary={session.userName}\n                    secondary={\n                      <Box>\n                        <Typography variant=\"caption\" display=\"block\">\n                          {format(session.startTime, 'PPp')}\n                        </Typography>\n                        <Typography variant=\"caption\">\n                          Duration: {Math.floor(session.duration / 60)}m {session.duration % 60}s\n                        </Typography>\n                      </Box>\n                    }\n                  />\n                  <ListItemSecondaryAction>\n                    <Box sx={{ textAlign: 'right' }}>\n                      {getSentimentIcon(session.sentiment)}\n                      <Typography variant=\"caption\" display=\"block\">\n                        {session.completionRate}%\n                      </Typography>\n                    </Box>\n                  </ListItemSecondaryAction>\n                </ListItem>\n              ))}\n            </List>\n          </CardContent>\n        </Card>\n      </Grid>\n\n      {/* Session Playback */}\n      <Grid item xs={12} md={8}>\n        {selectedSession ? (\n          <Card>\n            <CardHeader\n              title={`Session: ${selectedSession.userName}`}\n              subheader={`${format(selectedSession.startTime, 'PPP')} • ${selectedSession.device}`}\n              action={\n                <Box sx={{ display: 'flex', gap: 1 }}>\n                  <IconButton onClick={() => setPlaybackSpeed(0.5)}>\n                    <FastRewind />\n                  </IconButton>\n                  <IconButton onClick={() => setIsPlaying(!isPlaying)}>\n                    {isPlaying ? <Pause /> : <PlayCircle />}\n                  </IconButton>\n                  <IconButton onClick={() => setPlaybackSpeed(2)}>\n                    <FastForward />\n                  </IconButton>\n                </Box>\n              }\n            />\n            <CardContent>\n              {/* Session Timeline */}\n              <Timeline position=\"alternate\">\n                {selectedSession.actions.map((action, index) => (\n                  <TimelineItem key={action.id}>\n                    <TimelineOppositeContent>\n                      <Typography variant=\"caption\" color=\"text.secondary\">\n                        {format(action.timestamp, 'HH:mm:ss')}\n                      </Typography>\n                    </TimelineOppositeContent>\n                    <TimelineSeparator>\n                      <TimelineDot color={action.success ? 'success' : 'error'}>\n                        {getActionIcon(action.type)}\n                      </TimelineDot>\n                      {index < selectedSession.actions.length - 1 && <TimelineConnector />}\n                    </TimelineSeparator>\n                    <TimelineContent>\n                      <Paper elevation={3} sx={{ p: 1 }}>\n                        <Typography variant=\"subtitle2\">\n                          {action.type.replace('_', ' ').toUpperCase()}\n                        </Typography>\n                        <Typography variant=\"caption\" display=\"block\">\n                          {action.element}\n                        </Typography>\n                        <Typography variant=\"caption\" color=\"text.secondary\">\n                          Page: {action.page}\n                        </Typography>\n                      </Paper>\n                    </TimelineContent>\n                  </TimelineItem>\n                ))}\n              </Timeline>\n\n              {/* Pain Points in Session */}\n              {selectedSession.painPoints.length > 0 && (\n                <Box sx={{ mt: 3 }}>\n                  <Typography variant=\"h6\" gutterBottom>\n                    Identified Pain Points\n                  </Typography>\n                  {selectedSession.painPoints.map((painPoint) => (\n                    <Alert\n                      key={painPoint.id}\n                      severity={painPoint.severity === 'critical' ? 'error' : painPoint.severity === 'high' ? 'warning' : 'info'}\n                      sx={{ mb: 1 }}\n                    >\n                      <Typography variant=\"subtitle2\">\n                        {painPoint.type.replace('_', ' ').toUpperCase()}\n                      </Typography>\n                      <Typography variant=\"body2\">\n                        {painPoint.description}\n                      </Typography>\n                      <Typography variant=\"caption\" display=\"block\" sx={{ mt: 1 }}>\n                        Recommendation: {painPoint.recommendation}\n                      </Typography>\n                    </Alert>\n                  ))}\n                </Box>\n              )}\n            </CardContent>\n          </Card>\n        ) : (\n          <Card>\n            <CardContent>\n              <Box sx={{ textAlign: 'center', py: 4 }}>\n                <Typography variant=\"h6\" color=\"text.secondary\">\n                  Select a session to view details\n                </Typography>\n              </Box>\n            </CardContent>\n          </Card>\n        )}\n      </Grid>\n    </Grid>\n  );\n\n  const renderPainPoints = () => (\n    <Grid container spacing={3}>\n      {/* Pain Points Summary */}\n      <Grid item xs={12}>\n        <Card>\n          <CardHeader\n            title=\"Pain Points Analysis\"\n            subheader=\"Aggregated from all beta user sessions\"\n          />\n          <CardContent>\n            {painPointsSummary.map((painPoint) => (\n              <Paper key={painPoint.id} sx={{ p: 2, mb: 2 }}>\n                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>\n                  <Box sx={{ flex: 1 }}>\n                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 1 }}>\n                      <Chip\n                        label={painPoint.type.replace('_', ' ').toUpperCase()}\n                        size=\"small\"\n                        sx={{\n                          backgroundColor: getSeverityColor(painPoint.severity),\n                          color: 'white',\n                        }}\n                      />\n                      <Chip\n                        label={`${painPoint.impactedUsers} users affected`}\n                        size=\"small\"\n                        variant=\"outlined\"\n                      />\n                      <Typography variant=\"caption\" color=\"text.secondary\">\n                        {painPoint.page}\n                      </Typography>\n                    </Box>\n                    <Typography variant=\"body1\" gutterBottom>\n                      {painPoint.description}\n                    </Typography>\n                    <Alert severity=\"success\" icon={<CheckCircle />} sx={{ mt: 1 }}>\n                      <Typography variant=\"body2\">\n                        <strong>Recommendation:</strong> {painPoint.recommendation}\n                      </Typography>\n                    </Alert>\n                  </Box>\n                  <Box sx={{ ml: 2 }}>\n                    <Button variant=\"outlined\" size=\"small\" startIcon={<BugReport />}>\n                      Create Issue\n                    </Button>\n                  </Box>\n                </Box>\n              </Paper>\n            ))}\n          </CardContent>\n        </Card>\n      </Grid>\n\n      {/* Journey Funnel */}\n      <Grid item xs={12}>\n        <Card>\n          <CardHeader title=\"User Journey Funnel\" />\n          <CardContent>\n            <Stepper orientation=\"vertical\">\n              {journeySteps.map((step, index) => (\n                <Step key={step.id} active expanded>\n                  <StepLabel>\n                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\n                      <Typography variant=\"subtitle1\">{step.name}</Typography>\n                      <Chip\n                        label={`${step.completionRate}% completion`}\n                        size=\"small\"\n                        color={step.completionRate > 80 ? 'success' : step.completionRate > 60 ? 'warning' : 'error'}\n                      />\n                      <Rating value={step.satisfaction} readOnly size=\"small\" />\n                    </Box>\n                  </StepLabel>\n                  <StepContent>\n                    <Grid container spacing={2}>\n                      <Grid item xs={12} sm={3}>\n                        <Typography variant=\"caption\" display=\"block\" color=\"text.secondary\">\n                          Expected Duration\n                        </Typography>\n                        <Typography variant=\"body2\">\n                          {Math.floor(step.expectedDuration / 60)}m {step.expectedDuration % 60}s\n                        </Typography>\n                      </Grid>\n                      <Grid item xs={12} sm={3}>\n                        <Typography variant=\"caption\" display=\"block\" color=\"text.secondary\">\n                          Actual Duration\n                        </Typography>\n                        <Typography\n                          variant=\"body2\"\n                          color={step.actualDuration > step.expectedDuration * 1.5 ? 'error.main' : 'text.primary'}\n                        >\n                          {Math.floor(step.actualDuration / 60)}m {step.actualDuration % 60}s\n                        </Typography>\n                      </Grid>\n                      <Grid item xs={12} sm={3}>\n                        <Typography variant=\"caption\" display=\"block\" color=\"text.secondary\">\n                          Dropoff Rate\n                        </Typography>\n                        <Typography\n                          variant=\"body2\"\n                          color={step.dropoffRate > 20 ? 'error.main' : step.dropoffRate > 10 ? 'warning.main' : 'success.main'}\n                        >\n                          {step.dropoffRate}%\n                        </Typography>\n                      </Grid>\n                      <Grid item xs={12} sm={3}>\n                        <Typography variant=\"caption\" display=\"block\" color=\"text.secondary\">\n                          Pain Points\n                        </Typography>\n                        <Typography variant=\"body2\">\n                          {step.painPoints} identified\n                        </Typography>\n                      </Grid>\n                    </Grid>\n                    <LinearProgress\n                      variant=\"determinate\"\n                      value={step.completionRate}\n                      sx={{ mt: 2, height: 8, borderRadius: 1 }}\n                      color={step.completionRate > 80 ? 'success' : step.completionRate > 60 ? 'warning' : 'error'}\n                    />\n                  </StepContent>\n                </Step>\n              ))}\n            </Stepper>\n          </CardContent>\n        </Card>\n      </Grid>\n    </Grid>\n  );\n\n  const renderWireframeImprovements = () => (\n    <Grid container spacing={3}>\n      {wireframeImprovements.map((improvement) => (\n        <Grid item xs={12} md={6} key={improvement.id}>\n          <Card>\n            <CardHeader\n              title={improvement.component}\n              subheader={improvement.page}\n              action={\n                <Chip\n                  label={improvement.status.replace('_', ' ').toUpperCase()}\n                  size=\"small\"\n                  color={\n                    improvement.status === 'completed' ? 'success' :\n                    improvement.status === 'tested' ? 'info' :\n                    improvement.status === 'in_progress' ? 'warning' : 'default'\n                  }\n                />\n              }\n            />\n            <CardContent>\n              <Box sx={{ mb: 2 }}>\n                <Typography variant=\"subtitle2\" color=\"error.main\" gutterBottom>\n                  Current Design Issue:\n                </Typography>\n                <Typography variant=\"body2\" sx={{ mb: 2 }}>\n                  {improvement.currentDesign}\n                </Typography>\n                \n                <Typography variant=\"subtitle2\" color=\"success.main\" gutterBottom>\n                  Proposed Solution:\n                </Typography>\n                <Typography variant=\"body2\" sx={{ mb: 2 }}>\n                  {improvement.proposedDesign}\n                </Typography>\n                \n                <Typography variant=\"subtitle2\" gutterBottom>\n                  Reason for Change:\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  {improvement.reason}\n                </Typography>\n              </Box>\n              \n              <Box sx={{ display: 'flex', gap: 1, mt: 2 }}>\n                <Chip\n                  label={`Impact: ${improvement.impact}`}\n                  size=\"small\"\n                  color={improvement.impact === 'high' ? 'error' : improvement.impact === 'medium' ? 'warning' : 'default'}\n                />\n                <Chip\n                  label={`Effort: ${improvement.effort}`}\n                  size=\"small\"\n                  variant=\"outlined\"\n                />\n              </Box>\n            </CardContent>\n            <Divider />\n            <Box sx={{ p: 2, display: 'flex', justifyContent: 'space-between' }}>\n              <Button size=\"small\" startIcon={<Visibility />}>\n                View Mockup\n              </Button>\n              <Button size=\"small\" startIcon={<Edit />} variant=\"contained\">\n                Implement\n              </Button>\n            </Box>\n          </Card>\n        </Grid>\n      ))}\n    </Grid>\n  );\n\n  return (\n    <Box>\n      <Typography variant=\"h4\" fontWeight=\"bold\" gutterBottom>\n        Beta User Journey Optimization\n      </Typography>\n      \n      <Tabs value={tabValue} onChange={(e, v) => setTabValue(v)} sx={{ mb: 3 }}>\n        <Tab label=\"Session Recordings\" />\n        <Tab label=\"Pain Points\" />\n        <Tab label=\"Wireframe Improvements\" />\n      </Tabs>\n\n      {tabValue === 0 && renderSessionRecordings()}\n      {tabValue === 1 && renderPainPoints()}\n      {tabValue === 2 && renderWireframeImprovements()}\n    </Box>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\VideoEditor\\VideoEditor.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'LinearProgress' is defined but never used.","line":27,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":90,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":90,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1658,1661],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1658,1661],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":99,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1819,1822],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1819,1822],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setTimeline' is assigned a value but never used.","line":135,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":135,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'selectedTimelineItem' is assigned a value but never used.","line":136,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":136,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setSelectedTimelineItem' is assigned a value but never used.","line":136,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":136,"endColumn":55}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Video Editor Interface\n * Complete video editing interface with preview, trim, and metadata editing\n */\n\nimport React, { useState, useRef, useEffect, useCallback } from 'react';\nimport {\n  Box,\n  Card,\n  CardContent,\n  Grid,\n  Typography,\n  IconButton,\n  Button,\n  Slider,\n  TextField,\n  Chip,\n  Paper,\n  Tabs,\n  Tab,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemIcon,\n  Divider,\n  Tooltip,\n  LinearProgress,\n  Alert,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Switch,\n  FormControlLabel,\n  Stack,\n  Autocomplete,\n  CircularProgress\n} from '@mui/material';\nimport {\n  ContentCut as TrimIcon,\n  PlayArrow as PlayIcon,\n  Pause as PauseIcon,\n  SkipNext as SkipNextIcon,\n  SkipPrevious as SkipPreviousIcon,\n  VolumeUp as VolumeIcon,\n  VolumeOff as VolumeMuteIcon,\n  Fullscreen as FullscreenIcon,\n  Save as SaveIcon,\n  Undo as UndoIcon,\n  Redo as RedoIcon,\n  Timeline as TimelineIcon,\n  TextFields as TextIcon,\n  Settings as SettingsIcon,\n  Download as DownloadIcon\n} from '@mui/icons-material';\n\ninterface VideoEditorProps {\n  videoUrl?: string;\n  videoId?: string;\n  onSave?: (editedVideo: EditedVideo) => void;\n  onExport?: (format: string) => void;\n}\n\ninterface EditedVideo {\n  id: string;\n  url: string;\n  metadata: VideoMetadata;\n  edits: VideoEdit[];\n  timeline: TimelineItem[];\n}\n\ninterface VideoMetadata {\n  title: string;\n  description: string;\n  tags: string[];\n  thumbnail?: string;\n  duration: number;\n  resolution: string;\n  fps: number;\n  bitrate: string;\n}\n\ninterface VideoEdit {\n  type: 'trim' | 'crop' | 'filter' | 'text' | 'audio';\n  timestamp: number;\n  parameters: any;\n}\n\ninterface TimelineItem {\n  id: string;\n  type: 'video' | 'audio' | 'text' | 'image';\n  startTime: number;\n  endTime: number;\n  layer: number;\n  content: any;\n}\n\ninterface TrimMarkers {\n  start: number;\n  end: number;\n}\n\nexport const VideoEditor: React.FC<VideoEditorProps> = ({\n  videoUrl = '',\n  videoId = '',\n  onSave,\n  onExport\n}) => {\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const [volume, setVolume] = useState(1);\n  const [isMuted, setIsMuted] = useState(false);\n  const [playbackRate, setPlaybackRate] = useState(1);\n  const [selectedTab, setSelectedTab] = useState(0);\n  const [trimMarkers, setTrimMarkers] = useState<TrimMarkers>({ start: 0, end: 0 });\n  const [isTrimming, setIsTrimming] = useState(false);\n  const [editHistory, setEditHistory] = useState<VideoEdit[]>([]);\n  const [historyIndex, setHistoryIndex] = useState(-1);\n  const [metadata, setMetadata] = useState<VideoMetadata>({\n    title: '',\n    description: '',\n    tags: [],\n    thumbnail: '',\n    duration: 0,\n    resolution: '1920x1080',\n    fps: 30,\n    bitrate: '5000kbps'\n  });\n  const [timeline, setTimeline] = useState<TimelineItem[]>([]);\n  const [selectedTimelineItem, setSelectedTimelineItem] = useState<string | null>(null);\n  const [exportDialogOpen, setExportDialogOpen] = useState(false);\n  const [exportFormat, setExportFormat] = useState('mp4');\n  const [exportQuality, setExportQuality] = useState('high');\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  // Video control handlers\n  const handlePlayPause = useCallback(() => {\n    if (!videoRef.current) return;\n    \n    if (isPlaying) {\n      videoRef.current.pause();\n    } else {\n      videoRef.current.play();\n    }\n    setIsPlaying(!isPlaying);\n  }, [isPlaying]);\n\n  const handleSeek = useCallback((event: Event, value: number | number[]) => {\n    if (!videoRef.current) return;\n    const newTime = value as number;\n    videoRef.current.currentTime = newTime;\n    setCurrentTime(newTime);\n  }, []);\n\n  const handleVolumeChange = useCallback((event: Event, value: number | number[]) => {\n    if (!videoRef.current) return;\n    const newVolume = value as number;\n    videoRef.current.volume = newVolume;\n    setVolume(newVolume);\n    setIsMuted(newVolume === 0);\n  }, []);\n\n  const handleMuteToggle = useCallback(() => {\n    if (!videoRef.current) return;\n    const newMuted = !isMuted;\n    videoRef.current.muted = newMuted;\n    setIsMuted(newMuted);\n  }, [isMuted]);\n\n  const handlePlaybackRateChange = useCallback((rate: number) => {\n    if (!videoRef.current) return;\n    videoRef.current.playbackRate = rate;\n    setPlaybackRate(rate);\n  }, []);\n\n  const handleFullscreen = useCallback(() => {\n    if (!videoRef.current) return;\n    if (videoRef.current.requestFullscreen) {\n      videoRef.current.requestFullscreen();\n    }\n  }, []);\n\n  // Trim functionality\n  const handleTrimStart = useCallback(() => {\n    setTrimMarkers(prev => ({ ...prev, start: currentTime }));\n    setIsTrimming(true);\n  }, [currentTime]);\n\n  const handleTrimEnd = useCallback(() => {\n    setTrimMarkers(prev => ({ ...prev, end: currentTime }));\n  }, [currentTime]);\n\n  const handleApplyTrim = useCallback(() => {\n    const edit: VideoEdit = {\n      type: 'trim',\n      timestamp: Date.now(),\n      parameters: { ...trimMarkers }\n    };\n    \n    setEditHistory(prev => [...prev.slice(0, historyIndex + 1), edit]);\n    setHistoryIndex(prev => prev + 1);\n    setIsTrimming(false);\n    \n    // Here you would apply the actual trim to the video\n    console.log('Applying trim:', trimMarkers);\n  }, [trimMarkers, historyIndex]);\n\n  const handleCancelTrim = useCallback(() => {\n    setTrimMarkers({ start: 0, end: duration });\n    setIsTrimming(false);\n  }, [duration]);\n\n  // Undo/Redo functionality\n  const handleUndo = useCallback(() => {\n    if (historyIndex > 0) {\n      setHistoryIndex(prev => prev - 1);\n      // Apply the previous state\n    }\n  }, [historyIndex]);\n\n  const handleRedo = useCallback(() => {\n    if (historyIndex < editHistory.length - 1) {\n      setHistoryIndex(prev => prev + 1);\n      // Apply the next state\n    }\n  }, [historyIndex, editHistory.length]);\n\n  // Export functionality\n  const handleExportClick = useCallback(() => {\n    setExportDialogOpen(true);\n  }, []);\n\n  const handleExportConfirm = useCallback(() => {\n    setIsProcessing(true);\n    setExportDialogOpen(false);\n    \n    // Simulate export process\n    setTimeout(() => {\n      setIsProcessing(false);\n      if (onExport) {\n        onExport(exportFormat);\n      }\n    }, 3000);\n  }, [exportFormat, onExport]);\n\n  // Save functionality\n  const handleSaveClick = useCallback(() => {\n    const editedVideo: EditedVideo = {\n      id: videoId,\n      url: videoUrl,\n      metadata,\n      edits: editHistory,\n      timeline\n    };\n    \n    if (onSave) {\n      onSave(editedVideo);\n    }\n  }, [videoId, videoUrl, metadata, editHistory, timeline, onSave]);\n\n  // Format time for display\n  const formatTime = (seconds: number): string => {\n    const mins = Math.floor(seconds / 60);\n    const secs = Math.floor(seconds % 60);\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  // Video event handlers\n  useEffect(() => {\n    const video = videoRef.current;\n    if (!video) return;\n\n    const handleTimeUpdate = () => {\n      setCurrentTime(video.currentTime);\n    };\n\n    const handleLoadedMetadata = () => {\n      setDuration(video.duration);\n      setTrimMarkers({ start: 0, end: video.duration });\n      setMetadata(prev => ({ ...prev, duration: video.duration }));\n    };\n\n    const handleEnded = () => {\n      setIsPlaying(false);\n    };\n\n    video.addEventListener('timeupdate', handleTimeUpdate);\n    video.addEventListener('loadedmetadata', handleLoadedMetadata);\n    video.addEventListener('ended', handleEnded);\n\n    return () => {\n      video.removeEventListener('timeupdate', handleTimeUpdate);\n      video.removeEventListener('loadedmetadata', handleLoadedMetadata);\n      video.removeEventListener('ended', handleEnded);\n    };\n  }, []);\n\n  return (\n    <Box sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}>\n      {/* Header Toolbar */}\n      <Paper sx={{ p: 1, mb: 2, display: 'flex', alignItems: 'center', gap: 1 }}>\n        <Typography variant=\"h6\" sx={{ flexGrow: 1 }}>\n          Video Editor\n        </Typography>\n        \n        <Tooltip title=\"Undo\">\n          <span>\n            <IconButton \n              onClick={handleUndo} \n              disabled={historyIndex <= 0}\n              size=\"small\"\n            >\n              <UndoIcon />\n            </IconButton>\n          </span>\n        </Tooltip>\n        \n        <Tooltip title=\"Redo\">\n          <span>\n            <IconButton \n              onClick={handleRedo} \n              disabled={historyIndex >= editHistory.length - 1}\n              size=\"small\"\n            >\n              <RedoIcon />\n            </IconButton>\n          </span>\n        </Tooltip>\n        \n        <Divider orientation=\"vertical\" flexItem sx={{ mx: 1 }} />\n        \n        <Button\n          startIcon={<SaveIcon />}\n          onClick={handleSaveClick}\n          variant=\"outlined\"\n          size=\"small\"\n        >\n          Save\n        </Button>\n        \n        <Button\n          startIcon={<DownloadIcon />}\n          onClick={handleExportClick}\n          variant=\"contained\"\n          size=\"small\"\n        >\n          Export\n        </Button>\n      </Paper>\n\n      <Grid container spacing={2} sx={{ flexGrow: 1, overflow: 'hidden' }}>\n        {/* Video Preview Section */}\n        <Grid item xs={12} md={8}>\n          <Card sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}>\n            <CardContent sx={{ flexGrow: 1, display: 'flex', flexDirection: 'column', p: 0 }}>\n              {/* Video Player */}\n              <Box sx={{ position: 'relative', backgroundColor: '#000', flexGrow: 1 }}>\n                <video\n                  ref={videoRef}\n                  src={videoUrl}\n                  style={{\n                    width: '100%',\n                    height: '100%',\n                    objectFit: 'contain'\n                  }}\n                />\n                \n                {isProcessing && (\n                  <Box\n                    sx={{\n                      position: 'absolute',\n                      top: 0,\n                      left: 0,\n                      right: 0,\n                      bottom: 0,\n                      display: 'flex',\n                      alignItems: 'center',\n                      justifyContent: 'center',\n                      backgroundColor: 'rgba(0, 0, 0, 0.7)'\n                    }}\n                  >\n                    <CircularProgress />\n                  </Box>\n                )}\n              </Box>\n\n              {/* Video Controls */}\n              <Box sx={{ p: 2, backgroundColor: 'background.paper' }}>\n                {/* Progress Bar */}\n                <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\n                  <Typography variant=\"caption\" sx={{ minWidth: 50 }}>\n                    {formatTime(currentTime)}\n                  </Typography>\n                  <Slider\n                    value={currentTime}\n                    max={duration}\n                    onChange={handleSeek}\n                    sx={{ mx: 2, flexGrow: 1 }}\n                    size=\"small\"\n                  />\n                  <Typography variant=\"caption\" sx={{ minWidth: 50 }}>\n                    {formatTime(duration)}\n                  </Typography>\n                </Box>\n\n                {/* Trim Markers */}\n                {isTrimming && (\n                  <Box sx={{ position: 'relative', height: 20, mb: 1 }}>\n                    <Slider\n                      value={[trimMarkers.start, trimMarkers.end]}\n                      max={duration}\n                      onChange={(e, value) => {\n                        const [start, end] = value as number[];\n                        setTrimMarkers({ start, end });\n                      }}\n                      valueLabelDisplay=\"auto\"\n                      valueLabelFormat={formatTime}\n                      sx={{\n                        '& .MuiSlider-track': {\n                          backgroundColor: 'error.main'\n                        }\n                      }}\n                    />\n                  </Box>\n                )}\n\n                {/* Control Buttons */}\n                <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                    <IconButton onClick={() => {\n                      if (videoRef.current) {\n                        videoRef.current.currentTime = Math.max(0, currentTime - 10);\n                      }\n                    }}>\n                      <SkipPreviousIcon />\n                    </IconButton>\n                    \n                    <IconButton onClick={handlePlayPause} sx={{ \n                      backgroundColor: 'primary.main',\n                      color: 'primary.contrastText',\n                      '&:hover': {\n                        backgroundColor: 'primary.dark'\n                      }\n                    }}>\n                      {isPlaying ? <PauseIcon /> : <PlayIcon />}\n                    </IconButton>\n                    \n                    <IconButton onClick={() => {\n                      if (videoRef.current) {\n                        videoRef.current.currentTime = Math.min(duration, currentTime + 10);\n                      }\n                    }}>\n                      <SkipNextIcon />\n                    </IconButton>\n                  </Box>\n\n                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\n                    {/* Volume Control */}\n                    <Box sx={{ display: 'flex', alignItems: 'center', minWidth: 150 }}>\n                      <IconButton onClick={handleMuteToggle} size=\"small\">\n                        {isMuted ? <VolumeMuteIcon /> : <VolumeIcon />}\n                      </IconButton>\n                      <Slider\n                        value={isMuted ? 0 : volume}\n                        max={1}\n                        step={0.1}\n                        onChange={handleVolumeChange}\n                        sx={{ ml: 1, width: 100 }}\n                        size=\"small\"\n                      />\n                    </Box>\n\n                    {/* Playback Speed */}\n                    <FormControl size=\"small\" sx={{ minWidth: 80 }}>\n                      <Select\n                        value={playbackRate}\n                        onChange={(e) => handlePlaybackRateChange(Number(e.target.value))}\n                      >\n                        <MenuItem value={0.5}>0.5x</MenuItem>\n                        <MenuItem value={1}>1x</MenuItem>\n                        <MenuItem value={1.5}>1.5x</MenuItem>\n                        <MenuItem value={2}>2x</MenuItem>\n                      </Select>\n                    </FormControl>\n\n                    <IconButton onClick={handleFullscreen}>\n                      <FullscreenIcon />\n                    </IconButton>\n                  </Box>\n                </Box>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        {/* Editing Tools Section */}\n        <Grid item xs={12} md={4}>\n          <Card sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}>\n            <CardContent sx={{ flexGrow: 1, overflow: 'auto' }}>\n              <Tabs value={selectedTab} onChange={(e, v) => setSelectedTab(v)}>\n                <Tab icon={<TrimIcon />} label=\"Trim\" />\n                <Tab icon={<TextIcon />} label=\"Metadata\" />\n                <Tab icon={<TimelineIcon />} label=\"Timeline\" />\n                <Tab icon={<SettingsIcon />} label=\"Settings\" />\n              </Tabs>\n\n              <Box sx={{ mt: 2 }}>\n                {/* Trim Tab */}\n                {selectedTab === 0 && (\n                  <Box>\n                    <Typography variant=\"subtitle2\" gutterBottom>\n                      Trim Video\n                    </Typography>\n                    \n                    <Stack spacing={2}>\n                      <TextField\n                        label=\"Start Time\"\n                        value={formatTime(trimMarkers.start)}\n                        size=\"small\"\n                        InputProps={{\n                          readOnly: true,\n                          endAdornment: (\n                            <Button\n                              size=\"small\"\n                              onClick={handleTrimStart}\n                            >\n                              Set Current\n                            </Button>\n                          )\n                        }}\n                      />\n                      \n                      <TextField\n                        label=\"End Time\"\n                        value={formatTime(trimMarkers.end)}\n                        size=\"small\"\n                        InputProps={{\n                          readOnly: true,\n                          endAdornment: (\n                            <Button\n                              size=\"small\"\n                              onClick={handleTrimEnd}\n                            >\n                              Set Current\n                            </Button>\n                          )\n                        }}\n                      />\n                      \n                      <Typography variant=\"body2\" color=\"text.secondary\">\n                        Duration: {formatTime(trimMarkers.end - trimMarkers.start)}\n                      </Typography>\n                      \n                      <Box sx={{ display: 'flex', gap: 1 }}>\n                        <Button\n                          variant=\"contained\"\n                          onClick={handleApplyTrim}\n                          disabled={!isTrimming}\n                          fullWidth\n                        >\n                          Apply Trim\n                        </Button>\n                        <Button\n                          variant=\"outlined\"\n                          onClick={handleCancelTrim}\n                          disabled={!isTrimming}\n                        >\n                          Cancel\n                        </Button>\n                      </Box>\n                    </Stack>\n                  </Box>\n                )}\n\n                {/* Metadata Tab */}\n                {selectedTab === 1 && (\n                  <Box>\n                    <Typography variant=\"subtitle2\" gutterBottom>\n                      Video Metadata\n                    </Typography>\n                    \n                    <Stack spacing={2}>\n                      <TextField\n                        label=\"Title\"\n                        value={metadata.title}\n                        onChange={(e) => setMetadata(prev => ({ ...prev, title: e.target.value }))}\n                        size=\"small\"\n                        fullWidth\n                      />\n                      \n                      <TextField\n                        label=\"Description\"\n                        value={metadata.description}\n                        onChange={(e) => setMetadata(prev => ({ ...prev, description: e.target.value }))}\n                        size=\"small\"\n                        multiline\n                        rows={4}\n                        fullWidth\n                      />\n                      \n                      <Autocomplete\n                        multiple\n                        options={[]}\n                        freeSolo\n                        value={metadata.tags}\n                        onChange={(e, value) => setMetadata(prev => ({ ...prev, tags: value }))}\n                        renderTags={(value, getTagProps) =>\n                          value.map((option, index) => (\n                            <Chip\n                              variant=\"outlined\"\n                              label={option}\n                              size=\"small\"\n                              {...getTagProps({ index })}\n                            />\n                          ))\n                        }\n                        renderInput={(params) => (\n                          <TextField\n                            {...params}\n                            label=\"Tags\"\n                            placeholder=\"Add tags\"\n                            size=\"small\"\n                          />\n                        )}\n                      />\n                      \n                      <Divider />\n                      \n                      <Typography variant=\"caption\" color=\"text.secondary\">\n                        Resolution: {metadata.resolution}\n                      </Typography>\n                      <Typography variant=\"caption\" color=\"text.secondary\">\n                        FPS: {metadata.fps}\n                      </Typography>\n                      <Typography variant=\"caption\" color=\"text.secondary\">\n                        Bitrate: {metadata.bitrate}\n                      </Typography>\n                      <Typography variant=\"caption\" color=\"text.secondary\">\n                        Duration: {formatTime(metadata.duration)}\n                      </Typography>\n                    </Stack>\n                  </Box>\n                )}\n\n                {/* Timeline Tab */}\n                {selectedTab === 2 && (\n                  <Box>\n                    <Typography variant=\"subtitle2\" gutterBottom>\n                      Timeline\n                    </Typography>\n                    \n                    <Alert severity=\"info\" sx={{ mb: 2 }}>\n                      Advanced timeline editing coming soon\n                    </Alert>\n                    \n                    <List>\n                      <ListItem>\n                        <ListItemIcon>\n                          <TimelineIcon />\n                        </ListItemIcon>\n                        <ListItemText\n                          primary=\"Main Video\"\n                          secondary={`0:00 - ${formatTime(duration)}`}\n                        />\n                      </ListItem>\n                    </List>\n                  </Box>\n                )}\n\n                {/* Settings Tab */}\n                {selectedTab === 3 && (\n                  <Box>\n                    <Typography variant=\"subtitle2\" gutterBottom>\n                      Export Settings\n                    </Typography>\n                    \n                    <Stack spacing={2}>\n                      <FormControl size=\"small\" fullWidth>\n                        <InputLabel>Format</InputLabel>\n                        <Select\n                          value={exportFormat}\n                          onChange={(e) => setExportFormat(e.target.value)}\n                          label=\"Format\"\n                        >\n                          <MenuItem value=\"mp4\">MP4</MenuItem>\n                          <MenuItem value=\"webm\">WebM</MenuItem>\n                          <MenuItem value=\"mov\">MOV</MenuItem>\n                          <MenuItem value=\"avi\">AVI</MenuItem>\n                        </Select>\n                      </FormControl>\n                      \n                      <FormControl size=\"small\" fullWidth>\n                        <InputLabel>Quality</InputLabel>\n                        <Select\n                          value={exportQuality}\n                          onChange={(e) => setExportQuality(e.target.value)}\n                          label=\"Quality\"\n                        >\n                          <MenuItem value=\"low\">Low (480p)</MenuItem>\n                          <MenuItem value=\"medium\">Medium (720p)</MenuItem>\n                          <MenuItem value=\"high\">High (1080p)</MenuItem>\n                          <MenuItem value=\"ultra\">Ultra (4K)</MenuItem>\n                        </Select>\n                      </FormControl>\n                      \n                      <FormControlLabel\n                        control={<Switch defaultChecked />}\n                        label=\"Optimize for web\"\n                      />\n                      \n                      <FormControlLabel\n                        control={<Switch />}\n                        label=\"Include subtitles\"\n                      />\n                      \n                      <FormControlLabel\n                        control={<Switch defaultChecked />}\n                        label=\"Keep metadata\"\n                      />\n                    </Stack>\n                  </Box>\n                )}\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n\n      {/* Export Dialog */}\n      <Dialog open={exportDialogOpen} onClose={() => setExportDialogOpen(false)}>\n        <DialogTitle>Export Video</DialogTitle>\n        <DialogContent>\n          <Typography variant=\"body2\" gutterBottom>\n            Export settings:\n          </Typography>\n          <Box sx={{ mt: 2 }}>\n            <Typography variant=\"body2\">\n              Format: {exportFormat.toUpperCase()}\n            </Typography>\n            <Typography variant=\"body2\">\n              Quality: {exportQuality}\n            </Typography>\n          </Box>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setExportDialogOpen(false)}>\n            Cancel\n          </Button>\n          <Button onClick={handleExportConfirm} variant=\"contained\">\n            Export\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\VideoQueue\\VideoQueueInterface.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Dialog' is defined but never used.","line":23,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DialogTitle' is defined but never used.","line":24,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DialogContent' is defined but never used.","line":25,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DialogActions' is defined but never used.","line":26,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TextField' is defined but never used.","line":27,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CardActions' is defined but never used.","line":34,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Tooltip' is defined but never used.","line":35,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Tabs' is defined but never used.","line":37,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Tab' is defined but never used.","line":38,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Fade' is defined but never used.","line":41,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Collapse' is defined but never used.","line":42,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":42,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Stop' is defined but never used.","line":47,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":47,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'PriorityHigh' is defined but never used.","line":52,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":52,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Warning' is defined but never used.","line":53,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":53,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FilterList' is defined but never used.","line":57,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":57,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Sort' is defined but never used.","line":58,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":58,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TabPanel' is defined but never used.","line":112,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":112,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'selectedTab' is assigned a value but never used.","line":131,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":131,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setSelectedTab' is assigned a value but never used.","line":131,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":131,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'editDialogOpen' is assigned a value but never used.","line":135,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":135,"endColumn":24},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":185,"column":11,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":185,"endColumn":75,"suggestions":[{"messageId":"addBrackets","fix":{"range":[4456,4593],"text":"{ const priorityOrder = { urgent: 0, high: 1, normal: 2, low: 3 };\r\n          return priorityOrder[a.priority] - priorityOrder[b.priority]; }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'itemsByStatus' is assigned a value but never used.","line":202,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":202,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":247,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":247,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":263,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":263,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":279,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":279,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":295,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":295,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":311,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":311,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":327,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":327,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":673,"column":13,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":673,"endColumn":58},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":689,"column":13,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":689,"endColumn":59}],"suppressedMessages":[],"errorCount":30,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Video Queue Interface Component\r\n * Comprehensive interface for managing video generation queue\r\n */\r\n\r\nimport React, { useState, useEffect, useMemo, useCallback } from 'react';\r\nimport {\r\n  DragDropContext,\r\n  Droppable,\r\n  Draggable,\r\n  DropResult,\r\n} from '@hello-pangea/dnd';\r\nimport {\r\n  Box,\r\n  Paper,\r\n  Typography,\r\n  Button,\r\n  IconButton,\r\n  Chip,\r\n  LinearProgress,\r\n  Menu,\r\n  MenuItem,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  TextField,\r\n  Select,\r\n  FormControl,\r\n  InputLabel,\r\n  Grid,\r\n  Card,\r\n  CardContent,\r\n  CardActions,\r\n  Tooltip,\r\n  Badge,\r\n  Tabs,\r\n  Tab,\r\n  Alert,\r\n  Skeleton,\r\n  Fade,\r\n  Collapse,\r\n} from '@mui/material';\r\nimport {\r\n  PlayArrow,\r\n  Pause,\r\n  Stop,\r\n  Delete,\r\n  Edit,\r\n  MoreVert,\r\n  Schedule,\r\n  PriorityHigh,\r\n  Warning,\r\n  CheckCircle,\r\n  Error,\r\n  Info,\r\n  FilterList,\r\n  Sort,\r\n  Refresh,\r\n  Add,\r\n  DragIndicator,\r\n  Timeline,\r\n  Speed,\r\n  AttachMoney,\r\n} from '@mui/icons-material';\r\nimport { format, formatDistanceToNow, addMinutes } from 'date-fns';\r\nimport { useOptimizedStore } from '../../stores/optimizedStore';\r\nimport { api } from '../../services/api';\r\n\r\ninterface VideoQueueItem {\r\n  id: string;\r\n  channelId: string;\r\n  title: string;\r\n  description?: string;\r\n  topic: string;\r\n  style: string;\r\n  duration: number;\r\n  status: 'pending' | 'scheduled' | 'processing' | 'completed' | 'failed' | 'paused';\r\n  priority: 'low' | 'normal' | 'high' | 'urgent';\r\n  progress: number;\r\n  scheduledTime?: string;\r\n  estimatedCost: number;\r\n  processingTime: number;\r\n  error?: string;\r\n  retryCount: number;\r\n  metadata: {\r\n    thumbnailStyle?: string;\r\n    voiceStyle?: string;\r\n    targetAudience?: string;\r\n    keywords?: string[];\r\n    autoPublish?: boolean;\r\n  };\r\n}\r\n\r\ninterface QueueStats {\r\n  totalItems: number;\r\n  pending: number;\r\n  processing: number;\r\n  completed: number;\r\n  failed: number;\r\n  estimatedTotalCost: number;\r\n  estimatedCompletionTime?: string;\r\n  processingRate: number;\r\n}\r\n\r\ninterface TabPanelProps {\r\n  children?: React.ReactNode;\r\n  index: number;\r\n  value: number;\r\n}\r\n\r\nfunction TabPanel(props: TabPanelProps) {\r\n  const { children, value, index, ...other } = props;\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`queue-tabpanel-${index}`}\r\n      aria-labelledby={`queue-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport const VideoQueueInterface: React.FC = () => {\r\n  const [queueItems, setQueueItems] = useState<VideoQueueItem[]>([]);\r\n  const [stats, setStats] = useState<QueueStats | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [selectedTab, setSelectedTab] = useState(0);\r\n  const [filterStatus, setFilterStatus] = useState<string>('all');\r\n  const [sortBy, setSortBy] = useState<string>('priority');\r\n  const [selectedItem, setSelectedItem] = useState<VideoQueueItem | null>(null);\r\n  const [editDialogOpen, setEditDialogOpen] = useState(false);\r\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\r\n  const [refreshing, setRefreshing] = useState(false);\r\n\r\n  const { channels, addNotification } = useOptimizedStore();\r\n\r\n  // Fetch queue items\r\n  const fetchQueue = useCallback(async () => {\r\n    try {\r\n      setRefreshing(true);\r\n      const response = await api.get('/queue/list');\r\n      setQueueItems(response.data);\r\n      \r\n      // Fetch stats\r\n      const statsResponse = await api.get('/queue/stats/summary');\r\n      setStats(statsResponse.data);\r\n      \r\n      setLoading(false);\r\n    } catch (error) {\r\n      console.error('Failed to fetch queue:', error);\r\n      addNotification({\r\n        type: 'error',\r\n        message: 'Failed to load video queue',\r\n      });\r\n      setLoading(false);\r\n    } finally {\r\n      setRefreshing(false);\r\n    }\r\n  }, [addNotification]);\r\n\r\n  useEffect(() => {\r\n    fetchQueue();\r\n    // Refresh every 30 seconds\r\n    const interval = setInterval(fetchQueue, 30000);\r\n    return () => clearInterval(interval);\r\n  }, [fetchQueue]);\r\n\r\n  // Filter and sort queue items\r\n  const filteredItems = useMemo(() => {\r\n    let filtered = [...queueItems];\r\n\r\n    // Apply status filter\r\n    if (filterStatus !== 'all') {\r\n      filtered = filtered.filter((item) => item.status === filterStatus);\r\n    }\r\n\r\n    // Apply sorting\r\n    filtered.sort((a, b) => {\r\n      switch (sortBy) {\r\n        case 'priority':\r\n          const priorityOrder = { urgent: 0, high: 1, normal: 2, low: 3 };\r\n          return priorityOrder[a.priority] - priorityOrder[b.priority];\r\n        case 'scheduled':\r\n          return (a.scheduledTime || '').localeCompare(b.scheduledTime || '');\r\n        case 'cost':\r\n          return b.estimatedCost - a.estimatedCost;\r\n        case 'duration':\r\n          return b.duration - a.duration;\r\n        default:\r\n          return 0;\r\n      }\r\n    });\r\n\r\n    return filtered;\r\n  }, [queueItems, filterStatus, sortBy]);\r\n\r\n  // Group items by status for tabs\r\n  const itemsByStatus = useMemo(() => {\r\n    return {\r\n      all: queueItems,\r\n      pending: queueItems.filter((item) => item.status === 'pending'),\r\n      processing: queueItems.filter((item) => item.status === 'processing'),\r\n      completed: queueItems.filter((item) => item.status === 'completed'),\r\n      failed: queueItems.filter((item) => item.status === 'failed'),\r\n    };\r\n  }, [queueItems]);\r\n\r\n  // Handle drag and drop\r\n  const handleDragEnd = async (result: DropResult) => {\r\n    if (!result.destination) return;\r\n\r\n    const items = Array.from(filteredItems);\r\n    const [reorderedItem] = items.splice(result.source.index, 1);\r\n    items.splice(result.destination.index, 0, reorderedItem);\r\n\r\n    // Update priority based on new position\r\n    const updatedItems = items.map((item, index) => ({\r\n      ...item,\r\n      priority: index === 0 ? 'urgent' : index < 3 ? 'high' : 'normal',\r\n    }));\r\n\r\n    setQueueItems(updatedItems);\r\n\r\n    // Update on server\r\n    try {\r\n      await api.patch(`/queue/${reorderedItem.id}`, {\r\n        priority: updatedItems.find((i) => i.id === reorderedItem.id)?.priority,\r\n      });\r\n    } catch (error) {\r\n      console.error('Failed to update priority:', error);\r\n    }\r\n  };\r\n\r\n  // Handle actions\r\n  const handlePause = async (id: string) => {\r\n    try {\r\n      await api.patch(`/queue/${id}`, { status: 'paused' });\r\n      fetchQueue();\r\n      addNotification({\r\n        type: 'success',\r\n        message: 'Video paused',\r\n      });\r\n    } catch (error) {\r\n      addNotification({\r\n        type: 'error',\r\n        message: 'Failed to pause video',\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleResume = async (id: string) => {\r\n    try {\r\n      await api.patch(`/queue/${id}`, { status: 'pending' });\r\n      fetchQueue();\r\n      addNotification({\r\n        type: 'success',\r\n        message: 'Video resumed',\r\n      });\r\n    } catch (error) {\r\n      addNotification({\r\n        type: 'error',\r\n        message: 'Failed to resume video',\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleRetry = async (id: string) => {\r\n    try {\r\n      await api.post(`/queue/${id}/retry`);\r\n      fetchQueue();\r\n      addNotification({\r\n        type: 'success',\r\n        message: 'Video queued for retry',\r\n      });\r\n    } catch (error) {\r\n      addNotification({\r\n        type: 'error',\r\n        message: 'Failed to retry video',\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleDelete = async (id: string) => {\r\n    try {\r\n      await api.delete(`/queue/${id}`);\r\n      fetchQueue();\r\n      addNotification({\r\n        type: 'success',\r\n        message: 'Video removed from queue',\r\n      });\r\n    } catch (error) {\r\n      addNotification({\r\n        type: 'error',\r\n        message: 'Failed to remove video',\r\n      });\r\n    }\r\n  };\r\n\r\n  const handlePauseAll = async () => {\r\n    try {\r\n      await api.post('/queue/pause-all');\r\n      fetchQueue();\r\n      addNotification({\r\n        type: 'success',\r\n        message: 'All videos paused',\r\n      });\r\n    } catch (error) {\r\n      addNotification({\r\n        type: 'error',\r\n        message: 'Failed to pause all videos',\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleResumeAll = async () => {\r\n    try {\r\n      await api.post('/queue/resume-all');\r\n      fetchQueue();\r\n      addNotification({\r\n        type: 'success',\r\n        message: 'All videos resumed',\r\n      });\r\n    } catch (error) {\r\n      addNotification({\r\n        type: 'error',\r\n        message: 'Failed to resume all videos',\r\n      });\r\n    }\r\n  };\r\n\r\n  // Render queue item\r\n  const renderQueueItem = (item: VideoQueueItem, index: number) => {\r\n    const getStatusIcon = () => {\r\n      switch (item.status) {\r\n        case 'processing':\r\n          return <Speed color=\"primary\" />;\r\n        case 'completed':\r\n          return <CheckCircle color=\"success\" />;\r\n        case 'failed':\r\n          return <Error color=\"error\" />;\r\n        case 'scheduled':\r\n          return <Schedule color=\"action\" />;\r\n        case 'paused':\r\n          return <Pause color=\"warning\" />;\r\n        default:\r\n          return <Info color=\"info\" />;\r\n      }\r\n    };\r\n\r\n    const getPriorityColor = () => {\r\n      switch (item.priority) {\r\n        case 'urgent':\r\n          return 'error';\r\n        case 'high':\r\n          return 'warning';\r\n        case 'normal':\r\n          return 'info';\r\n        case 'low':\r\n          return 'default';\r\n        default:\r\n          return 'default';\r\n      }\r\n    };\r\n\r\n    const channel = channels.list.find((c) => c.id === item.channelId);\r\n\r\n    return (\r\n      <Draggable key={item.id} draggableId={item.id} index={index}>\r\n        {(provided, snapshot) => (\r\n          <Card\r\n            ref={provided.innerRef}\r\n            {...provided.draggableProps}\r\n            sx={{\r\n              mb: 2,\r\n              opacity: snapshot.isDragging ? 0.8 : 1,\r\n              transform: snapshot.isDragging ? 'rotate(2deg)' : 'none',\r\n              transition: 'all 0.2s ease',\r\n              '&:hover': {\r\n                boxShadow: 3,\r\n              },\r\n            }}\r\n          >\r\n            <CardContent>\r\n              <Grid container spacing={2} alignItems=\"center\">\r\n                <Grid item {...provided.dragHandleProps}>\r\n                  <DragIndicator color=\"action\" />\r\n                </Grid>\r\n                <Grid item>\r\n                  {getStatusIcon()}\r\n                </Grid>\r\n                <Grid item xs>\r\n                  <Typography variant=\"h6\" gutterBottom>\r\n                    {item.title}\r\n                  </Typography>\r\n                  <Box display=\"flex\" gap={1} flexWrap=\"wrap\">\r\n                    <Chip\r\n                      size=\"small\"\r\n                      label={channel?.name || 'Unknown Channel'}\r\n                      variant=\"outlined\"\r\n                    />\r\n                    <Chip\r\n                      size=\"small\"\r\n                      label={item.priority}\r\n                      color={getPriorityColor()}\r\n                    />\r\n                    <Chip\r\n                      size=\"small\"\r\n                      icon={<AttachMoney />}\r\n                      label={`$${item.estimatedCost.toFixed(2)}`}\r\n                      variant=\"outlined\"\r\n                    />\r\n                    <Chip\r\n                      size=\"small\"\r\n                      icon={<Timeline />}\r\n                      label={`${item.duration} min`}\r\n                      variant=\"outlined\"\r\n                    />\r\n                    {item.scheduledTime && (\r\n                      <Chip\r\n                        size=\"small\"\r\n                        icon={<Schedule />}\r\n                        label={format(new Date(item.scheduledTime), 'MMM d, h:mm a')}\r\n                        variant=\"outlined\"\r\n                      />\r\n                    )}\r\n                  </Box>\r\n                  {item.description && (\r\n                    <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 1 }}>\r\n                      {item.description}\r\n                    </Typography>\r\n                  )}\r\n                  {item.status === 'processing' && (\r\n                    <Box sx={{ mt: 2 }}>\r\n                      <Box display=\"flex\" justifyContent=\"space-between\">\r\n                        <Typography variant=\"caption\">\r\n                          Processing: {item.progress}%\r\n                        </Typography>\r\n                        <Typography variant=\"caption\">\r\n                          Est. {formatDistanceToNow(\r\n                            addMinutes(new Date(), item.processingTime - item.progress / 100 * item.processingTime)\r\n                          )}\r\n                        </Typography>\r\n                      </Box>\r\n                      <LinearProgress\r\n                        variant=\"determinate\"\r\n                        value={item.progress}\r\n                        sx={{ mt: 1 }}\r\n                      />\r\n                    </Box>\r\n                  )}\r\n                  {item.status === 'failed' && item.error && (\r\n                    <Alert severity=\"error\" sx={{ mt: 1 }}>\r\n                      {item.error} (Retry {item.retryCount}/3)\r\n                    </Alert>\r\n                  )}\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    onClick={(e) => {\r\n                      setAnchorEl(e.currentTarget);\r\n                      setSelectedItem(item);\r\n                    }}\r\n                  >\r\n                    <MoreVert />\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n            </CardContent>\r\n          </Card>\r\n        )}\r\n      </Draggable>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Box>\r\n      {/* Header */}\r\n      <Paper sx={{ p: 2, mb: 3 }}>\r\n        <Grid container spacing={2} alignItems=\"center\">\r\n          <Grid item xs>\r\n            <Typography variant=\"h5\">Video Generation Queue</Typography>\r\n            {stats && (\r\n              <Typography variant=\"body2\" color=\"text.secondary\">\r\n                {stats.totalItems} total • {stats.processing} processing • \r\n                Est. cost: ${stats.estimatedTotalCost.toFixed(2)} • \r\n                Rate: {stats.processingRate.toFixed(1)} videos/hour\r\n              </Typography>\r\n            )}\r\n          </Grid>\r\n          <Grid item>\r\n            <Button\r\n              startIcon={<Add />}\r\n              variant=\"contained\"\r\n              onClick={() => {/* Open add dialog */}}\r\n            >\r\n              Add Video\r\n            </Button>\r\n          </Grid>\r\n          <Grid item>\r\n            <Button\r\n              startIcon={<Pause />}\r\n              onClick={handlePauseAll}\r\n            >\r\n              Pause All\r\n            </Button>\r\n          </Grid>\r\n          <Grid item>\r\n            <Button\r\n              startIcon={<PlayArrow />}\r\n              onClick={handleResumeAll}\r\n            >\r\n              Resume All\r\n            </Button>\r\n          </Grid>\r\n          <Grid item>\r\n            <IconButton onClick={fetchQueue} disabled={refreshing}>\r\n              <Badge badgeContent={refreshing ? '!' : 0} color=\"primary\">\r\n                <Refresh />\r\n              </Badge>\r\n            </IconButton>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n\r\n      {/* Stats Cards */}\r\n      {stats && (\r\n        <Grid container spacing={2} sx={{ mb: 3 }}>\r\n          <Grid item xs={12} sm={6} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography color=\"text.secondary\" gutterBottom>\r\n                  Pending\r\n                </Typography>\r\n                <Typography variant=\"h4\">\r\n                  {stats.pending}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} sm={6} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography color=\"text.secondary\" gutterBottom>\r\n                  Processing\r\n                </Typography>\r\n                <Typography variant=\"h4\" color=\"primary\">\r\n                  {stats.processing}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} sm={6} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography color=\"text.secondary\" gutterBottom>\r\n                  Completed\r\n                </Typography>\r\n                <Typography variant=\"h4\" color=\"success.main\">\r\n                  {stats.completed}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} sm={6} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography color=\"text.secondary\" gutterBottom>\r\n                  Failed\r\n                </Typography>\r\n                <Typography variant=\"h4\" color=\"error.main\">\r\n                  {stats.failed}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n      )}\r\n\r\n      {/* Filters and Sorting */}\r\n      <Paper sx={{ p: 2, mb: 3 }}>\r\n        <Grid container spacing={2} alignItems=\"center\">\r\n          <Grid item>\r\n            <FormControl size=\"small\" sx={{ minWidth: 120 }}>\r\n              <InputLabel>Status</InputLabel>\r\n              <Select\r\n                value={filterStatus}\r\n                label=\"Status\"\r\n                onChange={(e) => setFilterStatus(e.target.value)}\r\n              >\r\n                <MenuItem value=\"all\">All</MenuItem>\r\n                <MenuItem value=\"pending\">Pending</MenuItem>\r\n                <MenuItem value=\"scheduled\">Scheduled</MenuItem>\r\n                <MenuItem value=\"processing\">Processing</MenuItem>\r\n                <MenuItem value=\"completed\">Completed</MenuItem>\r\n                <MenuItem value=\"failed\">Failed</MenuItem>\r\n                <MenuItem value=\"paused\">Paused</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid item>\r\n            <FormControl size=\"small\" sx={{ minWidth: 120 }}>\r\n              <InputLabel>Sort By</InputLabel>\r\n              <Select\r\n                value={sortBy}\r\n                label=\"Sort By\"\r\n                onChange={(e) => setSortBy(e.target.value)}\r\n              >\r\n                <MenuItem value=\"priority\">Priority</MenuItem>\r\n                <MenuItem value=\"scheduled\">Scheduled Time</MenuItem>\r\n                <MenuItem value=\"cost\">Cost</MenuItem>\r\n                <MenuItem value=\"duration\">Duration</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n\r\n      {/* Queue Items */}\r\n      {loading ? (\r\n        <Box>\r\n          {[1, 2, 3].map((i) => (\r\n            <Skeleton key={i} variant=\"rectangular\" height={120} sx={{ mb: 2 }} />\r\n          ))}\r\n        </Box>\r\n      ) : (\r\n        <DragDropContext onDragEnd={handleDragEnd}>\r\n          <Droppable droppableId=\"queue\">\r\n            {(provided) => (\r\n              <Box {...provided.droppableProps} ref={provided.innerRef}>\r\n                {filteredItems.length === 0 ? (\r\n                  <Paper sx={{ p: 4, textAlign: 'center' }}>\r\n                    <Typography variant=\"h6\" color=\"text.secondary\">\r\n                      No videos in queue\r\n                    </Typography>\r\n                  </Paper>\r\n                ) : (\r\n                  filteredItems.map((item, index) => renderQueueItem(item, index))\r\n                )}\r\n                {provided.placeholder}\r\n              </Box>\r\n            )}\r\n          </Droppable>\r\n        </DragDropContext>\r\n      )}\r\n\r\n      {/* Action Menu */}\r\n      <Menu\r\n        anchorEl={anchorEl}\r\n        open={Boolean(anchorEl)}\r\n        onClose={() => setAnchorEl(null)}\r\n      >\r\n        <MenuItem\r\n          onClick={() => {\r\n            setEditDialogOpen(true);\r\n            setAnchorEl(null);\r\n          }}\r\n        >\r\n          <Edit sx={{ mr: 1 }} /> Edit\r\n        </MenuItem>\r\n        {selectedItem?.status === 'paused' ? (\r\n          <MenuItem onClick={() => {\r\n            handleResume(selectedItem.id);\r\n            setAnchorEl(null);\r\n          }}>\r\n            <PlayArrow sx={{ mr: 1 }} /> Resume\r\n          </MenuItem>\r\n        ) : (\r\n          <MenuItem onClick={() => {\r\n            selectedItem && handlePause(selectedItem.id);\r\n            setAnchorEl(null);\r\n          }}>\r\n            <Pause sx={{ mr: 1 }} /> Pause\r\n          </MenuItem>\r\n        )}\r\n        {selectedItem?.status === 'failed' && (\r\n          <MenuItem onClick={() => {\r\n            handleRetry(selectedItem.id);\r\n            setAnchorEl(null);\r\n          }}>\r\n            <Refresh sx={{ mr: 1 }} /> Retry\r\n          </MenuItem>\r\n        )}\r\n        <MenuItem\r\n          onClick={() => {\r\n            selectedItem && handleDelete(selectedItem.id);\r\n            setAnchorEl(null);\r\n          }}\r\n          sx={{ color: 'error.main' }}\r\n        >\r\n          <Delete sx={{ mr: 1 }} /> Delete\r\n        </MenuItem>\r\n      </Menu>\r\n    </Box>\r\n  );\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Videos\\GenerationProgress.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'unsubscribe' is assigned a value but never used.","line":68,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":68,"endColumn":33},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'fetchGenerationStatus', 'handleWebSocketUpdate', and 'subscribe'. Either include them or remove the dependency array.","line":149,"column":6,"nodeType":"ArrayExpression","endLine":149,"endColumn":20,"suggestions":[{"desc":"Update the dependencies array to be: [fetchGenerationStatus, generationId, handleWebSocketUpdate, subscribe]","fix":{"range":[3631,3645],"text":"[fetchGenerationStatus, generationId, handleWebSocketUpdate, subscribe]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":160,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":160,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3951,3954],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3951,3954],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":166,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":166,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4079,4082],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4079,4082],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":338,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":338,"endColumn":42}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Paper,\n  Typography,\n  LinearProgress,\n  Stepper,\n  Step,\n  StepLabel,\n  StepContent,\n  Alert,\n  Button,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Chip,\n  CircularProgress,\n  Card,\n  CardContent,\n  Grid,\n  Divider,\n} from '@mui/material';\nimport {\n  CheckCircle,\n  Error as ErrorIcon,\n  HourglassEmpty,\n  Psychology,\n  RecordVoiceOver,\n  VideoLibrary,\n  Image,\n  AutoAwesome,\n  Speed,\n  AttachMoney,\n  Timer,\n  PlayArrow,\n  Cancel,\n} from '@mui/icons-material';\nimport { useNavigate } from 'react-router-dom';\nimport { api } from '../../services/api';\nimport { useWebSocket } from '../../hooks/useWebSocket';\n\ninterface GenerationProgressProps {\n  generationId: string;\n  onComplete?: (videoId: string) => void;\n  onError?: (error: string) => void;\n}\n\ninterface GenerationStep {\n  id: string;\n  label: string;\n  description: string;\n  icon: React.ReactNode;\n  status: 'pending' | 'processing' | 'completed' | 'error';\n  progress?: number;\n  startTime?: Date;\n  endTime?: Date;\n  cost?: number;\n  details?: string;\n}\n\nexport const GenerationProgress: React.FC<GenerationProgressProps> = ({\n  generationId,\n  onComplete,\n  onError,\n}) => {\n  const navigate = useNavigate();\n  const { subscribe, unsubscribe } = useWebSocket();\n  const [overallProgress, setOverallProgress] = useState(0);\n  const [currentStep, setCurrentStep] = useState(0);\n  const [status, setStatus] = useState<'processing' | 'completed' | 'failed' | 'cancelled'>('processing');\n  const [error, setError] = useState<string | null>(null);\n  const [videoId, setVideoId] = useState<string | null>(null);\n  const [totalCost, setTotalCost] = useState(0);\n  const [estimatedTime, setEstimatedTime] = useState<number | null>(null);\n  const [elapsedTime, setElapsedTime] = useState(0);\n  \n  const [steps, setSteps] = useState<GenerationStep[]>([\n    {\n      id: 'script',\n      label: 'Script Generation',\n      description: 'Creating engaging script content',\n      icon: <Psychology />,\n      status: 'pending',\n      progress: 0,\n    },\n    {\n      id: 'voice',\n      label: 'Voice Synthesis',\n      description: 'Converting script to natural speech',\n      icon: <RecordVoiceOver />,\n      status: 'pending',\n      progress: 0,\n    },\n    {\n      id: 'visuals',\n      label: 'Visual Generation',\n      description: 'Creating video frames and animations',\n      icon: <VideoLibrary />,\n      status: 'pending',\n      progress: 0,\n    },\n    {\n      id: 'assembly',\n      label: 'Video Assembly',\n      description: 'Combining all elements',\n      icon: <AutoAwesome />,\n      status: 'pending',\n      progress: 0,\n    },\n    {\n      id: 'thumbnail',\n      label: 'Thumbnail Creation',\n      description: 'Generating eye-catching thumbnail',\n      icon: <Image />,\n      status: 'pending',\n      progress: 0,\n    },\n    {\n      id: 'quality',\n      label: 'Quality Check',\n      description: 'Verifying video quality',\n      icon: <CheckCircle />,\n      status: 'pending',\n      progress: 0,\n    },\n  ]);\n\n  useEffect(() => {\n    // Subscribe to WebSocket updates\n    const unsubscribeWs = subscribe(`video.generation.${generationId}`, handleWebSocketUpdate);\n    \n    // Start polling for status\n    const pollInterval = setInterval(fetchGenerationStatus, 2000);\n    \n    // Start elapsed time counter\n    const timeInterval = setInterval(() => {\n      setElapsedTime((prev) => prev + 1);\n    }, 1000);\n    \n    // Initial fetch\n    fetchGenerationStatus();\n    \n    return () => {\n      unsubscribeWs();\n      clearInterval(pollInterval);\n      clearInterval(timeInterval);\n    };\n  }, [generationId]);\n\n  const fetchGenerationStatus = async () => {\n    try {\n      const response = await api.videos.getGenerationStatus(generationId);\n      updateProgress(response);\n    } catch (error) {\n      console.error('Failed to fetch generation status:', error);\n    }\n  };\n\n  const handleWebSocketUpdate = (data: any) => {\n    if (data.generationId === generationId) {\n      updateProgress(data);\n    }\n  };\n\n  const updateProgress = (data: any) => {\n    // Update overall progress\n    setOverallProgress(data.progress || 0);\n    \n    // Update current step\n    if (data.currentStep !== undefined) {\n      setCurrentStep(data.currentStep);\n    }\n    \n    // Update steps\n    if (data.steps) {\n      setSteps((prevSteps) =>\n        prevSteps.map((step, index) => {\n          const updatedStep = data.steps[index];\n          if (updatedStep) {\n            return {\n              ...step,\n              status: updatedStep.status,\n              progress: updatedStep.progress,\n              startTime: updatedStep.startTime,\n              endTime: updatedStep.endTime,\n              cost: updatedStep.cost,\n              details: updatedStep.details,\n            };\n          }\n          return step;\n        })\n      );\n    }\n    \n    // Update status\n    if (data.status) {\n      setStatus(data.status);\n      \n      if (data.status === 'completed' && data.videoId) {\n        setVideoId(data.videoId);\n        onComplete?.(data.videoId);\n      } else if (data.status === 'failed' && data.error) {\n        setError(data.error);\n        onError?.(data.error);\n      }\n    }\n    \n    // Update costs and time\n    if (data.totalCost !== undefined) {\n      setTotalCost(data.totalCost);\n    }\n    if (data.estimatedTime !== undefined) {\n      setEstimatedTime(data.estimatedTime);\n    }\n  };\n\n  const handleCancel = async () => {\n    try {\n      await api.videos.cancelGeneration(generationId);\n      setStatus('cancelled');\n      navigate('/videos');\n    } catch (error) {\n      console.error('Failed to cancel generation:', error);\n    }\n  };\n\n  const handleViewVideo = () => {\n    if (videoId) {\n      navigate(`/videos/${videoId}`);\n    }\n  };\n\n  const handleRetry = () => {\n    // Implement retry logic\n    window.location.reload();\n  };\n\n  const formatTime = (seconds: number) => {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n  };\n\n  const getStepIcon = (step: GenerationStep) => {\n    if (step.status === 'completed') {\n      return <CheckCircle color=\"success\" />;\n    } else if (step.status === 'error') {\n      return <ErrorIcon color=\"error\" />;\n    } else if (step.status === 'processing') {\n      return <CircularProgress size={24} />;\n    }\n    return step.icon;\n  };\n\n  return (\n    <Box p={3}>\n      <Paper sx={{ p: 3 }}>\n        <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\n          <Typography variant=\"h5\">\n            Video Generation Progress\n          </Typography>\n          <Box display=\"flex\" gap={2}>\n            {status === 'processing' && (\n              <Button\n                variant=\"outlined\"\n                color=\"error\"\n                onClick={handleCancel}\n                startIcon={<Cancel />}\n              >\n                Cancel\n              </Button>\n            )}\n            {status === 'completed' && videoId && (\n              <Button\n                variant=\"contained\"\n                onClick={handleViewVideo}\n                startIcon={<PlayArrow />}\n              >\n                View Video\n              </Button>\n            )}\n            {status === 'failed' && (\n              <Button\n                variant=\"contained\"\n                onClick={handleRetry}\n                color=\"error\"\n              >\n                Retry\n              </Button>\n            )}\n          </Box>\n        </Box>\n\n        {/* Overall Progress */}\n        <Box mb={4}>\n          <Box display=\"flex\" justifyContent=\"space-between\" mb={1}>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              Overall Progress\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              {overallProgress}%\n            </Typography>\n          </Box>\n          <LinearProgress\n            variant=\"determinate\"\n            value={overallProgress}\n            sx={{ height: 8, borderRadius: 4 }}\n          />\n        </Box>\n\n        {/* Status Alert */}\n        {status === 'completed' && (\n          <Alert severity=\"success\" sx={{ mb: 3 }}>\n            Video generation completed successfully!\n          </Alert>\n        )}\n        {status === 'failed' && (\n          <Alert severity=\"error\" sx={{ mb: 3 }}>\n            {error || 'Video generation failed. Please try again.'}\n          </Alert>\n        )}\n        {status === 'cancelled' && (\n          <Alert severity=\"warning\" sx={{ mb: 3 }}>\n            Video generation was cancelled.\n          </Alert>\n        )}\n\n        <Grid container spacing={3}>\n          {/* Steps Progress */}\n          <Grid item xs={12} md={8}>\n            <Card>\n              <CardContent>\n                <Typography variant=\"h6\" gutterBottom>\n                  Generation Steps\n                </Typography>\n                <Stepper activeStep={currentStep} orientation=\"vertical\">\n                  {steps.map((step, index) => (\n                    <Step key={step.id} completed={step.status === 'completed'}>\n                      <StepLabel\n                        icon={getStepIcon(step)}\n                        error={step.status === 'error'}\n                      >\n                        <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                          <Typography>{step.label}</Typography>\n                          {step.status === 'processing' && step.progress !== undefined && (\n                            <Chip\n                              label={`${step.progress}%`}\n                              size=\"small\"\n                              color=\"primary\"\n                            />\n                          )}\n                          {step.cost !== undefined && (\n                            <Chip\n                              label={`$${step.cost.toFixed(2)}`}\n                              size=\"small\"\n                              variant=\"outlined\"\n                            />\n                          )}\n                        </Box>\n                      </StepLabel>\n                      <StepContent>\n                        <Typography variant=\"body2\" color=\"text.secondary\">\n                          {step.description}\n                        </Typography>\n                        {step.details && (\n                          <Typography variant=\"caption\" color=\"text.secondary\">\n                            {step.details}\n                          </Typography>\n                        )}\n                        {step.status === 'processing' && step.progress !== undefined && (\n                          <LinearProgress\n                            variant=\"determinate\"\n                            value={step.progress}\n                            sx={{ mt: 1, mb: 1 }}\n                          />\n                        )}\n                        {step.startTime && step.endTime && (\n                          <Typography variant=\"caption\" color=\"text.secondary\">\n                            Duration: {Math.round((step.endTime.getTime() - step.startTime.getTime()) / 1000)}s\n                          </Typography>\n                        )}\n                      </StepContent>\n                    </Step>\n                  ))}\n                </Stepper>\n              </CardContent>\n            </Card>\n          </Grid>\n\n          {/* Statistics */}\n          <Grid item xs={12} md={4}>\n            <Grid container spacing={2}>\n              {/* Time Stats */}\n              <Grid item xs={12}>\n                <Card>\n                  <CardContent>\n                    <Typography variant=\"h6\" gutterBottom>\n                      <Timer /> Time\n                    </Typography>\n                    <List dense>\n                      <ListItem>\n                        <ListItemIcon>\n                          <HourglassEmpty />\n                        </ListItemIcon>\n                        <ListItemText\n                          primary=\"Elapsed Time\"\n                          secondary={formatTime(elapsedTime)}\n                        />\n                      </ListItem>\n                      {estimatedTime && (\n                        <ListItem>\n                          <ListItemIcon>\n                            <Speed />\n                          </ListItemIcon>\n                          <ListItemText\n                            primary=\"Estimated Remaining\"\n                            secondary={formatTime(Math.max(0, estimatedTime - elapsedTime))}\n                          />\n                        </ListItem>\n                      )}\n                    </List>\n                  </CardContent>\n                </Card>\n              </Grid>\n\n              {/* Cost Breakdown */}\n              <Grid item xs={12}>\n                <Card>\n                  <CardContent>\n                    <Typography variant=\"h6\" gutterBottom>\n                      <AttachMoney /> Cost Breakdown\n                    </Typography>\n                    <List dense>\n                      {steps.map((step) => (\n                        step.cost !== undefined && (\n                          <ListItem key={step.id}>\n                            <ListItemText primary={step.label} />\n                            <Typography variant=\"body2\">\n                              ${step.cost.toFixed(3)}\n                            </Typography>\n                          </ListItem>\n                        )\n                      ))}\n                      <Divider />\n                      <ListItem>\n                        <ListItemText primary={<strong>Total</strong>} />\n                        <Typography variant=\"h6\" color=\"primary\">\n                          ${totalCost.toFixed(2)}\n                        </Typography>\n                      </ListItem>\n                    </List>\n                  </CardContent>\n                </Card>\n              </Grid>\n\n              {/* Generation Info */}\n              <Grid item xs={12}>\n                <Card>\n                  <CardContent>\n                    <Typography variant=\"h6\" gutterBottom>\n                      Generation Info\n                    </Typography>\n                    <List dense>\n                      <ListItem>\n                        <ListItemText\n                          primary=\"Generation ID\"\n                          secondary={generationId}\n                        />\n                      </ListItem>\n                      <ListItem>\n                        <ListItemText\n                          primary=\"Status\"\n                          secondary={\n                            <Chip\n                              label={status}\n                              size=\"small\"\n                              color={\n                                status === 'completed'\n                                  ? 'success'\n                                  : status === 'failed'\n                                  ? 'error'\n                                  : status === 'cancelled'\n                                  ? 'warning'\n                                  : 'primary'\n                              }\n                            />\n                          }\n                        />\n                      </ListItem>\n                      {videoId && (\n                        <ListItem>\n                          <ListItemText\n                            primary=\"Video ID\"\n                            secondary={videoId}\n                          />\n                        </ListItem>\n                      )}\n                    </List>\n                  </CardContent>\n                </Card>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Paper>\n    </Box>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Videos\\PublishingControls.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DateTimePicker' is defined but never used.","line":2,"column":122,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":136},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Visibility' is defined but never used.","line":3,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'VisibilityOff' is defined but never used.","line":3,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":54},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":6,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[351,354],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[351,354],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":7,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[378,381],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[378,381],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'channels' is defined but never used.","line":10,"column":84,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":92}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\r\nimport { Box, Paper, Typography, Button, TextField, Select, MenuItem, FormControl, InputLabel, Switch, FormControlLabel, DateTimePicker } from '@mui/material';\r\nimport { Publish, Schedule, Visibility, VisibilityOff } from '@mui/icons-material';\r\n\r\ninterface PublishingControlsProps {\r\n  onPublish: (settings: any) => void;\r\n  channels: any[];\r\n}\r\n\r\nexport const PublishingControls: React.FC<PublishingControlsProps> = ({ onPublish, channels }) => {\r\n  const [settings, setSettings] = useState({\r\n    publishNow: true,\r\n    scheduledTime: null,\r\n    visibility: 'public',\r\n    notifySubscribers: true,\r\n    premiere: false,\r\n    ageRestriction: false,\r\n    comments: true,\r\n    likes: true,\r\n    channelId: '',\r\n    playlist: '',\r\n    tags: [],\r\n    category: ''\r\n  });\r\n\r\n  return (\r\n    <Paper sx={{ p: 3 }}>\r\n      <Typography variant=\"h6\" gutterBottom>Publishing Settings</Typography>\r\n      \r\n      <FormControlLabel control={<Switch checked={settings.publishNow} onChange={(e) => setSettings({...settings, publishNow: e.target.checked})} />} label=\"Publish Immediately\" />\r\n      \r\n      {!settings.publishNow && (\r\n        <TextField type=\"datetime-local\" label=\"Schedule Time\" fullWidth margin=\"normal\" InputLabelProps={{ shrink: true }} />\r\n      )}\r\n      \r\n      <FormControl fullWidth margin=\"normal\">\r\n        <InputLabel>Visibility</InputLabel>\r\n        <Select value={settings.visibility} onChange={(e) => setSettings({...settings, visibility: e.target.value})}>\r\n          <MenuItem value=\"public\">Public</MenuItem>\r\n          <MenuItem value=\"unlisted\">Unlisted</MenuItem>\r\n          <MenuItem value=\"private\">Private</MenuItem>\r\n        </Select>\r\n      </FormControl>\r\n      \r\n      <FormControlLabel control={<Switch checked={settings.notifySubscribers} />} label=\"Notify Subscribers\" />\r\n      <FormControlLabel control={<Switch checked={settings.comments} />} label=\"Allow Comments\" />\r\n      <FormControlLabel control={<Switch checked={settings.likes} />} label=\"Show Likes\" />\r\n      \r\n      <Box display=\"flex\" gap={2} mt={3}>\r\n        <Button variant=\"contained\" startIcon={settings.publishNow ? <Publish /> : <Schedule />} onClick={() => onPublish(settings)}>\r\n          {settings.publishNow ? 'Publish Now' : 'Schedule'}\r\n        </Button>\r\n      </Box>\r\n    </Paper>\r\n  );\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Videos\\VideoApproval.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Alert' is defined but never used.","line":2,"column":111,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":116},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":6,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[292,295],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[292,295],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":7,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[322,325],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[322,325],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'video' is defined but never used.","line":12,"column":63,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":68},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":35,"column":85,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":88,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1371,1374],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1371,1374],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\r\nimport { Box, Paper, Typography, Button, TextField, Rating, FormControl, RadioGroup, FormControlLabel, Radio, Alert } from '@mui/material';\r\nimport { CheckCircle, Cancel, Edit } from '@mui/icons-material';\r\n\r\ninterface VideoApprovalProps {\r\n  video: any;\r\n  onApprove: (feedback: any) => void;\r\n  onReject: (reason: string) => void;\r\n  onRequestChanges: (changes: string) => void;\r\n}\r\n\r\nexport const VideoApproval: React.FC<VideoApprovalProps> = ({ video, onApprove, onReject, onRequestChanges }) => {\r\n  const [decision, setDecision] = useState<'approve' | 'reject' | 'changes'>('approve');\r\n  const [quality, setQuality] = useState(4);\r\n  const [feedback, setFeedback] = useState('');\r\n  \r\n  const handleSubmit = () => {\r\n    if (decision === 'approve') {\r\n      onApprove({ quality, feedback });\r\n    } else if (decision === 'reject') {\r\n      onReject(feedback);\r\n    } else {\r\n      onRequestChanges(feedback);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Paper sx={{ p: 3 }}>\r\n      <Typography variant=\"h6\" gutterBottom>Video Approval</Typography>\r\n      <Box mb={2}>\r\n        <Typography>Quality Rating</Typography>\r\n        <Rating value={quality} onChange={(e, v) => setQuality(v || 0)} />\r\n      </Box>\r\n      <FormControl component=\"fieldset\">\r\n        <RadioGroup value={decision} onChange={(e) => setDecision(e.target.value as any)}>\r\n          <FormControlLabel value=\"approve\" control={<Radio />} label=\"Approve for Publishing\" />\r\n          <FormControlLabel value=\"changes\" control={<Radio />} label=\"Request Changes\" />\r\n          <FormControlLabel value=\"reject\" control={<Radio />} label=\"Reject\" />\r\n        </RadioGroup>\r\n      </FormControl>\r\n      <TextField fullWidth multiline rows={4} label=\"Feedback\" value={feedback} onChange={(e) => setFeedback(e.target.value)} margin=\"normal\" />\r\n      <Box display=\"flex\" gap={2} mt={2}>\r\n        <Button variant=\"contained\" color={decision === 'approve' ? 'success' : decision === 'reject' ? 'error' : 'warning'} onClick={handleSubmit} startIcon={decision === 'approve' ? <CheckCircle /> : decision === 'reject' ? <Cancel /> : <Edit />}>\r\n          {decision === 'approve' ? 'Approve' : decision === 'reject' ? 'Reject' : 'Request Changes'}\r\n        </Button>\r\n      </Box>\r\n    </Paper>\r\n  );\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Videos\\VideoCard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Delete' is defined but never used.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":9},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":99,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2205,2208],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2205,2208],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":112,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":112,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2488,2491],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2488,2491],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport {\n  Card,\n  CardContent,\n  CardMedia,\n  CardActions,\n  Typography,\n  Chip,\n  IconButton,\n  Box,\n  Tooltip,\n  LinearProgress,\n  Menu,\n  MenuItem,\n} from '@mui/material';\nimport {\n  PlayArrow,\n  Edit,\n  Delete,\n  MoreVert,\n  Schedule,\n  CheckCircle,\n  Error,\n  HourglassEmpty,\n  TrendingUp,\n  AttachMoney,\n  Visibility,\n  ThumbUp,\n  Comment,\n} from '@mui/icons-material';\nimport { formatDistanceToNow } from 'date-fns';\nimport { useNavigate } from 'react-router-dom';\n\ninterface VideoCardProps {\n  video: {\n    id: string;\n    title: string;\n    description?: string;\n    thumbnail_url?: string;\n    channel_id: string;\n    channel_name?: string;\n    generation_status: 'pending' | 'processing' | 'completed' | 'failed';\n    publish_status: 'draft' | 'scheduled' | 'published' | 'publishing';\n    quality_score?: number;\n    trend_score?: number;\n    total_cost: number;\n    view_count: number;\n    like_count: number;\n    comment_count: number;\n    created_at: string;\n    published_at?: string;\n    scheduled_publish_time?: string;\n    duration_seconds?: number;\n    youtube_url?: string;\n    progress?: number;\n    error_message?: string;\n  };\n  onEdit?: (videoId: string) => void;\n  onDelete?: (videoId: string) => void;\n  onPublish?: (videoId: string) => void;\n  onPreview?: (videoId: string) => void;\n}\n\nexport const VideoCard: React.FC<VideoCardProps> = ({\n  video,\n  onEdit,\n  onDelete,\n  onPublish,\n  onPreview,\n}) => {\n  const navigate = useNavigate();\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n\n  const handleMenuOpen = (event: React.MouseEvent<HTMLElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleMenuClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleCardClick = () => {\n    navigate(`/videos/${video.id}`);\n  };\n\n  const getStatusIcon = () => {\n    switch (video.generation_status) {\n      case 'completed':\n        return <CheckCircle color=\"success\" />;\n      case 'processing':\n        return <HourglassEmpty color=\"warning\" />;\n      case 'failed':\n        return <Error color=\"error\" />;\n      default:\n        return <Schedule color=\"action\" />;\n    }\n  };\n\n  const getStatusColor = (): any => {\n    switch (video.generation_status) {\n      case 'completed':\n        return 'success';\n      case 'processing':\n        return 'warning';\n      case 'failed':\n        return 'error';\n      default:\n        return 'default';\n    }\n  };\n\n  const getPublishStatusColor = (): any => {\n    switch (video.publish_status) {\n      case 'published':\n        return 'success';\n      case 'scheduled':\n        return 'info';\n      case 'publishing':\n        return 'warning';\n      default:\n        return 'default';\n    }\n  };\n\n  const formatDuration = (seconds?: number) => {\n    if (!seconds) return 'N/A';\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n  };\n\n  const formatNumber = (num: number) => {\n    if (num >= 1000000) return `${(num / 1000000).toFixed(1)}M`;\n    if (num >= 1000) return `${(num / 1000).toFixed(1)}K`;\n    return num.toString();\n  };\n\n  return (\n    <Card\n      sx={{\n        height: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n        cursor: 'pointer',\n        transition: 'transform 0.2s, box-shadow 0.2s',\n        '&:hover': {\n          transform: 'translateY(-4px)',\n          boxShadow: 4,\n        },\n      }}\n    >\n      <Box position=\"relative\">\n        <CardMedia\n          component=\"img\"\n          height=\"180\"\n          image={video.thumbnail_url || '/placeholder-video.png'}\n          alt={video.title}\n          onClick={handleCardClick}\n          sx={{ cursor: 'pointer' }}\n        />\n        {video.duration_seconds && (\n          <Chip\n            label={formatDuration(video.duration_seconds)}\n            size=\"small\"\n            sx={{\n              position: 'absolute',\n              bottom: 8,\n              right: 8,\n              backgroundColor: 'rgba(0, 0, 0, 0.8)',\n              color: 'white',\n            }}\n          />\n        )}\n        {video.generation_status === 'processing' && video.progress && (\n          <LinearProgress\n            variant=\"determinate\"\n            value={video.progress}\n            sx={{\n              position: 'absolute',\n              bottom: 0,\n              left: 0,\n              right: 0,\n            }}\n          />\n        )}\n      </Box>\n\n      <CardContent sx={{ flexGrow: 1, pb: 1 }} onClick={handleCardClick}>\n        <Box display=\"flex\" alignItems=\"flex-start\" justifyContent=\"space-between\" mb={1}>\n          <Typography\n            variant=\"subtitle1\"\n            component=\"h3\"\n            sx={{\n              overflow: 'hidden',\n              textOverflow: 'ellipsis',\n              display: '-webkit-box',\n              WebkitLineClamp: 2,\n              WebkitBoxOrient: 'vertical',\n              fontWeight: 500,\n              flex: 1,\n            }}\n          >\n            {video.title}\n          </Typography>\n          <Tooltip title={video.generation_status}>\n            <Box ml={1}>{getStatusIcon()}</Box>\n          </Tooltip>\n        </Box>\n\n        {video.channel_name && (\n          <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n            {video.channel_name}\n          </Typography>\n        )}\n\n        <Box display=\"flex\" gap={1} flexWrap=\"wrap\" mb={1}>\n          <Chip\n            label={video.generation_status}\n            color={getStatusColor()}\n            size=\"small\"\n          />\n          <Chip\n            label={video.publish_status}\n            color={getPublishStatusColor()}\n            size=\"small\"\n          />\n        </Box>\n\n        {video.generation_status === 'completed' && (\n          <Box display=\"flex\" gap={2} mb={1}>\n            {video.quality_score !== undefined && (\n              <Box display=\"flex\" alignItems=\"center\" gap={0.5}>\n                <CheckCircle sx={{ fontSize: 16, color: 'success.main' }} />\n                <Typography variant=\"caption\">\n                  Quality: {video.quality_score.toFixed(0)}%\n                </Typography>\n              </Box>\n            )}\n            {video.trend_score !== undefined && (\n              <Box display=\"flex\" alignItems=\"center\" gap={0.5}>\n                <TrendingUp sx={{ fontSize: 16, color: 'info.main' }} />\n                <Typography variant=\"caption\">\n                  Trend: {video.trend_score.toFixed(0)}%\n                </Typography>\n              </Box>\n            )}\n          </Box>\n        )}\n\n        <Box display=\"flex\" alignItems=\"center\" gap={2} mb={1}>\n          <Box display=\"flex\" alignItems=\"center\" gap={0.5}>\n            <AttachMoney sx={{ fontSize: 16 }} />\n            <Typography variant=\"caption\">${video.total_cost.toFixed(2)}</Typography>\n          </Box>\n          {video.published_at && (\n            <>\n              <Box display=\"flex\" alignItems=\"center\" gap={0.5}>\n                <Visibility sx={{ fontSize: 16 }} />\n                <Typography variant=\"caption\">{formatNumber(video.view_count)}</Typography>\n              </Box>\n              <Box display=\"flex\" alignItems=\"center\" gap={0.5}>\n                <ThumbUp sx={{ fontSize: 16 }} />\n                <Typography variant=\"caption\">{formatNumber(video.like_count)}</Typography>\n              </Box>\n              <Box display=\"flex\" alignItems=\"center\" gap={0.5}>\n                <Comment sx={{ fontSize: 16 }} />\n                <Typography variant=\"caption\">{formatNumber(video.comment_count)}</Typography>\n              </Box>\n            </>\n          )}\n        </Box>\n\n        {video.error_message && (\n          <Typography variant=\"caption\" color=\"error\" sx={{ display: 'block', mt: 1 }}>\n            Error: {video.error_message}\n          </Typography>\n        )}\n\n        <Typography variant=\"caption\" color=\"text.secondary\">\n          Created {formatDistanceToNow(new Date(video.created_at), { addSuffix: true })}\n        </Typography>\n\n        {video.scheduled_publish_time && video.publish_status === 'scheduled' && (\n          <Typography variant=\"caption\" color=\"info.main\" sx={{ display: 'block' }}>\n            Scheduled for {new Date(video.scheduled_publish_time).toLocaleString()}\n          </Typography>\n        )}\n      </CardContent>\n\n      <CardActions sx={{ justifyContent: 'space-between', px: 2, pb: 2 }}>\n        <Box>\n          {video.generation_status === 'completed' && (\n            <>\n              <Tooltip title=\"Preview\">\n                <IconButton\n                  size=\"small\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onPreview?.(video.id);\n                  }}\n                >\n                  <PlayArrow />\n                </IconButton>\n              </Tooltip>\n              {video.publish_status === 'draft' && (\n                <Tooltip title=\"Publish\">\n                  <IconButton\n                    size=\"small\"\n                    color=\"primary\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      onPublish?.(video.id);\n                    }}\n                  >\n                    <Schedule />\n                  </IconButton>\n                </Tooltip>\n              )}\n            </>\n          )}\n          {video.generation_status !== 'processing' && (\n            <Tooltip title=\"Edit\">\n              <IconButton\n                size=\"small\"\n                onClick={(e) => {\n                  e.stopPropagation();\n                  onEdit?.(video.id);\n                }}\n              >\n                <Edit />\n              </IconButton>\n            </Tooltip>\n          )}\n        </Box>\n\n        <IconButton\n          size=\"small\"\n          onClick={(e) => {\n            e.stopPropagation();\n            handleMenuOpen(e);\n          }}\n        >\n          <MoreVert />\n        </IconButton>\n\n        <Menu\n          anchorEl={anchorEl}\n          open={Boolean(anchorEl)}\n          onClose={handleMenuClose}\n          onClick={(e) => e.stopPropagation()}\n        >\n          <MenuItem\n            onClick={() => {\n              handleMenuClose();\n              navigate(`/videos/${video.id}`);\n            }}\n          >\n            View Details\n          </MenuItem>\n          {video.youtube_url && (\n            <MenuItem\n              onClick={() => {\n                handleMenuClose();\n                window.open(video.youtube_url, '_blank');\n              }}\n            >\n              View on YouTube\n            </MenuItem>\n          )}\n          <MenuItem\n            onClick={() => {\n              handleMenuClose();\n              onEdit?.(video.id);\n            }}\n          >\n            Edit\n          </MenuItem>\n          <MenuItem\n            onClick={() => {\n              handleMenuClose();\n              onDelete?.(video.id);\n            }}\n            sx={{ color: 'error.main' }}\n          >\n            Delete\n          </MenuItem>\n        </Menu>\n      </CardActions>\n    </Card>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Videos\\VideoEngagementStats.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'List' is defined but never used.","line":2,"column":50,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":54},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ListItem' is defined but never used.","line":2,"column":56,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":64},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ListItemText' is defined but never used.","line":2,"column":66,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":78},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":22,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[804,807],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[804,807],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Paper, Box, Typography, LinearProgress, List, ListItem, ListItemText, Chip, Grid } from '@mui/material';\r\nimport { PieChart, Pie, Cell, ResponsiveContainer, Tooltip } from 'recharts';\r\n\r\ninterface VideoEngagementStatsProps {\r\n  stats: {\r\n    likeRatio: number;\r\n    commentRate: number;\r\n    shareRate: number;\r\n    avgViewDuration: number;\r\n    clickThroughRate: number;\r\n    audienceRetention: number[];\r\n  };\r\n}\r\n\r\nexport const VideoEngagementStats: React.FC<VideoEngagementStatsProps> = ({ stats }) => {\r\n  const engagementData = [\r\n    { name: 'Likes', value: stats.likeRatio || 85, color: '#4CAF50' },\r\n    { name: 'Dislikes', value: 100 - (stats.likeRatio || 85), color: '#F44336' }\r\n  ];\r\n\r\n  const StatItem = ({ label, value, max = 100, color = 'primary' }: any) => (\r\n    <Box mb={2}>\r\n      <Box display=\"flex\" justifyContent=\"space-between\" mb={1}>\r\n        <Typography variant=\"body2\">{label}</Typography>\r\n        <Typography variant=\"body2\" fontWeight=\"bold\">{value}%</Typography>\r\n      </Box>\r\n      <LinearProgress variant=\"determinate\" value={(value / max) * 100} color={color} />\r\n    </Box>\r\n  );\r\n\r\n  return (\r\n    <Paper sx={{ p: 3 }}>\r\n      <Typography variant=\"h6\" gutterBottom>Engagement Statistics</Typography>\r\n      \r\n      <Grid container spacing={3}>\r\n        <Grid item xs={12} md={6}>\r\n          <StatItem label=\"Like/Dislike Ratio\" value={stats.likeRatio || 85} />\r\n          <StatItem label=\"Comment Rate\" value={stats.commentRate || 12} max={50} />\r\n          <StatItem label=\"Share Rate\" value={stats.shareRate || 8} max={20} />\r\n          <StatItem label=\"Avg View Duration\" value={stats.avgViewDuration || 65} />\r\n          <StatItem label=\"Click-through Rate\" value={stats.clickThroughRate || 4.5} max={10} />\r\n        </Grid>\r\n        \r\n        <Grid item xs={12} md={6}>\r\n          <Typography variant=\"subtitle2\" gutterBottom>Like/Dislike Distribution</Typography>\r\n          <ResponsiveContainer width=\"100%\" height={200}>\r\n            <PieChart>\r\n              <Pie data={engagementData} cx=\"50%\" cy=\"50%\" innerRadius={60} outerRadius={80} paddingAngle={5} dataKey=\"value\">\r\n                {engagementData.map((entry, index) => (\r\n                  <Cell key={index} fill={entry.color} />\r\n                ))}\r\n              </Pie>\r\n              <Tooltip />\r\n            </PieChart>\r\n          </ResponsiveContainer>\r\n          \r\n          <Box display=\"flex\" justifyContent=\"center\" gap={2} mt={2}>\r\n            {engagementData.map((entry) => (\r\n              <Chip key={entry.name} label={`${entry.name}: ${entry.value}%`} size=\"small\" style={{ backgroundColor: entry.color, color: 'white' }} />\r\n            ))}\r\n          </Box>\r\n        </Grid>\r\n      </Grid>\r\n    </Paper>\r\n  );\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Videos\\VideoFilters.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Chip' is defined but never used.","line":2,"column":85,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":89},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Accordion' is defined but never used.","line":2,"column":99,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":108},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AccordionSummary' is defined but never used.","line":2,"column":110,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":126},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AccordionDetails' is defined but never used.","line":2,"column":128,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":144},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FormGroup' is defined but never used.","line":2,"column":146,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":155},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ExpandMore' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":6,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[381,384],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[381,384],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\r\nimport { Box, Paper, Typography, FormControl, InputLabel, Select, MenuItem, Slider, Chip, Button, Accordion, AccordionSummary, AccordionDetails, FormGroup, FormControlLabel, Checkbox } from '@mui/material';\r\nimport { ExpandMore, FilterList, Clear } from '@mui/icons-material';\r\n\r\ninterface VideoFiltersProps {\r\n  onApplyFilters: (filters: any) => void;\r\n  onClearFilters: () => void;\r\n}\r\n\r\nexport const VideoFilters: React.FC<VideoFiltersProps> = ({ onApplyFilters, onClearFilters }) => {\r\n  const [filters, setFilters] = useState({\r\n    status: 'all',\r\n    dateRange: 'all',\r\n    channel: 'all',\r\n    qualityScore: [0, 100],\r\n    duration: 'all',\r\n    hasRevenue: false,\r\n    minViews: 0,\r\n    categories: []\r\n  });\r\n\r\n  const handleApply = () => {\r\n    onApplyFilters(filters);\r\n  };\r\n\r\n  const handleClear = () => {\r\n    setFilters({\r\n      status: 'all',\r\n      dateRange: 'all',\r\n      channel: 'all',\r\n      qualityScore: [0, 100],\r\n      duration: 'all',\r\n      hasRevenue: false,\r\n      minViews: 0,\r\n      categories: []\r\n    });\r\n    onClearFilters();\r\n  };\r\n\r\n  return (\r\n    <Paper sx={{ p: 2 }}>\r\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\r\n        <Typography variant=\"h6\">\r\n          <FilterList sx={{ mr: 1, verticalAlign: 'middle' }} />\r\n          Filters\r\n        </Typography>\r\n        <Button size=\"small\" startIcon={<Clear />} onClick={handleClear}>Clear All</Button>\r\n      </Box>\r\n\r\n      <FormControl fullWidth margin=\"normal\" size=\"small\">\r\n        <InputLabel>Status</InputLabel>\r\n        <Select value={filters.status} onChange={(e) => setFilters({...filters, status: e.target.value})}>\r\n          <MenuItem value=\"all\">All</MenuItem>\r\n          <MenuItem value=\"draft\">Draft</MenuItem>\r\n          <MenuItem value=\"published\">Published</MenuItem>\r\n          <MenuItem value=\"scheduled\">Scheduled</MenuItem>\r\n          <MenuItem value=\"processing\">Processing</MenuItem>\r\n        </Select>\r\n      </FormControl>\r\n\r\n      <FormControl fullWidth margin=\"normal\" size=\"small\">\r\n        <InputLabel>Date Range</InputLabel>\r\n        <Select value={filters.dateRange} onChange={(e) => setFilters({...filters, dateRange: e.target.value})}>\r\n          <MenuItem value=\"all\">All Time</MenuItem>\r\n          <MenuItem value=\"today\">Today</MenuItem>\r\n          <MenuItem value=\"week\">This Week</MenuItem>\r\n          <MenuItem value=\"month\">This Month</MenuItem>\r\n          <MenuItem value=\"year\">This Year</MenuItem>\r\n        </Select>\r\n      </FormControl>\r\n\r\n      <Box mt={2} mb={1}>\r\n        <Typography variant=\"body2\">Quality Score</Typography>\r\n        <Slider value={filters.qualityScore} onChange={(e, v) => setFilters({...filters, qualityScore: v as number[]})} valueLabelDisplay=\"auto\" min={0} max={100} />\r\n      </Box>\r\n\r\n      <FormControl fullWidth margin=\"normal\" size=\"small\">\r\n        <InputLabel>Duration</InputLabel>\r\n        <Select value={filters.duration} onChange={(e) => setFilters({...filters, duration: e.target.value})}>\r\n          <MenuItem value=\"all\">All</MenuItem>\r\n          <MenuItem value=\"short\">Short (&lt; 3 min)</MenuItem>\r\n          <MenuItem value=\"medium\">Medium (3-10 min)</MenuItem>\r\n          <MenuItem value=\"long\">Long (&gt; 10 min)</MenuItem>\r\n        </Select>\r\n      </FormControl>\r\n\r\n      <FormControlLabel control={<Checkbox checked={filters.hasRevenue} onChange={(e) => setFilters({...filters, hasRevenue: e.target.checked})} />} label=\"Has Revenue\" />\r\n\r\n      <Box mt={2}>\r\n        <Button fullWidth variant=\"contained\" onClick={handleApply}>Apply Filters</Button>\r\n      </Box>\r\n    </Paper>\r\n  );\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Videos\\VideoGenerationForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Slider' is defined but never used.","line":24,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Tooltip' is defined but never used.","line":29,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Collapse' is defined but never used.","line":31,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TrendingUp' is defined but never used.","line":39,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Schedule' is defined but never used.","line":43,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":43,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MonetizationOn' is defined but never used.","line":44,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":44,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Info' is defined but never used.","line":45,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":45,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Warning' is defined but never used.","line":47,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":47,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Preview' is defined but never used.","line":53,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":53,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Help' is defined but never used.","line":54,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":54,"endColumn":7},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchChannels'. Either include it or remove the dependency array.","line":147,"column":6,"nodeType":"ArrayExpression","endLine":147,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchChannels]","fix":{"range":[3274,3276],"text":"[fetchChannels]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'updateCostEstimate'. Either include it or remove the dependency array.","line":152,"column":6,"nodeType":"ArrayExpression","endLine":152,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [config, updateCostEstimate]","fix":{"range":[3384,3392],"text":"[config, updateCostEstimate]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":244,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":244,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6296,6299],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6296,6299],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Paper,\r\n  Typography,\r\n  TextField,\r\n  Button,\r\n  Stepper,\r\n  Step,\r\n  StepLabel,\r\n  StepContent,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Chip,\r\n  Switch,\r\n  FormControlLabel,\r\n  Alert,\r\n  CircularProgress,\r\n  Card,\r\n  CardContent,\r\n  Grid,\r\n  Slider,\r\n  RadioGroup,\r\n  Radio,\r\n  Autocomplete,\r\n  IconButton,\r\n  Tooltip,\r\n  LinearProgress,\r\n  Collapse,\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  ListItemText,\r\n} from '@mui/material';\r\nimport {\r\n  SmartToy,\r\n  TrendingUp,\r\n  Psychology,\r\n  RecordVoiceOver,\r\n  Image,\r\n  Schedule,\r\n  MonetizationOn,\r\n  Info,\r\n  CheckCircle,\r\n  Warning,\r\n  Speed,\r\n  HighQuality,\r\n  Balance,\r\n  AutoAwesome,\r\n  Refresh,\r\n  Preview,\r\n  Help,\r\n} from '@mui/icons-material';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { videoApi, aiApi } from '../../services/api';\r\nimport { useChannelStore } from '../../stores/channelStore';\r\nimport { formatCurrency } from '../../utils/formatters';\r\n\r\ninterface GenerationConfig {\r\n  channelId: string;\r\n  title: string;\r\n  topic: string;\r\n  style: string;\r\n  duration: string;\r\n  voiceStyle: string;\r\n  language: string;\r\n  useTrending: boolean;\r\n  qualityPreset: string;\r\n  targetAudience: string;\r\n  tone: string;\r\n  keywords: string[];\r\n  thumbnailStyle: string;\r\n  musicStyle: string;\r\n  autoPublish: boolean;\r\n  scheduledTime?: string;\r\n}\r\n\r\ninterface CostEstimate {\r\n  script: number;\r\n  voice: number;\r\n  thumbnail: number;\r\n  processing: number;\r\n  total: number;\r\n}\r\n\r\ninterface TrendingSuggestion {\r\n  topic: string;\r\n  score: number;\r\n  keywords: string[];\r\n  competitionLevel: 'low' | 'medium' | 'high';\r\n}\r\n\r\nconst steps = [\r\n  'Channel & Topic',\r\n  'Content Style',\r\n  'Voice & Audio',\r\n  'Visuals',\r\n  'Publishing',\r\n  'Review & Generate'\r\n];\r\n\r\nexport const VideoGenerationForm: React.FC = () => {\r\n  const navigate = useNavigate();\r\n  const { channels, fetchChannels } = useChannelStore();\r\n  const [activeStep, setActiveStep] = useState(0);\r\n  const [loading, setLoading] = useState(false);\r\n  const [generating, setGenerating] = useState(false);\r\n  const [generationProgress, setGenerationProgress] = useState(0);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [success, setSuccess] = useState<string | null>(null);\r\n  \r\n  const [config, setConfig] = useState<GenerationConfig>({\r\n    channelId: '',\r\n    title: '',\r\n    topic: '',\r\n    style: 'informative',\r\n    duration: 'short',\r\n    voiceStyle: 'natural',\r\n    language: 'en',\r\n    useTrending: true,\r\n    qualityPreset: 'balanced',\r\n    targetAudience: 'general',\r\n    tone: 'professional',\r\n    keywords: [],\r\n    thumbnailStyle: 'modern',\r\n    musicStyle: 'none',\r\n    autoPublish: false,\r\n    scheduledTime: undefined,\r\n  });\r\n\r\n  const [costEstimate, setCostEstimate] = useState<CostEstimate>({\r\n    script: 0,\r\n    voice: 0,\r\n    thumbnail: 0,\r\n    processing: 0,\r\n    total: 0,\r\n  });\r\n\r\n  const [trendingSuggestions, setTrendingSuggestions] = useState<TrendingSuggestion[]>([]);\r\n  const [selectedTrending, setSelectedTrending] = useState<TrendingSuggestion | null>(null);\r\n  const [titleSuggestions, setTitleSuggestions] = useState<string[]>([]);\r\n\r\n  useEffect(() => {\r\n    fetchChannels();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Update cost estimate when config changes\r\n    updateCostEstimate();\r\n  }, [config]);\r\n\r\n  const updateCostEstimate = () => {\r\n    const costs = {\r\n      script: config.qualityPreset === 'quality' ? 0.50 : config.qualityPreset === 'fast' ? 0.20 : 0.35,\r\n      voice: config.duration === 'long' ? 0.80 : config.duration === 'medium' ? 0.50 : 0.30,\r\n      thumbnail: config.thumbnailStyle === 'custom' ? 0.10 : 0.05,\r\n      processing: 0.10,\r\n      total: 0,\r\n    };\r\n    costs.total = costs.script + costs.voice + costs.thumbnail + costs.processing;\r\n    setCostEstimate(costs);\r\n  };\r\n\r\n  const fetchTrendingSuggestions = async () => {\r\n    if (!config.channelId) return;\r\n    \r\n    try {\r\n      setLoading(true);\r\n      const channel = channels.find(c => c.id === config.channelId);\r\n      if (!channel) return;\r\n      \r\n      const response = await aiApi.getTrendingTopics(channel.category);\r\n      setTrendingSuggestions(response.data);\r\n    } catch (error) {\r\n      console.error('Error fetching trending topics:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const generateTitleSuggestions = async () => {\r\n    if (!config.topic) return;\r\n    \r\n    try {\r\n      const response = await aiApi.generateTitles(config.topic, config.style);\r\n      setTitleSuggestions(response.data);\r\n    } catch (error) {\r\n      console.error('Error generating titles:', error);\r\n    }\r\n  };\r\n\r\n  const handleNext = () => {\r\n    setActiveStep((prevStep) => prevStep + 1);\r\n  };\r\n\r\n  const handleBack = () => {\r\n    setActiveStep((prevStep) => prevStep - 1);\r\n  };\r\n\r\n  const handleGenerate = async () => {\r\n    setGenerating(true);\r\n    setError(null);\r\n    setGenerationProgress(0);\r\n    \r\n    try {\r\n      // Start generation\r\n      const response = await videoApi.generateVideo(config);\r\n      const videoId = response.data.id;\r\n      \r\n      // Simulate progress updates (in real app, use WebSocket)\r\n      const progressInterval = setInterval(() => {\r\n        setGenerationProgress(prev => {\r\n          if (prev >= 100) {\r\n            clearInterval(progressInterval);\r\n            return 100;\r\n          }\r\n          return prev + 10;\r\n        });\r\n      }, 2000);\r\n      \r\n      // Poll for status\r\n      const checkStatus = async () => {\r\n        const statusResponse = await videoApi.getGenerationStatus(videoId);\r\n        if (statusResponse.data.status === 'completed') {\r\n          clearInterval(progressInterval);\r\n          setGenerationProgress(100);\r\n          setSuccess('Video generated successfully!');\r\n          setTimeout(() => {\r\n            navigate(`/videos/${videoId}`);\r\n          }, 2000);\r\n        } else if (statusResponse.data.status === 'failed') {\r\n          clearInterval(progressInterval);\r\n          setError('Video generation failed. Please try again.');\r\n          setGenerating(false);\r\n        } else {\r\n          setTimeout(checkStatus, 5000);\r\n        }\r\n      };\r\n      \r\n      setTimeout(checkStatus, 5000);\r\n      \r\n    } catch (error: any) {\r\n      setError(error.response?.data?.detail || 'Failed to generate video');\r\n      setGenerating(false);\r\n    }\r\n  };\r\n\r\n  const renderStepContent = (step: number) => {\r\n    switch (step) {\r\n      case 0: // Channel & Topic\r\n        return (\r\n          <Box sx={{ mt: 2 }}>\r\n            <FormControl fullWidth sx={{ mb: 3 }}>\r\n              <InputLabel>Select Channel</InputLabel>\r\n              <Select\r\n                value={config.channelId}\r\n                label=\"Select Channel\"\r\n                onChange={(e) => setConfig({ ...config, channelId: e.target.value })}\r\n              >\r\n                {channels.map((channel) => (\r\n                  <MenuItem key={channel.id} value={channel.id}>\r\n                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                      {channel.name}\r\n                      {channel.isVerified && (\r\n                        <CheckCircle sx={{ fontSize: 16, color: 'success.main' }} />\r\n                      )}\r\n                    </Box>\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n\r\n            <FormControlLabel\r\n              control={\r\n                <Switch\r\n                  checked={config.useTrending}\r\n                  onChange={(e) => setConfig({ ...config, useTrending: e.target.checked })}\r\n                />\r\n              }\r\n              label=\"Use trending topics\"\r\n              sx={{ mb: 2 }}\r\n            />\r\n\r\n            {config.useTrending && (\r\n              <Box sx={{ mb: 3 }}>\r\n                <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>\r\n                  <Typography variant=\"subtitle2\">Trending Topics</Typography>\r\n                  <Button\r\n                    size=\"small\"\r\n                    startIcon={<Refresh />}\r\n                    onClick={fetchTrendingSuggestions}\r\n                    disabled={!config.channelId || loading}\r\n                  >\r\n                    Refresh\r\n                  </Button>\r\n                </Box>\r\n                {loading ? (\r\n                  <CircularProgress size={24} />\r\n                ) : (\r\n                  <Grid container spacing={1}>\r\n                    {trendingSuggestions.map((suggestion, index) => (\r\n                      <Grid item xs={12} sm={6} key={index}>\r\n                        <Card\r\n                          sx={{\r\n                            cursor: 'pointer',\r\n                            border: selectedTrending?.topic === suggestion.topic ? 2 : 1,\r\n                            borderColor: selectedTrending?.topic === suggestion.topic ? 'primary.main' : 'divider',\r\n                          }}\r\n                          onClick={() => {\r\n                            setSelectedTrending(suggestion);\r\n                            setConfig({ ...config, topic: suggestion.topic });\r\n                          }}\r\n                        >\r\n                          <CardContent sx={{ p: 2 }}>\r\n                            <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>\r\n                              <Typography variant=\"body2\" fontWeight=\"bold\">\r\n                                {suggestion.topic}\r\n                              </Typography>\r\n                              <Chip\r\n                                label={`${suggestion.score}%`}\r\n                                size=\"small\"\r\n                                color=\"primary\"\r\n                              />\r\n                            </Box>\r\n                            <Box sx={{ display: 'flex', gap: 0.5 }}>\r\n                              <Chip\r\n                                label={suggestion.competitionLevel}\r\n                                size=\"small\"\r\n                                variant=\"outlined\"\r\n                                color={\r\n                                  suggestion.competitionLevel === 'low' ? 'success' :\r\n                                  suggestion.competitionLevel === 'medium' ? 'warning' : 'error'\r\n                                }\r\n                              />\r\n                            </Box>\r\n                          </CardContent>\r\n                        </Card>\r\n                      </Grid>\r\n                    ))}\r\n                  </Grid>\r\n                )}\r\n              </Box>\r\n            )}\r\n\r\n            <TextField\r\n              fullWidth\r\n              label=\"Topic\"\r\n              value={config.topic}\r\n              onChange={(e) => setConfig({ ...config, topic: e.target.value })}\r\n              placeholder=\"Enter your video topic or select from trending\"\r\n              sx={{ mb: 3 }}\r\n              multiline\r\n              rows={2}\r\n            />\r\n\r\n            <Autocomplete\r\n              freeSolo\r\n              options={titleSuggestions}\r\n              value={config.title}\r\n              onChange={(e, value) => setConfig({ ...config, title: value || '' })}\r\n              onInputChange={(e, value) => setConfig({ ...config, title: value })}\r\n              renderInput={(params) => (\r\n                <TextField\r\n                  {...params}\r\n                  label=\"Video Title\"\r\n                  placeholder=\"Enter title or use AI suggestions\"\r\n                  InputProps={{\r\n                    ...params.InputProps,\r\n                    endAdornment: (\r\n                      <>\r\n                        {params.InputProps.endAdornment}\r\n                        <IconButton\r\n                          size=\"small\"\r\n                          onClick={generateTitleSuggestions}\r\n                          disabled={!config.topic}\r\n                        >\r\n                          <AutoAwesome />\r\n                        </IconButton>\r\n                      </>\r\n                    ),\r\n                  }}\r\n                />\r\n              )}\r\n            />\r\n          </Box>\r\n        );\r\n\r\n      case 1: // Content Style\r\n        return (\r\n          <Box sx={{ mt: 2 }}>\r\n            <FormControl fullWidth sx={{ mb: 3 }}>\r\n              <InputLabel>Content Style</InputLabel>\r\n              <Select\r\n                value={config.style}\r\n                label=\"Content Style\"\r\n                onChange={(e) => setConfig({ ...config, style: e.target.value })}\r\n              >\r\n                <MenuItem value=\"informative\">Informative</MenuItem>\r\n                <MenuItem value=\"entertaining\">Entertaining</MenuItem>\r\n                <MenuItem value=\"tutorial\">Tutorial</MenuItem>\r\n                <MenuItem value=\"review\">Review</MenuItem>\r\n                <MenuItem value=\"news\">News</MenuItem>\r\n                <MenuItem value=\"story\">Story</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n\r\n            <FormControl fullWidth sx={{ mb: 3 }}>\r\n              <InputLabel>Video Duration</InputLabel>\r\n              <Select\r\n                value={config.duration}\r\n                label=\"Video Duration\"\r\n                onChange={(e) => setConfig({ ...config, duration: e.target.value })}\r\n              >\r\n                <MenuItem value=\"short\">Short (1-3 min)</MenuItem>\r\n                <MenuItem value=\"medium\">Medium (5-10 min)</MenuItem>\r\n                <MenuItem value=\"long\">Long (10+ min)</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n\r\n            <FormControl fullWidth sx={{ mb: 3 }}>\r\n              <InputLabel>Target Audience</InputLabel>\r\n              <Select\r\n                value={config.targetAudience}\r\n                label=\"Target Audience\"\r\n                onChange={(e) => setConfig({ ...config, targetAudience: e.target.value })}\r\n              >\r\n                <MenuItem value=\"general\">General</MenuItem>\r\n                <MenuItem value=\"kids\">Kids</MenuItem>\r\n                <MenuItem value=\"teens\">Teens</MenuItem>\r\n                <MenuItem value=\"adults\">Adults</MenuItem>\r\n                <MenuItem value=\"professionals\">Professionals</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n\r\n            <FormControl fullWidth sx={{ mb: 3 }}>\r\n              <InputLabel>Tone</InputLabel>\r\n              <Select\r\n                value={config.tone}\r\n                label=\"Tone\"\r\n                onChange={(e) => setConfig({ ...config, tone: e.target.value })}\r\n              >\r\n                <MenuItem value=\"professional\">Professional</MenuItem>\r\n                <MenuItem value=\"casual\">Casual</MenuItem>\r\n                <MenuItem value=\"humorous\">Humorous</MenuItem>\r\n                <MenuItem value=\"serious\">Serious</MenuItem>\r\n                <MenuItem value=\"inspirational\">Inspirational</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n\r\n            <Autocomplete\r\n              multiple\r\n              freeSolo\r\n              options={[]}\r\n              value={config.keywords}\r\n              onChange={(e, value) => setConfig({ ...config, keywords: value })}\r\n              renderInput={(params) => (\r\n                <TextField\r\n                  {...params}\r\n                  label=\"Keywords\"\r\n                  placeholder=\"Add keywords for SEO\"\r\n                  helperText=\"Press Enter to add keywords\"\r\n                />\r\n              )}\r\n              renderTags={(value, getTagProps) =>\r\n                value.map((option, index) => (\r\n                  <Chip label={option} {...getTagProps({ index })} />\r\n                ))\r\n              }\r\n            />\r\n          </Box>\r\n        );\r\n\r\n      case 2: // Voice & Audio\r\n        return (\r\n          <Box sx={{ mt: 2 }}>\r\n            <FormControl fullWidth sx={{ mb: 3 }}>\r\n              <InputLabel>Voice Style</InputLabel>\r\n              <Select\r\n                value={config.voiceStyle}\r\n                label=\"Voice Style\"\r\n                onChange={(e) => setConfig({ ...config, voiceStyle: e.target.value })}\r\n              >\r\n                <MenuItem value=\"natural\">Natural</MenuItem>\r\n                <MenuItem value=\"energetic\">Energetic</MenuItem>\r\n                <MenuItem value=\"calm\">Calm</MenuItem>\r\n                <MenuItem value=\"professional\">Professional</MenuItem>\r\n                <MenuItem value=\"friendly\">Friendly</MenuItem>\r\n                <MenuItem value=\"authoritative\">Authoritative</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n\r\n            <FormControl fullWidth sx={{ mb: 3 }}>\r\n              <InputLabel>Language</InputLabel>\r\n              <Select\r\n                value={config.language}\r\n                label=\"Language\"\r\n                onChange={(e) => setConfig({ ...config, language: e.target.value })}\r\n              >\r\n                <MenuItem value=\"en\">English</MenuItem>\r\n                <MenuItem value=\"es\">Spanish</MenuItem>\r\n                <MenuItem value=\"fr\">French</MenuItem>\r\n                <MenuItem value=\"de\">German</MenuItem>\r\n                <MenuItem value=\"it\">Italian</MenuItem>\r\n                <MenuItem value=\"pt\">Portuguese</MenuItem>\r\n                <MenuItem value=\"ja\">Japanese</MenuItem>\r\n                <MenuItem value=\"ko\">Korean</MenuItem>\r\n                <MenuItem value=\"zh\">Chinese</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n\r\n            <FormControl fullWidth sx={{ mb: 3 }}>\r\n              <InputLabel>Background Music</InputLabel>\r\n              <Select\r\n                value={config.musicStyle}\r\n                label=\"Background Music\"\r\n                onChange={(e) => setConfig({ ...config, musicStyle: e.target.value })}\r\n              >\r\n                <MenuItem value=\"none\">None</MenuItem>\r\n                <MenuItem value=\"upbeat\">Upbeat</MenuItem>\r\n                <MenuItem value=\"calm\">Calm</MenuItem>\r\n                <MenuItem value=\"dramatic\">Dramatic</MenuItem>\r\n                <MenuItem value=\"corporate\">Corporate</MenuItem>\r\n                <MenuItem value=\"cinematic\">Cinematic</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n\r\n            <Alert severity=\"info\" sx={{ mt: 2 }}>\r\n              <Typography variant=\"body2\">\r\n                Voice synthesis will use ElevenLabs for natural voices or Google TTS as fallback.\r\n                Music will be royalty-free from our library.\r\n              </Typography>\r\n            </Alert>\r\n          </Box>\r\n        );\r\n\r\n      case 3: // Visuals\r\n        return (\r\n          <Box sx={{ mt: 2 }}>\r\n            <FormControl fullWidth sx={{ mb: 3 }}>\r\n              <InputLabel>Thumbnail Style</InputLabel>\r\n              <Select\r\n                value={config.thumbnailStyle}\r\n                label=\"Thumbnail Style\"\r\n                onChange={(e) => setConfig({ ...config, thumbnailStyle: e.target.value })}\r\n              >\r\n                <MenuItem value=\"modern\">Modern</MenuItem>\r\n                <MenuItem value=\"minimalist\">Minimalist</MenuItem>\r\n                <MenuItem value=\"bold\">Bold</MenuItem>\r\n                <MenuItem value=\"custom\">Custom (AI Generated)</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n\r\n            <Alert severity=\"info\">\r\n              <Typography variant=\"body2\">\r\n                Thumbnails will be automatically generated using DALL-E 3 based on your video content.\r\n                Visual elements will be optimized for maximum click-through rate.\r\n              </Typography>\r\n            </Alert>\r\n          </Box>\r\n        );\r\n\r\n      case 4: // Publishing\r\n        return (\r\n          <Box sx={{ mt: 2 }}>\r\n            <FormControlLabel\r\n              control={\r\n                <Switch\r\n                  checked={config.autoPublish}\r\n                  onChange={(e) => setConfig({ ...config, autoPublish: e.target.checked })}\r\n                />\r\n              }\r\n              label=\"Auto-publish after generation\"\r\n              sx={{ mb: 3 }}\r\n            />\r\n\r\n            {config.autoPublish && (\r\n              <TextField\r\n                fullWidth\r\n                label=\"Schedule Publishing Time\"\r\n                type=\"datetime-local\"\r\n                value={config.scheduledTime || ''}\r\n                onChange={(e) => setConfig({ ...config, scheduledTime: e.target.value })}\r\n                InputLabelProps={{ shrink: true }}\r\n                helperText=\"Leave empty to publish immediately\"\r\n                sx={{ mb: 3 }}\r\n              />\r\n            )}\r\n\r\n            <Alert severity=\"warning\">\r\n              <Typography variant=\"body2\">\r\n                Make sure your YouTube channel is connected and verified before enabling auto-publish.\r\n              </Typography>\r\n            </Alert>\r\n          </Box>\r\n        );\r\n\r\n      case 5: // Review & Generate\r\n        return (\r\n          <Box sx={{ mt: 2 }}>\r\n            <Paper sx={{ p: 3, mb: 3, bgcolor: 'grey.50' }}>\r\n              <Typography variant=\"h6\" gutterBottom>\r\n                Generation Summary\r\n              </Typography>\r\n              \r\n              <List dense>\r\n                <ListItem>\r\n                  <ListItemIcon><SmartToy /></ListItemIcon>\r\n                  <ListItemText primary=\"Topic\" secondary={config.topic} />\r\n                </ListItem>\r\n                <ListItem>\r\n                  <ListItemIcon><Psychology /></ListItemIcon>\r\n                  <ListItemText primary=\"Style\" secondary={`${config.style} - ${config.duration}`} />\r\n                </ListItem>\r\n                <ListItem>\r\n                  <ListItemIcon><RecordVoiceOver /></ListItemIcon>\r\n                  <ListItemText primary=\"Voice\" secondary={`${config.voiceStyle} (${config.language})`} />\r\n                </ListItem>\r\n                <ListItem>\r\n                  <ListItemIcon><Image /></ListItemIcon>\r\n                  <ListItemText primary=\"Thumbnail\" secondary={config.thumbnailStyle} />\r\n                </ListItem>\r\n              </List>\r\n            </Paper>\r\n\r\n            <Paper sx={{ p: 3, mb: 3 }}>\r\n              <Typography variant=\"h6\" gutterBottom>\r\n                Cost Estimate\r\n              </Typography>\r\n              \r\n              <Box sx={{ mb: 2 }}>\r\n                <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>\r\n                  <Typography variant=\"body2\">Script Generation</Typography>\r\n                  <Typography variant=\"body2\">{formatCurrency(costEstimate.script)}</Typography>\r\n                </Box>\r\n                <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>\r\n                  <Typography variant=\"body2\">Voice Synthesis</Typography>\r\n                  <Typography variant=\"body2\">{formatCurrency(costEstimate.voice)}</Typography>\r\n                </Box>\r\n                <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>\r\n                  <Typography variant=\"body2\">Thumbnail</Typography>\r\n                  <Typography variant=\"body2\">{formatCurrency(costEstimate.thumbnail)}</Typography>\r\n                </Box>\r\n                <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>\r\n                  <Typography variant=\"body2\">Processing</Typography>\r\n                  <Typography variant=\"body2\">{formatCurrency(costEstimate.processing)}</Typography>\r\n                </Box>\r\n                <Box sx={{ borderTop: 1, borderColor: 'divider', pt: 1, mt: 1 }}>\r\n                  <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>\r\n                    <Typography variant=\"subtitle1\" fontWeight=\"bold\">Total Cost</Typography>\r\n                    <Typography variant=\"subtitle1\" fontWeight=\"bold\" color=\"primary\">\r\n                      {formatCurrency(costEstimate.total)}\r\n                    </Typography>\r\n                  </Box>\r\n                </Box>\r\n              </Box>\r\n            </Paper>\r\n\r\n            <FormControl component=\"fieldset\" sx={{ mb: 3 }}>\r\n              <Typography variant=\"subtitle2\" gutterBottom>\r\n                Quality Preset\r\n              </Typography>\r\n              <RadioGroup\r\n                row\r\n                value={config.qualityPreset}\r\n                onChange={(e) => setConfig({ ...config, qualityPreset: e.target.value })}\r\n              >\r\n                <FormControlLabel\r\n                  value=\"fast\"\r\n                  control={<Radio />}\r\n                  label={\r\n                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                      <Speed />\r\n                      Fast\r\n                    </Box>\r\n                  }\r\n                />\r\n                <FormControlLabel\r\n                  value=\"balanced\"\r\n                  control={<Radio />}\r\n                  label={\r\n                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                      <Balance />\r\n                      Balanced\r\n                    </Box>\r\n                  }\r\n                />\r\n                <FormControlLabel\r\n                  value=\"quality\"\r\n                  control={<Radio />}\r\n                  label={\r\n                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                      <HighQuality />\r\n                      Quality\r\n                    </Box>\r\n                  }\r\n                />\r\n              </RadioGroup>\r\n            </FormControl>\r\n\r\n            {generating && (\r\n              <Box sx={{ mb: 3 }}>\r\n                <Typography variant=\"body2\" gutterBottom>\r\n                  Generating video... {generationProgress}%\r\n                </Typography>\r\n                <LinearProgress variant=\"determinate\" value={generationProgress} />\r\n              </Box>\r\n            )}\r\n\r\n            {error && (\r\n              <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n                {error}\r\n              </Alert>\r\n            )}\r\n\r\n            {success && (\r\n              <Alert severity=\"success\" sx={{ mb: 2 }}>\r\n                {success}\r\n              </Alert>\r\n            )}\r\n          </Box>\r\n        );\r\n\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box>\r\n      <Paper sx={{ p: 3 }}>\r\n        <Typography variant=\"h5\" fontWeight=\"bold\" gutterBottom>\r\n          Generate New Video\r\n        </Typography>\r\n        \r\n        <Stepper activeStep={activeStep} orientation=\"vertical\">\r\n          {steps.map((label, index) => (\r\n            <Step key={label}>\r\n              <StepLabel>{label}</StepLabel>\r\n              <StepContent>\r\n                {renderStepContent(index)}\r\n                \r\n                <Box sx={{ mt: 3 }}>\r\n                  <Button\r\n                    disabled={index === 0}\r\n                    onClick={handleBack}\r\n                    sx={{ mr: 1 }}\r\n                  >\r\n                    Back\r\n                  </Button>\r\n                  {index === steps.length - 1 ? (\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      onClick={handleGenerate}\r\n                      disabled={generating || !config.channelId || !config.topic}\r\n                      sx={{\r\n                        background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n                        '&:hover': {\r\n                          background: 'linear-gradient(135deg, #5a6fd8 0%, #6a4290 100%)',\r\n                        },\r\n                      }}\r\n                    >\r\n                      {generating ? (\r\n                        <>\r\n                          <CircularProgress size={20} sx={{ mr: 1 }} />\r\n                          Generating...\r\n                        </>\r\n                      ) : (\r\n                        'Generate Video'\r\n                      )}\r\n                    </Button>\r\n                  ) : (\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      onClick={handleNext}\r\n                      sx={{\r\n                        background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n                        '&:hover': {\r\n                          background: 'linear-gradient(135deg, #5a6fd8 0%, #6a4290 100%)',\r\n                        },\r\n                      }}\r\n                    >\r\n                      Next\r\n                    </Button>\r\n                  )}\r\n                </Box>\r\n              </StepContent>\r\n            </Step>\r\n          ))}\r\n        </Stepper>\r\n      </Paper>\r\n    </Box>\r\n  );\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Videos\\VideoList.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CircularProgress' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useVideoStore' is defined but never used.","line":20,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":23},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":49,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1457,1460],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1457,1460],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchVideos'. Either include it or remove the dependency array.","line":55,"column":6,"nodeType":"ArrayExpression","endLine":55,"endColumn":64,"suggestions":[{"desc":"Update the dependencies array to be: [channelId, status, page, itemsPerPage, sortBy, sortOrder, fetchVideos]","fix":{"range":[1592,1650],"text":"[channelId, status, page, itemsPerPage, sortBy, sortOrder, fetchVideos]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":71,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":71,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2100,2103],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2100,2103],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":83,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2423,2426],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2423,2426],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":88,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2531,2534],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2531,2534],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":162,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":162,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4652,4655],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4652,4655],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Grid,\n  Pagination,\n  Typography,\n  Select,\n  MenuItem,\n  FormControl,\n  InputLabel,\n  CircularProgress,\n  Alert,\n  Paper,\n  ToggleButton,\n  ToggleButtonGroup,\n  Skeleton,\n} from '@mui/material';\nimport { ViewModule, ViewList } from '@mui/icons-material';\nimport { VideoCard } from './VideoCard';\nimport { useVideoStore } from '../../stores/videoStore';\nimport { api } from '../../services/api';\n\ninterface VideoListProps {\n  channelId?: string;\n  status?: 'all' | 'generated' | 'published' | 'draft';\n  onVideoSelect?: (videoId: string) => void;\n  onVideoEdit?: (videoId: string) => void;\n  onVideoDelete?: (videoId: string) => void;\n  onVideoPublish?: (videoId: string) => void;\n  onVideoPreview?: (videoId: string) => void;\n}\n\nexport const VideoList: React.FC<VideoListProps> = ({\n  channelId,\n  status = 'all',\n  onVideoSelect,\n  onVideoEdit,\n  onVideoDelete,\n  onVideoPublish,\n  onVideoPreview,\n}) => {\n  const [page, setPage] = useState(1);\n  const [itemsPerPage, setItemsPerPage] = useState(12);\n  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');\n  const [sortBy, setSortBy] = useState<'created' | 'published' | 'views' | 'cost'>('created');\n  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('desc');\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [videos, setVideos] = useState<any[]>([]);\n  const [totalCount, setTotalCount] = useState(0);\n\n  // Fetch videos from API\n  useEffect(() => {\n    fetchVideos();\n  }, [channelId, status, page, itemsPerPage, sortBy, sortOrder]);\n\n  const fetchVideos = async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await api.videos.list({\n        channel_id: channelId,\n        status: status === 'all' ? undefined : status,\n        skip: (page - 1) * itemsPerPage,\n        limit: itemsPerPage,\n        sort_by: sortBy,\n        sort_order: sortOrder,\n      });\n      setVideos(response.data);\n      setTotalCount(response.total);\n    } catch (err: any) {\n      setError(err.message || 'Failed to load videos');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handlePageChange = (event: React.ChangeEvent<unknown>, value: number) => {\n    setPage(value);\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n  };\n\n  const handleItemsPerPageChange = (event: any) => {\n    setItemsPerPage(event.target.value);\n    setPage(1);\n  };\n\n  const handleSortChange = (event: any) => {\n    setSortBy(event.target.value);\n    setPage(1);\n  };\n\n  const handleSortOrderToggle = () => {\n    setSortOrder((prev) => (prev === 'asc' ? 'desc' : 'asc'));\n    setPage(1);\n  };\n\n  const handleViewModeChange = (\n    event: React.MouseEvent<HTMLElement>,\n    newMode: 'grid' | 'list' | null\n  ) => {\n    if (newMode !== null) {\n      setViewMode(newMode);\n    }\n  };\n\n  const totalPages = Math.ceil(totalCount / itemsPerPage);\n\n  // Sort options\n  const sortOptions = [\n    { value: 'created', label: 'Date Created' },\n    { value: 'published', label: 'Date Published' },\n    { value: 'views', label: 'View Count' },\n    { value: 'cost', label: 'Generation Cost' },\n    { value: 'quality', label: 'Quality Score' },\n    { value: 'trend', label: 'Trend Score' },\n  ];\n\n  // Loading skeleton\n  const renderSkeleton = () => (\n    <Grid container spacing={3}>\n      {[...Array(itemsPerPage)].map((_, index) => (\n        <Grid item xs={12} sm={6} md={4} lg={3} key={index}>\n          <Paper sx={{ p: 2 }}>\n            <Skeleton variant=\"rectangular\" height={180} />\n            <Box pt={2}>\n              <Skeleton variant=\"text\" />\n              <Skeleton variant=\"text\" width=\"60%\" />\n              <Box display=\"flex\" gap={1} mt={1}>\n                <Skeleton variant=\"rectangular\" width={60} height={20} />\n                <Skeleton variant=\"rectangular\" width={60} height={20} />\n              </Box>\n            </Box>\n          </Paper>\n        </Grid>\n      ))}\n    </Grid>\n  );\n\n  // Empty state\n  const renderEmptyState = () => (\n    <Box\n      display=\"flex\"\n      flexDirection=\"column\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      minHeight={400}\n      p={4}\n    >\n      <Typography variant=\"h6\" color=\"text.secondary\" gutterBottom>\n        No videos found\n      </Typography>\n      <Typography variant=\"body2\" color=\"text.secondary\">\n        {channelId\n          ? 'No videos have been generated for this channel yet.'\n          : 'Start generating videos to see them here.'}\n      </Typography>\n    </Box>\n  );\n\n  // List view component\n  const VideoListItem = ({ video }: { video: any }) => (\n    <Paper\n      sx={{\n        p: 2,\n        mb: 2,\n        cursor: 'pointer',\n        transition: 'box-shadow 0.2s',\n        '&:hover': { boxShadow: 3 },\n      }}\n      onClick={() => onVideoSelect?.(video.id)}\n    >\n      <Box display=\"flex\" alignItems=\"center\" gap={2}>\n        <Box\n          component=\"img\"\n          src={video.thumbnail_url || '/placeholder-video.png'}\n          alt={video.title}\n          sx={{ width: 120, height: 67, borderRadius: 1, objectFit: 'cover' }}\n        />\n        <Box flex={1}>\n          <Typography variant=\"subtitle1\" fontWeight={500}>\n            {video.title}\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n            {video.channel_name} • {new Date(video.created_at).toLocaleDateString()}\n          </Typography>\n          <Box display=\"flex\" gap={2}>\n            <Typography variant=\"caption\">\n              Status: {video.generation_status}\n            </Typography>\n            <Typography variant=\"caption\">\n              Cost: ${video.total_cost.toFixed(2)}\n            </Typography>\n            {video.view_count > 0 && (\n              <Typography variant=\"caption\">\n                Views: {video.view_count.toLocaleString()}\n              </Typography>\n            )}\n          </Box>\n        </Box>\n      </Box>\n    </Paper>\n  );\n\n  return (\n    <Box>\n      {/* Controls */}\n      <Box\n        display=\"flex\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        mb={3}\n        flexWrap=\"wrap\"\n        gap={2}\n      >\n        <Box display=\"flex\" gap={2} alignItems=\"center\">\n          <FormControl size=\"small\" sx={{ minWidth: 150 }}>\n            <InputLabel>Sort By</InputLabel>\n            <Select value={sortBy} onChange={handleSortChange} label=\"Sort By\">\n              {sortOptions.map((option) => (\n                <MenuItem key={option.value} value={option.value}>\n                  {option.label}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n\n          <ToggleButton\n            value=\"sort\"\n            selected={sortOrder === 'desc'}\n            onChange={handleSortOrderToggle}\n            size=\"small\"\n          >\n            {sortOrder === 'desc' ? '↓' : '↑'}\n          </ToggleButton>\n\n          <FormControl size=\"small\" sx={{ minWidth: 100 }}>\n            <InputLabel>Show</InputLabel>\n            <Select\n              value={itemsPerPage}\n              onChange={handleItemsPerPageChange}\n              label=\"Show\"\n            >\n              <MenuItem value={12}>12</MenuItem>\n              <MenuItem value={24}>24</MenuItem>\n              <MenuItem value={48}>48</MenuItem>\n            </Select>\n          </FormControl>\n        </Box>\n\n        <Box display=\"flex\" gap={2} alignItems=\"center\">\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            {totalCount} videos\n          </Typography>\n          <ToggleButtonGroup\n            value={viewMode}\n            exclusive\n            onChange={handleViewModeChange}\n            size=\"small\"\n          >\n            <ToggleButton value=\"grid\">\n              <ViewModule />\n            </ToggleButton>\n            <ToggleButton value=\"list\">\n              <ViewList />\n            </ToggleButton>\n          </ToggleButtonGroup>\n        </Box>\n      </Box>\n\n      {/* Error state */}\n      {error && (\n        <Alert severity=\"error\" sx={{ mb: 3 }}>\n          {error}\n        </Alert>\n      )}\n\n      {/* Loading state */}\n      {isLoading && renderSkeleton()}\n\n      {/* Empty state */}\n      {!isLoading && videos.length === 0 && renderEmptyState()}\n\n      {/* Video grid/list */}\n      {!isLoading && videos.length > 0 && (\n        <>\n          {viewMode === 'grid' ? (\n            <Grid container spacing={3}>\n              {videos.map((video) => (\n                <Grid item xs={12} sm={6} md={4} lg={3} key={video.id}>\n                  <VideoCard\n                    video={video}\n                    onEdit={onVideoEdit}\n                    onDelete={onVideoDelete}\n                    onPublish={onVideoPublish}\n                    onPreview={onVideoPreview}\n                  />\n                </Grid>\n              ))}\n            </Grid>\n          ) : (\n            <Box>\n              {videos.map((video) => (\n                <VideoListItem key={video.id} video={video} />\n              ))}\n            </Box>\n          )}\n\n          {/* Pagination */}\n          {totalPages > 1 && (\n            <Box display=\"flex\" justifyContent=\"center\" mt={4}>\n              <Pagination\n                count={totalPages}\n                page={page}\n                onChange={handlePageChange}\n                color=\"primary\"\n                size=\"large\"\n                showFirstButton\n                showLastButton\n              />\n            </Box>\n          )}\n        </>\n      )}\n    </Box>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Videos\\VideoMetrics.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Paper' is defined but never used.","line":2,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":11,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[466,469],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[466,469],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchMetrics'. Either include it or remove the dependency array.","line":15,"column":6,"nodeType":"ArrayExpression","endLine":15,"endColumn":15,"suggestions":[{"desc":"Update the dependencies array to be: [fetchMetrics, videoId]","fix":{"range":[530,539],"text":"[fetchMetrics, videoId]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":28,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[870,873],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[870,873],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\r\nimport { Box, Paper, Grid, Typography, Card, CardContent, Chip } from '@mui/material';\r\nimport { TrendingUp, Visibility, ThumbUp, Comment, WatchLater, AttachMoney } from '@mui/icons-material';\r\nimport { api } from '../../services/api';\r\n\r\ninterface VideoMetricsProps {\r\n  videoId: string;\r\n}\r\n\r\nexport const VideoMetrics: React.FC<VideoMetricsProps> = ({ videoId }) => {\r\n  const [metrics, setMetrics] = useState<any>(null);\r\n  \r\n  useEffect(() => {\r\n    fetchMetrics();\r\n  }, [videoId]);\r\n  \r\n  const fetchMetrics = async () => {\r\n    try {\r\n      const response = await api.videos.getAnalytics(videoId);\r\n      setMetrics(response);\r\n    } catch (error) {\r\n      console.error('Failed to fetch metrics:', error);\r\n    }\r\n  };\r\n\r\n  if (!metrics) return null;\r\n\r\n  const MetricCard = ({ icon, label, value, change }: any) => (\r\n    <Card>\r\n      <CardContent>\r\n        <Box display=\"flex\" alignItems=\"center\" gap={1} mb={1}>\r\n          {icon}\r\n          <Typography variant=\"subtitle2\" color=\"text.secondary\">{label}</Typography>\r\n        </Box>\r\n        <Typography variant=\"h4\">{value}</Typography>\r\n        {change && (\r\n          <Chip label={`${change > 0 ? '+' : ''}${change}%`} size=\"small\" color={change > 0 ? 'success' : 'error'} />\r\n        )}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n\r\n  return (\r\n    <Grid container spacing={2}>\r\n      <Grid item xs={6} md={3}>\r\n        <MetricCard icon={<Visibility />} label=\"Views\" value={metrics.views?.toLocaleString()} change={metrics.viewsChange} />\r\n      </Grid>\r\n      <Grid item xs={6} md={3}>\r\n        <MetricCard icon={<ThumbUp />} label=\"Likes\" value={metrics.likes?.toLocaleString()} change={metrics.likesChange} />\r\n      </Grid>\r\n      <Grid item xs={6} md={3}>\r\n        <MetricCard icon={<Comment />} label=\"Comments\" value={metrics.comments?.toLocaleString()} />\r\n      </Grid>\r\n      <Grid item xs={6} md={3}>\r\n        <MetricCard icon={<WatchLater />} label=\"Watch Time\" value={`${metrics.watchTime}h`} />\r\n      </Grid>\r\n      <Grid item xs={6} md={3}>\r\n        <MetricCard icon={<AttachMoney />} label=\"Revenue\" value={`$${metrics.revenue?.toFixed(2)}`} change={metrics.revenueChange} />\r\n      </Grid>\r\n      <Grid item xs={6} md={3}>\r\n        <MetricCard icon={<TrendingUp />} label=\"Engagement\" value={`${metrics.engagementRate}%`} />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Videos\\VideoPerformanceChart.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'LineChart' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Line' is defined but never used.","line":3,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Legend' is defined but never used.","line":3,"column":82,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":88},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":7,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[318,321],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[318,321],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'videoId' is defined but never used.","line":12,"column":79,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":86}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Paper, Box, Typography, ToggleButtonGroup, ToggleButton } from '@mui/material';\r\nimport { LineChart, Line, AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\r\n\r\ninterface VideoPerformanceChartProps {\r\n  videoId: string;\r\n  data?: any[];\r\n  metric?: 'views' | 'engagement' | 'revenue';\r\n  timeRange?: '24h' | '7d' | '30d' | '90d';\r\n}\r\n\r\nexport const VideoPerformanceChart: React.FC<VideoPerformanceChartProps> = ({ videoId, data = [], metric = 'views', timeRange = '7d' }) => {\r\n  const [selectedMetric, setSelectedMetric] = React.useState(metric);\r\n  const [selectedRange, setSelectedRange] = React.useState(timeRange);\r\n\r\n  const chartData = data.length > 0 ? data : [\r\n    { date: 'Mon', views: 1200, engagement: 45, revenue: 12.5 },\r\n    { date: 'Tue', views: 1500, engagement: 52, revenue: 15.2 },\r\n    { date: 'Wed', views: 1800, engagement: 48, revenue: 18.7 },\r\n    { date: 'Thu', views: 2200, engagement: 58, revenue: 22.3 },\r\n    { date: 'Fri', views: 2800, engagement: 62, revenue: 28.9 },\r\n    { date: 'Sat', views: 3200, engagement: 55, revenue: 32.1 },\r\n    { date: 'Sun', views: 2900, engagement: 50, revenue: 29.5 }\r\n  ];\r\n\r\n  return (\r\n    <Paper sx={{ p: 3 }}>\r\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\r\n        <Typography variant=\"h6\">Performance Trends</Typography>\r\n        <Box display=\"flex\" gap={2}>\r\n          <ToggleButtonGroup value={selectedMetric} exclusive onChange={(e, v) => v && setSelectedMetric(v)} size=\"small\">\r\n            <ToggleButton value=\"views\">Views</ToggleButton>\r\n            <ToggleButton value=\"engagement\">Engagement</ToggleButton>\r\n            <ToggleButton value=\"revenue\">Revenue</ToggleButton>\r\n          </ToggleButtonGroup>\r\n          <ToggleButtonGroup value={selectedRange} exclusive onChange={(e, v) => v && setSelectedRange(v)} size=\"small\">\r\n            <ToggleButton value=\"24h\">24h</ToggleButton>\r\n            <ToggleButton value=\"7d\">7d</ToggleButton>\r\n            <ToggleButton value=\"30d\">30d</ToggleButton>\r\n            <ToggleButton value=\"90d\">90d</ToggleButton>\r\n          </ToggleButtonGroup>\r\n        </Box>\r\n      </Box>\r\n      \r\n      <ResponsiveContainer width=\"100%\" height={300}>\r\n        <AreaChart data={chartData}>\r\n          <defs>\r\n            <linearGradient id=\"colorGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n              <stop offset=\"5%\" stopColor=\"#2196F3\" stopOpacity={0.8}/>\r\n              <stop offset=\"95%\" stopColor=\"#2196F3\" stopOpacity={0}/>\r\n            </linearGradient>\r\n          </defs>\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"date\" />\r\n          <YAxis />\r\n          <Tooltip />\r\n          <Area type=\"monotone\" dataKey={selectedMetric} stroke=\"#2196F3\" fillOpacity={1} fill=\"url(#colorGradient)\" />\r\n        </AreaChart>\r\n      </ResponsiveContainer>\r\n    </Paper>\r\n  );\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Videos\\VideoPlayer.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Speed' is defined but never used.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Settings' is defined but never used.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":180,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":180,"endColumn":19}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useRef, useState, useEffect } from 'react';\nimport {\n  Box,\n  IconButton,\n  Slider,\n  Typography,\n  Paper,\n  CircularProgress,\n  Alert,\n} from '@mui/material';\nimport {\n  PlayArrow,\n  Pause,\n  VolumeUp,\n  VolumeOff,\n  Fullscreen,\n  FullscreenExit,\n  Speed,\n  Settings,\n  PictureInPicture,\n} from '@mui/icons-material';\n\ninterface VideoPlayerProps {\n  videoUrl: string;\n  thumbnail?: string;\n  autoPlay?: boolean;\n  controls?: boolean;\n  muted?: boolean;\n  onPlay?: () => void;\n  onPause?: () => void;\n  onEnded?: () => void;\n  onTimeUpdate?: (currentTime: number, duration: number) => void;\n}\n\nexport const VideoPlayer: React.FC<VideoPlayerProps> = ({\n  videoUrl,\n  thumbnail,\n  autoPlay = false,\n  controls = true,\n  muted = false,\n  onPlay,\n  onPause,\n  onEnded,\n  onTimeUpdate,\n}) => {\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [isMuted, setIsMuted] = useState(muted);\n  const [volume, setVolume] = useState(1);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const [isFullscreen, setIsFullscreen] = useState(false);\n  const [playbackRate, setPlaybackRate] = useState(1);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [showControls, setShowControls] = useState(true);\n  const controlsTimeoutRef = useRef<NodeJS.Timeout>();\n\n  useEffect(() => {\n    const video = videoRef.current;\n    if (!video) return;\n\n    const handleLoadedMetadata = () => {\n      setDuration(video.duration);\n      setIsLoading(false);\n    };\n\n    const handleTimeUpdate = () => {\n      setCurrentTime(video.currentTime);\n      onTimeUpdate?.(video.currentTime, video.duration);\n    };\n\n    const handlePlay = () => {\n      setIsPlaying(true);\n      onPlay?.();\n    };\n\n    const handlePause = () => {\n      setIsPlaying(false);\n      onPause?.();\n    };\n\n    const handleEnded = () => {\n      setIsPlaying(false);\n      onEnded?.();\n    };\n\n    const handleError = () => {\n      setError('Failed to load video');\n      setIsLoading(false);\n    };\n\n    video.addEventListener('loadedmetadata', handleLoadedMetadata);\n    video.addEventListener('timeupdate', handleTimeUpdate);\n    video.addEventListener('play', handlePlay);\n    video.addEventListener('pause', handlePause);\n    video.addEventListener('ended', handleEnded);\n    video.addEventListener('error', handleError);\n\n    return () => {\n      video.removeEventListener('loadedmetadata', handleLoadedMetadata);\n      video.removeEventListener('timeupdate', handleTimeUpdate);\n      video.removeEventListener('play', handlePlay);\n      video.removeEventListener('pause', handlePause);\n      video.removeEventListener('ended', handleEnded);\n      video.removeEventListener('error', handleError);\n    };\n  }, [onPlay, onPause, onEnded, onTimeUpdate]);\n\n  const togglePlay = () => {\n    const video = videoRef.current;\n    if (!video) return;\n\n    if (isPlaying) {\n      video.pause();\n    } else {\n      video.play();\n    }\n  };\n\n  const toggleMute = () => {\n    const video = videoRef.current;\n    if (!video) return;\n\n    video.muted = !isMuted;\n    setIsMuted(!isMuted);\n  };\n\n  const handleVolumeChange = (event: Event, newValue: number | number[]) => {\n    const video = videoRef.current;\n    if (!video) return;\n\n    const volumeValue = newValue as number;\n    video.volume = volumeValue;\n    setVolume(volumeValue);\n    if (volumeValue === 0) {\n      setIsMuted(true);\n    } else if (isMuted) {\n      setIsMuted(false);\n    }\n  };\n\n  const handleSeek = (event: Event, newValue: number | number[]) => {\n    const video = videoRef.current;\n    if (!video) return;\n\n    const time = newValue as number;\n    video.currentTime = time;\n    setCurrentTime(time);\n  };\n\n  const toggleFullscreen = async () => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    if (!isFullscreen) {\n      if (container.requestFullscreen) {\n        await container.requestFullscreen();\n      }\n      setIsFullscreen(true);\n    } else {\n      if (document.exitFullscreen) {\n        await document.exitFullscreen();\n      }\n      setIsFullscreen(false);\n    }\n  };\n\n  const togglePictureInPicture = async () => {\n    const video = videoRef.current;\n    if (!video) return;\n\n    try {\n      if (document.pictureInPictureElement) {\n        await document.exitPictureInPicture();\n      } else {\n        await video.requestPictureInPicture();\n      }\n    } catch (error) {\n      console.error('PiP not supported');\n    }\n  };\n\n  const changePlaybackRate = () => {\n    const video = videoRef.current;\n    if (!video) return;\n\n    const rates = [0.5, 0.75, 1, 1.25, 1.5, 2];\n    const currentIndex = rates.indexOf(playbackRate);\n    const nextIndex = (currentIndex + 1) % rates.length;\n    const newRate = rates[nextIndex];\n    \n    video.playbackRate = newRate;\n    setPlaybackRate(newRate);\n  };\n\n  const formatTime = (seconds: number) => {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = Math.floor(seconds % 60);\n    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n  };\n\n  const handleMouseMove = () => {\n    setShowControls(true);\n    if (controlsTimeoutRef.current) {\n      clearTimeout(controlsTimeoutRef.current);\n    }\n    controlsTimeoutRef.current = setTimeout(() => {\n      if (isPlaying) {\n        setShowControls(false);\n      }\n    }, 3000);\n  };\n\n  if (error) {\n    return (\n      <Box p={3}>\n        <Alert severity=\"error\">{error}</Alert>\n      </Box>\n    );\n  }\n\n  return (\n    <Paper\n      ref={containerRef}\n      sx={{\n        position: 'relative',\n        width: '100%',\n        backgroundColor: 'black',\n        overflow: 'hidden',\n      }}\n      onMouseMove={handleMouseMove}\n      onMouseLeave={() => isPlaying && setShowControls(false)}\n    >\n      <Box position=\"relative\" paddingTop=\"56.25%\">\n        <video\n          ref={videoRef}\n          src={videoUrl}\n          poster={thumbnail}\n          autoPlay={autoPlay}\n          muted={isMuted}\n          style={{\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            width: '100%',\n            height: '100%',\n            objectFit: 'contain',\n          }}\n          onClick={togglePlay}\n        />\n\n        {isLoading && (\n          <Box\n            position=\"absolute\"\n            top=\"50%\"\n            left=\"50%\"\n            sx={{ transform: 'translate(-50%, -50%)' }}\n          >\n            <CircularProgress size={60} sx={{ color: 'white' }} />\n          </Box>\n        )}\n\n        {controls && showControls && (\n          <Box\n            position=\"absolute\"\n            bottom={0}\n            left={0}\n            right={0}\n            sx={{\n              background: 'linear-gradient(to top, rgba(0,0,0,0.8), transparent)',\n              transition: 'opacity 0.3s',\n              opacity: showControls ? 1 : 0,\n            }}\n          >\n            {/* Progress Bar */}\n            <Box px={2} py={1}>\n              <Slider\n                value={currentTime}\n                max={duration}\n                onChange={handleSeek}\n                sx={{\n                  color: 'primary.main',\n                  '& .MuiSlider-thumb': {\n                    width: 12,\n                    height: 12,\n                  },\n                }}\n              />\n            </Box>\n\n            {/* Controls */}\n            <Box\n              display=\"flex\"\n              alignItems=\"center\"\n              justifyContent=\"space-between\"\n              px={2}\n              pb={1}\n            >\n              <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                <IconButton onClick={togglePlay} sx={{ color: 'white' }}>\n                  {isPlaying ? <Pause /> : <PlayArrow />}\n                </IconButton>\n\n                <IconButton onClick={toggleMute} sx={{ color: 'white' }}>\n                  {isMuted ? <VolumeOff /> : <VolumeUp />}\n                </IconButton>\n\n                <Box width={100}>\n                  <Slider\n                    value={isMuted ? 0 : volume}\n                    max={1}\n                    step={0.1}\n                    onChange={handleVolumeChange}\n                    sx={{\n                      color: 'white',\n                      '& .MuiSlider-thumb': {\n                        width: 12,\n                        height: 12,\n                      },\n                    }}\n                  />\n                </Box>\n\n                <Typography variant=\"body2\" sx={{ color: 'white', ml: 2 }}>\n                  {formatTime(currentTime)} / {formatTime(duration)}\n                </Typography>\n              </Box>\n\n              <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                <IconButton\n                  onClick={changePlaybackRate}\n                  sx={{ color: 'white' }}\n                  size=\"small\"\n                >\n                  <Typography variant=\"caption\">{playbackRate}x</Typography>\n                </IconButton>\n\n                <IconButton\n                  onClick={togglePictureInPicture}\n                  sx={{ color: 'white' }}\n                  size=\"small\"\n                >\n                  <PictureInPicture />\n                </IconButton>\n\n                <IconButton\n                  onClick={toggleFullscreen}\n                  sx={{ color: 'white' }}\n                  size=\"small\"\n                >\n                  {isFullscreen ? <FullscreenExit /> : <Fullscreen />}\n                </IconButton>\n              </Box>\n            </Box>\n          </Box>\n        )}\n      </Box>\n    </Paper>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Videos\\VideoPreview.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Grid' is defined but never used.","line":2,"column":42,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Chip' is defined but never used.","line":2,"column":48,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":52},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Alert' is defined but never used.","line":2,"column":54,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":59},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":7,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[265,268],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[265,268],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'onApprove' is defined but never used.","line":13,"column":87,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":96}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Box, Paper, Typography, Button, Grid, Chip, Alert } from '@mui/material';\r\nimport { PlayArrow, Edit, Publish } from '@mui/icons-material';\r\nimport { VideoPlayer } from './VideoPlayer';\r\n\r\ninterface VideoPreviewProps {\r\n  video: any;\r\n  onEdit?: () => void;\r\n  onPublish?: () => void;\r\n  onApprove?: () => void;\r\n}\r\n\r\nexport const VideoPreview: React.FC<VideoPreviewProps> = ({ video, onEdit, onPublish, onApprove }) => {\r\n  return (\r\n    <Paper sx={{ p: 3 }}>\r\n      <Typography variant=\"h6\" gutterBottom>Video Preview</Typography>\r\n      <VideoPlayer videoUrl={video.video_url} thumbnail={video.thumbnail_url} />\r\n      <Box mt={2}>\r\n        <Typography variant=\"h6\">{video.title}</Typography>\r\n        <Typography variant=\"body2\" color=\"text.secondary\">{video.description}</Typography>\r\n        <Box display=\"flex\" gap={1} mt={2}>\r\n          <Button variant=\"contained\" startIcon={<PlayArrow />}>Preview</Button>\r\n          <Button variant=\"outlined\" startIcon={<Edit />} onClick={onEdit}>Edit</Button>\r\n          <Button variant=\"contained\" color=\"success\" startIcon={<Publish />} onClick={onPublish}>Publish</Button>\r\n        </Box>\r\n      </Box>\r\n    </Paper>\r\n  );\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Videos\\VideoSearch.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CalendarToday' is defined but never used.","line":3,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Sort' is defined but never used.","line":3,"column":52,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":56},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":6,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[305,308],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[305,308],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\r\nimport { Box, TextField, InputAdornment, IconButton, Menu, MenuItem, Chip, Button } from '@mui/material';\r\nimport { Search, FilterList, Clear, CalendarToday, Sort } from '@mui/icons-material';\r\n\r\ninterface VideoSearchProps {\r\n  onSearch: (query: string, filters: any) => void;\r\n  onClear: () => void;\r\n}\r\n\r\nexport const VideoSearch: React.FC<VideoSearchProps> = ({ onSearch, onClear }) => {\r\n  const [query, setQuery] = useState('');\r\n  const [filters, setFilters] = useState({ dateRange: 'all', sortBy: 'relevance', status: 'all' });\r\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\r\n\r\n  const handleSearch = () => {\r\n    onSearch(query, filters);\r\n  };\r\n\r\n  const handleClear = () => {\r\n    setQuery('');\r\n    setFilters({ dateRange: 'all', sortBy: 'relevance', status: 'all' });\r\n    onClear();\r\n  };\r\n\r\n  return (\r\n    <Box display=\"flex\" gap={2} alignItems=\"center\">\r\n      <TextField\r\n        fullWidth\r\n        placeholder=\"Search videos...\"\r\n        value={query}\r\n        onChange={(e) => setQuery(e.target.value)}\r\n        onKeyPress={(e) => e.key === 'Enter' && handleSearch()}\r\n        InputProps={{\r\n          startAdornment: (\r\n            <InputAdornment position=\"start\">\r\n              <Search />\r\n            </InputAdornment>\r\n          ),\r\n          endAdornment: query && (\r\n            <InputAdornment position=\"end\">\r\n              <IconButton size=\"small\" onClick={handleClear}>\r\n                <Clear />\r\n              </IconButton>\r\n            </InputAdornment>\r\n          )\r\n        }}\r\n      />\r\n      \r\n      <IconButton onClick={(e) => setAnchorEl(e.currentTarget)}>\r\n        <FilterList />\r\n      </IconButton>\r\n      \r\n      <Button variant=\"contained\" onClick={handleSearch}>Search</Button>\r\n      \r\n      <Menu anchorEl={anchorEl} open={Boolean(anchorEl)} onClose={() => setAnchorEl(null)}>\r\n        <MenuItem>Date Range</MenuItem>\r\n        <MenuItem>Sort By</MenuItem>\r\n        <MenuItem>Status</MenuItem>\r\n      </Menu>\r\n      \r\n      {Object.values(filters).some(v => v !== 'all') && (\r\n        <Box display=\"flex\" gap={1}>\r\n          {filters.dateRange !== 'all' && <Chip label={filters.dateRange} size=\"small\" onDelete={() => setFilters({...filters, dateRange: 'all'})} />}\r\n          {filters.sortBy !== 'relevance' && <Chip label={filters.sortBy} size=\"small\" onDelete={() => setFilters({...filters, sortBy: 'relevance'})} />}\r\n          {filters.status !== 'all' && <Chip label={filters.status} size=\"small\" onDelete={() => setFilters({...filters, status: 'all'})} />}\r\n        </Box>\r\n      )}\r\n    </Box>\r\n  );\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Videos\\VideoUploadProgress.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'List' is defined but never used.","line":2,"column":50,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":54},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ListItem' is defined but never used.","line":2,"column":56,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":64},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ListItemText' is defined but never used.","line":2,"column":66,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":78},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CheckCircle' is defined but never used.","line":3,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Error' is defined but never used.","line":3,"column":36,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":41}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Box, Paper, Typography, LinearProgress, List, ListItem, ListItemText, Chip, Alert } from '@mui/material';\r\nimport { CloudUpload, CheckCircle, Error } from '@mui/icons-material';\r\n\r\ninterface UploadProgressProps {\r\n  progress: number;\r\n  status: 'preparing' | 'uploading' | 'processing' | 'completed' | 'failed';\r\n  fileName?: string;\r\n  fileSize?: number;\r\n  uploadSpeed?: number;\r\n  timeRemaining?: number;\r\n  error?: string;\r\n}\r\n\r\nexport const VideoUploadProgress: React.FC<UploadProgressProps> = ({ progress, status, fileName, fileSize, uploadSpeed, timeRemaining, error }) => {\r\n  const formatBytes = (bytes: number) => {\r\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\r\n    if (bytes === 0) return '0 Bytes';\r\n    const i = Math.floor(Math.log(bytes) / Math.log(1024));\r\n    return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];\r\n  };\r\n\r\n  return (\r\n    <Paper sx={{ p: 3 }}>\r\n      <Box display=\"flex\" alignItems=\"center\" gap={2} mb={2}>\r\n        <CloudUpload color=\"primary\" />\r\n        <Typography variant=\"h6\">Upload Progress</Typography>\r\n        <Chip label={status} size=\"small\" color={status === 'completed' ? 'success' : status === 'failed' ? 'error' : 'primary'} />\r\n      </Box>\r\n      \r\n      <LinearProgress variant=\"determinate\" value={progress} sx={{ height: 10, borderRadius: 5, mb: 2 }} />\r\n      <Typography variant=\"body2\" align=\"center\">{progress}%</Typography>\r\n      \r\n      {fileName && <Typography variant=\"body2\">File: {fileName}</Typography>}\r\n      {fileSize && <Typography variant=\"body2\">Size: {formatBytes(fileSize)}</Typography>}\r\n      {uploadSpeed && <Typography variant=\"body2\">Speed: {formatBytes(uploadSpeed)}/s</Typography>}\r\n      {timeRemaining && <Typography variant=\"body2\">Time remaining: {Math.ceil(timeRemaining / 60)} minutes</Typography>}\r\n      {error && <Alert severity=\"error\" sx={{ mt: 2 }}>{error}</Alert>}\r\n    </Paper>\r\n  );\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\components\\Videos\\YouTubeUploadStatus.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Button' is defined but never used.","line":2,"column":73,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":79},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CheckCircle' is defined but never used.","line":3,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Error' is defined but never used.","line":3,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'HourglassEmpty' is defined but never used.","line":3,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":53}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Box, Paper, Typography, Stepper, Step, StepLabel, Alert, Link, Button, Chip } from '@mui/material';\r\nimport { YouTube, CheckCircle, Error, HourglassEmpty } from '@mui/icons-material';\r\n\r\ninterface YouTubeUploadStatusProps {\r\n  status: 'uploading' | 'processing' | 'published' | 'failed';\r\n  videoId?: string;\r\n  youtubeUrl?: string;\r\n  currentStep: number;\r\n  error?: string;\r\n}\r\n\r\nexport const YouTubeUploadStatus: React.FC<YouTubeUploadStatusProps> = ({ status, videoId, youtubeUrl, currentStep, error }) => {\r\n  const steps = ['Upload Video', 'Process on YouTube', 'Set Metadata', 'Publish'];\r\n  \r\n  return (\r\n    <Paper sx={{ p: 3 }}>\r\n      <Box display=\"flex\" alignItems=\"center\" gap={2} mb={3}>\r\n        <YouTube sx={{ color: '#FF0000', fontSize: 32 }} />\r\n        <Typography variant=\"h6\">YouTube Upload Status</Typography>\r\n        <Chip label={status} size=\"small\" color={status === 'published' ? 'success' : status === 'failed' ? 'error' : 'primary'} />\r\n      </Box>\r\n      \r\n      <Stepper activeStep={currentStep}>\r\n        {steps.map((label) => (\r\n          <Step key={label}>\r\n            <StepLabel>{label}</StepLabel>\r\n          </Step>\r\n        ))}\r\n      </Stepper>\r\n      \r\n      {status === 'published' && youtubeUrl && (\r\n        <Alert severity=\"success\" sx={{ mt: 3 }}>\r\n          Video published successfully!\r\n          <Link href={youtubeUrl} target=\"_blank\" sx={{ ml: 1 }}>View on YouTube</Link>\r\n        </Alert>\r\n      )}\r\n      \r\n      {status === 'failed' && error && (\r\n        <Alert severity=\"error\" sx={{ mt: 3 }}>{error}</Alert>\r\n      )}\r\n      \r\n      {videoId && (\r\n        <Typography variant=\"body2\" sx={{ mt: 2 }}>YouTube Video ID: {videoId}</Typography>\r\n      )}\r\n    </Paper>\r\n  );\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\contexts\\AuthContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":2,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":27,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":27,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":75,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2262,2265],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2262,2265],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'response' is assigned a value but never used.","line":84,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":84,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":93,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":93,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2764,2767],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2764,2767],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport toast from 'react-hot-toast'\r\nimport { authApi } from '../services/api'\r\n\r\ninterface User {\r\n  id: string\r\n  email: string\r\n  username: string\r\n  full_name?: string\r\n  is_active: boolean\r\n  is_superuser: boolean\r\n}\r\n\r\ninterface AuthContextType {\r\n  user: User | null\r\n  token: string | null\r\n  isLoading: boolean\r\n  login: (email: string, password: string) => Promise<void>\r\n  register: (email: string, username: string, password: string, full_name?: string) => Promise<void>\r\n  logout: () => void\r\n  updateUser: (userData: Partial<User>) => void\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined)\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext)\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider')\r\n  }\r\n  return context\r\n}\r\n\r\ninterface AuthProviderProps {\r\n  children: ReactNode\r\n}\r\n\r\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\r\n  const [user, setUser] = useState<User | null>(null)\r\n  const [token, setToken] = useState<string | null>(localStorage.getItem('token'))\r\n  const [isLoading, setIsLoading] = useState(true)\r\n  const navigate = useNavigate()\r\n\r\n  useEffect(() => {\r\n    const checkAuth = async () => {\r\n      const storedToken = localStorage.getItem('token')\r\n      if (storedToken) {\r\n        try {\r\n          const userData = await authApi.getCurrentUser(storedToken)\r\n          setUser(userData)\r\n          setToken(storedToken)\r\n        } catch (error) {\r\n          console.error('Token validation failed:', error)\r\n          localStorage.removeItem('token')\r\n          setToken(null)\r\n        }\r\n      }\r\n      setIsLoading(false)\r\n    }\r\n    checkAuth()\r\n  }, [])\r\n\r\n  const login = async (email: string, password: string) => {\r\n    try {\r\n      const response = await authApi.login(email, password)\r\n      const { access_token, user: userData } = response\r\n      \r\n      localStorage.setItem('token', access_token)\r\n      setToken(access_token)\r\n      setUser(userData)\r\n      \r\n      toast.success('Login successful!')\r\n      navigate('/dashboard')\r\n    } catch (error: any) {\r\n      const message = error.response?.data?.detail || 'Login failed'\r\n      toast.error(message)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  const register = async (email: string, username: string, password: string, full_name?: string) => {\r\n    try {\r\n      const response = await authApi.register({\r\n        email,\r\n        username,\r\n        password,\r\n        full_name\r\n      })\r\n      \r\n      toast.success('Registration successful! Please login.')\r\n      navigate('/login')\r\n    } catch (error: any) {\r\n      const message = error.response?.data?.detail || 'Registration failed'\r\n      toast.error(message)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('token')\r\n    setToken(null)\r\n    setUser(null)\r\n    navigate('/login')\r\n    toast.success('Logged out successfully')\r\n  }\r\n\r\n  const updateUser = (userData: Partial<User>) => {\r\n    setUser(prev => prev ? { ...prev, ...userData } : null)\r\n  }\r\n\r\n  const value = {\r\n    user,\r\n    token,\r\n    isLoading,\r\n    login,\r\n    register,\r\n    logout,\r\n    updateUser\r\n  }\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  )\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\contexts\\EnhancedThemeContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":2,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":508,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":508,"endColumn":30}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Enhanced Theme Context\n * Provides comprehensive theming support with dark mode, custom colors, and animations\n */\n\nimport React, { createContext, useContext, useState, useEffect, useMemo, useCallback } from 'react';\nimport { \n  ThemeProvider as MuiThemeProvider, \n  createTheme, \n  Theme,\n  PaletteMode,\n  alpha\n} from '@mui/material';\nimport { CssBaseline } from '@mui/material';\n\n// Theme configuration types\ninterface ThemeConfig {\n  mode: PaletteMode;\n  primaryColor: string;\n  secondaryColor: string;\n  fontFamily: string;\n  borderRadius: number;\n  animationsEnabled: boolean;\n  reducedMotion: boolean;\n  highContrast: boolean;\n}\n\ninterface ThemeContextType {\n  theme: Theme;\n  themeConfig: ThemeConfig;\n  isDarkMode: boolean;\n  toggleTheme: () => void;\n  setThemeMode: (mode: PaletteMode | 'system') => void;\n  setPrimaryColor: (color: string) => void;\n  setSecondaryColor: (color: string) => void;\n  setAnimationsEnabled: (enabled: boolean) => void;\n  setReducedMotion: (reduced: boolean) => void;\n  setHighContrast: (high: boolean) => void;\n  resetTheme: () => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\n// Default theme configuration\nconst defaultThemeConfig: ThemeConfig = {\n  mode: 'light',\n  primaryColor: '#1976d2',\n  secondaryColor: '#dc004e',\n  fontFamily: '\"Inter\", \"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n  borderRadius: 8,\n  animationsEnabled: true,\n  reducedMotion: false,\n  highContrast: false\n};\n\n// Color palette for dark mode\nconst darkPalette = {\n  primary: {\n    main: '#90caf9',\n    light: '#e3f2fd',\n    dark: '#42a5f5',\n    contrastText: '#000'\n  },\n  secondary: {\n    main: '#f48fb1',\n    light: '#ffc1e3',\n    dark: '#bf5f82',\n    contrastText: '#000'\n  },\n  background: {\n    default: '#121212',\n    paper: '#1e1e1e'\n  },\n  text: {\n    primary: '#ffffff',\n    secondary: 'rgba(255, 255, 255, 0.7)',\n    disabled: 'rgba(255, 255, 255, 0.5)'\n  },\n  divider: 'rgba(255, 255, 255, 0.12)',\n  action: {\n    active: '#fff',\n    hover: 'rgba(255, 255, 255, 0.08)',\n    selected: 'rgba(255, 255, 255, 0.16)',\n    disabled: 'rgba(255, 255, 255, 0.3)',\n    disabledBackground: 'rgba(255, 255, 255, 0.12)'\n  }\n};\n\n// Color palette for light mode\nconst lightPalette = {\n  primary: {\n    main: '#1976d2',\n    light: '#42a5f5',\n    dark: '#1565c0',\n    contrastText: '#fff'\n  },\n  secondary: {\n    main: '#dc004e',\n    light: '#ff5983',\n    dark: '#9a0036',\n    contrastText: '#fff'\n  },\n  background: {\n    default: '#fafafa',\n    paper: '#ffffff'\n  },\n  text: {\n    primary: 'rgba(0, 0, 0, 0.87)',\n    secondary: 'rgba(0, 0, 0, 0.6)',\n    disabled: 'rgba(0, 0, 0, 0.38)'\n  },\n  divider: 'rgba(0, 0, 0, 0.12)',\n  action: {\n    active: 'rgba(0, 0, 0, 0.54)',\n    hover: 'rgba(0, 0, 0, 0.04)',\n    selected: 'rgba(0, 0, 0, 0.08)',\n    disabled: 'rgba(0, 0, 0, 0.26)',\n    disabledBackground: 'rgba(0, 0, 0, 0.12)'\n  }\n};\n\nexport const EnhancedThemeProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [themeConfig, setThemeConfig] = useState<ThemeConfig>(() => {\n    // Load saved theme from localStorage\n    const savedTheme = localStorage.getItem('ytempire-theme');\n    if (savedTheme) {\n      try {\n        return { ...defaultThemeConfig, ...JSON.parse(savedTheme) };\n      } catch {\n        return defaultThemeConfig;\n      }\n    }\n    return defaultThemeConfig;\n  });\n\n  const [systemPrefersDark, setSystemPrefersDark] = useState(\n    window.matchMedia('(prefers-color-scheme: dark)').matches\n  );\n\n  // Listen for system theme changes\n  useEffect(() => {\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleChange = (e: MediaQueryListEvent) => {\n      setSystemPrefersDark(e.matches);\n    };\n    \n    mediaQuery.addEventListener('change', handleChange);\n    return () => mediaQuery.removeEventListener('change', handleChange);\n  }, []);\n\n  // Listen for reduced motion preference\n  useEffect(() => {\n    const mediaQuery = window.matchMedia('(prefers-reduced-motion: reduce)');\n    const handleChange = (e: MediaQueryListEvent) => {\n      if (e.matches) {\n        setThemeConfig(prev => ({ ...prev, reducedMotion: true }));\n      }\n    };\n    \n    mediaQuery.addEventListener('change', handleChange);\n    return () => mediaQuery.removeEventListener('change', handleChange);\n  }, []);\n\n  // Save theme to localStorage when it changes\n  useEffect(() => {\n    localStorage.setItem('ytempire-theme', JSON.stringify(themeConfig));\n  }, [themeConfig]);\n\n  // Create MUI theme\n  const theme = useMemo(() => {\n    const isDark = themeConfig.mode === 'dark' || \n                   (themeConfig.mode === 'system' && systemPrefersDark);\n    \n    return createTheme({\n      palette: {\n        mode: isDark ? 'dark' : 'light',\n        ...(isDark ? darkPalette : lightPalette),\n        primary: {\n          main: themeConfig.primaryColor,\n          ...(isDark ? darkPalette.primary : lightPalette.primary)\n        },\n        secondary: {\n          main: themeConfig.secondaryColor,\n          ...(isDark ? darkPalette.secondary : lightPalette.secondary)\n        },\n        // Enhanced colors for dark mode\n        error: {\n          main: isDark ? '#f44336' : '#d32f2f',\n          light: isDark ? '#ef5350' : '#ef5350',\n          dark: isDark ? '#c62828' : '#c62828'\n        },\n        warning: {\n          main: isDark ? '#ffa726' : '#ed6c02',\n          light: isDark ? '#ffb74d' : '#ff9800',\n          dark: isDark ? '#f57c00' : '#e65100'\n        },\n        info: {\n          main: isDark ? '#29b6f6' : '#0288d1',\n          light: isDark ? '#4fc3f7' : '#03a9f4',\n          dark: isDark ? '#0288d1' : '#01579b'\n        },\n        success: {\n          main: isDark ? '#66bb6a' : '#2e7d32',\n          light: isDark ? '#81c784' : '#4caf50',\n          dark: isDark ? '#388e3c' : '#1b5e20'\n        }\n      },\n      typography: {\n        fontFamily: themeConfig.fontFamily,\n        h1: {\n          fontWeight: 700,\n          fontSize: '2.5rem',\n          lineHeight: 1.2\n        },\n        h2: {\n          fontWeight: 600,\n          fontSize: '2rem',\n          lineHeight: 1.3\n        },\n        h3: {\n          fontWeight: 600,\n          fontSize: '1.75rem',\n          lineHeight: 1.4\n        },\n        h4: {\n          fontWeight: 500,\n          fontSize: '1.5rem',\n          lineHeight: 1.4\n        },\n        h5: {\n          fontWeight: 500,\n          fontSize: '1.25rem',\n          lineHeight: 1.5\n        },\n        h6: {\n          fontWeight: 500,\n          fontSize: '1rem',\n          lineHeight: 1.6\n        }\n      },\n      shape: {\n        borderRadius: themeConfig.borderRadius\n      },\n      transitions: {\n        duration: {\n          shortest: themeConfig.reducedMotion ? 0 : 150,\n          shorter: themeConfig.reducedMotion ? 0 : 200,\n          short: themeConfig.reducedMotion ? 0 : 250,\n          standard: themeConfig.reducedMotion ? 0 : 300,\n          complex: themeConfig.reducedMotion ? 0 : 375,\n          enteringScreen: themeConfig.reducedMotion ? 0 : 225,\n          leavingScreen: themeConfig.reducedMotion ? 0 : 195\n        }\n      },\n      components: {\n        // Global component overrides for dark mode\n        MuiCssBaseline: {\n          styleOverrides: {\n            body: {\n              scrollbarColor: isDark ? '#6b6b6b #2b2b2b' : '#959595 #f1f1f1',\n              '&::-webkit-scrollbar, & *::-webkit-scrollbar': {\n                width: 8,\n                height: 8\n              },\n              '&::-webkit-scrollbar-thumb, & *::-webkit-scrollbar-thumb': {\n                borderRadius: 8,\n                backgroundColor: isDark ? '#6b6b6b' : '#959595',\n                minHeight: 24,\n                border: `2px solid ${isDark ? '#2b2b2b' : '#f1f1f1'}`\n              },\n              '&::-webkit-scrollbar-track, & *::-webkit-scrollbar-track': {\n                borderRadius: 8,\n                backgroundColor: isDark ? '#2b2b2b' : '#f1f1f1'\n              }\n            }\n          }\n        },\n        MuiPaper: {\n          styleOverrides: {\n            root: {\n              backgroundImage: isDark \n                ? 'linear-gradient(rgba(255, 255, 255, 0.05), rgba(255, 255, 255, 0.05))'\n                : 'none',\n              transition: themeConfig.animationsEnabled \n                ? 'background-color 0.3s ease, box-shadow 0.3s ease'\n                : 'none'\n            }\n          }\n        },\n        MuiCard: {\n          styleOverrides: {\n            root: {\n              boxShadow: isDark \n                ? '0 4px 6px rgba(0, 0, 0, 0.3)'\n                : '0 2px 4px rgba(0, 0, 0, 0.1)',\n              '&:hover': themeConfig.animationsEnabled ? {\n                boxShadow: isDark \n                  ? '0 8px 12px rgba(0, 0, 0, 0.4)'\n                  : '0 4px 8px rgba(0, 0, 0, 0.15)',\n                transform: 'translateY(-2px)'\n              } : {}\n            }\n          }\n        },\n        MuiButton: {\n          styleOverrides: {\n            root: {\n              textTransform: 'none',\n              fontWeight: 500,\n              transition: themeConfig.animationsEnabled \n                ? 'all 0.3s ease'\n                : 'none',\n              '&:hover': {\n                transform: themeConfig.animationsEnabled ? 'translateY(-1px)' : 'none'\n              }\n            },\n            contained: {\n              boxShadow: isDark \n                ? '0 2px 4px rgba(0, 0, 0, 0.4)'\n                : '0 2px 4px rgba(0, 0, 0, 0.2)',\n              '&:hover': {\n                boxShadow: isDark \n                  ? '0 4px 8px rgba(0, 0, 0, 0.5)'\n                  : '0 4px 8px rgba(0, 0, 0, 0.25)'\n              }\n            }\n          }\n        },\n        MuiIconButton: {\n          styleOverrides: {\n            root: {\n              transition: themeConfig.animationsEnabled \n                ? 'all 0.3s ease'\n                : 'none',\n              '&:hover': {\n                transform: themeConfig.animationsEnabled ? 'scale(1.1)' : 'none',\n                backgroundColor: isDark \n                  ? alpha('#fff', 0.08)\n                  : alpha('#000', 0.04)\n              }\n            }\n          }\n        },\n        MuiTextField: {\n          styleOverrides: {\n            root: {\n              '& .MuiOutlinedInput-root': {\n                transition: themeConfig.animationsEnabled \n                  ? 'all 0.3s ease'\n                  : 'none',\n                '&:hover': {\n                  '& .MuiOutlinedInput-notchedOutline': {\n                    borderColor: isDark \n                      ? alpha('#fff', 0.5)\n                      : alpha('#000', 0.3)\n                  }\n                }\n              }\n            }\n          }\n        },\n        MuiChip: {\n          styleOverrides: {\n            root: {\n              transition: themeConfig.animationsEnabled \n                ? 'all 0.3s ease'\n                : 'none',\n              '&:hover': {\n                transform: themeConfig.animationsEnabled ? 'scale(1.05)' : 'none'\n              }\n            }\n          }\n        },\n        MuiTooltip: {\n          styleOverrides: {\n            tooltip: {\n              backgroundColor: isDark \n                ? alpha('#fff', 0.9)\n                : alpha('#000', 0.87),\n              color: isDark ? '#000' : '#fff',\n              fontSize: '0.875rem',\n              fontWeight: 400\n            }\n          }\n        },\n        MuiAlert: {\n          styleOverrides: {\n            root: {\n              borderRadius: themeConfig.borderRadius,\n              boxShadow: isDark \n                ? '0 2px 8px rgba(0, 0, 0, 0.3)'\n                : '0 2px 8px rgba(0, 0, 0, 0.15)'\n            }\n          }\n        },\n        MuiDrawer: {\n          styleOverrides: {\n            paper: {\n              backgroundColor: isDark ? '#1e1e1e' : '#fff',\n              backgroundImage: isDark \n                ? 'linear-gradient(rgba(255, 255, 255, 0.05), rgba(255, 255, 255, 0.05))'\n                : 'none'\n            }\n          }\n        },\n        MuiAppBar: {\n          styleOverrides: {\n            root: {\n              backgroundColor: isDark ? '#1e1e1e' : '#fff',\n              backgroundImage: isDark \n                ? 'linear-gradient(rgba(255, 255, 255, 0.05), rgba(255, 255, 255, 0.05))'\n                : 'none',\n              color: isDark ? '#fff' : 'rgba(0, 0, 0, 0.87)'\n            }\n          }\n        },\n        MuiTable: {\n          styleOverrides: {\n            root: {\n              backgroundColor: isDark ? '#1e1e1e' : '#fff'\n            }\n          }\n        },\n        MuiTableCell: {\n          styleOverrides: {\n            root: {\n              borderBottom: `1px solid ${isDark ? 'rgba(255, 255, 255, 0.12)' : 'rgba(0, 0, 0, 0.12)'}`\n            }\n          }\n        },\n        MuiDivider: {\n          styleOverrides: {\n            root: {\n              backgroundColor: isDark \n                ? 'rgba(255, 255, 255, 0.12)'\n                : 'rgba(0, 0, 0, 0.12)'\n            }\n          }\n        }\n      }\n    });\n  }, [themeConfig, systemPrefersDark]);\n\n  // Context value methods\n  const toggleTheme = useCallback(() => {\n    setThemeConfig(prev => ({\n      ...prev,\n      mode: prev.mode === 'light' ? 'dark' : 'light'\n    }));\n  }, []);\n\n  const setThemeMode = useCallback((mode: PaletteMode | 'system') => {\n    setThemeConfig(prev => ({ ...prev, mode: mode as PaletteMode }));\n  }, []);\n\n  const setPrimaryColor = useCallback((color: string) => {\n    setThemeConfig(prev => ({ ...prev, primaryColor: color }));\n  }, []);\n\n  const setSecondaryColor = useCallback((color: string) => {\n    setThemeConfig(prev => ({ ...prev, secondaryColor: color }));\n  }, []);\n\n  const setAnimationsEnabled = useCallback((enabled: boolean) => {\n    setThemeConfig(prev => ({ ...prev, animationsEnabled: enabled }));\n  }, []);\n\n  const setReducedMotion = useCallback((reduced: boolean) => {\n    setThemeConfig(prev => ({ ...prev, reducedMotion: reduced }));\n  }, []);\n\n  const setHighContrast = useCallback((high: boolean) => {\n    setThemeConfig(prev => ({ ...prev, highContrast: high }));\n  }, []);\n\n  const resetTheme = useCallback(() => {\n    setThemeConfig(defaultThemeConfig);\n    localStorage.removeItem('ytempire-theme');\n  }, []);\n\n  const isDarkMode = themeConfig.mode === 'dark' || \n                     (themeConfig.mode === 'system' && systemPrefersDark);\n\n  const contextValue: ThemeContextType = {\n    theme,\n    themeConfig,\n    isDarkMode,\n    toggleTheme,\n    setThemeMode,\n    setPrimaryColor,\n    setSecondaryColor,\n    setAnimationsEnabled,\n    setReducedMotion,\n    setHighContrast,\n    resetTheme\n  };\n\n  return (\n    <ThemeContext.Provider value={contextValue}>\n      <MuiThemeProvider theme={theme}>\n        <CssBaseline />\n        {children}\n      </MuiThemeProvider>\n    </ThemeContext.Provider>\n  );\n};\n\nexport const useEnhancedTheme = () => {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useEnhancedTheme must be used within EnhancedThemeProvider');\n  }\n  return context;\n};\n\nexport default EnhancedThemeProvider;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\contexts\\PWAContext.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":23,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[881,884],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[881,884],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setOfflineReady' is assigned a value but never used.","line":26,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":49},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setNeedRefresh' is assigned a value but never used.","line":27,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":46},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'updateApp'. Either include it or remove the dependency array.","line":124,"column":6,"nodeType":"ArrayExpression","endLine":124,"endColumn":19,"suggestions":[{"desc":"Update the dependencies array to be: [needRefresh, updateApp]","fix":{"range":[3547,3560],"text":"[needRefresh, updateApp]"}}]},{"ruleId":"react-refresh/only-export-components","severity":2,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":172,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":172,"endColumn":20}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useEffect, useState, useCallback } from 'react';\nimport { useRegisterSW } from 'virtual:pwa-register/react';\nimport { toast } from 'react-hot-toast';\n\ninterface PWAContextValue {\n  isOnline: boolean;\n  isInstallable: boolean;\n  isInstalled: boolean;\n  updateAvailable: boolean;\n  offlineReady: boolean;\n  needRefresh: boolean;\n  installApp: () => Promise<void>;\n  updateApp: () => Promise<void>;\n  clearOfflineData: () => Promise<void>;\n}\n\nconst PWAContext = createContext<PWAContextValue | undefined>(undefined);\n\nexport const PWAProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [isOnline, setIsOnline] = useState(navigator.onLine);\n  const [isInstallable, setIsInstallable] = useState(false);\n  const [isInstalled, setIsInstalled] = useState(false);\n  const [deferredPrompt, setDeferredPrompt] = useState<any>(null);\n\n  const {\n    offlineReady: [offlineReady, setOfflineReady],\n    needRefresh: [needRefresh, setNeedRefresh],\n    updateServiceWorker,\n  } = useRegisterSW({\n    onRegistered(r) {\n      console.log('Service Worker registered:', r);\n    },\n    onRegisterError(error) {\n      console.error('Service Worker registration error:', error);\n    },\n  });\n\n  // Network status monitoring\n  useEffect(() => {\n    const handleOnline = () => {\n      setIsOnline(true);\n      toast.success('Back online!');\n    };\n\n    const handleOffline = () => {\n      setIsOnline(false);\n      toast.error('You are offline. Some features may be limited.');\n    };\n\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, []);\n\n  // Install prompt handling\n  useEffect(() => {\n    const handleBeforeInstallPrompt = (e: Event) => {\n      e.preventDefault();\n      setDeferredPrompt(e);\n      setIsInstallable(true);\n    };\n\n    const handleAppInstalled = () => {\n      setIsInstalled(true);\n      setIsInstallable(false);\n      setDeferredPrompt(null);\n      toast.success('App installed successfully!');\n    };\n\n    window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt);\n    window.addEventListener('appinstalled', handleAppInstalled);\n\n    // Check if already installed\n    if (window.matchMedia('(display-mode: standalone)').matches) {\n      setIsInstalled(true);\n    }\n\n    return () => {\n      window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt);\n      window.removeEventListener('appinstalled', handleAppInstalled);\n    };\n  }, []);\n\n  // Show notification when offline ready\n  useEffect(() => {\n    if (offlineReady) {\n      toast.success('App is ready to work offline!');\n    }\n  }, [offlineReady]);\n\n  // Show notification when update available\n  useEffect(() => {\n    if (needRefresh) {\n      toast(\n        (t) => (\n          <div>\n            <p>New version available!</p>\n            <button\n              onClick={() => {\n                updateApp();\n                toast.dismiss(t.id);\n              }}\n              style={{\n                marginTop: 8,\n                padding: '4px 8px',\n                background: '#667eea',\n                color: 'white',\n                border: 'none',\n                borderRadius: 4,\n                cursor: 'pointer',\n              }}\n            >\n              Update now\n            </button>\n          </div>\n        ),\n        { duration: Infinity }\n      );\n    }\n  }, [needRefresh]);\n\n  const installApp = useCallback(async () => {\n    if (!deferredPrompt) {\n      toast.error('Installation not available');\n      return;\n    }\n\n    deferredPrompt.prompt();\n    const { outcome } = await deferredPrompt.userChoice;\n    \n    if (outcome === 'accepted') {\n      toast.success('Installing app...');\n    } else {\n      toast.info('Installation cancelled');\n    }\n    \n    setDeferredPrompt(null);\n    setIsInstallable(false);\n  }, [deferredPrompt]);\n\n  const updateApp = useCallback(async () => {\n    await updateServiceWorker(true);\n  }, [updateServiceWorker]);\n\n  const clearOfflineData = useCallback(async () => {\n    if ('caches' in window) {\n      const cacheNames = await caches.keys();\n      await Promise.all(cacheNames.map((name) => caches.delete(name)));\n      toast.success('Offline data cleared');\n    }\n  }, []);\n\n  const value: PWAContextValue = {\n    isOnline,\n    isInstallable,\n    isInstalled,\n    updateAvailable: needRefresh,\n    offlineReady,\n    needRefresh,\n    installApp,\n    updateApp,\n    clearOfflineData,\n  };\n\n  return <PWAContext.Provider value={value}>{children}</PWAContext.Provider>;\n};\n\nexport const usePWA = () => {\n  const context = useContext(PWAContext);\n  if (!context) {\n    throw new Error('usePWA must be used within PWAProvider');\n  }\n  return context;\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\contexts\\ThemeContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":2,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":27,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":27,"endColumn":22}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Theme Context Provider\n * Manages theme state and provides theme switching functionality\n */\n\nimport React, { createContext, useContext, useState, useEffect, useMemo, useCallback } from 'react';\nimport { ThemeProvider as MuiThemeProvider } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport { \n  lightTheme, \n  darkTheme, \n  getStoredTheme, \n  setStoredTheme, \n  getSystemTheme,\n  enableSmoothTransition \n} from '../theme/darkMode';\n\ninterface ThemeContextType {\n  isDarkMode: boolean;\n  toggleTheme: () => void;\n  setTheme: (mode: 'light' | 'dark' | 'system') => void;\n  themeMode: 'light' | 'dark' | 'system';\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport const useTheme = () => {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n\ninterface ThemeProviderProps {\n  children: React.ReactNode;\n}\n\nexport const ThemeProvider: React.FC<ThemeProviderProps> = ({ children }) => {\n  const [themeMode, setThemeMode] = useState<'light' | 'dark' | 'system'>(() => {\n    const stored = getStoredTheme();\n    return stored || 'system';\n  });\n\n  const [systemTheme, setSystemTheme] = useState<'light' | 'dark'>(getSystemTheme());\n\n  const isDarkMode = useMemo(() => {\n    if (themeMode === 'system') {\n      return systemTheme === 'dark';\n    }\n    return themeMode === 'dark';\n  }, [themeMode, systemTheme]);\n\n  const theme = useMemo(() => {\n    return isDarkMode ? darkTheme : lightTheme;\n  }, [isDarkMode]);\n\n  const toggleTheme = useCallback(() => {\n    enableSmoothTransition();\n    const newMode = isDarkMode ? 'light' : 'dark';\n    setThemeMode(newMode);\n    setStoredTheme(newMode);\n  }, [isDarkMode]);\n\n  const setTheme = useCallback((mode: 'light' | 'dark' | 'system') => {\n    enableSmoothTransition();\n    setThemeMode(mode);\n    if (mode !== 'system') {\n      setStoredTheme(mode);\n    } else {\n      localStorage.removeItem('ytempire_theme_mode');\n    }\n  }, []);\n\n  // Listen for system theme changes\n  useEffect(() => {\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    \n    const handleChange = (e: MediaQueryListEvent) => {\n      setSystemTheme(e.matches ? 'dark' : 'light');\n    };\n\n    // Modern browsers\n    if (mediaQuery.addEventListener) {\n      mediaQuery.addEventListener('change', handleChange);\n      return () => mediaQuery.removeEventListener('change', handleChange);\n    } \n    // Legacy browsers\n    else if (mediaQuery.addListener) {\n      mediaQuery.addListener(handleChange);\n      return () => mediaQuery.removeListener(handleChange);\n    }\n  }, []);\n\n  // Apply theme class to body for CSS variables\n  useEffect(() => {\n    document.body.classList.toggle('dark-theme', isDarkMode);\n    document.body.classList.toggle('light-theme', !isDarkMode);\n    \n    // Update meta theme-color for mobile browsers\n    const metaThemeColor = document.querySelector('meta[name=\"theme-color\"]');\n    if (metaThemeColor) {\n      metaThemeColor.setAttribute('content', isDarkMode ? '#1a1d21' : '#ffffff');\n    }\n  }, [isDarkMode]);\n\n  const contextValue = useMemo(() => ({\n    isDarkMode,\n    toggleTheme,\n    setTheme,\n    themeMode\n  }), [isDarkMode, toggleTheme, setTheme, themeMode]);\n\n  return (\n    <ThemeContext.Provider value={contextValue}>\n      <MuiThemeProvider theme={theme}>\n        <CssBaseline />\n        {children}\n      </MuiThemeProvider>\n    </ThemeContext.Provider>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\contexts\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\hooks\\useBehaviorAnalytics.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":81,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1588,1591],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1588,1591],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":132,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":132,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2975,2978],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2975,2978],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":201,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":201,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5010,5013],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5010,5013],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback } from 'react';\nimport { apiClient } from '../services/api';\nimport { useAuthStore } from '../stores/authStore';\n\ninterface BehaviorOverview {\n  total_events: number;\n  unique_users: number;\n  event_breakdown: Array<{\n    event_type: string;\n    count: number;\n    percentage: number;\n  }>;\n  journey_stats: {\n    total_sessions: number;\n    avg_events_per_session: number;\n    top_patterns: Array<{\n      pattern: string;\n      count: number;\n    }>;\n  };\n  feature_usage: Array<{\n    feature: string;\n    usage_count: number;\n    adoption_rate: number;\n  }>;\n  session_stats: {\n    total_sessions: number;\n    avg_duration: number;\n    median_duration: number;\n    bounce_rate: number;\n    avg_events_per_session: number;\n  };\n}\n\ninterface FunnelData {\n  funnel_name: string;\n  steps: Array<{\n    step: string;\n    step_number: number;\n    users: number;\n    conversion_rate: number;\n    drop_off_rate: number;\n  }>;\n  overall_conversion: number;\n  total_completions: number;\n}\n\ninterface CohortData {\n  cohort_type: string;\n  metric: string;\n  cohorts: Array<{\n    cohort: string;\n    size: number;\n    retention: Array<{\n      period: number;\n      active_users: number;\n      retention_rate: number;\n    }>;\n  }>;\n  periods: number;\n}\n\ninterface HeatmapData {\n  heatmap: Array<{\n    date: string;\n    hour: number;\n    value: number;\n    intensity: number;\n  }>;\n  max_value: number;\n}\n\ninterface UserSegments {\n  segments: {\n    [key: string]: {\n      count: number;\n      user_ids: number[];\n    };\n  };\n  total_users: number;\n  criteria: any;\n}\n\ninterface UseBehaviorAnalyticsProps {\n  userId?: number;\n  dateRange?: {\n    start: Date;\n    end: Date;\n  };\n  funnelSteps?: string[];\n  cohortType?: string;\n}\n\ninterface UseBehaviorAnalyticsReturn {\n  overview: BehaviorOverview | null;\n  funnelData: FunnelData | null;\n  cohortData: CohortData | null;\n  heatmapData: HeatmapData | null;\n  segments: UserSegments | null;\n  loading: boolean;\n  error: string | null;\n  refetch: () => Promise<void>;\n}\n\nexport const useBehaviorAnalytics = ({\n  userId,\n  dateRange,\n  funnelSteps = [],\n  cohortType = 'signup',\n}: UseBehaviorAnalyticsProps): UseBehaviorAnalyticsReturn => {\n  const [overview, setOverview] = useState<BehaviorOverview | null>(null);\n  const [funnelData, setFunnelData] = useState<FunnelData | null>(null);\n  const [cohortData, setCohortData] = useState<CohortData | null>(null);\n  const [heatmapData, setHeatmapData] = useState<HeatmapData | null>(null);\n  const [segments, setSegments] = useState<UserSegments | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const { token } = useAuthStore();\n\n  const fetchAnalyticsData = useCallback(async () => {\n    if (!token) {\n      setError('Authentication required');\n      return;\n    }\n\n    setLoading(true);\n    setError(null);\n\n    try {\n      // Prepare query parameters\n      const params: any = {};\n      if (userId) {\n        params.user_id = userId;\n      }\n      if (dateRange) {\n        params.start_date = dateRange.start.toISOString();\n        params.end_date = dateRange.end.toISOString();\n      }\n\n      // Fetch overview\n      const overviewResponse = await apiClient.get('/api/v1/analytics/behavior/overview', {\n        params,\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      setOverview(overviewResponse.data);\n\n      // Fetch funnel data if steps provided\n      if (funnelSteps.length >= 2) {\n        const funnelResponse = await apiClient.post(\n          '/api/v1/analytics/funnels',\n          null,\n          {\n            params: {\n              funnel_steps: funnelSteps,\n              ...params,\n            },\n            headers: { Authorization: `Bearer ${token}` },\n          }\n        );\n        setFunnelData(funnelResponse.data);\n      }\n\n      // Fetch cohort data\n      try {\n        const cohortResponse = await apiClient.get('/api/v1/analytics/cohorts', {\n          params: {\n            cohort_type: cohortType,\n            metric: 'retention',\n            periods: 6,\n          },\n          headers: { Authorization: `Bearer ${token}` },\n        });\n        setCohortData(cohortResponse.data);\n      } catch (err) {\n        console.warn('Cohort analysis not available:', err);\n      }\n\n      // Fetch heatmap data\n      const heatmapResponse = await apiClient.get('/api/v1/analytics/heatmaps', {\n        params,\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      setHeatmapData(heatmapResponse.data);\n\n      // Fetch user segments (admin only)\n      try {\n        const segmentsResponse = await apiClient.post(\n          '/api/v1/analytics/segments',\n          null,\n          {\n            params: { criteria: {} },\n            headers: { Authorization: `Bearer ${token}` },\n          }\n        );\n        setSegments(segmentsResponse.data);\n      } catch (err) {\n        console.warn('User segments not available:', err);\n      }\n\n    } catch (err: any) {\n      console.error('Error fetching behavior analytics:', err);\n      setError(err.response?.data?.detail || 'Failed to fetch analytics data');\n    } finally {\n      setLoading(false);\n    }\n  }, [token, userId, dateRange, funnelSteps, cohortType]);\n\n  useEffect(() => {\n    fetchAnalyticsData();\n  }, [fetchAnalyticsData]);\n\n  return {\n    overview,\n    funnelData,\n    cohortData,\n    heatmapData,\n    segments,\n    loading,\n    error,\n    refetch: fetchAnalyticsData,\n  };\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\hooks\\useRealtimeData.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":6,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[177,180],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[177,180],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[470,473],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[470,473],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":58,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1736,1739],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1736,1739],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState, useCallback, useRef } from 'react';\r\nimport { useAuthStore } from '../stores/authStore';\r\n\r\ninterface WebSocketMessage {\r\n  type: string;\r\n  data: any;\r\n  timestamp: string;\r\n}\r\n\r\nexport const useRealtimeData = (endpoint: string = '/ws') => {\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const [lastMessage, setLastMessage] = useState<WebSocketMessage | null>(null);\r\n  const [metrics, setMetrics] = useState<Record<string, any>>({});\r\n  const wsRef = useRef<WebSocket | null>(null);\r\n  const { accessToken, user } = useAuthStore();\r\n\r\n  const connect = useCallback(() => {\r\n    if (!user?.id || !accessToken) return;\r\n\r\n    const wsUrl = `${import.meta.env.VITE_WS_URL || 'ws://localhost:8000'}${endpoint}?token=${accessToken}`;\r\n    \r\n    wsRef.current = new WebSocket(wsUrl);\r\n\r\n    wsRef.current.onopen = () => {\r\n      setIsConnected(true);\r\n      console.log('WebSocket connected');\r\n    };\r\n\r\n    wsRef.current.onmessage = (event) => {\r\n      const message = JSON.parse(event.data);\r\n      setLastMessage(message);\r\n      \r\n      if (message.type === 'metric_update') {\r\n        setMetrics(prev => ({\r\n          ...prev,\r\n          [message.data.metric_name]: message.data.value\r\n        }));\r\n      }\r\n    };\r\n\r\n    wsRef.current.onclose = () => {\r\n      setIsConnected(false);\r\n      setTimeout(connect, 5000); // Reconnect after 5 seconds\r\n    };\r\n\r\n    wsRef.current.onerror = (error) => {\r\n      console.error('WebSocket error:', error);\r\n    };\r\n  }, [accessToken, user, endpoint]);\r\n\r\n  const disconnect = useCallback(() => {\r\n    if (wsRef.current) {\r\n      wsRef.current.close();\r\n      wsRef.current = null;\r\n    }\r\n  }, []);\r\n\r\n  const sendMessage = useCallback((message: any) => {\r\n    if (wsRef.current?.readyState === WebSocket.OPEN) {\r\n      wsRef.current.send(JSON.stringify(message));\r\n    }\r\n  }, []);\r\n\r\n  const subscribe = useCallback((room: string) => {\r\n    sendMessage({ type: 'subscribe', room_id: room });\r\n  }, [sendMessage]);\r\n\r\n  useEffect(() => {\r\n    connect();\r\n    return () => disconnect();\r\n  }, [connect, disconnect]);\r\n\r\n  return {\r\n    isConnected,\r\n    lastMessage,\r\n    metrics,\r\n    sendMessage,\r\n    subscribe,\r\n    disconnect\r\n  };\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\hooks\\useRevenueData.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'userId' is defined but never used.","line":84,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":84,"endColumn":9},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":111,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2842,2845],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2842,2845],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":160,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":160,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4682,4685],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4682,4685],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":171,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":171,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5015,5018],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5015,5018],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":186,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":186,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5445,5448],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5445,5448],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":211,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":211,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6381,6384],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6381,6384],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback } from 'react';\nimport { apiClient } from '../services/api';\nimport { useAuthStore } from '../stores/authStore';\n\ninterface RevenueOverview {\n  total_revenue: number;\n  average_revenue_per_video: number;\n  highest_revenue_video: number;\n  lowest_revenue_video: number;\n  total_videos_monetized: number;\n  daily_revenue: Array<{ date: string; revenue: number }>;\n  channel_breakdown: Array<{ channel_id: number; channel_name: string; revenue: number }>;\n  cpm: number;\n  rpm: number;\n  forecast: {\n    next_7_days: number;\n    next_30_days: number;\n    confidence: string;\n    trend_factor: number;\n  };\n  revenue_growth?: number;\n  cpm_trend?: number;\n  rpm_trend?: number;\n}\n\ninterface RevenueTrend {\n  period: string;\n  revenue: number;\n  views: number;\n  video_count: number;\n  rpm: number;\n  growth_rate?: number;\n}\n\ninterface RevenueForecast {\n  date: string;\n  predicted_revenue: number;\n  confidence_lower: number;\n  confidence_upper: number;\n}\n\ninterface RevenueBreakdown {\n  source?: string;\n  content_type?: string;\n  length_range?: string;\n  time_period?: string;\n  revenue: number;\n  percentage?: number;\n}\n\ninterface ChannelRevenue {\n  channel_id: number;\n  channel_name: string;\n  total_revenue: number;\n  video_count: number;\n  average_revenue_per_video: number;\n  total_views: number;\n}\n\ninterface UseRevenueDataProps {\n  userId?: number;\n  channelId?: number;\n  dateRange?: {\n    start: Date;\n    end: Date;\n  };\n  period?: 'daily' | 'weekly' | 'monthly';\n  breakdownBy?: string;\n}\n\ninterface UseRevenueDataReturn {\n  overview: RevenueOverview | null;\n  trends: RevenueTrend[] | null;\n  forecast: RevenueForecast[] | null;\n  breakdown: RevenueBreakdown[] | null;\n  channelRevenue: ChannelRevenue[] | null;\n  loading: boolean;\n  error: string | null;\n  refetch: () => Promise<void>;\n  exportData: (format: 'csv' | 'json') => Promise<void>;\n}\n\nexport const useRevenueData = ({\n  userId,\n  channelId,\n  dateRange,\n  period = 'daily',\n  breakdownBy = 'source',\n}: UseRevenueDataProps): UseRevenueDataReturn => {\n  const [overview, setOverview] = useState<RevenueOverview | null>(null);\n  const [trends, setTrends] = useState<RevenueTrend[] | null>(null);\n  const [forecast, setForecast] = useState<RevenueForecast[] | null>(null);\n  const [breakdown, setBreakdown] = useState<RevenueBreakdown[] | null>(null);\n  const [channelRevenue, setChannelRevenue] = useState<ChannelRevenue[] | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  \n  const { token } = useAuthStore();\n\n  const fetchRevenueData = useCallback(async () => {\n    if (!token) {\n      setError('Authentication required');\n      return;\n    }\n\n    setLoading(true);\n    setError(null);\n\n    try {\n      // Prepare query parameters\n      const params: any = {};\n      if (dateRange) {\n        params.start_date = dateRange.start.toISOString();\n        params.end_date = dateRange.end.toISOString();\n      }\n\n      // Fetch overview\n      const overviewResponse = await apiClient.get('/api/v1/revenue/overview', {\n        params,\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      setOverview(overviewResponse.data);\n\n      // Fetch trends\n      const trendsResponse = await apiClient.get('/api/v1/revenue/trends', {\n        params: {\n          period,\n          lookback_days: dateRange ? \n            Math.ceil((dateRange.end.getTime() - dateRange.start.getTime()) / (1000 * 60 * 60 * 24)) : \n            30,\n        },\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      setTrends(trendsResponse.data.trends);\n\n      // Fetch forecast\n      const forecastResponse = await apiClient.get('/api/v1/revenue/forecast', {\n        params: { forecast_days: 7 },\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      setForecast(forecastResponse.data.forecast);\n\n      // Fetch breakdown\n      const breakdownResponse = await apiClient.get('/api/v1/revenue/breakdown', {\n        params: { breakdown_by: breakdownBy },\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      setBreakdown(breakdownResponse.data.breakdown);\n\n      // Fetch channel revenue if channelId is provided\n      if (channelId) {\n        const channelResponse = await apiClient.get(`/api/v1/revenue/channels/${channelId}`, {\n          params,\n          headers: { Authorization: `Bearer ${token}` },\n        });\n        setChannelRevenue([channelResponse.data]);\n      } else if (overviewResponse.data.channel_breakdown) {\n        // Use channel breakdown from overview\n        setChannelRevenue(\n          overviewResponse.data.channel_breakdown.map((ch: any) => ({\n            channel_id: ch.channel_id,\n            channel_name: ch.channel_name,\n            total_revenue: ch.revenue,\n            video_count: 0, // Would need additional API call for full details\n            average_revenue_per_video: 0,\n            total_views: 0,\n          }))\n        );\n      }\n\n    } catch (err: any) {\n      console.error('Error fetching revenue data:', err);\n      setError(err.response?.data?.detail || 'Failed to fetch revenue data');\n    } finally {\n      setLoading(false);\n    }\n  }, [token, channelId, dateRange, period, breakdownBy]);\n\n  const exportData = useCallback(async (format: 'csv' | 'json') => {\n    if (!token) {\n      setError('Authentication required');\n      return;\n    }\n\n    try {\n      const params: any = { format };\n      if (dateRange) {\n        params.start_date = dateRange.start.toISOString();\n        params.end_date = dateRange.end.toISOString();\n      }\n\n      const response = await apiClient.get('/api/v1/revenue/export', {\n        params,\n        headers: { Authorization: `Bearer ${token}` },\n        responseType: format === 'csv' ? 'blob' : 'json',\n      });\n\n      // Create download link\n      const blob = format === 'csv' \n        ? response.data \n        : new Blob([JSON.stringify(response.data, null, 2)], { type: 'application/json' });\n      \n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `revenue_export_${new Date().toISOString().split('T')[0]}.${format}`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      window.URL.revokeObjectURL(url);\n    } catch (err: any) {\n      console.error('Error exporting revenue data:', err);\n      setError(err.response?.data?.detail || 'Failed to export revenue data');\n    }\n  }, [token, dateRange]);\n\n  useEffect(() => {\n    fetchRevenueData();\n  }, [fetchRevenueData]);\n\n  return {\n    overview,\n    trends,\n    forecast,\n    breakdown,\n    channelRevenue,\n    loading,\n    error,\n    refetch: fetchRevenueData,\n    exportData,\n  };\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\hooks\\useWebSocket.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":17,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[379,382],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[379,382],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":18,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[402,405],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[402,405],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":68,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":68,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1745,1748],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1745,1748],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":77,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":77,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2019,2022],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2019,2022],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":98,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":98,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2641,2644],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2641,2644],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":106,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":106,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2899,2902],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2899,2902],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * WebSocket Hook for Real-time Updates\n */\nimport { useEffect, useRef, useState, useCallback } from 'react';\nimport { io, Socket } from 'socket.io-client';\n\ninterface WebSocketOptions {\n  url?: string;\n  autoConnect?: boolean;\n  reconnectAttempts?: number;\n  reconnectDelay?: number;\n}\n\ninterface WebSocketState {\n  connected: boolean;\n  error: Error | null;\n  lastMessage: any;\n  messageHistory: any[];\n}\n\nexport const useWebSocket = (\n  channel: string,\n  options: WebSocketOptions = {}\n) => {\n  const {\n    url = import.meta.env.VITE_WS_URL || 'ws://localhost:8000',\n    autoConnect = true,\n    reconnectAttempts = 5,\n    reconnectDelay = 1000,\n  } = options;\n\n  const socketRef = useRef<Socket | null>(null);\n  const [state, setState] = useState<WebSocketState>({\n    connected: false,\n    error: null,\n    lastMessage: null,\n    messageHistory: [],\n  });\n\n  const connect = useCallback(() => {\n    if (socketRef.current?.connected) return;\n\n    const socket = io(url, {\n      transports: ['websocket'],\n      reconnectionAttempts: reconnectAttempts,\n      reconnectionDelay: reconnectDelay,\n    });\n\n    socket.on('connect', () => {\n      console.log(`WebSocket connected to ${channel}`);\n      setState(prev => ({ ...prev, connected: true, error: null }));\n      \n      // Join the specific channel\n      socket.emit('join', { channel });\n    });\n\n    socket.on('disconnect', () => {\n      console.log(`WebSocket disconnected from ${channel}`);\n      setState(prev => ({ ...prev, connected: false }));\n    });\n\n    socket.on('error', (error: Error) => {\n      console.error('WebSocket error:', error);\n      setState(prev => ({ ...prev, error }));\n    });\n\n    // Listen for channel-specific messages\n    socket.on(channel, (message: any) => {\n      setState(prev => ({\n        ...prev,\n        lastMessage: message,\n        messageHistory: [...prev.messageHistory, message].slice(-100), // Keep last 100 messages\n      }));\n    });\n\n    // Listen for broadcast messages\n    socket.on('broadcast', (message: any) => {\n      if (message.channel === channel || message.channel === 'all') {\n        setState(prev => ({\n          ...prev,\n          lastMessage: message,\n          messageHistory: [...prev.messageHistory, message].slice(-100),\n        }));\n      }\n    });\n\n    socketRef.current = socket;\n  }, [url, channel, reconnectAttempts, reconnectDelay]);\n\n  const disconnect = useCallback(() => {\n    if (socketRef.current) {\n      socketRef.current.disconnect();\n      socketRef.current = null;\n      setState(prev => ({ ...prev, connected: false }));\n    }\n  }, []);\n\n  const sendMessage = useCallback((event: string, data: any) => {\n    if (socketRef.current?.connected) {\n      socketRef.current.emit(event, { channel, ...data });\n    } else {\n      console.error('WebSocket not connected');\n    }\n  }, [channel]);\n\n  const subscribe = useCallback((event: string, handler: (data: any) => void) => {\n    if (socketRef.current) {\n      socketRef.current.on(event, handler);\n      return () => {\n        socketRef.current?.off(event, handler);\n      };\n    }\n  }, []);\n\n  useEffect(() => {\n    if (autoConnect) {\n      connect();\n    }\n\n    return () => {\n      disconnect();\n    };\n  }, [autoConnect, connect, disconnect]);\n\n  return {\n    connected: state.connected,\n    error: state.error,\n    lastMessage: state.lastMessage,\n    messageHistory: state.messageHistory,\n    connect,\n    disconnect,\n    sendMessage,\n    subscribe,\n  };\n};\n\n// Specific hooks for different channels\nexport const useDashboardWebSocket = () => {\n  return useWebSocket('dashboard');\n};\n\nexport const useVideoGenerationWebSocket = (videoId?: string) => {\n  return useWebSocket(videoId ? `video-generation-${videoId}` : 'video-generation');\n};\n\nexport const useNotificationsWebSocket = () => {\n  return useWebSocket('notifications');\n};\n\nexport const useMetricsWebSocket = () => {\n  return useWebSocket('metrics');\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\hooks\\useWebSocket.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getWebSocketService' is defined but never used.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":22},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":21,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[564,567],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[564,567],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":30,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[796,799],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[796,799],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":31,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[856,859],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[856,859],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":83,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2378,2381],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2378,2381],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'addNotification', 'handleWsMessage', 'options', 'setWsConnected', and 'setWsReconnecting'. Either include them or remove the dependency array.","line":142,"column":6,"nodeType":"ArrayExpression","endLine":142,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [addNotification, handleWsMessage, options, setWsConnected, setWsReconnecting]","fix":{"range":[4075,4077],"text":"[addNotification, handleWsMessage, options, setWsConnected, setWsReconnecting]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":155,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":155,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4401,4404],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4401,4404],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":160,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":160,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4559,4562],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4559,4562],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":191,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":191,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5251,5254],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5251,5254],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'callback' and 'subscribe'. Either include them or remove the dependency array.","line":201,"column":6,"nodeType":"ArrayExpression","endLine":201,"endColumn":28,"suggestions":[{"desc":"Update the dependencies array to be: [callback, messageType, subscribe]","fix":{"range":[5534,5556],"text":"[callback, messageType, subscribe]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a spread element in its dependency array. This means we can't statically verify whether you've passed the correct dependencies.","line":201,"column":20,"nodeType":"SpreadElement","endLine":201,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":212,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":212,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5792,5795],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5792,5795],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":229,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":229,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6167,6170],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6167,6170],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":259,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":259,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6895,6898],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6895,6898],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":273,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":273,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7203,7206],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7203,7206],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * React Hook for WebSocket integration\r\n * Provides real-time updates with automatic reconnection\r\n */\r\n\r\nimport { useEffect, useCallback, useRef, useState } from 'react';\r\nimport { \r\n  getWebSocketService, \r\n  initializeWebSocket, \r\n  WebSocketService, \r\n  WebSocketStatus,\r\n  WebSocketMessage \r\n} from '../services/websocketService';\r\nimport { useOptimizedStore } from '../stores/optimizedStore';\r\n\r\ninterface UseWebSocketOptions {\r\n  autoConnect?: boolean;\r\n  debug?: boolean;\r\n  onConnect?: () => void;\r\n  onDisconnect?: () => void;\r\n  onError?: (error: any) => void;\r\n  onMessage?: (message: WebSocketMessage) => void;\r\n}\r\n\r\ninterface UseWebSocketReturn {\r\n  status: WebSocketStatus;\r\n  latency: number;\r\n  connect: () => void;\r\n  disconnect: () => void;\r\n  send: (type: string, data: any) => void;\r\n  subscribe: (type: string, callback: (data: any) => void) => () => void;\r\n}\r\n\r\nexport function useWebSocket(options: UseWebSocketOptions = {}): UseWebSocketReturn {\r\n  const [status, setStatus] = useState<WebSocketStatus>(WebSocketStatus.DISCONNECTED);\r\n  const [latency, setLatency] = useState<number>(0);\r\n  const wsRef = useRef<WebSocketService | null>(null);\r\n  const subscriptionsRef = useRef<Array<() => void>>([]);\r\n\r\n  const { \r\n    setWsConnected, \r\n    setWsReconnecting, \r\n    handleWsMessage,\r\n    addNotification \r\n  } = useOptimizedStore();\r\n\r\n  // Initialize WebSocket service\r\n  useEffect(() => {\r\n    const wsUrl = process.env.REACT_APP_WS_URL || 'ws://localhost:8000/ws';\r\n    \r\n    wsRef.current = initializeWebSocket({\r\n      url: wsUrl,\r\n      reconnectInterval: 5000,\r\n      maxReconnectAttempts: 10,\r\n      heartbeatInterval: 30000,\r\n      enableHeartbeat: true,\r\n      debug: options.debug || false,\r\n    });\r\n\r\n    // Setup event listeners\r\n    const ws = wsRef.current;\r\n\r\n    const handleStatus = (newStatus: WebSocketStatus) => {\r\n      setStatus(newStatus);\r\n      \r\n      // Update store\r\n      setWsConnected(newStatus === WebSocketStatus.CONNECTED);\r\n      setWsReconnecting(newStatus === WebSocketStatus.RECONNECTING);\r\n    };\r\n\r\n    const handleConnected = () => {\r\n      addNotification({\r\n        type: 'success',\r\n        message: 'Real-time updates connected',\r\n      });\r\n      options.onConnect?.();\r\n    };\r\n\r\n    const handleDisconnected = () => {\r\n      options.onDisconnect?.();\r\n    };\r\n\r\n    const handleError = (error: any) => {\r\n      console.error('WebSocket error:', error);\r\n      addNotification({\r\n        type: 'error',\r\n        message: 'Connection error. Retrying...',\r\n      });\r\n      options.onError?.(error);\r\n    };\r\n\r\n    const handleMessage = (message: WebSocketMessage) => {\r\n      // Handle message in store\r\n      handleWsMessage(message);\r\n      \r\n      // Call custom handler if provided\r\n      options.onMessage?.(message);\r\n    };\r\n\r\n    const handleLatency = (newLatency: number) => {\r\n      setLatency(newLatency);\r\n    };\r\n\r\n    const handleReconnectFailed = () => {\r\n      addNotification({\r\n        type: 'error',\r\n        message: 'Failed to reconnect. Please refresh the page.',\r\n      });\r\n    };\r\n\r\n    // Register event listeners\r\n    ws.on('status', handleStatus);\r\n    ws.on('connected', handleConnected);\r\n    ws.on('disconnected', handleDisconnected);\r\n    ws.on('error', handleError);\r\n    ws.on('message', handleMessage);\r\n    ws.on('latency', handleLatency);\r\n    ws.on('reconnectFailed', handleReconnectFailed);\r\n\r\n    // Auto-connect if enabled\r\n    if (options.autoConnect !== false) {\r\n      ws.connect();\r\n    }\r\n\r\n    // Cleanup\r\n    return () => {\r\n      ws.off('status', handleStatus);\r\n      ws.off('connected', handleConnected);\r\n      ws.off('disconnected', handleDisconnected);\r\n      ws.off('error', handleError);\r\n      ws.off('message', handleMessage);\r\n      ws.off('latency', handleLatency);\r\n      ws.off('reconnectFailed', handleReconnectFailed);\r\n      \r\n      // Unsubscribe all\r\n      subscriptionsRef.current.forEach(unsubscribe => unsubscribe());\r\n      subscriptionsRef.current = [];\r\n      \r\n      // Disconnect\r\n      ws.disconnect();\r\n    };\r\n  }, []); // Run once on mount\r\n\r\n  // Connect function\r\n  const connect = useCallback(() => {\r\n    wsRef.current?.connect();\r\n  }, []);\r\n\r\n  // Disconnect function\r\n  const disconnect = useCallback(() => {\r\n    wsRef.current?.disconnect();\r\n  }, []);\r\n\r\n  // Send message function\r\n  const send = useCallback((type: string, data: any) => {\r\n    wsRef.current?.send(type, data);\r\n  }, []);\r\n\r\n  // Subscribe to message type\r\n  const subscribe = useCallback((type: string, callback: (data: any) => void) => {\r\n    if (!wsRef.current) {\r\n      console.warn('WebSocket not initialized');\r\n      return () => {};\r\n    }\r\n\r\n    const unsubscribe = wsRef.current.subscribe(type, callback);\r\n    subscriptionsRef.current.push(unsubscribe);\r\n    \r\n    return () => {\r\n      const index = subscriptionsRef.current.indexOf(unsubscribe);\r\n      if (index > -1) {\r\n        subscriptionsRef.current.splice(index, 1);\r\n      }\r\n      unsubscribe();\r\n    };\r\n  }, []);\r\n\r\n  return {\r\n    status,\r\n    latency,\r\n    connect,\r\n    disconnect,\r\n    send,\r\n    subscribe,\r\n  };\r\n}\r\n\r\n/**\r\n * Hook for subscribing to specific WebSocket message types\r\n */\r\nexport function useWebSocketSubscription<T = any>(\r\n  messageType: string,\r\n  callback: (data: T) => void,\r\n  deps: React.DependencyList = []\r\n): void {\r\n  const { subscribe } = useWebSocket({ autoConnect: true });\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = subscribe(messageType, callback);\r\n    return unsubscribe;\r\n  }, [messageType, ...deps]);\r\n}\r\n\r\n/**\r\n * Hook for real-time video updates\r\n */\r\nexport function useVideoUpdates(videoId: string | null): void {\r\n  const { updateQueueItem } = useOptimizedStore();\r\n\r\n  useWebSocketSubscription(\r\n    'video_update',\r\n    (data: any) => {\r\n      if (data.videoId === videoId) {\r\n        updateQueueItem(videoId, data.updates);\r\n      }\r\n    },\r\n    [videoId]\r\n  );\r\n}\r\n\r\n/**\r\n * Hook for real-time channel updates\r\n */\r\nexport function useChannelUpdates(channelId: string | null): void {\r\n  const { updateChannel } = useOptimizedStore();\r\n\r\n  useWebSocketSubscription(\r\n    'channel_update',\r\n    (data: any) => {\r\n      if (data.channelId === channelId) {\r\n        updateChannel(channelId, data.updates);\r\n      }\r\n    },\r\n    [channelId]\r\n  );\r\n}\r\n\r\n/**\r\n * Hook for real-time analytics updates\r\n */\r\nexport function useAnalyticsUpdates(): void {\r\n  const { updateRealtimeMetrics, addDailyMetrics } = useOptimizedStore();\r\n\r\n  useWebSocketSubscription('analytics_realtime', (data) => {\r\n    updateRealtimeMetrics(data);\r\n  });\r\n\r\n  useWebSocketSubscription('analytics_daily', (data) => {\r\n    addDailyMetrics(data);\r\n  });\r\n}\r\n\r\n/**\r\n * Hook for real-time notifications\r\n */\r\nexport function useNotificationUpdates(): void {\r\n  const { addNotification } = useOptimizedStore();\r\n\r\n  useWebSocketSubscription('notification', (data: any) => {\r\n    addNotification({\r\n      type: data.level || 'info',\r\n      message: data.message,\r\n    });\r\n  });\r\n}\r\n\r\n/**\r\n * Hook for real-time cost alerts\r\n */\r\nexport function useCostAlerts(): void {\r\n  const { addNotification } = useOptimizedStore();\r\n\r\n  useWebSocketSubscription('cost_alert', (data: any) => {\r\n    addNotification({\r\n      type: 'warning',\r\n      message: `Cost alert: ${data.message}`,\r\n    });\r\n  });\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\layouts\\DashboardLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\pages\\AI\\AITools.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":5,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CardMedia' is defined but never used.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Tabs' is defined but never used.","line":29,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Tab' is defined but never used.","line":30,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Psychology' is defined but never used.","line":49,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":49,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Stop' is defined but never used.","line":59,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":59,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Download' is defined but never used.","line":60,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":60,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Upload' is defined but never used.","line":61,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":61,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Edit' is defined but never used.","line":62,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":62,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Delete' is defined but never used.","line":63,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":63,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Speed' is defined but never used.","line":66,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":66,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Tune' is defined but never used.","line":67,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":67,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Lightbulb' is defined but never used.","line":68,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":68,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ChatBubble' is defined but never used.","line":69,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":69,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TextFields' is defined but never used.","line":73,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":73,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Warning' is defined but never used.","line":76,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":76,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Info' is defined but never used.","line":77,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":77,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Refresh' is defined but never used.","line":78,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":78,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TabPanel' is defined but never used.","line":88,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":88,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'activeTab' is assigned a value but never used.","line":272,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":272,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":273,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":273,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6288,6291],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6288,6291],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleTabChange' is assigned a value but never used.","line":288,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":288,"endColumn":24},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":292,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":292,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6835,6838],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6835,6838],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":427,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":427,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11619,11622],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11619,11622],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":24,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * AI Tools Screen Component\r\n * Comprehensive AI tools dashboard for content creation and automation\r\n */\r\nimport React, { useState, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Grid,\r\n  Paper,\r\n  Typography,\r\n  Card,\r\n  CardContent,\r\n  CardMedia,\r\n  Button,\r\n  IconButton,\r\n  Chip,\r\n  Avatar,\r\n  LinearProgress,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Slider,\r\n  Tabs,\r\n  Tab,\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  ListItemSecondaryAction,\r\n  Alert,\r\n  Divider,\r\n  useTheme,\r\n  CircularProgress,\r\n  Accordion,\r\n  AccordionSummary,\r\n  AccordionDetails,\r\n  Switch,\r\n  FormControlLabel,\r\n} from '@mui/material';\r\nimport {\r\n  SmartToy,\r\n  AutoAwesome,\r\n  Psychology,\r\n  Mic,\r\n  Image as ImageIcon,\r\n  VideoLibrary,\r\n  Article,\r\n  Translate,\r\n  TrendingUp,\r\n  Schedule,\r\n  PlayArrow,\r\n  Pause,\r\n  Stop,\r\n  Download,\r\n  Upload,\r\n  Edit,\r\n  Delete,\r\n  Add,\r\n  Settings,\r\n  Speed,\r\n  Tune,\r\n  Lightbulb,\r\n  ChatBubble,\r\n  VolumeUp,\r\n  Palette,\r\n  Movie,\r\n  TextFields,\r\n  ExpandMore,\r\n  CheckCircle,\r\n  Warning,\r\n  Info,\r\n  Refresh,\r\n  Launch,\r\n} from '@mui/icons-material';\r\n\r\ninterface TabPanelProps {\r\n  children?: React.ReactNode;\r\n  index: number;\r\n  value: number;\r\n}\r\n\r\nfunction TabPanel(props: TabPanelProps) {\r\n  const { children, value, index, ...other } = props;\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      {...other}\r\n    >\r\n      {value === index && <Box sx={{ py: 3 }}>{children}</Box>}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst aiToolsData = [\r\n  {\r\n    id: 1,\r\n    name: 'Script Generator',\r\n    description: 'Generate engaging YouTube scripts using AI',\r\n    icon: <Article />,\r\n    category: 'Content',\r\n    status: 'active',\r\n    usage: 85,\r\n    lastUsed: '2 hours ago',\r\n    model: 'GPT-4',\r\n    features: ['SEO optimized', 'Multi-language', 'Custom tone', 'Hook generation'],\r\n    pricing: '$0.02/request',\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'Voice Synthesis',\r\n    description: 'Convert text to natural sounding speech',\r\n    icon: <Mic />,\r\n    category: 'Audio',\r\n    status: 'active',\r\n    usage: 72,\r\n    lastUsed: '1 hour ago',\r\n    model: 'ElevenLabs',\r\n    features: ['Voice cloning', 'Multiple accents', 'Emotion control', 'Speed adjustment'],\r\n    pricing: '$0.18/minute',\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'Thumbnail Creator',\r\n    description: 'AI-powered thumbnail generation and optimization',\r\n    icon: <ImageIcon />,\r\n    category: 'Visual',\r\n    status: 'active',\r\n    usage: 68,\r\n    lastUsed: '3 hours ago',\r\n    model: 'DALL-E 3',\r\n    features: ['A/B testing', 'Style templates', 'Brand consistency', 'CTR optimization'],\r\n    pricing: '$0.04/image',\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'Video Editor',\r\n    description: 'Automated video editing and assembly',\r\n    icon: <VideoLibrary />,\r\n    category: 'Video',\r\n    status: 'active',\r\n    usage: 45,\r\n    lastUsed: '5 hours ago',\r\n    model: 'Custom AI',\r\n    features: ['Auto-cut', 'Scene detection', 'Music sync', 'Subtitle generation'],\r\n    pricing: '$0.25/minute',\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'Trend Analyzer',\r\n    description: 'Analyze YouTube trends and suggest topics',\r\n    icon: <TrendingUp />,\r\n    category: 'Analytics',\r\n    status: 'active',\r\n    usage: 91,\r\n    lastUsed: '30 minutes ago',\r\n    model: 'GPT-4 + Analytics',\r\n    features: ['Real-time trends', 'Niche analysis', 'Competition research', 'Viral prediction'],\r\n    pricing: '$0.15/analysis',\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'Translation Service',\r\n    description: 'Multi-language content translation',\r\n    icon: <Translate />,\r\n    category: 'Content',\r\n    status: 'beta',\r\n    usage: 23,\r\n    lastUsed: '1 day ago',\r\n    model: 'Google Translate + AI',\r\n    features: ['50+ languages', 'Context aware', 'Cultural adaptation', 'Subtitle sync'],\r\n    pricing: '$0.08/1000 words',\r\n  },\r\n  {\r\n    id: 7,\r\n    name: 'SEO Optimizer',\r\n    description: 'Optimize titles, descriptions, and tags',\r\n    icon: <AutoAwesome />,\r\n    category: 'Marketing',\r\n    status: 'active',\r\n    usage: 77,\r\n    lastUsed: '2 hours ago',\r\n    model: 'GPT-4 + SEO API',\r\n    features: ['Keyword research', 'Competitor analysis', 'Trend integration', 'Performance tracking'],\r\n    pricing: '$0.12/optimization',\r\n  },\r\n  {\r\n    id: 8,\r\n    name: 'Content Scheduler',\r\n    description: 'AI-powered optimal publishing schedule',\r\n    icon: <Schedule />,\r\n    category: 'Analytics',\r\n    status: 'active',\r\n    usage: 56,\r\n    lastUsed: '6 hours ago',\r\n    model: 'Analytics AI',\r\n    features: ['Audience analysis', 'Time optimization', 'Global scheduling', 'Performance prediction'],\r\n    pricing: '$0.05/schedule',\r\n  },\r\n];\r\n\r\nconst mockActiveJobs = [\r\n  {\r\n    id: 1,\r\n    tool: 'Script Generator',\r\n    task: 'Generating script for \"AI Tools for Creators\"',\r\n    progress: 75,\r\n    status: 'processing',\r\n    estimatedTime: '2 minutes',\r\n  },\r\n  {\r\n    id: 2,\r\n    tool: 'Voice Synthesis',\r\n    task: 'Converting script to speech (Professional voice)',\r\n    progress: 45,\r\n    status: 'processing',\r\n    estimatedTime: '5 minutes',\r\n  },\r\n  {\r\n    id: 3,\r\n    tool: 'Thumbnail Creator',\r\n    task: 'Generating 3 thumbnail variations',\r\n    progress: 90,\r\n    status: 'processing',\r\n    estimatedTime: '30 seconds',\r\n  },\r\n];\r\n\r\nconst mockTemplates = [\r\n  {\r\n    id: 1,\r\n    name: 'Tech Review Template',\r\n    category: 'Script',\r\n    usage: 45,\r\n    lastModified: '2 days ago',\r\n    description: 'Template for technology product reviews',\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'Tutorial Format',\r\n    category: 'Script',\r\n    usage: 67,\r\n    lastModified: '1 week ago',\r\n    description: 'Step-by-step tutorial structure',\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'Modern Gaming Thumbnail',\r\n    category: 'Visual',\r\n    usage: 89,\r\n    lastModified: '3 days ago',\r\n    description: 'High-contrast gaming thumbnail style',\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'Professional Voice',\r\n    category: 'Audio',\r\n    usage: 34,\r\n    lastModified: '1 day ago',\r\n    description: 'Clear, professional narration voice',\r\n  },\r\n];\r\n\r\nexport const AITools: React.FC = () => {\r\n  const theme = useTheme();\r\n  const [activeTab, setActiveTab] = useState(0);\r\n  const [selectedTool, setSelectedTool] = useState<any>(null);\r\n  const [toolDialogOpen, setToolDialogOpen] = useState(false);\r\n  const [newJobDialogOpen, setNewJobDialogOpen] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const [jobSettings, setJobSettings] = useState({\r\n    tool: '',\r\n    input: '',\r\n    model: '',\r\n    creativity: 70,\r\n    quality: 'high',\r\n    language: 'en',\r\n    style: 'professional',\r\n  });\r\n\r\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\r\n    setActiveTab(newValue);\r\n  };\r\n\r\n  const handleToolClick = (tool: any) => {\r\n    setSelectedTool(tool);\r\n    setToolDialogOpen(true);\r\n  };\r\n\r\n  const handleStartJob = () => {\r\n    setNewJobDialogOpen(true);\r\n  };\r\n\r\n  const handleCreateJob = () => {\r\n    setLoading(true);\r\n    setTimeout(() => {\r\n      setLoading(false);\r\n      setNewJobDialogOpen(false);\r\n    }, 2000);\r\n  };\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'active': return 'success';\r\n      case 'beta': return 'warning';\r\n      case 'processing': return 'info';\r\n      case 'error': return 'error';\r\n      default: return 'default';\r\n    }\r\n  };\r\n\r\n  const getCategoryIcon = (category: string) => {\r\n    switch (category) {\r\n      case 'Content': return <Article />;\r\n      case 'Audio': return <VolumeUp />;\r\n      case 'Visual': return <Palette />;\r\n      case 'Video': return <Movie />;\r\n      case 'Analytics': return <TrendingUp />;\r\n      case 'Marketing': return <AutoAwesome />;\r\n      default: return <SmartToy />;\r\n    }\r\n  };\r\n\r\n  const toolCategories = ['All', 'Content', 'Audio', 'Visual', 'Video', 'Analytics', 'Marketing'];\r\n  const [selectedCategory, setSelectedCategory] = useState('All');\r\n\r\n  const filteredTools = selectedCategory === 'All' \r\n    ? aiToolsData \r\n    : aiToolsData.filter(tool => tool.category === selectedCategory);\r\n\r\n  return (\r\n    <Box sx={{ flexGrow: 1, p: 3 }}>\r\n      {/* Header */}\r\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\r\n        <Box>\r\n          <Typography variant=\"h4\" fontWeight=\"bold\" gutterBottom>\r\n            AI Tools Studio\r\n          </Typography>\r\n          <Typography variant=\"body2\" color=\"text.secondary\">\r\n            Harness the power of AI to automate your YouTube content creation\r\n          </Typography>\r\n        </Box>\r\n        \r\n        <Box sx={{ display: 'flex', gap: 2, alignItems: 'center' }}>\r\n          <Button variant=\"outlined\" startIcon={<Settings />}>\r\n            Configure AI\r\n          </Button>\r\n          <Button variant=\"contained\" startIcon={<Add />} onClick={handleStartJob}>\r\n            New Job\r\n          </Button>\r\n        </Box>\r\n      </Box>\r\n\r\n      {/* Active Jobs Alert */}\r\n      {mockActiveJobs.length > 0 && (\r\n        <Alert \r\n          severity=\"info\" \r\n          sx={{ mb: 3 }}\r\n          action={\r\n            <Button size=\"small\" color=\"inherit\">\r\n              View Queue\r\n            </Button>\r\n          }\r\n        >\r\n          {mockActiveJobs.length} AI job(s) currently processing\r\n        </Alert>\r\n      )}\r\n\r\n      <Grid container spacing={3}>\r\n        {/* Left Panel - Tools and Categories */}\r\n        <Grid item xs={12} lg={8}>\r\n          <Paper sx={{ p: 3, mb: 3 }}>\r\n            {/* Category Filter */}\r\n            <Box sx={{ mb: 3 }}>\r\n              <Typography variant=\"h6\" gutterBottom>\r\n                Tool Categories\r\n              </Typography>\r\n              <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>\r\n                {toolCategories.map((category) => (\r\n                  <Chip\r\n                    key={category}\r\n                    label={category}\r\n                    onClick={() => setSelectedCategory(category)}\r\n                    color={selectedCategory === category ? 'primary' : 'default'}\r\n                    variant={selectedCategory === category ? 'filled' : 'outlined'}\r\n                    icon={getCategoryIcon(category)}\r\n                  />\r\n                ))}\r\n              </Box>\r\n            </Box>\r\n\r\n            {/* Tools Grid */}\r\n            <Grid container spacing={2}>\r\n              {filteredTools.map((tool) => (\r\n                <Grid item xs={12} sm={6} md={4} key={tool.id}>\r\n                  <Card \r\n                    sx={{ \r\n                      height: '100%', \r\n                      cursor: 'pointer',\r\n                      '&:hover': {\r\n                        boxShadow: theme.shadows[4],\r\n                        transform: 'translateY(-2px)',\r\n                      },\r\n                      transition: 'all 0.2s ease-in-out',\r\n                    }}\r\n                    onClick={() => handleToolClick(tool)}\r\n                  >\r\n                    <CardContent>\r\n                      <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\r\n                        <Avatar sx={{ bgcolor: 'primary.main', mr: 2 }}>\r\n                          {tool.icon}\r\n                        </Avatar>\r\n                        <Box sx={{ flexGrow: 1 }}>\r\n                          <Typography variant=\"h6\" noWrap>\r\n                            {tool.name}\r\n                          </Typography>\r\n                          <Chip \r\n                            label={tool.status} \r\n                            size=\"small\" \r\n                            color={getStatusColor(tool.status) as any}\r\n                            variant=\"outlined\"\r\n                          />\r\n                        </Box>\r\n                      </Box>\r\n\r\n                      <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2, height: 40 }}>\r\n                        {tool.description}\r\n                      </Typography>\r\n\r\n                      <Box sx={{ mb: 2 }}>\r\n                        <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>\r\n                          <Typography variant=\"body2\">Usage</Typography>\r\n                          <Typography variant=\"body2\">{tool.usage}%</Typography>\r\n                        </Box>\r\n                        <LinearProgress \r\n                          variant=\"determinate\" \r\n                          value={tool.usage} \r\n                          color={tool.usage > 80 ? 'warning' : 'primary'}\r\n                          sx={{ height: 6, borderRadius: 3 }}\r\n                        />\r\n                      </Box>\r\n\r\n                      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n                        <Typography variant=\"caption\" color=\"text.secondary\">\r\n                          {tool.lastUsed}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" fontWeight=\"bold\" color=\"primary\">\r\n                          {tool.pricing}\r\n                        </Typography>\r\n                      </Box>\r\n\r\n                      <Box sx={{ mt: 2, display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\r\n                        {tool.features.slice(0, 2).map((feature, idx) => (\r\n                          <Chip key={idx} label={feature} size=\"small\" variant=\"outlined\" />\r\n                        ))}\r\n                        {tool.features.length > 2 && (\r\n                          <Chip label={`+${tool.features.length - 2} more`} size=\"small\" />\r\n                        )}\r\n                      </Box>\r\n                    </CardContent>\r\n                  </Card>\r\n                </Grid>\r\n              ))}\r\n            </Grid>\r\n          </Paper>\r\n        </Grid>\r\n\r\n        {/* Right Panel - Active Jobs & Templates */}\r\n        <Grid item xs={12} lg={4}>\r\n          <Paper sx={{ p: 3, mb: 3 }}>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n              Active Jobs\r\n            </Typography>\r\n            \r\n            {mockActiveJobs.length === 0 ? (\r\n              <Box sx={{ textAlign: 'center', py: 4 }}>\r\n                <SmartToy sx={{ fontSize: 48, color: 'text.secondary', mb: 2 }} />\r\n                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                  No active jobs\r\n                </Typography>\r\n              </Box>\r\n            ) : (\r\n              <List dense>\r\n                {mockActiveJobs.map((job) => (\r\n                  <ListItem key={job.id} sx={{ px: 0 }}>\r\n                    <ListItemIcon>\r\n                      <CircularProgress size={24} variant=\"determinate\" value={job.progress} />\r\n                    </ListItemIcon>\r\n                    <ListItemText\r\n                      primary={job.tool}\r\n                      secondary={\r\n                        <Box>\r\n                          <Typography variant=\"caption\" display=\"block\">\r\n                            {job.task}\r\n                          </Typography>\r\n                          <Typography variant=\"caption\" color=\"primary\">\r\n                            {job.estimatedTime} remaining\r\n                          </Typography>\r\n                        </Box>\r\n                      }\r\n                    />\r\n                    <ListItemSecondaryAction>\r\n                      <IconButton size=\"small\">\r\n                        <Pause />\r\n                      </IconButton>\r\n                    </ListItemSecondaryAction>\r\n                  </ListItem>\r\n                ))}\r\n              </List>\r\n            )}\r\n          </Paper>\r\n\r\n          <Paper sx={{ p: 3 }}>\r\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\r\n              <Typography variant=\"h6\">Templates</Typography>\r\n              <Button size=\"small\" startIcon={<Add />}>\r\n                New\r\n              </Button>\r\n            </Box>\r\n\r\n            <List dense>\r\n              {mockTemplates.map((template) => (\r\n                <ListItem key={template.id} sx={{ px: 0 }}>\r\n                  <ListItemIcon>\r\n                    {getCategoryIcon(template.category)}\r\n                  </ListItemIcon>\r\n                  <ListItemText\r\n                    primary={template.name}\r\n                    secondary={\r\n                      <Box>\r\n                        <Typography variant=\"caption\" display=\"block\">\r\n                          {template.description}\r\n                        </Typography>\r\n                        <Typography variant=\"caption\" color=\"text.secondary\">\r\n                          Used {template.usage} times • {template.lastModified}\r\n                        </Typography>\r\n                      </Box>\r\n                    }\r\n                  />\r\n                  <ListItemSecondaryAction>\r\n                    <IconButton size=\"small\">\r\n                      <Launch />\r\n                    </IconButton>\r\n                  </ListItemSecondaryAction>\r\n                </ListItem>\r\n              ))}\r\n            </List>\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* Tool Details Dialog */}\r\n      <Dialog \r\n        open={toolDialogOpen} \r\n        onClose={() => setToolDialogOpen(false)} \r\n        maxWidth=\"md\" \r\n        fullWidth\r\n      >\r\n        {selectedTool && (\r\n          <>\r\n            <DialogTitle>\r\n              <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                <Avatar sx={{ bgcolor: 'primary.main', mr: 2 }}>\r\n                  {selectedTool.icon}\r\n                </Avatar>\r\n                <Box>\r\n                  <Typography variant=\"h6\">{selectedTool.name}</Typography>\r\n                  <Typography variant=\"body2\" color=\"text.secondary\">\r\n                    {selectedTool.description}\r\n                  </Typography>\r\n                </Box>\r\n              </Box>\r\n            </DialogTitle>\r\n            <DialogContent>\r\n              <Grid container spacing={3}>\r\n                <Grid item xs={12} md={6}>\r\n                  <Typography variant=\"subtitle1\" gutterBottom>\r\n                    Features\r\n                  </Typography>\r\n                  <List dense>\r\n                    {selectedTool.features.map((feature: string, idx: number) => (\r\n                      <ListItem key={idx}>\r\n                        <ListItemIcon>\r\n                          <CheckCircle color=\"success\" fontSize=\"small\" />\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={feature} />\r\n                      </ListItem>\r\n                    ))}\r\n                  </List>\r\n                </Grid>\r\n                \r\n                <Grid item xs={12} md={6}>\r\n                  <Typography variant=\"subtitle1\" gutterBottom>\r\n                    Usage Statistics\r\n                  </Typography>\r\n                  <Box sx={{ mb: 2 }}>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                      Model: {selectedTool.model}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                      Pricing: {selectedTool.pricing}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                      Last used: {selectedTool.lastUsed}\r\n                    </Typography>\r\n                  </Box>\r\n                  \r\n                  <Box>\r\n                    <Typography variant=\"body2\" gutterBottom>\r\n                      Monthly Usage: {selectedTool.usage}%\r\n                    </Typography>\r\n                    <LinearProgress \r\n                      variant=\"determinate\" \r\n                      value={selectedTool.usage} \r\n                      color={selectedTool.usage > 80 ? 'warning' : 'primary'}\r\n                    />\r\n                  </Box>\r\n                </Grid>\r\n              </Grid>\r\n\r\n              <Divider sx={{ my: 3 }} />\r\n\r\n              <Accordion>\r\n                <AccordionSummary expandIcon={<ExpandMore />}>\r\n                  <Typography>Advanced Settings</Typography>\r\n                </AccordionSummary>\r\n                <AccordionDetails>\r\n                  <Grid container spacing={2}>\r\n                    <Grid item xs={12}>\r\n                      <FormControlLabel\r\n                        control={<Switch defaultChecked />}\r\n                        label=\"Auto-process outputs\"\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                      <FormControlLabel\r\n                        control={<Switch />}\r\n                        label=\"Save as template\"\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                      <Typography variant=\"body2\" gutterBottom>\r\n                        Quality Level\r\n                      </Typography>\r\n                      <Slider\r\n                        defaultValue={70}\r\n                        marks={[\r\n                          { value: 0, label: 'Fast' },\r\n                          { value: 50, label: 'Balanced' },\r\n                          { value: 100, label: 'High Quality' },\r\n                        ]}\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n                </AccordionDetails>\r\n              </Accordion>\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <Button onClick={() => setToolDialogOpen(false)}>\r\n                Close\r\n              </Button>\r\n              <Button variant=\"contained\" startIcon={<PlayArrow />}>\r\n                Start Job\r\n              </Button>\r\n            </DialogActions>\r\n          </>\r\n        )}\r\n      </Dialog>\r\n\r\n      {/* New Job Dialog */}\r\n      <Dialog \r\n        open={newJobDialogOpen} \r\n        onClose={() => setNewJobDialogOpen(false)} \r\n        maxWidth=\"md\" \r\n        fullWidth\r\n      >\r\n        <DialogTitle>Create New AI Job</DialogTitle>\r\n        <DialogContent>\r\n          <Grid container spacing={3} sx={{ mt: 1 }}>\r\n            <Grid item xs={12} md={6}>\r\n              <FormControl fullWidth>\r\n                <InputLabel>AI Tool</InputLabel>\r\n                <Select\r\n                  value={jobSettings.tool}\r\n                  onChange={(e) => setJobSettings(prev => ({ ...prev, tool: e.target.value }))}\r\n                  label=\"AI Tool\"\r\n                >\r\n                  {aiToolsData.map((tool) => (\r\n                    <MenuItem key={tool.id} value={tool.name}>\r\n                      {tool.name}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            <Grid item xs={12} md={6}>\r\n              <FormControl fullWidth>\r\n                <InputLabel>Quality</InputLabel>\r\n                <Select\r\n                  value={jobSettings.quality}\r\n                  onChange={(e) => setJobSettings(prev => ({ ...prev, quality: e.target.value }))}\r\n                  label=\"Quality\"\r\n                >\r\n                  <MenuItem value=\"draft\">Draft (Fast)</MenuItem>\r\n                  <MenuItem value=\"standard\">Standard</MenuItem>\r\n                  <MenuItem value=\"high\">High Quality</MenuItem>\r\n                  <MenuItem value=\"premium\">Premium</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Input/Prompt\"\r\n                multiline\r\n                rows={4}\r\n                value={jobSettings.input}\r\n                onChange={(e) => setJobSettings(prev => ({ ...prev, input: e.target.value }))}\r\n                placeholder=\"Enter your prompt or upload content...\"\r\n              />\r\n            </Grid>\r\n\r\n            <Grid item xs={12} md={6}>\r\n              <FormControl fullWidth>\r\n                <InputLabel>Language</InputLabel>\r\n                <Select\r\n                  value={jobSettings.language}\r\n                  onChange={(e) => setJobSettings(prev => ({ ...prev, language: e.target.value }))}\r\n                  label=\"Language\"\r\n                >\r\n                  <MenuItem value=\"en\">English</MenuItem>\r\n                  <MenuItem value=\"es\">Spanish</MenuItem>\r\n                  <MenuItem value=\"fr\">French</MenuItem>\r\n                  <MenuItem value=\"de\">German</MenuItem>\r\n                  <MenuItem value=\"ja\">Japanese</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            <Grid item xs={12} md={6}>\r\n              <FormControl fullWidth>\r\n                <InputLabel>Style</InputLabel>\r\n                <Select\r\n                  value={jobSettings.style}\r\n                  onChange={(e) => setJobSettings(prev => ({ ...prev, style: e.target.value }))}\r\n                  label=\"Style\"\r\n                >\r\n                  <MenuItem value=\"professional\">Professional</MenuItem>\r\n                  <MenuItem value=\"casual\">Casual</MenuItem>\r\n                  <MenuItem value=\"energetic\">Energetic</MenuItem>\r\n                  <MenuItem value=\"educational\">Educational</MenuItem>\r\n                  <MenuItem value=\"entertaining\">Entertaining</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            <Grid item xs={12}>\r\n              <Typography variant=\"body2\" gutterBottom>\r\n                Creativity Level: {jobSettings.creativity}%\r\n              </Typography>\r\n              <Slider\r\n                value={jobSettings.creativity}\r\n                onChange={(e, value) => setJobSettings(prev => ({ ...prev, creativity: value as number }))}\r\n                min={0}\r\n                max={100}\r\n                marks={[\r\n                  { value: 0, label: 'Conservative' },\r\n                  { value: 50, label: 'Balanced' },\r\n                  { value: 100, label: 'Creative' },\r\n                ]}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setNewJobDialogOpen(false)}>\r\n            Cancel\r\n          </Button>\r\n          <Button \r\n            variant=\"contained\" \r\n            onClick={handleCreateJob}\r\n            disabled={loading || !jobSettings.tool || !jobSettings.input}\r\n            startIcon={loading ? <CircularProgress size={20} /> : <PlayArrow />}\r\n          >\r\n            {loading ? 'Creating...' : 'Start Job'}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default AITools;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\pages\\Analytics\\AdvancedAnalytics.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\pages\\Analytics\\Analytics.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":5,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Avatar' is defined but never used.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Tooltip' is defined but never used.","line":28,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Alert' is defined but never used.","line":29,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Comment' is defined but never used.","line":39,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Share' is defined but never used.","line":40,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Schedule' is defined but never used.","line":42,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":42,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FilterList' is defined but never used.","line":46,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CalendarToday' is defined but never used.","line":47,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":47,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'LineChart' is defined but never used.","line":54,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":54,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AreaChart' is defined but never used.","line":56,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":56,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Scatter' is defined but never used.","line":70,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":70,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'subDays' is defined but never used.","line":72,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":72,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'subMonths' is defined but never used.","line":72,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":72,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isWithinInterval' is defined but never used.","line":72,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":72,"endColumn":54},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setMetrics' is assigned a value but never used.","line":199,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":199,"endColumn":29},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":400,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":400,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12954,12957],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12954,12957],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":17,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Analytics Screen Component\r\n * Comprehensive analytics dashboard for YouTube channel performance\r\n */\r\nimport React, { useState, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Grid,\r\n  Paper,\r\n  Typography,\r\n  Card,\r\n  CardContent,\r\n  Select,\r\n  MenuItem,\r\n  FormControl,\r\n  InputLabel,\r\n  Button,\r\n  Chip,\r\n  Avatar,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  LinearProgress,\r\n  IconButton,\r\n  Tooltip,\r\n  Alert,\r\n  useTheme,\r\n  ToggleButton,\r\n  ToggleButtonGroup,\r\n} from '@mui/material';\r\nimport {\r\n  TrendingUp,\r\n  TrendingDown,\r\n  Visibility,\r\n  ThumbUp,\r\n  Comment,\r\n  Share,\r\n  AttachMoney,\r\n  Schedule,\r\n  PlayArrow,\r\n  Download,\r\n  Refresh,\r\n  FilterList,\r\n  CalendarToday,\r\n  YouTube,\r\n  Analytics as AnalyticsIcon,\r\n  CompareArrows,\r\n  StarRate,\r\n} from '@mui/icons-material';\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  AreaChart,\r\n  Area,\r\n  BarChart,\r\n  Bar,\r\n  PieChart,\r\n  Pie,\r\n  Cell,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip as RechartsTooltip,\r\n  Legend,\r\n  ResponsiveContainer,\r\n  ComposedChart,\r\n  Scatter,\r\n} from 'recharts';\r\nimport { format, subDays, subMonths, isWithinInterval } from 'date-fns';\r\n\r\n// Mock data for analytics\r\nconst mockViewsData = [\r\n  { date: '2024-01-01', views: 12000, subscribers: 850, revenue: 120, engagement: 8.2 },\r\n  { date: '2024-01-02', views: 15000, subscribers: 1200, revenue: 180, engagement: 9.1 },\r\n  { date: '2024-01-03', views: 13500, subscribers: 980, revenue: 145, engagement: 7.8 },\r\n  { date: '2024-01-04', views: 18000, subscribers: 1500, revenue: 220, engagement: 8.9 },\r\n  { date: '2024-01-05', views: 22000, subscribers: 1800, revenue: 280, engagement: 9.5 },\r\n  { date: '2024-01-06', views: 19000, subscribers: 1600, revenue: 245, engagement: 8.7 },\r\n  { date: '2024-01-07', views: 21000, subscribers: 1900, revenue: 265, engagement: 9.2 },\r\n  { date: '2024-01-08', views: 24000, subscribers: 2100, revenue: 320, engagement: 9.8 },\r\n  { date: '2024-01-09', views: 26500, subscribers: 2300, revenue: 355, engagement: 10.1 },\r\n  { date: '2024-01-10', views: 23000, subscribers: 2000, revenue: 295, engagement: 8.9 },\r\n  { date: '2024-01-11', views: 28000, subscribers: 2500, revenue: 385, engagement: 10.4 },\r\n  { date: '2024-01-12', views: 31000, subscribers: 2800, revenue: 420, engagement: 11.2 },\r\n  { date: '2024-01-13', views: 29500, subscribers: 2650, revenue: 395, engagement: 10.8 },\r\n  { date: '2024-01-14', views: 33000, subscribers: 3000, revenue: 450, engagement: 11.5 },\r\n];\r\n\r\nconst mockTopVideos = [\r\n  {\r\n    id: 1,\r\n    title: \"10 AI Tools Every YouTuber Needs in 2024\",\r\n    thumbnail: \"/api/placeholder/120/68\",\r\n    views: 145000,\r\n    likes: 8900,\r\n    comments: 1200,\r\n    duration: \"12:45\",\r\n    uploadDate: \"2024-01-10\",\r\n    revenue: 1250,\r\n    ctr: 12.5,\r\n    avgViewDuration: 8.2,\r\n    engagement: 6.8,\r\n  },\r\n  {\r\n    id: 2,\r\n    title: \"How I Automated My Entire YouTube Channel\",\r\n    thumbnail: \"/api/placeholder/120/68\",\r\n    views: 98000,\r\n    likes: 5600,\r\n    comments: 890,\r\n    duration: \"15:30\",\r\n    uploadDate: \"2024-01-08\",\r\n    revenue: 890,\r\n    ctr: 9.8,\r\n    avgViewDuration: 10.2,\r\n    engagement: 7.2,\r\n  },\r\n  {\r\n    id: 3,\r\n    title: \"AI vs Human: Content Creation Showdown\",\r\n    thumbnail: \"/api/placeholder/120/68\",\r\n    views: 87000,\r\n    likes: 4800,\r\n    comments: 650,\r\n    duration: \"18:20\",\r\n    uploadDate: \"2024-01-05\",\r\n    revenue: 750,\r\n    ctr: 11.2,\r\n    avgViewDuration: 12.1,\r\n    engagement: 6.1,\r\n  },\r\n  {\r\n    id: 4,\r\n    title: \"Building a Million Dollar YouTube Empire\",\r\n    thumbnail: \"/api/placeholder/120/68\",\r\n    views: 156000,\r\n    likes: 12000,\r\n    comments: 2100,\r\n    duration: \"22:15\",\r\n    uploadDate: \"2024-01-03\",\r\n    revenue: 1680,\r\n    ctr: 8.9,\r\n    avgViewDuration: 15.8,\r\n    engagement: 8.9,\r\n  },\r\n  {\r\n    id: 5,\r\n    title: \"YouTube Algorithm Secrets Revealed\",\r\n    thumbnail: \"/api/placeholder/120/68\",\r\n    views: 203000,\r\n    likes: 15600,\r\n    comments: 2800,\r\n    duration: \"16:40\",\r\n    uploadDate: \"2024-01-01\",\r\n    revenue: 2180,\r\n    ctr: 14.2,\r\n    avgViewDuration: 11.5,\r\n    engagement: 9.4,\r\n  },\r\n];\r\n\r\nconst mockChannelData = [\r\n  { name: 'Tech Reviews', subscribers: 125000, views: 2400000, revenue: 8500, growth: 12.5, color: '#8884d8' },\r\n  { name: 'Gaming Central', subscribers: 89000, views: 1800000, revenue: 6200, growth: 8.3, color: '#82ca9d' },\r\n  { name: 'Lifestyle Vlog', subscribers: 67000, views: 980000, revenue: 3400, growth: -2.1, color: '#ffc658' },\r\n  { name: 'Educational Hub', subscribers: 156000, views: 3200000, revenue: 12000, growth: 18.9, color: '#ff7c7c' },\r\n  { name: 'Music Covers', subscribers: 34000, views: 450000, revenue: 1200, growth: 5.7, color: '#8dd1e1' },\r\n];\r\n\r\nconst mockAudienceData = [\r\n  { ageGroup: '13-17', percentage: 15, male: 8, female: 7 },\r\n  { ageGroup: '18-24', percentage: 35, male: 20, female: 15 },\r\n  { ageGroup: '25-34', percentage: 28, male: 16, female: 12 },\r\n  { ageGroup: '35-44', percentage: 15, male: 9, female: 6 },\r\n  { ageGroup: '45-54', percentage: 5, male: 3, female: 2 },\r\n  { ageGroup: '55+', percentage: 2, male: 1, female: 1 },\r\n];\r\n\r\ninterface AnalyticsMetrics {\r\n  totalViews: number;\r\n  totalSubscribers: number;\r\n  totalRevenue: number;\r\n  avgEngagement: number;\r\n  totalVideos: number;\r\n  avgCTR: number;\r\n  avgViewDuration: number;\r\n  totalWatchTime: number;\r\n}\r\n\r\nexport const Analytics: React.FC = () => {\r\n  const theme = useTheme();\r\n  const [selectedChannel, setSelectedChannel] = useState<string>('all');\r\n  const [dateRange, setDateRange] = useState<string>('30d');\r\n  const [viewType, setViewType] = useState<string>('views');\r\n  const [loading, setLoading] = useState(false);\r\n  const [metrics, setMetrics] = useState<AnalyticsMetrics>({\r\n    totalViews: 8850000,\r\n    totalSubscribers: 471000,\r\n    totalRevenue: 31300,\r\n    avgEngagement: 8.7,\r\n    totalVideos: 156,\r\n    avgCTR: 11.3,\r\n    avgViewDuration: 11.6,\r\n    totalWatchTime: 1250000,\r\n  });\r\n\r\n  const handleRefresh = async () => {\r\n    setLoading(true);\r\n    // Simulate API call\r\n    setTimeout(() => {\r\n      setLoading(false);\r\n    }, 2000);\r\n  };\r\n\r\n  const formatCurrency = (value: number) => {\r\n    return new Intl.NumberFormat('en-US', {\r\n      style: 'currency',\r\n      currency: 'USD',\r\n      minimumFractionDigits: 0,\r\n      maximumFractionDigits: 0,\r\n    }).format(value);\r\n  };\r\n\r\n  const formatNumber = (value: number) => {\r\n    if (value >= 1000000) {\r\n      return `${(value / 1000000).toFixed(1)}M`;\r\n    } else if (value >= 1000) {\r\n      return `${(value / 1000).toFixed(1)}K`;\r\n    }\r\n    return value.toString();\r\n  };\r\n\r\n  const formatDuration = (seconds: number) => {\r\n    const minutes = Math.floor(seconds / 60);\r\n    const secs = Math.floor(seconds % 60);\r\n    return `${minutes}:${secs.toString().padStart(2, '0')}`;\r\n  };\r\n\r\n  const getMetricIcon = (metric: string) => {\r\n    switch (metric) {\r\n      case 'views': return <Visibility />;\r\n      case 'subscribers': return <YouTube />;\r\n      case 'revenue': return <AttachMoney />;\r\n      case 'engagement': return <ThumbUp />;\r\n      default: return <AnalyticsIcon />;\r\n    }\r\n  };\r\n\r\n  const getChangeColor = (change: number) => {\r\n    return change > 0 ? 'success.main' : change < 0 ? 'error.main' : 'text.secondary';\r\n  };\r\n\r\n  const getChangeIcon = (change: number) => {\r\n    return change > 0 ? <TrendingUp /> : change < 0 ? <TrendingDown /> : null;\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ flexGrow: 1, p: 3 }}>\r\n      {/* Header */}\r\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\r\n        <Box>\r\n          <Typography variant=\"h4\" fontWeight=\"bold\" gutterBottom>\r\n            Analytics Dashboard\r\n          </Typography>\r\n          <Typography variant=\"body2\" color=\"text.secondary\">\r\n            Track performance across all your YouTube channels\r\n          </Typography>\r\n        </Box>\r\n        \r\n        <Box sx={{ display: 'flex', gap: 2, alignItems: 'center' }}>\r\n          <FormControl size=\"small\" sx={{ minWidth: 120 }}>\r\n            <InputLabel>Channel</InputLabel>\r\n            <Select\r\n              value={selectedChannel}\r\n              onChange={(e) => setSelectedChannel(e.target.value as string)}\r\n              label=\"Channel\"\r\n            >\r\n              <MenuItem value=\"all\">All Channels</MenuItem>\r\n              {mockChannelData.map((channel) => (\r\n                <MenuItem key={channel.name} value={channel.name}>\r\n                  {channel.name}\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n          </FormControl>\r\n\r\n          <ToggleButtonGroup\r\n            value={dateRange}\r\n            exclusive\r\n            onChange={(e, value) => value && setDateRange(value)}\r\n            size=\"small\"\r\n          >\r\n            <ToggleButton value=\"7d\">7D</ToggleButton>\r\n            <ToggleButton value=\"30d\">30D</ToggleButton>\r\n            <ToggleButton value=\"90d\">90D</ToggleButton>\r\n            <ToggleButton value=\"1y\">1Y</ToggleButton>\r\n          </ToggleButtonGroup>\r\n\r\n          <IconButton onClick={handleRefresh} disabled={loading}>\r\n            <Refresh />\r\n          </IconButton>\r\n\r\n          <Button variant=\"outlined\" startIcon={<Download />}>\r\n            Export\r\n          </Button>\r\n        </Box>\r\n      </Box>\r\n\r\n      {loading && <LinearProgress sx={{ mb: 3 }} />}\r\n\r\n      {/* Key Metrics Cards */}\r\n      <Grid container spacing={3} sx={{ mb: 3 }}>\r\n        {[\r\n          { \r\n            title: 'Total Views', \r\n            value: formatNumber(metrics.totalViews), \r\n            change: +15.2, \r\n            metric: 'views' \r\n          },\r\n          { \r\n            title: 'Subscribers', \r\n            value: formatNumber(metrics.totalSubscribers), \r\n            change: +8.7, \r\n            metric: 'subscribers' \r\n          },\r\n          { \r\n            title: 'Revenue', \r\n            value: formatCurrency(metrics.totalRevenue), \r\n            change: +12.3, \r\n            metric: 'revenue' \r\n          },\r\n          { \r\n            title: 'Avg Engagement', \r\n            value: `${metrics.avgEngagement}%`, \r\n            change: +2.1, \r\n            metric: 'engagement' \r\n          },\r\n        ].map((item, index) => (\r\n          <Grid item xs={12} sm={6} md={3} key={index}>\r\n            <Card sx={{ height: '100%' }}>\r\n              <CardContent>\r\n                <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 2 }}>\r\n                  <Typography variant=\"body2\" color=\"text.secondary\">\r\n                    {item.title}\r\n                  </Typography>\r\n                  {getMetricIcon(item.metric)}\r\n                </Box>\r\n                <Typography variant=\"h4\" fontWeight=\"bold\" gutterBottom>\r\n                  {item.value}\r\n                </Typography>\r\n                <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                  {getChangeIcon(item.change)}\r\n                  <Typography \r\n                    variant=\"body2\" \r\n                    color={getChangeColor(item.change)}\r\n                    sx={{ ml: 0.5 }}\r\n                  >\r\n                    {item.change > 0 ? '+' : ''}{item.change}%\r\n                  </Typography>\r\n                  <Typography variant=\"body2\" color=\"text.secondary\" sx={{ ml: 1 }}>\r\n                    vs last period\r\n                  </Typography>\r\n                </Box>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n\r\n      {/* Main Analytics Charts */}\r\n      <Grid container spacing={3} sx={{ mb: 3 }}>\r\n        {/* Performance Trends */}\r\n        <Grid item xs={12} lg={8}>\r\n          <Paper sx={{ p: 3, height: 400 }}>\r\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\r\n              <Typography variant=\"h6\">Performance Trends</Typography>\r\n              <ToggleButtonGroup\r\n                value={viewType}\r\n                exclusive\r\n                onChange={(e, value) => value && setViewType(value)}\r\n                size=\"small\"\r\n              >\r\n                <ToggleButton value=\"views\">Views</ToggleButton>\r\n                <ToggleButton value=\"subscribers\">Subscribers</ToggleButton>\r\n                <ToggleButton value=\"revenue\">Revenue</ToggleButton>\r\n                <ToggleButton value=\"engagement\">Engagement</ToggleButton>\r\n              </ToggleButtonGroup>\r\n            </Box>\r\n            <ResponsiveContainer width=\"100%\" height=\"90%\">\r\n              <ComposedChart data={mockViewsData}>\r\n                <CartesianGrid strokeDasharray=\"3 3\" />\r\n                <XAxis dataKey=\"date\" tickFormatter={(value) => format(new Date(value), 'MMM dd')} />\r\n                <YAxis yAxisId=\"left\" />\r\n                <YAxis yAxisId=\"right\" orientation=\"right\" />\r\n                <RechartsTooltip \r\n                  labelFormatter={(value) => format(new Date(value), 'PPP')}\r\n                  formatter={(value: any, name: string) => [\r\n                    name === 'revenue' ? formatCurrency(value) : formatNumber(value),\r\n                    name.charAt(0).toUpperCase() + name.slice(1)\r\n                  ]}\r\n                />\r\n                <Legend />\r\n                <Area\r\n                  yAxisId=\"left\"\r\n                  type=\"monotone\"\r\n                  dataKey={viewType}\r\n                  fill={theme.palette.primary.main}\r\n                  fillOpacity={0.3}\r\n                  stroke={theme.palette.primary.main}\r\n                  strokeWidth={2}\r\n                />\r\n                <Line\r\n                  yAxisId=\"right\"\r\n                  type=\"monotone\"\r\n                  dataKey=\"engagement\"\r\n                  stroke={theme.palette.secondary.main}\r\n                  strokeWidth={2}\r\n                  dot={{ r: 4 }}\r\n                />\r\n              </ComposedChart>\r\n            </ResponsiveContainer>\r\n          </Paper>\r\n        </Grid>\r\n\r\n        {/* Channel Performance */}\r\n        <Grid item xs={12} lg={4}>\r\n          <Paper sx={{ p: 3, height: 400 }}>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n              Channel Performance\r\n            </Typography>\r\n            <Box sx={{ height: '90%', overflowY: 'auto' }}>\r\n              {mockChannelData.map((channel, index) => (\r\n                <Box key={index} sx={{ mb: 2, p: 2, bgcolor: 'background.default', borderRadius: 1 }}>\r\n                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>\r\n                    <Typography variant=\"subtitle2\" fontWeight=\"bold\">\r\n                      {channel.name}\r\n                    </Typography>\r\n                    <Chip\r\n                      label={`${channel.growth > 0 ? '+' : ''}${channel.growth}%`}\r\n                      color={channel.growth > 0 ? 'success' : channel.growth < 0 ? 'error' : 'default'}\r\n                      size=\"small\"\r\n                    />\r\n                  </Box>\r\n                  <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\r\n                    {formatNumber(channel.subscribers)} subscribers • {formatNumber(channel.views)} views\r\n                  </Typography>\r\n                  <Typography variant=\"body2\" color=\"primary\" fontWeight=\"bold\">\r\n                    {formatCurrency(channel.revenue)} revenue\r\n                  </Typography>\r\n                  <LinearProgress\r\n                    variant=\"determinate\"\r\n                    value={Math.min((channel.revenue / 15000) * 100, 100)}\r\n                    sx={{ mt: 1, height: 6, borderRadius: 3 }}\r\n                    color={channel.growth > 0 ? 'success' : 'error'}\r\n                  />\r\n                </Box>\r\n              ))}\r\n            </Box>\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* Top Performing Videos */}\r\n      <Grid container spacing={3} sx={{ mb: 3 }}>\r\n        <Grid item xs={12}>\r\n          <Paper sx={{ p: 3 }}>\r\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\r\n              <Typography variant=\"h6\">Top Performing Videos</Typography>\r\n              <Button variant=\"outlined\" size=\"small\" startIcon={<CompareArrows />}>\r\n                Compare\r\n              </Button>\r\n            </Box>\r\n            <TableContainer>\r\n              <Table>\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell>Video</TableCell>\r\n                    <TableCell align=\"right\">Views</TableCell>\r\n                    <TableCell align=\"right\">Engagement</TableCell>\r\n                    <TableCell align=\"right\">CTR</TableCell>\r\n                    <TableCell align=\"right\">Avg Duration</TableCell>\r\n                    <TableCell align=\"right\">Revenue</TableCell>\r\n                    <TableCell align=\"right\">Upload Date</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {mockTopVideos.map((video) => (\r\n                    <TableRow key={video.id} hover>\r\n                      <TableCell>\r\n                        <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                          <Box\r\n                            sx={{\r\n                              width: 80,\r\n                              height: 45,\r\n                              bgcolor: 'grey.200',\r\n                              borderRadius: 1,\r\n                              mr: 2,\r\n                              display: 'flex',\r\n                              alignItems: 'center',\r\n                              justifyContent: 'center',\r\n                              position: 'relative',\r\n                            }}\r\n                          >\r\n                            <PlayArrow />\r\n                            <Typography\r\n                              variant=\"caption\"\r\n                              sx={{\r\n                                position: 'absolute',\r\n                                bottom: 2,\r\n                                right: 2,\r\n                                bgcolor: 'rgba(0,0,0,0.8)',\r\n                                color: 'white',\r\n                                px: 0.5,\r\n                                borderRadius: 0.5,\r\n                                fontSize: '0.7rem',\r\n                              }}\r\n                            >\r\n                              {video.duration}\r\n                            </Typography>\r\n                          </Box>\r\n                          <Box>\r\n                            <Typography variant=\"body2\" fontWeight=\"bold\" noWrap sx={{ maxWidth: 300 }}>\r\n                              {video.title}\r\n                            </Typography>\r\n                            <Box sx={{ display: 'flex', gap: 1, mt: 0.5 }}>\r\n                              <Typography variant=\"caption\" color=\"text.secondary\">\r\n                                {formatNumber(video.likes)} likes\r\n                              </Typography>\r\n                              <Typography variant=\"caption\" color=\"text.secondary\">\r\n                                {formatNumber(video.comments)} comments\r\n                              </Typography>\r\n                            </Box>\r\n                          </Box>\r\n                        </Box>\r\n                      </TableCell>\r\n                      <TableCell align=\"right\">\r\n                        <Typography variant=\"body2\" fontWeight=\"bold\">\r\n                          {formatNumber(video.views)}\r\n                        </Typography>\r\n                      </TableCell>\r\n                      <TableCell align=\"right\">\r\n                        <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'flex-end' }}>\r\n                          <Typography variant=\"body2\">\r\n                            {video.engagement}%\r\n                          </Typography>\r\n                          {video.engagement > 7 && <StarRate color=\"primary\" fontSize=\"small\" sx={{ ml: 0.5 }} />}\r\n                        </Box>\r\n                      </TableCell>\r\n                      <TableCell align=\"right\">\r\n                        <Typography variant=\"body2\">\r\n                          {video.ctr}%\r\n                        </Typography>\r\n                      </TableCell>\r\n                      <TableCell align=\"right\">\r\n                        <Typography variant=\"body2\">\r\n                          {formatDuration(video.avgViewDuration * 60)}\r\n                        </Typography>\r\n                      </TableCell>\r\n                      <TableCell align=\"right\">\r\n                        <Typography variant=\"body2\" color=\"success.main\" fontWeight=\"bold\">\r\n                          {formatCurrency(video.revenue)}\r\n                        </Typography>\r\n                      </TableCell>\r\n                      <TableCell align=\"right\">\r\n                        <Typography variant=\"body2\" color=\"text.secondary\">\r\n                          {format(new Date(video.uploadDate), 'MMM dd')}\r\n                        </Typography>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* Audience Demographics */}\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={12} md={6}>\r\n          <Paper sx={{ p: 3, height: 400 }}>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n              Audience Demographics\r\n            </Typography>\r\n            <ResponsiveContainer width=\"100%\" height=\"90%\">\r\n              <BarChart data={mockAudienceData}>\r\n                <CartesianGrid strokeDasharray=\"3 3\" />\r\n                <XAxis dataKey=\"ageGroup\" />\r\n                <YAxis />\r\n                <RechartsTooltip />\r\n                <Legend />\r\n                <Bar dataKey=\"male\" stackId=\"gender\" fill=\"#8884d8\" name=\"Male\" />\r\n                <Bar dataKey=\"female\" stackId=\"gender\" fill=\"#82ca9d\" name=\"Female\" />\r\n              </BarChart>\r\n            </ResponsiveContainer>\r\n          </Paper>\r\n        </Grid>\r\n\r\n        <Grid item xs={12} md={6}>\r\n          <Paper sx={{ p: 3, height: 400 }}>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n              Revenue Sources\r\n            </Typography>\r\n            <ResponsiveContainer width=\"100%\" height=\"90%\">\r\n              <PieChart>\r\n                <Pie\r\n                  data={[\r\n                    { name: 'Ad Revenue', value: 65, color: '#8884d8' },\r\n                    { name: 'Sponsorships', value: 25, color: '#82ca9d' },\r\n                    { name: 'Merchandise', value: 7, color: '#ffc658' },\r\n                    { name: 'Channel Memberships', value: 3, color: '#ff7c7c' },\r\n                  ]}\r\n                  cx=\"50%\"\r\n                  cy=\"50%\"\r\n                  labelLine={false}\r\n                  label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\r\n                  outerRadius={80}\r\n                  fill=\"#8884d8\"\r\n                  dataKey=\"value\"\r\n                >\r\n                  {[\r\n                    { name: 'Ad Revenue', value: 65, color: '#8884d8' },\r\n                    { name: 'Sponsorships', value: 25, color: '#82ca9d' },\r\n                    { name: 'Merchandise', value: 7, color: '#ffc658' },\r\n                    { name: 'Channel Memberships', value: 3, color: '#ff7c7c' },\r\n                  ].map((entry, index) => (\r\n                    <Cell key={`cell-${index}`} fill={entry.color} />\r\n                  ))}\r\n                </Pie>\r\n                <RechartsTooltip />\r\n              </PieChart>\r\n            </ResponsiveContainer>\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Analytics;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\pages\\Analytics\\AnalyticsDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\pages\\Analytics\\BusinessIntelligence.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\pages\\Auth\\Login.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Card' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CardContent' is defined but never used.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":120,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":120,"endColumn":19}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Login Screen Component\r\n * Production-ready login form with Material-UI styling\r\n */\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useNavigate, Link as RouterLink, useLocation } from 'react-router-dom';\r\nimport {\r\n  Box,\r\n  Card,\r\n  CardContent,\r\n  TextField,\r\n  Button,\r\n  Typography,\r\n  Alert,\r\n  IconButton,\r\n  InputAdornment,\r\n  Divider,\r\n  Link,\r\n  CircularProgress,\r\n  Container,\r\n  Paper,\r\n  Grid,\r\n  useTheme,\r\n} from '@mui/material';\r\nimport {\r\n  Visibility,\r\n  VisibilityOff,\r\n  Email,\r\n  Lock,\r\n  Login as LoginIcon,\r\n  Google,\r\n  GitHub,\r\n  YouTube,\r\n  TrendingUp,\r\n  VideoLibrary,\r\n  AutoAwesome,\r\n} from '@mui/icons-material';\r\nimport { useAuthStore } from '../../stores/authStore';\r\n\r\ninterface LocationState {\r\n  from?: {\r\n    pathname: string;\r\n  };\r\n  message?: string;\r\n}\r\n\r\nexport const Login: React.FC = () => {\r\n  const theme = useTheme();\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const state = location.state as LocationState;\r\n\r\n  const { login, isLoading, error, clearError, isAuthenticated } = useAuthStore();\r\n\r\n  const [formData, setFormData] = useState({\r\n    email: '',\r\n    password: '',\r\n  });\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const [formErrors, setFormErrors] = useState<{[key: string]: string}>({});\r\n\r\n  // Redirect if already authenticated\r\n  useEffect(() => {\r\n    if (isAuthenticated) {\r\n      const from = state?.from?.pathname || '/dashboard';\r\n      navigate(from, { replace: true });\r\n    }\r\n  }, [isAuthenticated, navigate, state]);\r\n\r\n  // Clear errors when component mounts\r\n  useEffect(() => {\r\n    clearError();\r\n  }, [clearError]);\r\n\r\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { name, value } = event.target;\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      [name]: value,\r\n    }));\r\n    \r\n    // Clear field error when user starts typing\r\n    if (formErrors[name]) {\r\n      setFormErrors(prev => ({\r\n        ...prev,\r\n        [name]: '',\r\n      }));\r\n    }\r\n  };\r\n\r\n  const validateForm = () => {\r\n    const errors: {[key: string]: string} = {};\r\n\r\n    if (!formData.email) {\r\n      errors.email = 'Email is required';\r\n    } else if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(formData.email)) {\r\n      errors.email = 'Please enter a valid email address';\r\n    }\r\n\r\n    if (!formData.password) {\r\n      errors.password = 'Password is required';\r\n    } else if (formData.password.length < 6) {\r\n      errors.password = 'Password must be at least 6 characters';\r\n    }\r\n\r\n    setFormErrors(errors);\r\n    return Object.keys(errors).length === 0;\r\n  };\r\n\r\n  const handleSubmit = async (event: React.FormEvent) => {\r\n    event.preventDefault();\r\n    \r\n    if (!validateForm()) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await login(formData.email, formData.password);\r\n      // Navigation will be handled by useEffect when isAuthenticated changes\r\n    } catch (error) {\r\n      // Error is handled by the store\r\n    }\r\n  };\r\n\r\n  const handleTogglePassword = () => {\r\n    setShowPassword(prev => !prev);\r\n  };\r\n\r\n  // Mock social login handlers\r\n  const handleGoogleLogin = () => {\r\n    // TODO: Implement Google OAuth\r\n    console.log('Google login not implemented yet');\r\n  };\r\n\r\n  const handleGitHubLogin = () => {\r\n    // TODO: Implement GitHub OAuth\r\n    console.log('GitHub login not implemented yet');\r\n  };\r\n\r\n  const features = [\r\n    {\r\n      icon: <VideoLibrary color=\"primary\" />,\r\n      title: \"Automated Video Creation\",\r\n      description: \"AI-powered content generation for YouTube channels\"\r\n    },\r\n    {\r\n      icon: <TrendingUp color=\"success\" />,\r\n      title: \"Performance Analytics\",\r\n      description: \"Track views, engagement, and revenue in real-time\"\r\n    },\r\n    {\r\n      icon: <AutoAwesome color=\"warning\" />,\r\n      title: \"Smart Optimization\",\r\n      description: \"AI-driven thumbnail and title optimization\"\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\" sx={{ minHeight: '100vh', display: 'flex', alignItems: 'center' }}>\r\n      <Grid container spacing={4} sx={{ width: '100%' }}>\r\n        {/* Left side - Branding and Features */}\r\n        <Grid item xs={12} md={6}>\r\n          <Box sx={{ pr: { md: 4 } }}>\r\n            <Box sx={{ mb: 4 }}>\r\n              <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\r\n                <YouTube sx={{ fontSize: 40, color: '#FF0000', mr: 2 }} />\r\n                <Typography variant=\"h3\" fontWeight=\"bold\" color=\"primary\">\r\n                  YTEmpire\r\n                </Typography>\r\n              </Box>\r\n              <Typography variant=\"h5\" color=\"text.secondary\" gutterBottom>\r\n                Scale Your YouTube Success with AI\r\n              </Typography>\r\n              <Typography variant=\"body1\" color=\"text.secondary\" sx={{ mb: 4 }}>\r\n                The all-in-one platform for automated YouTube content creation, \r\n                analytics, and channel management. Join thousands of creators \r\n                who've scaled their channels with our AI-powered tools.\r\n              </Typography>\r\n            </Box>\r\n\r\n            {/* Feature highlights */}\r\n            <Box sx={{ display: { xs: 'none', md: 'block' } }}>\r\n              {features.map((feature, index) => (\r\n                <Box key={index} sx={{ display: 'flex', mb: 3, alignItems: 'flex-start' }}>\r\n                  <Box sx={{ mr: 2, mt: 0.5 }}>\r\n                    {feature.icon}\r\n                  </Box>\r\n                  <Box>\r\n                    <Typography variant=\"h6\" gutterBottom>\r\n                      {feature.title}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                      {feature.description}\r\n                    </Typography>\r\n                  </Box>\r\n                </Box>\r\n              ))}\r\n            </Box>\r\n          </Box>\r\n        </Grid>\r\n\r\n        {/* Right side - Login Form */}\r\n        <Grid item xs={12} md={6}>\r\n          <Paper \r\n            elevation={8}\r\n            sx={{ \r\n              p: 4, \r\n              borderRadius: 3,\r\n              background: theme.palette.mode === 'dark' \r\n                ? 'rgba(255, 255, 255, 0.05)' \r\n                : 'rgba(255, 255, 255, 0.9)',\r\n              backdropFilter: 'blur(10px)',\r\n            }}\r\n          >\r\n            <Box sx={{ textAlign: 'center', mb: 4 }}>\r\n              <LoginIcon sx={{ fontSize: 48, color: 'primary.main', mb: 2 }} />\r\n              <Typography variant=\"h4\" fontWeight=\"bold\" gutterBottom>\r\n                Welcome Back\r\n              </Typography>\r\n              <Typography variant=\"body2\" color=\"text.secondary\">\r\n                Sign in to your YTEmpire account\r\n              </Typography>\r\n            </Box>\r\n\r\n            {/* Redirect message */}\r\n            {state?.message && (\r\n              <Alert severity=\"info\" sx={{ mb: 3 }}>\r\n                {state.message}\r\n              </Alert>\r\n            )}\r\n\r\n            {/* Error Alert */}\r\n            {error && (\r\n              <Alert \r\n                severity=\"error\" \r\n                sx={{ mb: 3 }}\r\n                onClose={clearError}\r\n              >\r\n                {error}\r\n              </Alert>\r\n            )}\r\n\r\n            {/* Login Form */}\r\n            <form onSubmit={handleSubmit}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Email Address\"\r\n                name=\"email\"\r\n                type=\"email\"\r\n                value={formData.email}\r\n                onChange={handleInputChange}\r\n                error={!!formErrors.email}\r\n                helperText={formErrors.email}\r\n                margin=\"normal\"\r\n                InputProps={{\r\n                  startAdornment: (\r\n                    <InputAdornment position=\"start\">\r\n                      <Email color=\"action\" />\r\n                    </InputAdornment>\r\n                  ),\r\n                }}\r\n                disabled={isLoading}\r\n                autoComplete=\"email\"\r\n                autoFocus\r\n              />\r\n\r\n              <TextField\r\n                fullWidth\r\n                label=\"Password\"\r\n                name=\"password\"\r\n                type={showPassword ? 'text' : 'password'}\r\n                value={formData.password}\r\n                onChange={handleInputChange}\r\n                error={!!formErrors.password}\r\n                helperText={formErrors.password}\r\n                margin=\"normal\"\r\n                InputProps={{\r\n                  startAdornment: (\r\n                    <InputAdornment position=\"start\">\r\n                      <Lock color=\"action\" />\r\n                    </InputAdornment>\r\n                  ),\r\n                  endAdornment: (\r\n                    <InputAdornment position=\"end\">\r\n                      <IconButton\r\n                        onClick={handleTogglePassword}\r\n                        edge=\"end\"\r\n                        disabled={isLoading}\r\n                      >\r\n                        {showPassword ? <VisibilityOff /> : <Visibility />}\r\n                      </IconButton>\r\n                    </InputAdornment>\r\n                  ),\r\n                }}\r\n                disabled={isLoading}\r\n                autoComplete=\"current-password\"\r\n              />\r\n\r\n              <Button\r\n                type=\"submit\"\r\n                fullWidth\r\n                variant=\"contained\"\r\n                size=\"large\"\r\n                disabled={isLoading}\r\n                sx={{ \r\n                  mt: 3, \r\n                  mb: 2,\r\n                  py: 1.5,\r\n                  borderRadius: 2,\r\n                  textTransform: 'none',\r\n                  fontSize: '1.1rem',\r\n                  fontWeight: 600,\r\n                }}\r\n                startIcon={isLoading ? <CircularProgress size={20} /> : <LoginIcon />}\r\n              >\r\n                {isLoading ? 'Signing In...' : 'Sign In'}\r\n              </Button>\r\n            </form>\r\n\r\n            <Box sx={{ textAlign: 'center', mt: 2 }}>\r\n              <Link\r\n                component={RouterLink}\r\n                to=\"/forgot-password\"\r\n                variant=\"body2\"\r\n                sx={{ textDecoration: 'none' }}\r\n              >\r\n                Forgot your password?\r\n              </Link>\r\n            </Box>\r\n\r\n            <Divider sx={{ my: 3 }}>\r\n              <Typography variant=\"body2\" color=\"text.secondary\">\r\n                or continue with\r\n              </Typography>\r\n            </Divider>\r\n\r\n            {/* Social Login Buttons */}\r\n            <Box sx={{ display: 'flex', gap: 2, mb: 3 }}>\r\n              <Button\r\n                fullWidth\r\n                variant=\"outlined\"\r\n                startIcon={<Google />}\r\n                onClick={handleGoogleLogin}\r\n                disabled={isLoading}\r\n                sx={{ textTransform: 'none' }}\r\n              >\r\n                Google\r\n              </Button>\r\n              <Button\r\n                fullWidth\r\n                variant=\"outlined\"\r\n                startIcon={<GitHub />}\r\n                onClick={handleGitHubLogin}\r\n                disabled={isLoading}\r\n                sx={{ textTransform: 'none' }}\r\n              >\r\n                GitHub\r\n              </Button>\r\n            </Box>\r\n\r\n            <Divider />\r\n\r\n            <Box sx={{ textAlign: 'center', mt: 3 }}>\r\n              <Typography variant=\"body2\" color=\"text.secondary\">\r\n                Don't have an account?{' '}\r\n                <Link\r\n                  component={RouterLink}\r\n                  to=\"/register\"\r\n                  variant=\"body2\"\r\n                  sx={{ fontWeight: 600, textDecoration: 'none' }}\r\n                >\r\n                  Sign up for free\r\n                </Link>\r\n              </Typography>\r\n            </Box>\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Login;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\pages\\Auth\\LoginPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'api' is defined but never used.","line":33,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":13},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":45,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[966,969],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[966,969],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":55,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1311,1314],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1311,1314],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":60,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1408,1411],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1408,1411],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Login Page Component\n * P0 Task: Authentication Flow UI\n */\nimport React, { useState } from 'react';\nimport { useNavigate, Link } from 'react-router-dom';\nimport {\n  Box,\n  Paper,\n  TextField,\n  Button,\n  Typography,\n  Alert,\n  InputAdornment,\n  IconButton,\n  Divider,\n  Checkbox,\n  FormControlLabel,\n  CircularProgress,\n  Container,\n  Grid,\n} from '@mui/material';\nimport {\n  Email,\n  Lock,\n  Visibility,\n  VisibilityOff,\n  Google,\n  GitHub,\n  PlayCircle,\n} from '@mui/icons-material';\nimport { useAuthStore } from '../../stores/authStore';\nimport { api } from '../../services/api';\n\nexport const LoginPage: React.FC = () => {\n  const navigate = useNavigate();\n  const { login, loginWithGoogle, loading, error } = useAuthStore();\n  \n  const [formData, setFormData] = useState({\n    email: '',\n    password: '',\n    rememberMe: false,\n  });\n  const [showPassword, setShowPassword] = useState(false);\n  const [validationErrors, setValidationErrors] = useState<any>({});\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value, checked } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: name === 'rememberMe' ? checked : value,\n    }));\n    // Clear validation error for this field\n    if (validationErrors[name]) {\n      setValidationErrors((prev: any) => ({ ...prev, [name]: '' }));\n    }\n  };\n\n  const validateForm = () => {\n    const errors: any = {};\n    \n    if (!formData.email) {\n      errors.email = 'Email is required';\n    } else if (!/\\S+@\\S+\\.\\S+/.test(formData.email)) {\n      errors.email = 'Email is invalid';\n    }\n    \n    if (!formData.password) {\n      errors.password = 'Password is required';\n    } else if (formData.password.length < 6) {\n      errors.password = 'Password must be at least 6 characters';\n    }\n    \n    setValidationErrors(errors);\n    return Object.keys(errors).length === 0;\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!validateForm()) return;\n    \n    try {\n      await login(formData.email, formData.password, formData.rememberMe);\n      navigate('/dashboard');\n    } catch (err) {\n      console.error('Login failed:', err);\n    }\n  };\n\n  const handleGoogleLogin = async () => {\n    try {\n      await loginWithGoogle();\n      navigate('/dashboard');\n    } catch (err) {\n      console.error('Google login failed:', err);\n    }\n  };\n\n  const handleDemoLogin = async () => {\n    setFormData({\n      email: 'demo@ytempire.com',\n      password: 'demo123',\n      rememberMe: false,\n    });\n    try {\n      await login('demo@ytempire.com', 'demo123', false);\n      navigate('/dashboard');\n    } catch (err) {\n      console.error('Demo login failed:', err);\n    }\n  };\n\n  return (\n    <Container component=\"main\" maxWidth=\"sm\">\n      <Box\n        sx={{\n          minHeight: '100vh',\n          display: 'flex',\n          flexDirection: 'column',\n          justifyContent: 'center',\n          py: 4,\n        }}\n      >\n        <Paper\n          elevation={3}\n          sx={{\n            p: 4,\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            borderRadius: 2,\n          }}\n        >\n          {/* Logo and Title */}\n          <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n            <PlayCircle sx={{ fontSize: 40, mr: 1, color: 'primary.main' }} />\n            <Typography component=\"h1\" variant=\"h4\" fontWeight=\"bold\">\n              YTEmpire\n            </Typography>\n          </Box>\n          \n          <Typography variant=\"h5\" gutterBottom>\n            Welcome Back\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 3 }}>\n            Sign in to continue to your dashboard\n          </Typography>\n\n          {/* Error Alert */}\n          {error && (\n            <Alert severity=\"error\" sx={{ width: '100%', mb: 2 }}>\n              {error}\n            </Alert>\n          )}\n\n          {/* Login Form */}\n          <Box component=\"form\" onSubmit={handleSubmit} sx={{ width: '100%' }}>\n            <TextField\n              fullWidth\n              label=\"Email Address\"\n              name=\"email\"\n              type=\"email\"\n              value={formData.email}\n              onChange={handleChange}\n              error={!!validationErrors.email}\n              helperText={validationErrors.email}\n              margin=\"normal\"\n              required\n              autoComplete=\"email\"\n              autoFocus\n              InputProps={{\n                startAdornment: (\n                  <InputAdornment position=\"start\">\n                    <Email color=\"action\" />\n                  </InputAdornment>\n                ),\n              }}\n            />\n\n            <TextField\n              fullWidth\n              label=\"Password\"\n              name=\"password\"\n              type={showPassword ? 'text' : 'password'}\n              value={formData.password}\n              onChange={handleChange}\n              error={!!validationErrors.password}\n              helperText={validationErrors.password}\n              margin=\"normal\"\n              required\n              autoComplete=\"current-password\"\n              InputProps={{\n                startAdornment: (\n                  <InputAdornment position=\"start\">\n                    <Lock color=\"action\" />\n                  </InputAdornment>\n                ),\n                endAdornment: (\n                  <InputAdornment position=\"end\">\n                    <IconButton\n                      onClick={() => setShowPassword(!showPassword)}\n                      edge=\"end\"\n                      size=\"small\"\n                    >\n                      {showPassword ? <VisibilityOff /> : <Visibility />}\n                    </IconButton>\n                  </InputAdornment>\n                ),\n              }}\n            />\n\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mt: 1 }}>\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    name=\"rememberMe\"\n                    checked={formData.rememberMe}\n                    onChange={handleChange}\n                    color=\"primary\"\n                  />\n                }\n                label=\"Remember me\"\n              />\n              <Link to=\"/auth/forgot-password\" style={{ textDecoration: 'none' }}>\n                <Typography variant=\"body2\" color=\"primary\">\n                  Forgot password?\n                </Typography>\n              </Link>\n            </Box>\n\n            <Button\n              type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              size=\"large\"\n              sx={{ mt: 3, mb: 2 }}\n              disabled={loading}\n            >\n              {loading ? <CircularProgress size={24} /> : 'Sign In'}\n            </Button>\n\n            <Divider sx={{ my: 3 }}>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Or continue with\n              </Typography>\n            </Divider>\n\n            {/* Social Login Buttons */}\n            <Grid container spacing={2}>\n              <Grid item xs={6}>\n                <Button\n                  fullWidth\n                  variant=\"outlined\"\n                  startIcon={<Google />}\n                  onClick={handleGoogleLogin}\n                  disabled={loading}\n                  sx={{ textTransform: 'none' }}\n                >\n                  Google\n                </Button>\n              </Grid>\n              <Grid item xs={6}>\n                <Button\n                  fullWidth\n                  variant=\"outlined\"\n                  startIcon={<GitHub />}\n                  disabled={loading}\n                  sx={{ textTransform: 'none' }}\n                >\n                  GitHub\n                </Button>\n              </Grid>\n            </Grid>\n\n            {/* Demo Account Button */}\n            <Button\n              fullWidth\n              variant=\"text\"\n              color=\"secondary\"\n              onClick={handleDemoLogin}\n              disabled={loading}\n              sx={{ mt: 2, textTransform: 'none' }}\n            >\n              Try Demo Account\n            </Button>\n\n            {/* Sign Up Link */}\n            <Box sx={{ textAlign: 'center', mt: 3 }}>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Don't have an account?{' '}\n                <Link to=\"/auth/register\" style={{ textDecoration: 'none' }}>\n                  <Typography component=\"span\" variant=\"body2\" color=\"primary\">\n                    Sign up for free\n                  </Typography>\n                </Link>\n              </Typography>\n            </Box>\n          </Box>\n        </Paper>\n\n        {/* Footer */}\n        <Box sx={{ textAlign: 'center', mt: 4 }}>\n          <Typography variant=\"caption\" color=\"text.secondary\">\n            By signing in, you agree to our{' '}\n            <Link to=\"/terms\" style={{ color: 'inherit' }}>\n              Terms of Service\n            </Link>{' '}\n            and{' '}\n            <Link to=\"/privacy\" style={{ color: 'inherit' }}>\n              Privacy Policy\n            </Link>\n          </Typography>\n        </Box>\n      </Box>\n    </Container>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\pages\\Auth\\Register.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Check' is defined but never used.","line":39,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":8},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\[.","line":105,"column":26,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":105,"endColumn":27,"suggestions":[{"messageId":"removeEscape","fix":{"range":[2589,2590],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[2589,2589],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\/.","line":105,"column":43,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":105,"endColumn":44,"suggestions":[{"messageId":"removeEscape","fix":{"range":[2606,2607],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[2606,2606],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":194,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":194,"endColumn":19}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Register Screen Component\r\n * Production-ready registration form with Material-UI styling\r\n */\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useNavigate, Link as RouterLink } from 'react-router-dom';\r\nimport {\r\n  Box,\r\n  Card,\r\n  CardContent,\r\n  TextField,\r\n  Button,\r\n  Typography,\r\n  Alert,\r\n  IconButton,\r\n  InputAdornment,\r\n  Divider,\r\n  Link,\r\n  CircularProgress,\r\n  Container,\r\n  Paper,\r\n  Grid,\r\n  useTheme,\r\n  Checkbox,\r\n  FormControlLabel,\r\n  LinearProgress,\r\n  Chip,\r\n} from '@mui/material';\r\nimport {\r\n  Visibility,\r\n  VisibilityOff,\r\n  Email,\r\n  Lock,\r\n  Person,\r\n  PersonAdd,\r\n  Google,\r\n  GitHub,\r\n  YouTube,\r\n  Check,\r\n  Close,\r\n  Security,\r\n  Stars,\r\n  Rocket,\r\n} from '@mui/icons-material';\r\nimport { useAuthStore } from '../../stores/authStore';\r\n\r\ninterface PasswordStrength {\r\n  score: number;\r\n  feedback: string[];\r\n  color: 'error' | 'warning' | 'info' | 'success';\r\n}\r\n\r\nexport const Register: React.FC = () => {\r\n  const theme = useTheme();\r\n  const navigate = useNavigate();\r\n  const { register, isLoading, error, clearError, isAuthenticated } = useAuthStore();\r\n\r\n  const [formData, setFormData] = useState({\r\n    email: '',\r\n    username: '',\r\n    full_name: '',\r\n    password: '',\r\n    confirmPassword: '',\r\n  });\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\r\n  const [formErrors, setFormErrors] = useState<{[key: string]: string}>({});\r\n  const [acceptedTerms, setAcceptedTerms] = useState(false);\r\n  const [acceptedPrivacy, setAcceptedPrivacy] = useState(false);\r\n  const [passwordStrength, setPasswordStrength] = useState<PasswordStrength>({\r\n    score: 0,\r\n    feedback: [],\r\n    color: 'error',\r\n  });\r\n\r\n  // Redirect if already authenticated\r\n  useEffect(() => {\r\n    if (isAuthenticated) {\r\n      navigate('/dashboard', { replace: true });\r\n    }\r\n  }, [isAuthenticated, navigate]);\r\n\r\n  // Clear errors when component mounts\r\n  useEffect(() => {\r\n    clearError();\r\n  }, [clearError]);\r\n\r\n  // Password strength checker\r\n  const checkPasswordStrength = (password: string): PasswordStrength => {\r\n    let score = 0;\r\n    const feedback: string[] = [];\r\n\r\n    if (password.length >= 8) score += 1;\r\n    else feedback.push('At least 8 characters');\r\n\r\n    if (/[a-z]/.test(password)) score += 1;\r\n    else feedback.push('Lowercase letter');\r\n\r\n    if (/[A-Z]/.test(password)) score += 1;\r\n    else feedback.push('Uppercase letter');\r\n\r\n    if (/\\d/.test(password)) score += 1;\r\n    else feedback.push('Number');\r\n\r\n    if (/[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]/.test(password)) score += 1;\r\n    else feedback.push('Special character');\r\n\r\n    let color: 'error' | 'warning' | 'info' | 'success' = 'error';\r\n    if (score >= 4) color = 'success';\r\n    else if (score >= 3) color = 'info';\r\n    else if (score >= 2) color = 'warning';\r\n\r\n    return { score, feedback, color };\r\n  };\r\n\r\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { name, value } = event.target;\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      [name]: value,\r\n    }));\r\n    \r\n    // Clear field error when user starts typing\r\n    if (formErrors[name]) {\r\n      setFormErrors(prev => ({\r\n        ...prev,\r\n        [name]: '',\r\n      }));\r\n    }\r\n\r\n    // Check password strength\r\n    if (name === 'password') {\r\n      setPasswordStrength(checkPasswordStrength(value));\r\n    }\r\n  };\r\n\r\n  const validateForm = () => {\r\n    const errors: {[key: string]: string} = {};\r\n\r\n    if (!formData.email) {\r\n      errors.email = 'Email is required';\r\n    } else if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(formData.email)) {\r\n      errors.email = 'Please enter a valid email address';\r\n    }\r\n\r\n    if (!formData.username) {\r\n      errors.username = 'Username is required';\r\n    } else if (formData.username.length < 3) {\r\n      errors.username = 'Username must be at least 3 characters';\r\n    } else if (!/^[a-zA-Z0-9_]+$/.test(formData.username)) {\r\n      errors.username = 'Username can only contain letters, numbers, and underscores';\r\n    }\r\n\r\n    if (!formData.full_name) {\r\n      errors.full_name = 'Full name is required';\r\n    } else if (formData.full_name.length < 2) {\r\n      errors.full_name = 'Full name must be at least 2 characters';\r\n    }\r\n\r\n    if (!formData.password) {\r\n      errors.password = 'Password is required';\r\n    } else if (passwordStrength.score < 3) {\r\n      errors.password = 'Password is too weak. Please include more complexity.';\r\n    }\r\n\r\n    if (!formData.confirmPassword) {\r\n      errors.confirmPassword = 'Please confirm your password';\r\n    } else if (formData.password !== formData.confirmPassword) {\r\n      errors.confirmPassword = 'Passwords do not match';\r\n    }\r\n\r\n    if (!acceptedTerms) {\r\n      errors.terms = 'You must accept the terms of service';\r\n    }\r\n\r\n    if (!acceptedPrivacy) {\r\n      errors.privacy = 'You must accept the privacy policy';\r\n    }\r\n\r\n    setFormErrors(errors);\r\n    return Object.keys(errors).length === 0;\r\n  };\r\n\r\n  const handleSubmit = async (event: React.FormEvent) => {\r\n    event.preventDefault();\r\n    \r\n    if (!validateForm()) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await register(formData.email, formData.username, formData.password, formData.full_name);\r\n      // Navigation will be handled by useEffect when isAuthenticated changes\r\n    } catch (error) {\r\n      // Error is handled by the store\r\n    }\r\n  };\r\n\r\n  const handleTogglePassword = () => {\r\n    setShowPassword(prev => !prev);\r\n  };\r\n\r\n  const handleToggleConfirmPassword = () => {\r\n    setShowConfirmPassword(prev => !prev);\r\n  };\r\n\r\n  // Mock social login handlers\r\n  const handleGoogleLogin = () => {\r\n    console.log('Google login not implemented yet');\r\n  };\r\n\r\n  const handleGitHubLogin = () => {\r\n    console.log('GitHub login not implemented yet');\r\n  };\r\n\r\n  const subscriptionTiers = [\r\n    {\r\n      name: 'Starter',\r\n      price: 'Free',\r\n      features: ['5 videos/month', '1 YouTube channel', 'Basic analytics', 'Community support'],\r\n      icon: <Rocket color=\"primary\" />,\r\n      popular: false,\r\n    },\r\n    {\r\n      name: 'Creator',\r\n      price: '$29/month',\r\n      features: ['100 videos/month', '5 YouTube channels', 'Advanced analytics', 'Priority support'],\r\n      icon: <Stars color=\"warning\" />,\r\n      popular: true,\r\n    },\r\n    {\r\n      name: 'Enterprise',\r\n      price: '$99/month',\r\n      features: ['Unlimited videos', 'Unlimited channels', 'White-label solution', '24/7 support'],\r\n      icon: <Security color=\"success\" />,\r\n      popular: false,\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\" sx={{ minHeight: '100vh', display: 'flex', alignItems: 'center', py: 4 }}>\r\n      <Grid container spacing={4} sx={{ width: '100%' }}>\r\n        {/* Left side - Branding and Pricing */}\r\n        <Grid item xs={12} md={6}>\r\n          <Box sx={{ pr: { md: 4 } }}>\r\n            <Box sx={{ mb: 4 }}>\r\n              <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\r\n                <YouTube sx={{ fontSize: 40, color: '#FF0000', mr: 2 }} />\r\n                <Typography variant=\"h3\" fontWeight=\"bold\" color=\"primary\">\r\n                  YTEmpire\r\n                </Typography>\r\n              </Box>\r\n              <Typography variant=\"h5\" color=\"text.secondary\" gutterBottom>\r\n                Join the Creator Revolution\r\n              </Typography>\r\n              <Typography variant=\"body1\" color=\"text.secondary\" sx={{ mb: 4 }}>\r\n                Start with our free plan and scale as you grow. \r\n                No credit card required to get started.\r\n              </Typography>\r\n            </Box>\r\n\r\n            {/* Subscription tiers preview */}\r\n            <Box sx={{ display: { xs: 'none', md: 'block' } }}>\r\n              <Typography variant=\"h6\" gutterBottom sx={{ mb: 3 }}>\r\n                Choose Your Plan\r\n              </Typography>\r\n              {subscriptionTiers.map((tier, index) => (\r\n                <Card \r\n                  key={index} \r\n                  variant=\"outlined\" \r\n                  sx={{ \r\n                    mb: 2, \r\n                    position: 'relative',\r\n                    border: tier.popular ? '2px solid' : '1px solid',\r\n                    borderColor: tier.popular ? 'primary.main' : 'divider',\r\n                  }}\r\n                >\r\n                  {tier.popular && (\r\n                    <Chip\r\n                      label=\"Most Popular\"\r\n                      color=\"primary\"\r\n                      size=\"small\"\r\n                      sx={{\r\n                        position: 'absolute',\r\n                        top: -10,\r\n                        right: 16,\r\n                        zIndex: 1,\r\n                      }}\r\n                    />\r\n                  )}\r\n                  <CardContent sx={{ p: 2 }}>\r\n                    <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\r\n                      {tier.icon}\r\n                      <Typography variant=\"h6\" sx={{ ml: 1, mr: 'auto' }}>\r\n                        {tier.name}\r\n                      </Typography>\r\n                      <Typography variant=\"h6\" color=\"primary\" fontWeight=\"bold\">\r\n                        {tier.price}\r\n                      </Typography>\r\n                    </Box>\r\n                    <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\r\n                      {tier.features.slice(0, 2).map((feature, idx) => (\r\n                        <Chip key={idx} label={feature} size=\"small\" variant=\"outlined\" />\r\n                      ))}\r\n                    </Box>\r\n                  </CardContent>\r\n                </Card>\r\n              ))}\r\n            </Box>\r\n          </Box>\r\n        </Grid>\r\n\r\n        {/* Right side - Registration Form */}\r\n        <Grid item xs={12} md={6}>\r\n          <Paper \r\n            elevation={8}\r\n            sx={{ \r\n              p: 4, \r\n              borderRadius: 3,\r\n              background: theme.palette.mode === 'dark' \r\n                ? 'rgba(255, 255, 255, 0.05)' \r\n                : 'rgba(255, 255, 255, 0.9)',\r\n              backdropFilter: 'blur(10px)',\r\n            }}\r\n          >\r\n            <Box sx={{ textAlign: 'center', mb: 4 }}>\r\n              <PersonAdd sx={{ fontSize: 48, color: 'primary.main', mb: 2 }} />\r\n              <Typography variant=\"h4\" fontWeight=\"bold\" gutterBottom>\r\n                Create Account\r\n              </Typography>\r\n              <Typography variant=\"body2\" color=\"text.secondary\">\r\n                Start your YouTube automation journey\r\n              </Typography>\r\n            </Box>\r\n\r\n            {/* Error Alert */}\r\n            {error && (\r\n              <Alert \r\n                severity=\"error\" \r\n                sx={{ mb: 3 }}\r\n                onClose={clearError}\r\n              >\r\n                {error}\r\n              </Alert>\r\n            )}\r\n\r\n            {/* Registration Form */}\r\n            <form onSubmit={handleSubmit}>\r\n              <Grid container spacing={2}>\r\n                <Grid item xs={12} sm={6}>\r\n                  <TextField\r\n                    fullWidth\r\n                    label=\"Full Name\"\r\n                    name=\"full_name\"\r\n                    value={formData.full_name}\r\n                    onChange={handleInputChange}\r\n                    error={!!formErrors.full_name}\r\n                    helperText={formErrors.full_name}\r\n                    InputProps={{\r\n                      startAdornment: (\r\n                        <InputAdornment position=\"start\">\r\n                          <Person color=\"action\" />\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                    disabled={isLoading}\r\n                    autoComplete=\"name\"\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6}>\r\n                  <TextField\r\n                    fullWidth\r\n                    label=\"Username\"\r\n                    name=\"username\"\r\n                    value={formData.username}\r\n                    onChange={handleInputChange}\r\n                    error={!!formErrors.username}\r\n                    helperText={formErrors.username || 'This will be your unique identifier'}\r\n                    disabled={isLoading}\r\n                    autoComplete=\"username\"\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n\r\n              <TextField\r\n                fullWidth\r\n                label=\"Email Address\"\r\n                name=\"email\"\r\n                type=\"email\"\r\n                value={formData.email}\r\n                onChange={handleInputChange}\r\n                error={!!formErrors.email}\r\n                helperText={formErrors.email}\r\n                margin=\"normal\"\r\n                InputProps={{\r\n                  startAdornment: (\r\n                    <InputAdornment position=\"start\">\r\n                      <Email color=\"action\" />\r\n                    </InputAdornment>\r\n                  ),\r\n                }}\r\n                disabled={isLoading}\r\n                autoComplete=\"email\"\r\n              />\r\n\r\n              <TextField\r\n                fullWidth\r\n                label=\"Password\"\r\n                name=\"password\"\r\n                type={showPassword ? 'text' : 'password'}\r\n                value={formData.password}\r\n                onChange={handleInputChange}\r\n                error={!!formErrors.password}\r\n                helperText={formErrors.password}\r\n                margin=\"normal\"\r\n                InputProps={{\r\n                  startAdornment: (\r\n                    <InputAdornment position=\"start\">\r\n                      <Lock color=\"action\" />\r\n                    </InputAdornment>\r\n                  ),\r\n                  endAdornment: (\r\n                    <InputAdornment position=\"end\">\r\n                      <IconButton\r\n                        onClick={handleTogglePassword}\r\n                        edge=\"end\"\r\n                        disabled={isLoading}\r\n                      >\r\n                        {showPassword ? <VisibilityOff /> : <Visibility />}\r\n                      </IconButton>\r\n                    </InputAdornment>\r\n                  ),\r\n                }}\r\n                disabled={isLoading}\r\n                autoComplete=\"new-password\"\r\n              />\r\n\r\n              {/* Password Strength Indicator */}\r\n              {formData.password && (\r\n                <Box sx={{ mt: 1, mb: 2 }}>\r\n                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\r\n                    <Typography variant=\"body2\" sx={{ mr: 1 }}>\r\n                      Password Strength:\r\n                    </Typography>\r\n                    <LinearProgress\r\n                      variant=\"determinate\"\r\n                      value={(passwordStrength.score / 5) * 100}\r\n                      color={passwordStrength.color}\r\n                      sx={{ flexGrow: 1, mr: 1 }}\r\n                    />\r\n                    <Typography variant=\"body2\" color={`${passwordStrength.color}.main`}>\r\n                      {passwordStrength.score < 2 ? 'Weak' :\r\n                       passwordStrength.score < 4 ? 'Medium' : 'Strong'}\r\n                    </Typography>\r\n                  </Box>\r\n                  {passwordStrength.feedback.length > 0 && (\r\n                    <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\r\n                      {passwordStrength.feedback.map((item, idx) => (\r\n                        <Chip\r\n                          key={idx}\r\n                          label={item}\r\n                          size=\"small\"\r\n                          icon={<Close />}\r\n                          variant=\"outlined\"\r\n                          color=\"error\"\r\n                        />\r\n                      ))}\r\n                    </Box>\r\n                  )}\r\n                </Box>\r\n              )}\r\n\r\n              <TextField\r\n                fullWidth\r\n                label=\"Confirm Password\"\r\n                name=\"confirmPassword\"\r\n                type={showConfirmPassword ? 'text' : 'password'}\r\n                value={formData.confirmPassword}\r\n                onChange={handleInputChange}\r\n                error={!!formErrors.confirmPassword}\r\n                helperText={formErrors.confirmPassword}\r\n                margin=\"normal\"\r\n                InputProps={{\r\n                  startAdornment: (\r\n                    <InputAdornment position=\"start\">\r\n                      <Lock color=\"action\" />\r\n                    </InputAdornment>\r\n                  ),\r\n                  endAdornment: (\r\n                    <InputAdornment position=\"end\">\r\n                      <IconButton\r\n                        onClick={handleToggleConfirmPassword}\r\n                        edge=\"end\"\r\n                        disabled={isLoading}\r\n                      >\r\n                        {showConfirmPassword ? <VisibilityOff /> : <Visibility />}\r\n                      </IconButton>\r\n                    </InputAdornment>\r\n                  ),\r\n                }}\r\n                disabled={isLoading}\r\n                autoComplete=\"new-password\"\r\n              />\r\n\r\n              {/* Terms and Privacy checkboxes */}\r\n              <Box sx={{ mt: 2 }}>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      checked={acceptedTerms}\r\n                      onChange={(e) => setAcceptedTerms(e.target.checked)}\r\n                      disabled={isLoading}\r\n                    />\r\n                  }\r\n                  label={\r\n                    <Typography variant=\"body2\">\r\n                      I agree to the{' '}\r\n                      <Link href=\"/terms\" target=\"_blank\" rel=\"noopener\">\r\n                        Terms of Service\r\n                      </Link>\r\n                    </Typography>\r\n                  }\r\n                />\r\n                {formErrors.terms && (\r\n                  <Typography variant=\"body2\" color=\"error\" sx={{ ml: 4 }}>\r\n                    {formErrors.terms}\r\n                  </Typography>\r\n                )}\r\n              </Box>\r\n\r\n              <Box>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      checked={acceptedPrivacy}\r\n                      onChange={(e) => setAcceptedPrivacy(e.target.checked)}\r\n                      disabled={isLoading}\r\n                    />\r\n                  }\r\n                  label={\r\n                    <Typography variant=\"body2\">\r\n                      I agree to the{' '}\r\n                      <Link href=\"/privacy\" target=\"_blank\" rel=\"noopener\">\r\n                        Privacy Policy\r\n                      </Link>\r\n                    </Typography>\r\n                  }\r\n                />\r\n                {formErrors.privacy && (\r\n                  <Typography variant=\"body2\" color=\"error\" sx={{ ml: 4 }}>\r\n                    {formErrors.privacy}\r\n                  </Typography>\r\n                )}\r\n              </Box>\r\n\r\n              <Button\r\n                type=\"submit\"\r\n                fullWidth\r\n                variant=\"contained\"\r\n                size=\"large\"\r\n                disabled={isLoading}\r\n                sx={{ \r\n                  mt: 3, \r\n                  mb: 2,\r\n                  py: 1.5,\r\n                  borderRadius: 2,\r\n                  textTransform: 'none',\r\n                  fontSize: '1.1rem',\r\n                  fontWeight: 600,\r\n                }}\r\n                startIcon={isLoading ? <CircularProgress size={20} /> : <PersonAdd />}\r\n              >\r\n                {isLoading ? 'Creating Account...' : 'Create Account'}\r\n              </Button>\r\n            </form>\r\n\r\n            <Divider sx={{ my: 3 }}>\r\n              <Typography variant=\"body2\" color=\"text.secondary\">\r\n                or sign up with\r\n              </Typography>\r\n            </Divider>\r\n\r\n            {/* Social Login Buttons */}\r\n            <Box sx={{ display: 'flex', gap: 2, mb: 3 }}>\r\n              <Button\r\n                fullWidth\r\n                variant=\"outlined\"\r\n                startIcon={<Google />}\r\n                onClick={handleGoogleLogin}\r\n                disabled={isLoading}\r\n                sx={{ textTransform: 'none' }}\r\n              >\r\n                Google\r\n              </Button>\r\n              <Button\r\n                fullWidth\r\n                variant=\"outlined\"\r\n                startIcon={<GitHub />}\r\n                onClick={handleGitHubLogin}\r\n                disabled={isLoading}\r\n                sx={{ textTransform: 'none' }}\r\n              >\r\n                GitHub\r\n              </Button>\r\n            </Box>\r\n\r\n            <Divider />\r\n\r\n            <Box sx={{ textAlign: 'center', mt: 3 }}>\r\n              <Typography variant=\"body2\" color=\"text.secondary\">\r\n                Already have an account?{' '}\r\n                <Link\r\n                  component={RouterLink}\r\n                  to=\"/login\"\r\n                  variant=\"body2\"\r\n                  sx={{ fontWeight: 600, textDecoration: 'none' }}\r\n                >\r\n                  Sign in instead\r\n                </Link>\r\n              </Typography>\r\n            </Box>\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Register;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\pages\\BetaSignup.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":69,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1438,1441],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1438,1441],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport {\n  Container,\n  Paper,\n  TextField,\n  Button,\n  Typography,\n  Box,\n  Alert,\n  CircularProgress,\n  MenuItem,\n  Chip,\n  Stack,\n  Divider\n} from '@mui/material';\nimport { RocketLaunch, CheckCircle, Star } from '@mui/icons-material';\nimport { api } from '../services/api';\n\ninterface BetaFormData {\n  full_name: string;\n  email: string;\n  company: string;\n  use_case: string;\n  expected_volume: string;\n  referral_source: string;\n}\n\nconst BetaSignup: React.FC = () => {\n  const [formData, setFormData] = useState<BetaFormData>({\n    full_name: '',\n    email: '',\n    company: '',\n    use_case: '',\n    expected_volume: '10-50',\n    referral_source: ''\n  });\n  \n  const [loading, setLoading] = useState(false);\n  const [success, setSuccess] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [apiKey, setApiKey] = useState<string | null>(null);\n\n  const volumeOptions = [\n    '1-10',\n    '10-50',\n    '50-100',\n    '100-500',\n    '500+'\n  ];\n\n  const referralOptions = [\n    'Google Search',\n    'Reddit',\n    'Twitter/X',\n    'Friend/Colleague',\n    'YouTube',\n    'Other'\n  ];\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n    setError(null);\n\n    try {\n      const response = await api.post('/beta/signup', formData);\n      setSuccess(true);\n      setApiKey(response.data.api_key);\n    } catch (err: any) {\n      setError(err.response?.data?.detail || 'Failed to submit application');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  if (success) {\n    return (\n      <Container maxWidth=\"md\" sx={{ mt: 8 }}>\n        <Paper elevation={3} sx={{ p: 4, textAlign: 'center' }}>\n          <CheckCircle color=\"success\" sx={{ fontSize: 64, mb: 2 }} />\n          <Typography variant=\"h4\" gutterBottom>\n            Welcome to YTEmpire Beta! 🎉\n          </Typography>\n          <Typography variant=\"body1\" paragraph>\n            Your application has been approved! Check your email for login credentials.\n          </Typography>\n          \n          {apiKey && (\n            <Paper sx={{ p: 2, bgcolor: 'grey.100', mt: 3 }}>\n              <Typography variant=\"subtitle2\" gutterBottom>\n                Your API Key (save this):\n              </Typography>\n              <Typography variant=\"body2\" sx={{ fontFamily: 'monospace', wordBreak: 'break-all' }}>\n                {apiKey}\n              </Typography>\n            </Paper>\n          )}\n          \n          <Box sx={{ mt: 4 }}>\n            <Button\n              variant=\"contained\"\n              size=\"large\"\n              href=\"/login\"\n              sx={{ mr: 2 }}\n            >\n              Go to Login\n            </Button>\n            <Button\n              variant=\"outlined\"\n              size=\"large\"\n              href=\"/docs\"\n            >\n              View Documentation\n            </Button>\n          </Box>\n        </Paper>\n      </Container>\n    );\n  }\n\n  return (\n    <Container maxWidth=\"md\" sx={{ mt: 4, mb: 8 }}>\n      <Paper elevation={3} sx={{ p: 4 }}>\n        <Box sx={{ textAlign: 'center', mb: 4 }}>\n          <RocketLaunch sx={{ fontSize: 48, color: 'primary.main', mb: 2 }} />\n          <Typography variant=\"h3\" gutterBottom>\n            Join YTEmpire Beta\n          </Typography>\n          <Typography variant=\"subtitle1\" color=\"text.secondary\">\n            Get early access to AI-powered YouTube automation\n          </Typography>\n        </Box>\n\n        <Stack direction=\"row\" spacing={1} justifyContent=\"center\" sx={{ mb: 4 }}>\n          <Chip icon={<Star />} label=\"$50 Free Credits\" color=\"primary\" />\n          <Chip icon={<Star />} label=\"5x API Rate Limit\" color=\"primary\" />\n          <Chip icon={<Star />} label=\"Priority Support\" color=\"primary\" />\n        </Stack>\n\n        <Divider sx={{ mb: 4 }} />\n\n        {error && (\n          <Alert severity=\"error\" sx={{ mb: 3 }}>\n            {error}\n          </Alert>\n        )}\n\n        <form onSubmit={handleSubmit}>\n          <Box sx={{ display: 'grid', gap: 3 }}>\n            <TextField\n              fullWidth\n              label=\"Full Name\"\n              name=\"full_name\"\n              value={formData.full_name}\n              onChange={handleChange}\n              required\n              disabled={loading}\n            />\n\n            <TextField\n              fullWidth\n              label=\"Email\"\n              name=\"email\"\n              type=\"email\"\n              value={formData.email}\n              onChange={handleChange}\n              required\n              disabled={loading}\n            />\n\n            <TextField\n              fullWidth\n              label=\"Company (Optional)\"\n              name=\"company\"\n              value={formData.company}\n              onChange={handleChange}\n              disabled={loading}\n            />\n\n            <TextField\n              fullWidth\n              label=\"Use Case\"\n              name=\"use_case\"\n              value={formData.use_case}\n              onChange={handleChange}\n              multiline\n              rows={3}\n              required\n              disabled={loading}\n              helperText=\"Describe how you plan to use YTEmpire (min 10 characters)\"\n            />\n\n            <TextField\n              fullWidth\n              select\n              label=\"Expected Videos per Month\"\n              name=\"expected_volume\"\n              value={formData.expected_volume}\n              onChange={handleChange}\n              required\n              disabled={loading}\n            >\n              {volumeOptions.map((option) => (\n                <MenuItem key={option} value={option}>\n                  {option}\n                </MenuItem>\n              ))}\n            </TextField>\n\n            <TextField\n              fullWidth\n              select\n              label=\"How did you hear about us?\"\n              name=\"referral_source\"\n              value={formData.referral_source}\n              onChange={handleChange}\n              disabled={loading}\n            >\n              {referralOptions.map((option) => (\n                <MenuItem key={option} value={option}>\n                  {option}\n                </MenuItem>\n              ))}\n            </TextField>\n\n            <Button\n              type=\"submit\"\n              variant=\"contained\"\n              size=\"large\"\n              disabled={loading}\n              sx={{ mt: 2 }}\n            >\n              {loading ? (\n                <>\n                  <CircularProgress size={24} sx={{ mr: 1 }} />\n                  Submitting...\n                </>\n              ) : (\n                'Apply for Beta Access'\n              )}\n            </Button>\n          </Box>\n        </form>\n\n        <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 3, textAlign: 'center' }}>\n          By applying, you agree to our Terms of Service and Privacy Policy.\n          Beta access is limited and applications are reviewed within 24 hours.\n        </Typography>\n      </Paper>\n    </Container>\n  );\n};\n\nexport default BetaSignup;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\pages\\BulkOperations\\BulkOperationsPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Button' is defined but never used.","line":2,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":51},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":28,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[829,832],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[829,832],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":29,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[888,891],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[888,891],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":37,"column":82,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":85,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1205,1208],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1205,1208],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":54,"column":86,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":89,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1963,1966],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1963,1966],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Box, Container, Typography, Paper, Button, Tabs, Tab } from '@mui/material';\nimport { EnhancedBulkOperations } from '../../components/BulkOperations/EnhancedBulkOperations';\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: number;\n  value: number;\n}\n\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`bulk-tabpanel-${index}`}\n      aria-labelledby={`bulk-tab-${index}`}\n      {...other}\n    >\n      {value === index && <Box sx={{ py: 3 }}>{children}</Box>}\n    </div>\n  );\n}\n\nconst BulkOperationsPage: React.FC = () => {\n  const [activeTab, setActiveTab] = useState(0);\n  const [channelItems, setChannelItems] = useState<any[]>([]);\n  const [videoItems, setVideoItems] = useState<any[]>([]);\n\n  useEffect(() => {\n    // Generate mock data for demonstration\n    const mockChannels = Array.from({ length: 10 }, (_, i) => ({\n      id: `channel-${i + 1}`,\n      name: `Channel ${i + 1}`,\n      type: 'channel' as const,\n      status: ['active', 'paused', 'archived'][Math.floor(Math.random() * 3)] as any,\n      thumbnail: `https://via.placeholder.com/150?text=CH${i + 1}`,\n      tags: ['YouTube', 'Content', 'Automation'],\n      starred: Math.random() > 0.7,\n      createdAt: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000),\n      modifiedAt: new Date(Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000),\n      metadata: {\n        subscribers: Math.floor(Math.random() * 100000),\n        videos: Math.floor(Math.random() * 500),\n        views: Math.floor(Math.random() * 1000000)\n      }\n    }));\n\n    const mockVideos = Array.from({ length: 20 }, (_, i) => ({\n      id: `video-${i + 1}`,\n      name: `Video Title ${i + 1}`,\n      type: 'video' as const,\n      status: ['active', 'processing', 'archived'][Math.floor(Math.random() * 3)] as any,\n      thumbnail: `https://via.placeholder.com/150?text=VID${i + 1}`,\n      tags: ['AI Generated', 'Tutorial', 'Tech'],\n      starred: Math.random() > 0.8,\n      createdAt: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000),\n      modifiedAt: new Date(Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000),\n      metadata: {\n        duration: Math.floor(Math.random() * 600) + 60,\n        views: Math.floor(Math.random() * 50000),\n        likes: Math.floor(Math.random() * 1000)\n      }\n    }));\n\n    setChannelItems(mockChannels);\n    setVideoItems(mockVideos);\n  }, []);\n\n  const handleChannelOperation = (operation: string, items: string[]) => {\n    console.log(`Channel operation: ${operation}`, items);\n    // TODO: Implement API calls for channel operations\n  };\n\n  const handleVideoOperation = (operation: string, items: string[]) => {\n    console.log(`Video operation: ${operation}`, items);\n    // TODO: Implement API calls for video operations\n  };\n\n  return (\n    <Container maxWidth={false}>\n      <Box sx={{ py: 3 }}>\n        <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n          Bulk Operations Manager\n        </Typography>\n        \n        <Typography variant=\"body1\" color=\"text.secondary\" sx={{ mb: 3 }}>\n          Manage multiple items at once with powerful bulk operations\n        </Typography>\n\n        <Paper sx={{ width: '100%' }}>\n          <Tabs\n            value={activeTab}\n            onChange={(e, v) => setActiveTab(v)}\n            indicatorColor=\"primary\"\n            textColor=\"primary\"\n            variant=\"fullWidth\"\n          >\n            <Tab label={`Channels (${channelItems.length})`} />\n            <Tab label={`Videos (${videoItems.length})`} />\n            <Tab label=\"Mixed Content\" />\n          </Tabs>\n\n          <TabPanel value={activeTab} index={0}>\n            <EnhancedBulkOperations\n              items={channelItems}\n              onOperationComplete={handleChannelOperation}\n              enableDragAndDrop={true}\n              customOperations={[\n                {\n                  id: 'sync',\n                  type: 'edit',\n                  name: 'Sync with YouTube',\n                  icon: <span>🔄</span>,\n                  color: 'info'\n                },\n                {\n                  id: 'monetize',\n                  type: 'edit',\n                  name: 'Enable Monetization',\n                  icon: <span>💰</span>,\n                  color: 'success'\n                }\n              ]}\n            />\n          </TabPanel>\n\n          <TabPanel value={activeTab} index={1}>\n            <EnhancedBulkOperations\n              items={videoItems}\n              onOperationComplete={handleVideoOperation}\n              enableDragAndDrop={true}\n              customOperations={[\n                {\n                  id: 'publish',\n                  type: 'edit',\n                  name: 'Publish to YouTube',\n                  icon: <span>📤</span>,\n                  color: 'primary'\n                },\n                {\n                  id: 'regenerate',\n                  type: 'edit',\n                  name: 'Regenerate Content',\n                  icon: <span>🔄</span>,\n                  color: 'warning'\n                }\n              ]}\n            />\n          </TabPanel>\n\n          <TabPanel value={activeTab} index={2}>\n            <EnhancedBulkOperations\n              items={[...channelItems.slice(0, 5), ...videoItems.slice(0, 10)]}\n              onOperationComplete={(op, items) => {\n                console.log('Mixed operation:', op, items);\n              }}\n              enableDragAndDrop={true}\n            />\n          </TabPanel>\n        </Paper>\n      </Box>\n    </Container>\n  );\n};\n\nexport default BulkOperationsPage;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\pages\\Channels\\ChannelDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\pages\\Channels\\ChannelManagement.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":5,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Alert' is defined but never used.","line":29,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'List' is defined but never used.","line":32,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ListItem' is defined but never used.","line":33,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ListItemAvatar' is defined but never used.","line":34,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ListItemText' is defined but never used.","line":35,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ListItemSecondaryAction' is defined but never used.","line":36,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Tooltip' is defined but never used.","line":39,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Badge' is defined but never used.","line":40,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Edit' is defined but never used.","line":44,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":44,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Delete' is defined but never used.","line":45,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":45,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'YouTube' is defined but never used.","line":46,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Visibility' is defined but never used.","line":50,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":50,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'VisibilityOff' is defined but never used.","line":51,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":51,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Warning' is defined but never used.","line":53,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":53,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Refresh' is defined but never used.","line":57,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":57,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'LinkIcon' is defined but never used.","line":58,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":58,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ContentCopy' is defined but never used.","line":59,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":59,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useChannelStore' is defined but never used.","line":62,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":62,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleDeleteChannel' is assigned a value but never used.","line":199,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":199,"endColumn":28},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":207,"column":74,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":207,"endColumn":77,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4835,4838],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4835,4838],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":357,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":357,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9923,9926],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9923,9926],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":22,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Channel Management UI Component\r\n * MVP Screen Design - Channel management interface\r\n */\r\nimport React, { useState, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Grid,\r\n  Paper,\r\n  Typography,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  CardActions,\r\n  Avatar,\r\n  Chip,\r\n  IconButton,\r\n  TextField,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Switch,\r\n  FormControlLabel,\r\n  Alert,\r\n  Tabs,\r\n  Tab,\r\n  List,\r\n  ListItem,\r\n  ListItemAvatar,\r\n  ListItemText,\r\n  ListItemSecondaryAction,\r\n  Divider,\r\n  LinearProgress,\r\n  Tooltip,\r\n  Badge,\r\n} from '@mui/material';\r\nimport {\r\n  Add,\r\n  Edit,\r\n  Delete,\r\n  YouTube,\r\n  Settings,\r\n  Analytics,\r\n  Schedule,\r\n  Visibility,\r\n  VisibilityOff,\r\n  CheckCircle,\r\n  Warning,\r\n  Error as ErrorIcon,\r\n  PlayCircle,\r\n  Pause,\r\n  Refresh,\r\n  Link as LinkIcon,\r\n  ContentCopy,\r\n  MoreVert,\r\n} from '@mui/icons-material';\r\nimport { useChannelStore } from '../../stores/channelStore';\r\n\r\ninterface Channel {\r\n  id: string;\r\n  name: string;\r\n  youtubeId: string;\r\n  thumbnail: string;\r\n  status: 'active' | 'paused' | 'pending' | 'error';\r\n  subscribers: number;\r\n  totalVideos: number;\r\n  totalViews: number;\r\n  isMonetized: boolean;\r\n  autoUpload: boolean;\r\n  uploadSchedule: string;\r\n  category: string;\r\n  apiQuota: {\r\n    used: number;\r\n    limit: number;\r\n  };\r\n  lastSync: Date;\r\n  created: Date;\r\n}\r\n\r\ninterface TabPanelProps {\r\n  children?: React.ReactNode;\r\n  index: number;\r\n  value: number;\r\n}\r\n\r\nfunction TabPanel(props: TabPanelProps) {\r\n  const { children, value, index, ...other } = props;\r\n  return (\r\n    <div hidden={value !== index} {...other}>\r\n      {value === index && <Box sx={{ pt: 3 }}>{children}</Box>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport const ChannelManagement: React.FC = () => {\r\n  const [channels, setChannels] = useState<Channel[]>([\r\n    {\r\n      id: '1',\r\n      name: 'Tech Reviews Pro',\r\n      youtubeId: 'UCxxxxxxxxxxxxx',\r\n      thumbnail: '/api/placeholder/80/80',\r\n      status: 'active',\r\n      subscribers: 125000,\r\n      totalVideos: 342,\r\n      totalViews: 15600000,\r\n      isMonetized: true,\r\n      autoUpload: true,\r\n      uploadSchedule: 'Daily at 2:00 PM',\r\n      category: 'Technology',\r\n      apiQuota: { used: 8500, limit: 10000 },\r\n      lastSync: new Date(),\r\n      created: new Date('2024-01-15'),\r\n    },\r\n    {\r\n      id: '2',\r\n      name: 'Gaming Highlights',\r\n      youtubeId: 'UCyyyyyyyyyyyyy',\r\n      thumbnail: '/api/placeholder/80/80',\r\n      status: 'active',\r\n      subscribers: 89000,\r\n      totalVideos: 256,\r\n      totalViews: 9800000,\r\n      isMonetized: true,\r\n      autoUpload: false,\r\n      uploadSchedule: '3 times per week',\r\n      category: 'Gaming',\r\n      apiQuota: { used: 6200, limit: 10000 },\r\n      lastSync: new Date(),\r\n      created: new Date('2024-02-20'),\r\n    },\r\n    {\r\n      id: '3',\r\n      name: 'Cooking Adventures',\r\n      youtubeId: 'UCzzzzzzzzzzzzz',\r\n      thumbnail: '/api/placeholder/80/80',\r\n      status: 'paused',\r\n      subscribers: 45000,\r\n      totalVideos: 128,\r\n      totalViews: 3200000,\r\n      isMonetized: false,\r\n      autoUpload: true,\r\n      uploadSchedule: 'Twice weekly',\r\n      category: 'Food & Cooking',\r\n      apiQuota: { used: 3100, limit: 10000 },\r\n      lastSync: new Date(),\r\n      created: new Date('2024-03-10'),\r\n    },\r\n  ]);\r\n\r\n  const [tabValue, setTabValue] = useState(0);\r\n  const [openDialog, setOpenDialog] = useState(false);\r\n  const [editingChannel, setEditingChannel] = useState<Channel | null>(null);\r\n  const [formData, setFormData] = useState({\r\n    name: '',\r\n    youtubeId: '',\r\n    category: '',\r\n    autoUpload: false,\r\n    uploadSchedule: '',\r\n  });\r\n\r\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\r\n    setTabValue(newValue);\r\n  };\r\n\r\n  const handleAddChannel = () => {\r\n    setEditingChannel(null);\r\n    setFormData({\r\n      name: '',\r\n      youtubeId: '',\r\n      category: '',\r\n      autoUpload: false,\r\n      uploadSchedule: '',\r\n    });\r\n    setOpenDialog(true);\r\n  };\r\n\r\n  const handleEditChannel = (channel: Channel) => {\r\n    setEditingChannel(channel);\r\n    setFormData({\r\n      name: channel.name,\r\n      youtubeId: channel.youtubeId,\r\n      category: channel.category,\r\n      autoUpload: channel.autoUpload,\r\n      uploadSchedule: channel.uploadSchedule,\r\n    });\r\n    setOpenDialog(true);\r\n  };\r\n\r\n  const handleSaveChannel = () => {\r\n    // Save channel logic\r\n    setOpenDialog(false);\r\n  };\r\n\r\n  const handleDeleteChannel = (channelId: string) => {\r\n    // Delete channel logic\r\n    setChannels(channels.filter(c => c.id !== channelId));\r\n  };\r\n\r\n  const handleToggleStatus = (channelId: string) => {\r\n    setChannels(channels.map(c => \r\n      c.id === channelId \r\n        ? { ...c, status: c.status === 'active' ? 'paused' : 'active' as any }\r\n        : c\r\n    ));\r\n  };\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'active': return 'success';\r\n      case 'paused': return 'warning';\r\n      case 'pending': return 'info';\r\n      case 'error': return 'error';\r\n      default: return 'default';\r\n    }\r\n  };\r\n\r\n  const getStatusIcon = (status: string) => {\r\n    switch (status) {\r\n      case 'active': return <CheckCircle />;\r\n      case 'paused': return <Pause />;\r\n      case 'pending': return <Schedule />;\r\n      case 'error': return <ErrorIcon />;\r\n      default: return null;\r\n    }\r\n  };\r\n\r\n  const formatNumber = (num: number) => {\r\n    if (num >= 1000000) return `${(num / 1000000).toFixed(1)}M`;\r\n    if (num >= 1000) return `${(num / 1000).toFixed(1)}K`;\r\n    return num.toString();\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ flexGrow: 1, p: 3 }}>\r\n      {/* Header */}\r\n      <Box sx={{ mb: 3, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n        <Box>\r\n          <Typography variant=\"h4\" gutterBottom>\r\n            Channel Management\r\n          </Typography>\r\n          <Typography variant=\"body2\" color=\"text.secondary\">\r\n            Manage your YouTube channels and automation settings\r\n          </Typography>\r\n        </Box>\r\n        <Button\r\n          variant=\"contained\"\r\n          startIcon={<Add />}\r\n          onClick={handleAddChannel}\r\n          size=\"large\"\r\n        >\r\n          Add Channel\r\n        </Button>\r\n      </Box>\r\n\r\n      {/* Stats Overview */}\r\n      <Grid container spacing={3} sx={{ mb: 3 }}>\r\n        <Grid item xs={12} sm={3}>\r\n          <Card>\r\n            <CardContent>\r\n              <Typography color=\"text.secondary\" gutterBottom>\r\n                Total Channels\r\n              </Typography>\r\n              <Typography variant=\"h4\">\r\n                {channels.length}\r\n              </Typography>\r\n              <Chip \r\n                label={`${channels.filter(c => c.status === 'active').length} Active`}\r\n                color=\"success\"\r\n                size=\"small\"\r\n                sx={{ mt: 1 }}\r\n              />\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n        <Grid item xs={12} sm={3}>\r\n          <Card>\r\n            <CardContent>\r\n              <Typography color=\"text.secondary\" gutterBottom>\r\n                Total Subscribers\r\n              </Typography>\r\n              <Typography variant=\"h4\">\r\n                {formatNumber(channels.reduce((sum, c) => sum + c.subscribers, 0))}\r\n              </Typography>\r\n              <Typography variant=\"body2\" color=\"success.main\">\r\n                +12.5% this month\r\n              </Typography>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n        <Grid item xs={12} sm={3}>\r\n          <Card>\r\n            <CardContent>\r\n              <Typography color=\"text.secondary\" gutterBottom>\r\n                Total Videos\r\n              </Typography>\r\n              <Typography variant=\"h4\">\r\n                {channels.reduce((sum, c) => sum + c.totalVideos, 0)}\r\n              </Typography>\r\n              <Typography variant=\"body2\" color=\"text.secondary\">\r\n                Across all channels\r\n              </Typography>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n        <Grid item xs={12} sm={3}>\r\n          <Card>\r\n            <CardContent>\r\n              <Typography color=\"text.secondary\" gutterBottom>\r\n                Total Views\r\n              </Typography>\r\n              <Typography variant=\"h4\">\r\n                {formatNumber(channels.reduce((sum, c) => sum + c.totalViews, 0))}\r\n              </Typography>\r\n              <Typography variant=\"body2\" color=\"success.main\">\r\n                +25% this month\r\n              </Typography>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* Tabs */}\r\n      <Paper sx={{ mb: 3 }}>\r\n        <Tabs value={tabValue} onChange={handleTabChange}>\r\n          <Tab label=\"All Channels\" />\r\n          <Tab label=\"Active\" />\r\n          <Tab label=\"Paused\" />\r\n          <Tab label=\"Settings\" />\r\n        </Tabs>\r\n      </Paper>\r\n\r\n      {/* Channel List */}\r\n      <TabPanel value={tabValue} index={0}>\r\n        <Grid container spacing={3}>\r\n          {channels.map((channel) => (\r\n            <Grid item xs={12} md={6} lg={4} key={channel.id}>\r\n              <Card>\r\n                <CardContent>\r\n                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\r\n                    <Avatar\r\n                      src={channel.thumbnail}\r\n                      sx={{ width: 60, height: 60, mr: 2 }}\r\n                    />\r\n                    <Box sx={{ flexGrow: 1 }}>\r\n                      <Typography variant=\"h6\">\r\n                        {channel.name}\r\n                      </Typography>\r\n                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                        <Chip\r\n                          icon={getStatusIcon(channel.status)}\r\n                          label={channel.status}\r\n                          color={getStatusColor(channel.status) as any}\r\n                          size=\"small\"\r\n                        />\r\n                        {channel.isMonetized && (\r\n                          <Chip\r\n                            label=\"Monetized\"\r\n                            color=\"success\"\r\n                            size=\"small\"\r\n                            variant=\"outlined\"\r\n                          />\r\n                        )}\r\n                      </Box>\r\n                    </Box>\r\n                    <IconButton onClick={() => handleEditChannel(channel)}>\r\n                      <MoreVert />\r\n                    </IconButton>\r\n                  </Box>\r\n\r\n                  <Divider sx={{ my: 2 }} />\r\n\r\n                  {/* Channel Stats */}\r\n                  <Grid container spacing={2}>\r\n                    <Grid item xs={4}>\r\n                      <Typography variant=\"body2\" color=\"text.secondary\">\r\n                        Subscribers\r\n                      </Typography>\r\n                      <Typography variant=\"h6\">\r\n                        {formatNumber(channel.subscribers)}\r\n                      </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                      <Typography variant=\"body2\" color=\"text.secondary\">\r\n                        Videos\r\n                      </Typography>\r\n                      <Typography variant=\"h6\">\r\n                        {channel.totalVideos}\r\n                      </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                      <Typography variant=\"body2\" color=\"text.secondary\">\r\n                        Views\r\n                      </Typography>\r\n                      <Typography variant=\"h6\">\r\n                        {formatNumber(channel.totalViews)}\r\n                      </Typography>\r\n                    </Grid>\r\n                  </Grid>\r\n\r\n                  {/* API Quota */}\r\n                  <Box sx={{ mt: 2 }}>\r\n                    <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>\r\n                      <Typography variant=\"body2\" color=\"text.secondary\">\r\n                        API Quota\r\n                      </Typography>\r\n                      <Typography variant=\"body2\">\r\n                        {channel.apiQuota.used} / {channel.apiQuota.limit}\r\n                      </Typography>\r\n                    </Box>\r\n                    <LinearProgress\r\n                      variant=\"determinate\"\r\n                      value={(channel.apiQuota.used / channel.apiQuota.limit) * 100}\r\n                      color={\r\n                        channel.apiQuota.used / channel.apiQuota.limit > 0.8\r\n                          ? 'warning'\r\n                          : 'primary'\r\n                      }\r\n                    />\r\n                  </Box>\r\n\r\n                  {/* Auto Upload Status */}\r\n                  <Box sx={{ mt: 2, display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                      Auto Upload\r\n                    </Typography>\r\n                    <Switch\r\n                      checked={channel.autoUpload}\r\n                      onChange={() => {}}\r\n                      size=\"small\"\r\n                    />\r\n                  </Box>\r\n                </CardContent>\r\n\r\n                <CardActions>\r\n                  <Button\r\n                    size=\"small\"\r\n                    startIcon={<Analytics />}\r\n                  >\r\n                    Analytics\r\n                  </Button>\r\n                  <Button\r\n                    size=\"small\"\r\n                    startIcon={<Settings />}\r\n                  >\r\n                    Settings\r\n                  </Button>\r\n                  <IconButton\r\n                    size=\"small\"\r\n                    onClick={() => handleToggleStatus(channel.id)}\r\n                    color={channel.status === 'active' ? 'warning' : 'success'}\r\n                  >\r\n                    {channel.status === 'active' ? <Pause /> : <PlayCircle />}\r\n                  </IconButton>\r\n                </CardActions>\r\n              </Card>\r\n            </Grid>\r\n          ))}\r\n        </Grid>\r\n      </TabPanel>\r\n\r\n      {/* Add/Edit Dialog */}\r\n      <Dialog open={openDialog} onClose={() => setOpenDialog(false)} maxWidth=\"sm\" fullWidth>\r\n        <DialogTitle>\r\n          {editingChannel ? 'Edit Channel' : 'Add New Channel'}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <TextField\r\n            autoFocus\r\n            margin=\"dense\"\r\n            label=\"Channel Name\"\r\n            fullWidth\r\n            variant=\"outlined\"\r\n            value={formData.name}\r\n            onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n            sx={{ mb: 2 }}\r\n          />\r\n          <TextField\r\n            margin=\"dense\"\r\n            label=\"YouTube Channel ID\"\r\n            fullWidth\r\n            variant=\"outlined\"\r\n            value={formData.youtubeId}\r\n            onChange={(e) => setFormData({ ...formData, youtubeId: e.target.value })}\r\n            sx={{ mb: 2 }}\r\n          />\r\n          <FormControl fullWidth sx={{ mb: 2 }}>\r\n            <InputLabel>Category</InputLabel>\r\n            <Select\r\n              value={formData.category}\r\n              label=\"Category\"\r\n              onChange={(e) => setFormData({ ...formData, category: e.target.value })}\r\n            >\r\n              <MenuItem value=\"Technology\">Technology</MenuItem>\r\n              <MenuItem value=\"Gaming\">Gaming</MenuItem>\r\n              <MenuItem value=\"Education\">Education</MenuItem>\r\n              <MenuItem value=\"Entertainment\">Entertainment</MenuItem>\r\n              <MenuItem value=\"Food & Cooking\">Food & Cooking</MenuItem>\r\n              <MenuItem value=\"Travel\">Travel</MenuItem>\r\n              <MenuItem value=\"Other\">Other</MenuItem>\r\n            </Select>\r\n          </FormControl>\r\n          <FormControlLabel\r\n            control={\r\n              <Switch\r\n                checked={formData.autoUpload}\r\n                onChange={(e) => setFormData({ ...formData, autoUpload: e.target.checked })}\r\n              />\r\n            }\r\n            label=\"Enable Auto Upload\"\r\n          />\r\n          {formData.autoUpload && (\r\n            <TextField\r\n              margin=\"dense\"\r\n              label=\"Upload Schedule\"\r\n              fullWidth\r\n              variant=\"outlined\"\r\n              value={formData.uploadSchedule}\r\n              onChange={(e) => setFormData({ ...formData, uploadSchedule: e.target.value })}\r\n              placeholder=\"e.g., Daily at 2:00 PM\"\r\n            />\r\n          )}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setOpenDialog(false)}>Cancel</Button>\r\n          <Button onClick={handleSaveChannel} variant=\"contained\">\r\n            {editingChannel ? 'Save Changes' : 'Add Channel'}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Box>\r\n  );\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\pages\\Costs\\CostTracking.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":5,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Avatar' is defined but never used.","line":24,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FormControl' is defined but never used.","line":30,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'InputLabel' is defined but never used.","line":31,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Select' is defined but never used.","line":32,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MenuItem' is defined but never used.","line":33,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Tooltip' is defined but never used.","line":39,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Delete' is defined but never used.","line":48,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Upload' is defined but never used.","line":51,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":51,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CreditCard' is defined but never used.","line":54,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":54,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ImageIcon' is defined but never used.","line":61,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":61,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'LineChart' is defined but never used.","line":65,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":65,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AreaChart' is defined but never used.","line":67,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":67,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'BarChart' is defined but never used.","line":69,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":69,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Bar' is defined but never used.","line":70,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":70,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'subDays' is defined but never used.","line":82,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":82,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'startOfMonth' is defined but never used.","line":82,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":82,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'endOfMonth' is defined but never used.","line":82,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":82,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isWithinInterval' is defined but never used.","line":82,"column":53,"nodeType":null,"messageId":"unusedVar","endLine":82,"endColumn":69},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":255,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":255,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6282,6285],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6282,6285],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setMetrics' is assigned a value but never used.","line":257,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":257,"endColumn":29},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":297,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":297,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7392,7395],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7392,7395],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":416,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":416,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11799,11802],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11799,11802],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":449,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":449,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13253,13256],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13253,13256],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":504,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":504,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15796,15799],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15796,15799],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":25,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Cost Tracking Screen Component\r\n * Comprehensive cost monitoring and budget management for YouTube operations\r\n */\r\nimport React, { useState, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Grid,\r\n  Paper,\r\n  Typography,\r\n  Card,\r\n  CardContent,\r\n  Button,\r\n  IconButton,\r\n  Alert,\r\n  LinearProgress,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Chip,\r\n  Avatar,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Switch,\r\n  FormControlLabel,\r\n  ToggleButton,\r\n  ToggleButtonGroup,\r\n  useTheme,\r\n  Tooltip,\r\n} from '@mui/material';\r\nimport {\r\n  AttachMoney,\r\n  TrendingUp,\r\n  TrendingDown,\r\n  Warning,\r\n  Add,\r\n  Edit,\r\n  Delete,\r\n  Refresh,\r\n  Download,\r\n  Upload,\r\n  Notifications,\r\n  AccountBalance,\r\n  CreditCard,\r\n  Receipt,\r\n  Analytics,\r\n  SmartToy,\r\n  CloudUpload,\r\n  VideoLibrary,\r\n  Mic,\r\n  Image as ImageIcon,\r\n  Storage,\r\n} from '@mui/icons-material';\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  AreaChart,\r\n  Area,\r\n  BarChart,\r\n  Bar,\r\n  PieChart,\r\n  Pie,\r\n  Cell,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip as RechartsTooltip,\r\n  Legend,\r\n  ResponsiveContainer,\r\n  ComposedChart,\r\n} from 'recharts';\r\nimport { format, subDays, startOfMonth, endOfMonth, isWithinInterval } from 'date-fns';\r\n\r\n// Mock data for cost tracking\r\nconst mockCostData = [\r\n  { date: '2024-01-01', aiCosts: 120, infrastructure: 45, storage: 15, voiceover: 85, total: 265 },\r\n  { date: '2024-01-02', aiCosts: 135, infrastructure: 48, storage: 16, voiceover: 92, total: 291 },\r\n  { date: '2024-01-03', aiCosts: 145, infrastructure: 50, storage: 18, voiceover: 88, total: 301 },\r\n  { date: '2024-01-04', aiCosts: 158, infrastructure: 52, storage: 17, voiceover: 95, total: 322 },\r\n  { date: '2024-01-05', aiCosts: 167, infrastructure: 55, storage: 19, voiceover: 110, total: 351 },\r\n  { date: '2024-01-06', aiCosts: 142, infrastructure: 47, storage: 16, voiceover: 78, total: 283 },\r\n  { date: '2024-01-07', aiCosts: 189, infrastructure: 58, storage: 22, voiceover: 125, total: 394 },\r\n];\r\n\r\nconst mockCostCategories = [\r\n  {\r\n    id: 1,\r\n    name: 'AI Content Generation',\r\n    icon: <SmartToy color=\"primary\" />,\r\n    currentSpend: 3250,\r\n    budgetLimit: 4000,\r\n    usage: 81.25,\r\n    change: +12.5,\r\n    subcategories: [\r\n      { name: 'GPT-4 API', cost: 1850, usage: '2.5M tokens' },\r\n      { name: 'Claude API', cost: 980, usage: '1.8M tokens' },\r\n      { name: 'DALL-E Image Gen', cost: 420, usage: '1.2K images' },\r\n    ],\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'Voice Synthesis',\r\n    icon: <Mic color=\"secondary\" />,\r\n    currentSpend: 1450,\r\n    budgetLimit: 2000,\r\n    usage: 72.5,\r\n    change: +8.7,\r\n    subcategories: [\r\n      { name: 'ElevenLabs API', cost: 890, usage: '45 hours' },\r\n      { name: 'Azure Speech', cost: 380, usage: '32 hours' },\r\n      { name: 'Google TTS', cost: 180, usage: '18 hours' },\r\n    ],\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'Infrastructure',\r\n    icon: <CloudUpload color=\"info\" />,\r\n    currentSpend: 890,\r\n    budgetLimit: 1200,\r\n    usage: 74.17,\r\n    change: +5.2,\r\n    subcategories: [\r\n      { name: 'GCP Compute', cost: 450, usage: '850 hours' },\r\n      { name: 'AWS Storage', cost: 280, usage: '2.5 TB' },\r\n      { name: 'Cloudflare CDN', cost: 160, usage: '8.2 TB transfer' },\r\n    ],\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'Video Processing',\r\n    icon: <VideoLibrary color=\"success\" />,\r\n    currentSpend: 680,\r\n    budgetLimit: 1000,\r\n    usage: 68,\r\n    change: -2.1,\r\n    subcategories: [\r\n      { name: 'FFmpeg Cloud', cost: 420, usage: '156 videos' },\r\n      { name: 'Thumbnail Gen', cost: 160, usage: '312 thumbnails' },\r\n      { name: 'Video Compression', cost: 100, usage: '89 GB processed' },\r\n    ],\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'Storage & Backup',\r\n    icon: <Storage color=\"warning\" />,\r\n    currentSpend: 320,\r\n    budgetLimit: 500,\r\n    usage: 64,\r\n    change: +3.8,\r\n    subcategories: [\r\n      { name: 'AWS S3', cost: 180, usage: '1.8 TB' },\r\n      { name: 'Google Drive', cost: 90, usage: '2 TB backup' },\r\n      { name: 'Dropbox Business', cost: 50, usage: '5 TB sync' },\r\n    ],\r\n  },\r\n];\r\n\r\nconst mockTransactions = [\r\n  {\r\n    id: 1,\r\n    date: '2024-01-14',\r\n    description: 'OpenAI API Usage - GPT-4',\r\n    category: 'AI Content Generation',\r\n    amount: 245.67,\r\n    type: 'expense',\r\n    status: 'completed',\r\n    usage: '850K tokens',\r\n  },\r\n  {\r\n    id: 2,\r\n    date: '2024-01-14',\r\n    description: 'ElevenLabs Voice Synthesis',\r\n    category: 'Voice Synthesis',\r\n    amount: 89.32,\r\n    type: 'expense',\r\n    status: 'completed',\r\n    usage: '12 hours',\r\n  },\r\n  {\r\n    id: 3,\r\n    date: '2024-01-13',\r\n    description: 'GCP Compute Engine',\r\n    category: 'Infrastructure',\r\n    amount: 156.78,\r\n    type: 'expense',\r\n    status: 'completed',\r\n    usage: '120 hours',\r\n  },\r\n  {\r\n    id: 4,\r\n    date: '2024-01-13',\r\n    description: 'YouTube Ad Revenue',\r\n    category: 'Revenue',\r\n    amount: 1250.00,\r\n    type: 'income',\r\n    status: 'completed',\r\n    usage: 'Tech Reviews channel',\r\n  },\r\n  {\r\n    id: 5,\r\n    date: '2024-01-12',\r\n    description: 'AWS S3 Storage',\r\n    category: 'Storage & Backup',\r\n    amount: 45.21,\r\n    type: 'expense',\r\n    status: 'completed',\r\n    usage: '890 GB',\r\n  },\r\n];\r\n\r\nconst mockBudgetAlerts = [\r\n  {\r\n    id: 1,\r\n    category: 'AI Content Generation',\r\n    message: 'Approaching 80% of monthly budget',\r\n    severity: 'warning' as const,\r\n    threshold: 80,\r\n    current: 81.25,\r\n  },\r\n  {\r\n    id: 2,\r\n    category: 'Infrastructure',\r\n    message: 'Cost spike detected - 25% above average',\r\n    severity: 'info' as const,\r\n    threshold: 100,\r\n    current: 125,\r\n  },\r\n];\r\n\r\ninterface CostMetrics {\r\n  totalSpent: number;\r\n  monthlyBudget: number;\r\n  projectedSpend: number;\r\n  costPerVideo: number;\r\n  efficiency: number;\r\n  savings: number;\r\n}\r\n\r\nexport const CostTracking: React.FC = () => {\r\n  const theme = useTheme();\r\n  const [selectedPeriod, setSelectedPeriod] = useState<string>('current');\r\n  const [viewMode, setViewMode] = useState<string>('categories');\r\n  const [loading, setLoading] = useState(false);\r\n  const [budgetDialogOpen, setBudgetDialogOpen] = useState(false);\r\n  const [editingCategory, setEditingCategory] = useState<any>(null);\r\n\r\n  const [metrics, setMetrics] = useState<CostMetrics>({\r\n    totalSpent: 6590,\r\n    monthlyBudget: 8700,\r\n    projectedSpend: 7850,\r\n    costPerVideo: 42.25,\r\n    efficiency: 87.3,\r\n    savings: 1250,\r\n  });\r\n\r\n  const handleRefresh = async () => {\r\n    setLoading(true);\r\n    setTimeout(() => {\r\n      setLoading(false);\r\n    }, 2000);\r\n  };\r\n\r\n  const formatCurrency = (value: number) => {\r\n    return new Intl.NumberFormat('en-US', {\r\n      style: 'currency',\r\n      currency: 'USD',\r\n      minimumFractionDigits: 2,\r\n      maximumFractionDigits: 2,\r\n    }).format(value);\r\n  };\r\n\r\n  const getBudgetColor = (usage: number) => {\r\n    if (usage >= 90) return 'error';\r\n    if (usage >= 75) return 'warning';\r\n    if (usage >= 50) return 'info';\r\n    return 'success';\r\n  };\r\n\r\n  const getChangeColor = (change: number) => {\r\n    return change > 0 ? 'error.main' : change < 0 ? 'success.main' : 'text.secondary';\r\n  };\r\n\r\n  const getChangeIcon = (change: number) => {\r\n    return change > 0 ? <TrendingUp /> : change < 0 ? <TrendingDown /> : null;\r\n  };\r\n\r\n  const handleEditBudget = (category: any) => {\r\n    setEditingCategory(category);\r\n    setBudgetDialogOpen(true);\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ flexGrow: 1, p: 3 }}>\r\n      {/* Header */}\r\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\r\n        <Box>\r\n          <Typography variant=\"h4\" fontWeight=\"bold\" gutterBottom>\r\n            Cost Tracking\r\n          </Typography>\r\n          <Typography variant=\"body2\" color=\"text.secondary\">\r\n            Monitor and optimize your YouTube automation costs\r\n          </Typography>\r\n        </Box>\r\n        \r\n        <Box sx={{ display: 'flex', gap: 2, alignItems: 'center' }}>\r\n          <ToggleButtonGroup\r\n            value={selectedPeriod}\r\n            exclusive\r\n            onChange={(e, value) => value && setSelectedPeriod(value)}\r\n            size=\"small\"\r\n          >\r\n            <ToggleButton value=\"current\">Current</ToggleButton>\r\n            <ToggleButton value=\"last\">Last Month</ToggleButton>\r\n            <ToggleButton value=\"quarter\">Quarter</ToggleButton>\r\n          </ToggleButtonGroup>\r\n\r\n          <IconButton onClick={handleRefresh} disabled={loading}>\r\n            <Refresh />\r\n          </IconButton>\r\n\r\n          <Button variant=\"outlined\" startIcon={<Download />}>\r\n            Export\r\n          </Button>\r\n\r\n          <Button variant=\"contained\" startIcon={<Add />}>\r\n            Add Expense\r\n          </Button>\r\n        </Box>\r\n      </Box>\r\n\r\n      {loading && <LinearProgress sx={{ mb: 3 }} />}\r\n\r\n      {/* Budget Alerts */}\r\n      {mockBudgetAlerts.map((alert) => (\r\n        <Alert\r\n          key={alert.id}\r\n          severity={alert.severity}\r\n          sx={{ mb: 2 }}\r\n          action={\r\n            <Button size=\"small\" color=\"inherit\">\r\n              Adjust Budget\r\n            </Button>\r\n          }\r\n          icon={alert.severity === 'warning' ? <Warning /> : <Notifications />}\r\n        >\r\n          <strong>{alert.category}:</strong> {alert.message}\r\n        </Alert>\r\n      ))}\r\n\r\n      {/* Key Metrics Cards */}\r\n      <Grid container spacing={3} sx={{ mb: 3 }}>\r\n        {[\r\n          { \r\n            title: 'Total Spent', \r\n            value: formatCurrency(metrics.totalSpent), \r\n            subtitle: `of ${formatCurrency(metrics.monthlyBudget)} budget`,\r\n            progress: (metrics.totalSpent / metrics.monthlyBudget) * 100,\r\n            icon: <AttachMoney />,\r\n            color: 'primary'\r\n          },\r\n          { \r\n            title: 'Projected Spend', \r\n            value: formatCurrency(metrics.projectedSpend), \r\n            subtitle: `${metrics.projectedSpend > metrics.monthlyBudget ? 'Over' : 'Under'} budget`,\r\n            progress: (metrics.projectedSpend / metrics.monthlyBudget) * 100,\r\n            icon: <Analytics />,\r\n            color: metrics.projectedSpend > metrics.monthlyBudget ? 'error' : 'success'\r\n          },\r\n          { \r\n            title: 'Cost per Video', \r\n            value: formatCurrency(metrics.costPerVideo), \r\n            subtitle: '15% improvement',\r\n            progress: metrics.efficiency,\r\n            icon: <VideoLibrary />,\r\n            color: 'info'\r\n          },\r\n          { \r\n            title: 'Monthly Savings', \r\n            value: formatCurrency(metrics.savings), \r\n            subtitle: 'vs manual creation',\r\n            progress: 85,\r\n            icon: <AccountBalance />,\r\n            color: 'success'\r\n          },\r\n        ].map((item, index) => (\r\n          <Grid item xs={12} sm={6} md={3} key={index}>\r\n            <Card sx={{ height: '100%' }}>\r\n              <CardContent>\r\n                <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 2 }}>\r\n                  <Typography variant=\"body2\" color=\"text.secondary\">\r\n                    {item.title}\r\n                  </Typography>\r\n                  <Box sx={{ color: `${item.color}.main` }}>\r\n                    {item.icon}\r\n                  </Box>\r\n                </Box>\r\n                <Typography variant=\"h4\" fontWeight=\"bold\" gutterBottom>\r\n                  {item.value}\r\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\r\n                  {item.subtitle}\r\n                </Typography>\r\n                <LinearProgress\r\n                  variant=\"determinate\"\r\n                  value={Math.min(item.progress, 100)}\r\n                  color={item.color as any}\r\n                  sx={{ height: 6, borderRadius: 3 }}\r\n                />\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n\r\n      {/* Cost Trends Chart */}\r\n      <Grid container spacing={3} sx={{ mb: 3 }}>\r\n        <Grid item xs={12} lg={8}>\r\n          <Paper sx={{ p: 3, height: 400 }}>\r\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\r\n              <Typography variant=\"h6\">Cost Trends</Typography>\r\n              <ToggleButtonGroup\r\n                value={viewMode}\r\n                exclusive\r\n                onChange={(e, value) => value && setViewMode(value)}\r\n                size=\"small\"\r\n              >\r\n                <ToggleButton value=\"categories\">By Category</ToggleButton>\r\n                <ToggleButton value=\"total\">Total</ToggleButton>\r\n                <ToggleButton value=\"efficiency\">Efficiency</ToggleButton>\r\n              </ToggleButtonGroup>\r\n            </Box>\r\n            <ResponsiveContainer width=\"100%\" height=\"90%\">\r\n              <ComposedChart data={mockCostData}>\r\n                <CartesianGrid strokeDasharray=\"3 3\" />\r\n                <XAxis dataKey=\"date\" tickFormatter={(value) => format(new Date(value), 'MMM dd')} />\r\n                <YAxis />\r\n                <RechartsTooltip \r\n                  labelFormatter={(value) => format(new Date(value), 'PPP')}\r\n                  formatter={(value: any, name: string) => [formatCurrency(value), name]}\r\n                />\r\n                <Legend />\r\n                {viewMode === 'categories' ? (\r\n                  <>\r\n                    <Area dataKey=\"aiCosts\" stackId=\"1\" stroke=\"#8884d8\" fill=\"#8884d8\" fillOpacity={0.6} name=\"AI Costs\" />\r\n                    <Area dataKey=\"infrastructure\" stackId=\"1\" stroke=\"#82ca9d\" fill=\"#82ca9d\" fillOpacity={0.6} name=\"Infrastructure\" />\r\n                    <Area dataKey=\"voiceover\" stackId=\"1\" stroke=\"#ffc658\" fill=\"#ffc658\" fillOpacity={0.6} name=\"Voice Synthesis\" />\r\n                    <Area dataKey=\"storage\" stackId=\"1\" stroke=\"#ff7c7c\" fill=\"#ff7c7c\" fillOpacity={0.6} name=\"Storage\" />\r\n                  </>\r\n                ) : (\r\n                  <Line\r\n                    type=\"monotone\"\r\n                    dataKey=\"total\"\r\n                    stroke={theme.palette.primary.main}\r\n                    strokeWidth={3}\r\n                    dot={{ r: 6 }}\r\n                    name=\"Total Cost\"\r\n                  />\r\n                )}\r\n              </ComposedChart>\r\n            </ResponsiveContainer>\r\n          </Paper>\r\n        </Grid>\r\n\r\n        {/* Budget Overview */}\r\n        <Grid item xs={12} lg={4}>\r\n          <Paper sx={{ p: 3, height: 400 }}>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n              Budget Overview\r\n            </Typography>\r\n            <ResponsiveContainer width=\"100%\" height=\"90%\">\r\n              <PieChart>\r\n                <Pie\r\n                  data={mockCostCategories.map(cat => ({\r\n                    name: cat.name,\r\n                    value: cat.currentSpend,\r\n                    color: theme.palette.mode === 'dark' ? \r\n                      ['#8884d8', '#82ca9d', '#ffc658', '#ff7c7c', '#8dd1e1'][cat.id - 1] :\r\n                      ['#8884d8', '#82ca9d', '#ffc658', '#ff7c7c', '#8dd1e1'][cat.id - 1]\r\n                  }))}\r\n                  cx=\"50%\"\r\n                  cy=\"50%\"\r\n                  labelLine={false}\r\n                  label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\r\n                  outerRadius={80}\r\n                  fill=\"#8884d8\"\r\n                  dataKey=\"value\"\r\n                >\r\n                  {mockCostCategories.map((entry, index) => (\r\n                    <Cell key={`cell-${index}`} fill={\r\n                      ['#8884d8', '#82ca9d', '#ffc658', '#ff7c7c', '#8dd1e1'][index]\r\n                    } />\r\n                  ))}\r\n                </Pie>\r\n                <RechartsTooltip formatter={(value: any) => formatCurrency(value)} />\r\n              </PieChart>\r\n            </ResponsiveContainer>\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* Cost Categories */}\r\n      <Grid container spacing={3} sx={{ mb: 3 }}>\r\n        <Grid item xs={12}>\r\n          <Paper sx={{ p: 3 }}>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n              Cost Categories\r\n            </Typography>\r\n            <Grid container spacing={2}>\r\n              {mockCostCategories.map((category) => (\r\n                <Grid item xs={12} md={6} lg={4} key={category.id}>\r\n                  <Card variant=\"outlined\" sx={{ height: '100%' }}>\r\n                    <CardContent>\r\n                      <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 2 }}>\r\n                        <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                          {category.icon}\r\n                          <Typography variant=\"h6\" sx={{ ml: 1 }}>\r\n                            {category.name}\r\n                          </Typography>\r\n                        </Box>\r\n                        <IconButton size=\"small\" onClick={() => handleEditBudget(category)}>\r\n                          <Edit />\r\n                        </IconButton>\r\n                      </Box>\r\n                      \r\n                      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>\r\n                        <Typography variant=\"h5\" fontWeight=\"bold\">\r\n                          {formatCurrency(category.currentSpend)}\r\n                        </Typography>\r\n                        <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                          {getChangeIcon(category.change)}\r\n                          <Typography \r\n                            variant=\"body2\" \r\n                            color={getChangeColor(category.change)}\r\n                            sx={{ ml: 0.5 }}\r\n                          >\r\n                            {category.change > 0 ? '+' : ''}{category.change}%\r\n                          </Typography>\r\n                        </Box>\r\n                      </Box>\r\n                      \r\n                      <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\r\n                        of {formatCurrency(category.budgetLimit)} budget\r\n                      </Typography>\r\n                      \r\n                      <LinearProgress\r\n                        variant=\"determinate\"\r\n                        value={category.usage}\r\n                        color={getBudgetColor(category.usage)}\r\n                        sx={{ mb: 2, height: 8, borderRadius: 4 }}\r\n                      />\r\n                      \r\n                      <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\r\n                        Breakdown:\r\n                      </Typography>\r\n                      {category.subcategories.map((sub, idx) => (\r\n                        <Box key={idx} sx={{ display: 'flex', justifyContent: 'space-between', mb: 0.5 }}>\r\n                          <Typography variant=\"caption\" color=\"text.secondary\">\r\n                            {sub.name}\r\n                          </Typography>\r\n                          <Typography variant=\"caption\" fontWeight=\"bold\">\r\n                            {formatCurrency(sub.cost)}\r\n                          </Typography>\r\n                        </Box>\r\n                      ))}\r\n                    </CardContent>\r\n                  </Card>\r\n                </Grid>\r\n              ))}\r\n            </Grid>\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* Recent Transactions */}\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={12}>\r\n          <Paper sx={{ p: 3 }}>\r\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\r\n              <Typography variant=\"h6\">Recent Transactions</Typography>\r\n              <Button variant=\"outlined\" size=\"small\" startIcon={<Receipt />}>\r\n                View All\r\n              </Button>\r\n            </Box>\r\n            <TableContainer>\r\n              <Table>\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell>Date</TableCell>\r\n                    <TableCell>Description</TableCell>\r\n                    <TableCell>Category</TableCell>\r\n                    <TableCell>Usage</TableCell>\r\n                    <TableCell align=\"right\">Amount</TableCell>\r\n                    <TableCell align=\"center\">Status</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {mockTransactions.map((transaction) => (\r\n                    <TableRow key={transaction.id} hover>\r\n                      <TableCell>\r\n                        <Typography variant=\"body2\">\r\n                          {format(new Date(transaction.date), 'MMM dd, yyyy')}\r\n                        </Typography>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Typography variant=\"body2\" fontWeight=\"bold\">\r\n                          {transaction.description}\r\n                        </Typography>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Chip\r\n                          label={transaction.category}\r\n                          size=\"small\"\r\n                          color={transaction.type === 'income' ? 'success' : 'default'}\r\n                          variant=\"outlined\"\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Typography variant=\"body2\" color=\"text.secondary\">\r\n                          {transaction.usage}\r\n                        </Typography>\r\n                      </TableCell>\r\n                      <TableCell align=\"right\">\r\n                        <Typography \r\n                          variant=\"body2\" \r\n                          fontWeight=\"bold\"\r\n                          color={transaction.type === 'income' ? 'success.main' : 'text.primary'}\r\n                        >\r\n                          {transaction.type === 'income' ? '+' : '-'}{formatCurrency(transaction.amount)}\r\n                        </Typography>\r\n                      </TableCell>\r\n                      <TableCell align=\"center\">\r\n                        <Chip\r\n                          label={transaction.status}\r\n                          size=\"small\"\r\n                          color=\"success\"\r\n                          variant=\"outlined\"\r\n                        />\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* Budget Edit Dialog */}\r\n      <Dialog open={budgetDialogOpen} onClose={() => setBudgetDialogOpen(false)} maxWidth=\"sm\" fullWidth>\r\n        <DialogTitle>Edit Budget - {editingCategory?.name}</DialogTitle>\r\n        <DialogContent>\r\n          <Grid container spacing={2} sx={{ mt: 1 }}>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Budget Limit\"\r\n                type=\"number\"\r\n                defaultValue={editingCategory?.budgetLimit}\r\n                InputProps={{\r\n                  startAdornment: '$',\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <FormControlLabel\r\n                control={<Switch defaultChecked />}\r\n                label=\"Enable budget alerts\"\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Alert Threshold (%)\"\r\n                type=\"number\"\r\n                defaultValue={80}\r\n                InputProps={{\r\n                  endAdornment: '%',\r\n                }}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setBudgetDialogOpen(false)}>Cancel</Button>\r\n          <Button variant=\"contained\" onClick={() => setBudgetDialogOpen(false)}>\r\n            Save Changes\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default CostTracking;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\pages\\Dashboard\\Dashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'LinearProgress' is defined but never used.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'IconButton' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Tooltip' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Refresh' is defined but never used.","line":25,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'NotificationsActive' is defined but never used.","line":26,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ErrorIcon' is defined but never used.","line":29,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'LineChart' is defined but never used.","line":33,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Line' is defined but never used.","line":34,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CostBreakdown' is defined but never used.","line":56,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":56,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'theme' is assigned a value but never used.","line":100,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":100,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'videos' is assigned a value but never used.","line":102,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":102,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setMetrics' is assigned a value but never used.","line":103,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":103,"endColumn":29},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'handleRefresh'. Either include it or remove the dependency array.","line":121,"column":6,"nodeType":"ArrayExpression","endLine":121,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [handleRefresh]","fix":{"range":[3326,3328],"text":"[handleRefresh]"}}]}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Main Dashboard Page Component\r\n * MVP Screen Design - Dashboard mockup\r\n */\r\nimport React, { useEffect, useState } from 'react';\r\nimport {\r\n  Box,\r\n  Grid,\r\n  Paper,\r\n  Typography,\r\n  Card,\r\n  CardContent,\r\n  LinearProgress,\r\n  Chip,\r\n  IconButton,\r\n  Tooltip,\r\n  Alert,\r\n} from '@mui/material';\r\nimport {\r\n  TrendingUp,\r\n  VideoLibrary,\r\n  AttachMoney,\r\n  People,\r\n  Schedule,\r\n  Refresh,\r\n  NotificationsActive,\r\n  CheckCircle,\r\n  Warning,\r\n  Error as ErrorIcon,\r\n} from '@mui/icons-material';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  AreaChart,\r\n  Area,\r\n  BarChart,\r\n  Bar,\r\n  PieChart,\r\n  Pie,\r\n  Cell,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip as RechartsTooltip,\r\n  Legend,\r\n  ResponsiveContainer,\r\n} from 'recharts';\r\n\r\nimport { useAuthStore } from '../../stores/authStore';\r\nimport { useVideoStore } from '../../stores/videoStore';\r\nimport { DashboardHeader } from '../../components/Dashboard/DashboardHeader';\r\nimport { MetricCard } from '../../components/Dashboard/MetricCard';\r\nimport { VideoQueue } from '../../components/Dashboard/VideoQueue';\r\nimport { RecentActivity } from '../../components/Dashboard/RecentActivity';\r\nimport { CostBreakdown } from '../../components/Dashboard/CostBreakdown';\r\n\r\n// Mock data for charts\r\nconst mockViewsData = [\r\n  { date: 'Mon', views: 12000, engagement: 850 },\r\n  { date: 'Tue', views: 15000, engagement: 1200 },\r\n  { date: 'Wed', views: 13500, engagement: 980 },\r\n  { date: 'Thu', views: 18000, engagement: 1500 },\r\n  { date: 'Fri', views: 22000, engagement: 1800 },\r\n  { date: 'Sat', views: 19000, engagement: 1600 },\r\n  { date: 'Sun', views: 21000, engagement: 1900 },\r\n];\r\n\r\nconst mockCostData = [\r\n  { name: 'Script Generation', value: 35, color: '#8884d8' },\r\n  { name: 'Voice Synthesis', value: 25, color: '#82ca9d' },\r\n  { name: 'Thumbnail Creation', value: 15, color: '#ffc658' },\r\n  { name: 'Video Processing', value: 20, color: '#ff7c7c' },\r\n  { name: 'Infrastructure', value: 5, color: '#8dd1e1' },\r\n];\r\n\r\nconst mockRevenueData = [\r\n  { month: 'Jan', revenue: 4500, costs: 1200 },\r\n  { month: 'Feb', revenue: 5200, costs: 1400 },\r\n  { month: 'Mar', revenue: 6800, costs: 1600 },\r\n  { month: 'Apr', revenue: 7500, costs: 1800 },\r\n  { month: 'May', revenue: 8900, costs: 2000 },\r\n  { month: 'Jun', revenue: 9800, costs: 2200 },\r\n];\r\n\r\ninterface DashboardMetrics {\r\n  totalVideos: number;\r\n  totalViews: number;\r\n  totalRevenue: number;\r\n  totalCosts: number;\r\n  activeChannels: number;\r\n  queuedVideos: number;\r\n  processingVideos: number;\r\n  completedToday: number;\r\n  averageCostPerVideo: number;\r\n  engagementRate: number;\r\n}\r\n\r\nexport const Dashboard: React.FC = () => {\r\n  const theme = useTheme();\r\n  const { user } = useAuthStore();\r\n  const { videos, fetchVideos } = useVideoStore();\r\n  const [metrics, setMetrics] = useState<DashboardMetrics>({\r\n    totalVideos: 156,\r\n    totalViews: 2450000,\r\n    totalRevenue: 9800,\r\n    totalCosts: 2200,\r\n    activeChannels: 5,\r\n    queuedVideos: 8,\r\n    processingVideos: 3,\r\n    completedToday: 12,\r\n    averageCostPerVideo: 2.85,\r\n    engagementRate: 8.5,\r\n  });\r\n  const [loading, setLoading] = useState(false);\r\n  const [lastUpdated, setLastUpdated] = useState(new Date());\r\n\r\n  useEffect(() => {\r\n    // Fetch initial data\r\n    handleRefresh();\r\n  }, []);\r\n\r\n  const handleRefresh = async () => {\r\n    setLoading(true);\r\n    try {\r\n      // Fetch latest metrics\r\n      await fetchVideos();\r\n      // Update metrics from API\r\n      setLastUpdated(new Date());\r\n    } catch (error) {\r\n      console.error('Failed to refresh dashboard:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const formatCurrency = (value: number) => {\r\n    return new Intl.NumberFormat('en-US', {\r\n      style: 'currency',\r\n      currency: 'USD',\r\n      minimumFractionDigits: 0,\r\n      maximumFractionDigits: 0,\r\n    }).format(value);\r\n  };\r\n\r\n  const formatNumber = (value: number) => {\r\n    if (value >= 1000000) {\r\n      return `${(value / 1000000).toFixed(1)}M`;\r\n    } else if (value >= 1000) {\r\n      return `${(value / 1000).toFixed(1)}K`;\r\n    }\r\n    return value.toString();\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ flexGrow: 1, p: 3 }}>\r\n      {/* Header */}\r\n      <DashboardHeader\r\n        title=\"Dashboard\"\r\n        subtitle={`Welcome back, ${user?.name || 'User'}`}\r\n        lastUpdated={lastUpdated}\r\n        onRefresh={handleRefresh}\r\n        loading={loading}\r\n      />\r\n\r\n      {/* Alert for cost threshold */}\r\n      {metrics.totalCosts > 2000 && (\r\n        <Alert\r\n          severity=\"warning\"\r\n          icon={<Warning />}\r\n          sx={{ mb: 3 }}\r\n          action={\r\n            <Chip label=\"View Details\" size=\"small\" clickable color=\"warning\" />\r\n          }\r\n        >\r\n          Monthly cost threshold approaching. Current: {formatCurrency(metrics.totalCosts)} / {formatCurrency(2500)}\r\n        </Alert>\r\n      )}\r\n\r\n      {/* Metrics Cards */}\r\n      <Grid container spacing={3} sx={{ mb: 3 }}>\r\n        <Grid item xs={12} sm={6} md={3}>\r\n          <MetricCard\r\n            title=\"Total Videos\"\r\n            value={metrics.totalVideos}\r\n            icon={<VideoLibrary />}\r\n            trend=\"+12%\"\r\n            trendDirection=\"up\"\r\n            color=\"#8884d8\"\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={6} md={3}>\r\n          <MetricCard\r\n            title=\"Total Views\"\r\n            value={formatNumber(metrics.totalViews)}\r\n            icon={<TrendingUp />}\r\n            trend=\"+25%\"\r\n            trendDirection=\"up\"\r\n            color=\"#82ca9d\"\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={6} md={3}>\r\n          <MetricCard\r\n            title=\"Revenue\"\r\n            value={formatCurrency(metrics.totalRevenue)}\r\n            icon={<AttachMoney />}\r\n            trend=\"+18%\"\r\n            trendDirection=\"up\"\r\n            color=\"#ffc658\"\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={6} md={3}>\r\n          <MetricCard\r\n            title=\"Avg Cost/Video\"\r\n            value={`$${metrics.averageCostPerVideo}`}\r\n            icon={<AttachMoney />}\r\n            trend=\"-5%\"\r\n            trendDirection=\"down\"\r\n            color=\"#ff7c7c\"\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* Charts Row */}\r\n      <Grid container spacing={3} sx={{ mb: 3 }}>\r\n        {/* Views & Engagement Chart */}\r\n        <Grid item xs={12} md={8}>\r\n          <Paper sx={{ p: 3, height: 400 }}>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n              Views & Engagement Trend\r\n            </Typography>\r\n            <ResponsiveContainer width=\"100%\" height=\"90%\">\r\n              <AreaChart data={mockViewsData}>\r\n                <CartesianGrid strokeDasharray=\"3 3\" />\r\n                <XAxis dataKey=\"date\" />\r\n                <YAxis />\r\n                <RechartsTooltip />\r\n                <Legend />\r\n                <Area\r\n                  type=\"monotone\"\r\n                  dataKey=\"views\"\r\n                  stackId=\"1\"\r\n                  stroke=\"#8884d8\"\r\n                  fill=\"#8884d8\"\r\n                  fillOpacity={0.6}\r\n                />\r\n                <Area\r\n                  type=\"monotone\"\r\n                  dataKey=\"engagement\"\r\n                  stackId=\"2\"\r\n                  stroke=\"#82ca9d\"\r\n                  fill=\"#82ca9d\"\r\n                  fillOpacity={0.6}\r\n                />\r\n              </AreaChart>\r\n            </ResponsiveContainer>\r\n          </Paper>\r\n        </Grid>\r\n\r\n        {/* Cost Breakdown Pie Chart */}\r\n        <Grid item xs={12} md={4}>\r\n          <Paper sx={{ p: 3, height: 400 }}>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n              Cost Breakdown\r\n            </Typography>\r\n            <ResponsiveContainer width=\"100%\" height=\"90%\">\r\n              <PieChart>\r\n                <Pie\r\n                  data={mockCostData}\r\n                  cx=\"50%\"\r\n                  cy=\"50%\"\r\n                  labelLine={false}\r\n                  label={(entry) => `${entry.name}: ${entry.value}%`}\r\n                  outerRadius={80}\r\n                  fill=\"#8884d8\"\r\n                  dataKey=\"value\"\r\n                >\r\n                  {mockCostData.map((entry, index) => (\r\n                    <Cell key={`cell-${index}`} fill={entry.color} />\r\n                  ))}\r\n                </Pie>\r\n                <RechartsTooltip />\r\n              </PieChart>\r\n            </ResponsiveContainer>\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* Video Queue and Activity */}\r\n      <Grid container spacing={3} sx={{ mb: 3 }}>\r\n        {/* Video Queue */}\r\n        <Grid item xs={12} md={6}>\r\n          <VideoQueue\r\n            queuedCount={metrics.queuedVideos}\r\n            processingCount={metrics.processingVideos}\r\n            completedCount={metrics.completedToday}\r\n          />\r\n        </Grid>\r\n\r\n        {/* Recent Activity */}\r\n        <Grid item xs={12} md={6}>\r\n          <RecentActivity />\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* Revenue vs Costs Chart */}\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={12}>\r\n          <Paper sx={{ p: 3, height: 400 }}>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n              Revenue vs Costs Trend\r\n            </Typography>\r\n            <ResponsiveContainer width=\"100%\" height=\"90%\">\r\n              <BarChart data={mockRevenueData}>\r\n                <CartesianGrid strokeDasharray=\"3 3\" />\r\n                <XAxis dataKey=\"month\" />\r\n                <YAxis />\r\n                <RechartsTooltip />\r\n                <Legend />\r\n                <Bar dataKey=\"revenue\" fill=\"#82ca9d\" />\r\n                <Bar dataKey=\"costs\" fill=\"#ff7c7c\" />\r\n              </BarChart>\r\n            </ResponsiveContainer>\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* Quick Stats Footer */}\r\n      <Grid container spacing={2} sx={{ mt: 3 }}>\r\n        <Grid item xs={6} sm={3}>\r\n          <Card variant=\"outlined\">\r\n            <CardContent sx={{ textAlign: 'center', py: 2 }}>\r\n              <People color=\"primary\" />\r\n              <Typography variant=\"h6\">{metrics.activeChannels}</Typography>\r\n              <Typography variant=\"body2\" color=\"text.secondary\">\r\n                Active Channels\r\n              </Typography>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n        <Grid item xs={6} sm={3}>\r\n          <Card variant=\"outlined\">\r\n            <CardContent sx={{ textAlign: 'center', py: 2 }}>\r\n              <Schedule color=\"warning\" />\r\n              <Typography variant=\"h6\">{metrics.queuedVideos}</Typography>\r\n              <Typography variant=\"body2\" color=\"text.secondary\">\r\n                In Queue\r\n              </Typography>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n        <Grid item xs={6} sm={3}>\r\n          <Card variant=\"outlined\">\r\n            <CardContent sx={{ textAlign: 'center', py: 2 }}>\r\n              <CheckCircle color=\"success\" />\r\n              <Typography variant=\"h6\">{metrics.completedToday}</Typography>\r\n              <Typography variant=\"body2\" color=\"text.secondary\">\r\n                Completed Today\r\n              </Typography>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n        <Grid item xs={6} sm={3}>\r\n          <Card variant=\"outlined\">\r\n            <CardContent sx={{ textAlign: 'center', py: 2 }}>\r\n              <TrendingUp color=\"info\" />\r\n              <Typography variant=\"h6\">{metrics.engagementRate}%</Typography>\r\n              <Typography variant=\"body2\" color=\"text.secondary\">\r\n                Engagement Rate\r\n              </Typography>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n    </Box>\r\n  );\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\pages\\Dashboard\\DashboardRealtime.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useCallback' is defined but never used.","line":5,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":49},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Card' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CardContent' is defined but never used.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'People' is defined but never used.","line":29,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Refresh' is defined but never used.","line":31,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Pause' is defined but never used.","line":36,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Stop' is defined but never used.","line":37,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AreaChart' is defined but never used.","line":44,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":44,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Area' is defined but never used.","line":45,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":45,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'BarChart' is defined but never used.","line":46,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Bar' is defined but never used.","line":47,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":47,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'PieChart' is defined but never used.","line":48,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Pie' is defined but never used.","line":49,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":49,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Cell' is defined but never used.","line":50,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":50,"endColumn":7},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":130,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":130,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2802,2805],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2802,2805],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":131,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":131,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2859,2862],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2859,2862],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchInitialMetrics'. Either include it or remove the dependency array.","line":142,"column":6,"nodeType":"ArrayExpression","endLine":142,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchInitialMetrics]","fix":{"range":[3110,3112],"text":"[fetchInitialMetrics]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":212,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":212,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5166,5169],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5166,5169],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":224,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":224,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5543,5546],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5543,5546],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":233,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":233,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5776,5779],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5776,5779],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":243,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":243,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6133,6136],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6133,6136],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":258,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":258,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6501,6504],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6501,6504],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":21,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Real-time Dashboard with WebSocket Integration\n * P0 Task: Dashboard Implementation with real-time updates\n */\nimport React, { useEffect, useState, useCallback } from 'react';\nimport {\n  Box,\n  Grid,\n  Paper,\n  Typography,\n  Card,\n  CardContent,\n  LinearProgress,\n  Chip,\n  Alert,\n  Badge,\n  Avatar,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n  Divider,\n  CircularProgress,\n} from '@mui/material';\nimport {\n  TrendingUp,\n  VideoLibrary,\n  AttachMoney,\n  People,\n  Schedule,\n  Refresh,\n  CheckCircle,\n  Warning,\n  Error as ErrorIcon,\n  PlayCircle,\n  Pause,\n  Stop,\n  FiberManualRecord,\n} from '@mui/icons-material';\nimport { useTheme } from '@mui/material/styles';\nimport {\n  LineChart,\n  Line,\n  AreaChart,\n  Area,\n  BarChart,\n  Bar,\n  PieChart,\n  Pie,\n  Cell,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip as RechartsTooltip,\n  Legend,\n  ResponsiveContainer,\n} from 'recharts';\n\nimport { useDashboardWebSocket, useMetricsWebSocket } from '../../hooks/useWebSocket';\nimport { useAuthStore } from '../../stores/authStore';\nimport { DashboardHeader } from '../../components/Dashboard/DashboardHeader';\nimport { MetricCard } from '../../components/Dashboard/MetricCard';\nimport { api } from '../../services/api';\n\ninterface RealTimeMetrics {\n  totalVideos: number;\n  totalViews: number;\n  totalRevenue: number;\n  totalCosts: number;\n  activeChannels: number;\n  queuedVideos: number;\n  processingVideos: number;\n  completedToday: number;\n  averageCostPerVideo: number;\n  engagementRate: number;\n  activeGenerations: Array<{\n    videoId: string;\n    channelId: string;\n    phase: string;\n    progress: number;\n    startTime: string;\n    estimatedCompletion: string;\n  }>;\n  recentCosts: Array<{\n    service: string;\n    amount: number;\n    timestamp: string;\n  }>;\n  quotaStatus: {\n    used: number;\n    total: number;\n    percentage: number;\n  };\n}\n\ninterface VideoGenerationStatus {\n  videoId: string;\n  phase: string;\n  progress: number;\n  currentCost: number;\n  estimatedTime: string;\n  quality?: number;\n}\n\nexport const DashboardRealtime: React.FC = () => {\n  const theme = useTheme();\n  const { user } = useAuthStore();\n  \n  // WebSocket connections\n  const dashboardWs = useDashboardWebSocket();\n  const metricsWs = useMetricsWebSocket();\n  \n  const [metrics, setMetrics] = useState<RealTimeMetrics>({\n    totalVideos: 0,\n    totalViews: 0,\n    totalRevenue: 0,\n    totalCosts: 0,\n    activeChannels: 0,\n    queuedVideos: 0,\n    processingVideos: 0,\n    completedToday: 0,\n    averageCostPerVideo: 0,\n    engagementRate: 0,\n    activeGenerations: [],\n    recentCosts: [],\n    quotaStatus: { used: 0, total: 150000, percentage: 0 },\n  });\n  \n  const [videoGenerations, setVideoGenerations] = useState<VideoGenerationStatus[]>([]);\n  const [notifications, setNotifications] = useState<any[]>([]);\n  const [chartData, setChartData] = useState<any>({\n    views: [],\n    costs: [],\n    revenue: [],\n  });\n  const [loading, setLoading] = useState(false);\n  const [lastUpdated, setLastUpdated] = useState(new Date());\n\n  // Fetch initial metrics\n  useEffect(() => {\n    fetchInitialMetrics();\n  }, []);\n\n  // Handle WebSocket messages\n  useEffect(() => {\n    if (dashboardWs.lastMessage) {\n      handleWebSocketMessage(dashboardWs.lastMessage);\n    }\n  }, [dashboardWs.lastMessage]);\n\n  useEffect(() => {\n    if (metricsWs.lastMessage) {\n      handleMetricsUpdate(metricsWs.lastMessage);\n    }\n  }, [metricsWs.lastMessage]);\n\n  // Subscribe to specific WebSocket events\n  useEffect(() => {\n    const unsubscribeVideoUpdate = dashboardWs.subscribe('video-update', (data) => {\n      handleVideoUpdate(data);\n    });\n\n    const unsubscribeCostUpdate = dashboardWs.subscribe('cost-update', (data) => {\n      handleCostUpdate(data);\n    });\n\n    const unsubscribeGenerationStatus = dashboardWs.subscribe('generation-status', (data) => {\n      handleGenerationStatus(data);\n    });\n\n    return () => {\n      unsubscribeVideoUpdate?.();\n      unsubscribeCostUpdate?.();\n      unsubscribeGenerationStatus?.();\n    };\n  }, [dashboardWs]);\n\n  const fetchInitialMetrics = async () => {\n    setLoading(true);\n    try {\n      // Fetch dashboard metrics\n      const response = await api.get('/dashboard/metrics');\n      setMetrics(response.data);\n      \n      // Fetch chart data\n      const chartResponse = await api.get('/dashboard/charts');\n      setChartData(chartResponse.data);\n      \n      // Fetch active generations\n      const generationsResponse = await api.get('/test/test-generation-status');\n      if (generationsResponse.data.active_generations) {\n        const generations = Object.entries(generationsResponse.data.active_generations).map(\n          ([videoId, phase]) => ({\n            videoId,\n            phase: phase as string,\n            progress: calculateProgressFromPhase(phase as string),\n            currentCost: 0,\n            estimatedTime: '5 min',\n          })\n        );\n        setVideoGenerations(generations);\n      }\n      \n      setLastUpdated(new Date());\n    } catch (error) {\n      console.error('Failed to fetch metrics:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleWebSocketMessage = (message: any) => {\n    console.log('Dashboard WebSocket message:', message);\n    \n    if (message.type === 'metrics-update') {\n      setMetrics(prev => ({ ...prev, ...message.data }));\n    } else if (message.type === 'notification') {\n      setNotifications(prev => [message, ...prev].slice(0, 10));\n    }\n    \n    setLastUpdated(new Date());\n  };\n\n  const handleMetricsUpdate = (data: any) => {\n    if (data.metrics) {\n      setMetrics(prev => ({ ...prev, ...data.metrics }));\n    }\n    if (data.chartData) {\n      setChartData(prev => ({ ...prev, ...data.chartData }));\n    }\n  };\n\n  const handleVideoUpdate = (data: any) => {\n    setMetrics(prev => ({\n      ...prev,\n      totalVideos: prev.totalVideos + (data.increment || 0),\n      processingVideos: data.processingCount || prev.processingVideos,\n      queuedVideos: data.queuedCount || prev.queuedVideos,\n      completedToday: data.completedToday || prev.completedToday,\n    }));\n  };\n\n  const handleCostUpdate = (data: any) => {\n    setMetrics(prev => ({\n      ...prev,\n      totalCosts: prev.totalCosts + (data.amount || 0),\n      recentCosts: [\n        { \n          service: data.service, \n          amount: data.amount, \n          timestamp: new Date().toISOString() \n        },\n        ...prev.recentCosts\n      ].slice(0, 10),\n    }));\n  };\n\n  const handleGenerationStatus = (data: any) => {\n    setVideoGenerations(prev => {\n      const existing = prev.find(g => g.videoId === data.videoId);\n      if (existing) {\n        return prev.map(g => \n          g.videoId === data.videoId \n            ? { ...g, ...data } \n            : g\n        );\n      } else {\n        return [...prev, data];\n      }\n    });\n  };\n\n  const calculateProgressFromPhase = (phase: string): number => {\n    const phaseProgress: { [key: string]: number } = {\n      'initialization': 5,\n      'trend_analysis': 15,\n      'script_generation': 30,\n      'voice_synthesis': 45,\n      'visual_generation': 60,\n      'video_assembly': 75,\n      'quality_check': 85,\n      'publishing': 95,\n      'completed': 100,\n    };\n    return phaseProgress[phase] || 0;\n  };\n\n  const getPhaseColor = (phase: string): string => {\n    if (phase === 'completed') return theme.palette.success.main;\n    if (phase === 'failed') return theme.palette.error.main;\n    if (phase.includes('processing') || phase.includes('synthesis')) return theme.palette.warning.main;\n    return theme.palette.info.main;\n  };\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    }).format(value);\n  };\n\n  const formatNumber = (value: number) => {\n    if (value >= 1000000) {\n      return `${(value / 1000000).toFixed(1)}M`;\n    } else if (value >= 1000) {\n      return `${(value / 1000).toFixed(1)}K`;\n    }\n    return value.toString();\n  };\n\n  return (\n    <Box sx={{ flexGrow: 1, p: 3 }}>\n      {/* Header with WebSocket Status */}\n      <DashboardHeader\n        title=\"Real-time Dashboard\"\n        subtitle={`Welcome back, ${user?.name || 'User'}`}\n        lastUpdated={lastUpdated}\n        onRefresh={fetchInitialMetrics}\n        loading={loading}\n        extra={\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n            <Chip\n              icon={<FiberManualRecord />}\n              label={dashboardWs.connected ? 'Live' : 'Offline'}\n              color={dashboardWs.connected ? 'success' : 'error'}\n              size=\"small\"\n              variant=\"outlined\"\n            />\n            {metrics.processingVideos > 0 && (\n              <Badge badgeContent={metrics.processingVideos} color=\"warning\">\n                <CircularProgress size={20} />\n              </Badge>\n            )}\n          </Box>\n        }\n      />\n\n      {/* Cost Alert */}\n      {metrics.totalCosts > metrics.totalRevenue * 0.3 && (\n        <Alert\n          severity=\"warning\"\n          icon={<Warning />}\n          sx={{ mb: 3 }}\n        >\n          Cost ratio high: {((metrics.totalCosts / metrics.totalRevenue) * 100).toFixed(1)}% of revenue\n        </Alert>\n      )}\n\n      {/* Real-time Metrics Cards */}\n      <Grid container spacing={3} sx={{ mb: 3 }}>\n        <Grid item xs={12} sm={6} md={3}>\n          <MetricCard\n            title=\"Videos Today\"\n            value={metrics.completedToday}\n            icon={<VideoLibrary />}\n            trend={metrics.processingVideos > 0 ? `+${metrics.processingVideos} processing` : ''}\n            trendDirection=\"up\"\n            color=\"#8884d8\"\n            realtime\n          />\n        </Grid>\n        <Grid item xs={12} sm={6} md={3}>\n          <MetricCard\n            title=\"Live Cost\"\n            value={formatCurrency(metrics.totalCosts)}\n            icon={<AttachMoney />}\n            trend={`Avg: ${formatCurrency(metrics.averageCostPerVideo)}/video`}\n            trendDirection={metrics.averageCostPerVideo < 3 ? 'down' : 'up'}\n            color={metrics.averageCostPerVideo < 3 ? '#82ca9d' : '#ff7c7c'}\n            realtime\n          />\n        </Grid>\n        <Grid item xs={12} sm={6} md={3}>\n          <MetricCard\n            title=\"Queue Status\"\n            value={metrics.queuedVideos}\n            icon={<Schedule />}\n            trend={`${metrics.processingVideos} processing`}\n            color=\"#ffc658\"\n            realtime\n          />\n        </Grid>\n        <Grid item xs={12} sm={6} md={3}>\n          <MetricCard\n            title=\"API Quota\"\n            value={`${metrics.quotaStatus.percentage.toFixed(1)}%`}\n            icon={<TrendingUp />}\n            trend={`${formatNumber(metrics.quotaStatus.used)}/${formatNumber(metrics.quotaStatus.total)}`}\n            trendDirection={metrics.quotaStatus.percentage > 80 ? 'up' : 'down'}\n            color={metrics.quotaStatus.percentage > 80 ? '#ff7c7c' : '#82ca9d'}\n            realtime\n          />\n        </Grid>\n      </Grid>\n\n      {/* Active Video Generations */}\n      {videoGenerations.length > 0 && (\n        <Paper sx={{ p: 3, mb: 3 }}>\n          <Typography variant=\"h6\" gutterBottom>\n            Active Video Generations\n          </Typography>\n          <List>\n            {videoGenerations.map((generation, index) => (\n              <React.Fragment key={generation.videoId}>\n                <ListItem>\n                  <ListItemAvatar>\n                    <Avatar sx={{ bgcolor: getPhaseColor(generation.phase) }}>\n                      {generation.progress < 100 ? <PlayCircle /> : <CheckCircle />}\n                    </Avatar>\n                  </ListItemAvatar>\n                  <ListItemText\n                    primary={\n                      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n                        <Typography variant=\"subtitle1\">\n                          {generation.videoId}\n                        </Typography>\n                        <Chip \n                          label={generation.phase.replace('_', ' ')} \n                          size=\"small\" \n                          color={generation.progress === 100 ? 'success' : 'primary'}\n                        />\n                      </Box>\n                    }\n                    secondary={\n                      <Box sx={{ mt: 1 }}>\n                        <LinearProgress \n                          variant=\"determinate\" \n                          value={generation.progress} \n                          sx={{ mb: 1 }}\n                          color={generation.progress === 100 ? 'success' : 'primary'}\n                        />\n                        <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>\n                          <Typography variant=\"caption\" color=\"text.secondary\">\n                            Cost: {formatCurrency(generation.currentCost)}\n                          </Typography>\n                          <Typography variant=\"caption\" color=\"text.secondary\">\n                            ETA: {generation.estimatedTime}\n                          </Typography>\n                          <Typography variant=\"caption\" color=\"text.secondary\">\n                            {generation.progress}%\n                          </Typography>\n                        </Box>\n                      </Box>\n                    }\n                  />\n                </ListItem>\n                {index < videoGenerations.length - 1 && <Divider variant=\"inset\" component=\"li\" />}\n              </React.Fragment>\n            ))}\n          </List>\n        </Paper>\n      )}\n\n      {/* Real-time Cost Breakdown */}\n      <Grid container spacing={3} sx={{ mb: 3 }}>\n        <Grid item xs={12} md={6}>\n          <Paper sx={{ p: 3, height: 400 }}>\n            <Typography variant=\"h6\" gutterBottom>\n              Live Cost Tracking\n            </Typography>\n            <List sx={{ maxHeight: 320, overflow: 'auto' }}>\n              {metrics.recentCosts.map((cost, index) => (\n                <ListItem key={index}>\n                  <ListItemText\n                    primary={cost.service}\n                    secondary={new Date(cost.timestamp).toLocaleTimeString()}\n                  />\n                  <Typography variant=\"subtitle2\" color={cost.amount > 1 ? 'error' : 'text.primary'}>\n                    {formatCurrency(cost.amount)}\n                  </Typography>\n                </ListItem>\n              ))}\n            </List>\n            <Divider sx={{ my: 2 }} />\n            <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>\n              <Typography variant=\"subtitle1\">Total Session Cost:</Typography>\n              <Typography variant=\"h6\" color=\"primary\">\n                {formatCurrency(metrics.recentCosts.reduce((sum, c) => sum + c.amount, 0))}\n              </Typography>\n            </Box>\n          </Paper>\n        </Grid>\n\n        {/* Notifications */}\n        <Grid item xs={12} md={6}>\n          <Paper sx={{ p: 3, height: 400 }}>\n            <Typography variant=\"h6\" gutterBottom>\n              Live Notifications\n            </Typography>\n            <List sx={{ maxHeight: 350, overflow: 'auto' }}>\n              {notifications.map((notif, index) => (\n                <ListItem key={index}>\n                  <ListItemAvatar>\n                    <Avatar sx={{ \n                      bgcolor: notif.severity === 'error' ? 'error.main' : \n                               notif.severity === 'warning' ? 'warning.main' : \n                               'success.main' \n                    }}>\n                      {notif.severity === 'error' ? <ErrorIcon /> : \n                       notif.severity === 'warning' ? <Warning /> : \n                       <CheckCircle />}\n                    </Avatar>\n                  </ListItemAvatar>\n                  <ListItemText\n                    primary={notif.message}\n                    secondary={new Date(notif.timestamp).toLocaleString()}\n                  />\n                </ListItem>\n              ))}\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n\n      {/* Real-time Charts */}\n      <Grid container spacing={3}>\n        <Grid item xs={12}>\n          <Paper sx={{ p: 3, height: 400 }}>\n            <Typography variant=\"h6\" gutterBottom>\n              Real-time Performance Metrics\n            </Typography>\n            <ResponsiveContainer width=\"100%\" height=\"90%\">\n              <LineChart data={chartData.views || []}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"time\" />\n                <YAxis />\n                <RechartsTooltip />\n                <Legend />\n                <Line \n                  type=\"monotone\" \n                  dataKey=\"views\" \n                  stroke=\"#8884d8\" \n                  strokeWidth={2}\n                  dot={false}\n                  isAnimationActive={true}\n                />\n                <Line \n                  type=\"monotone\" \n                  dataKey=\"engagement\" \n                  stroke=\"#82ca9d\" \n                  strokeWidth={2}\n                  dot={false}\n                  isAnimationActive={true}\n                />\n                <Line \n                  type=\"monotone\" \n                  dataKey=\"cost\" \n                  stroke=\"#ff7c7c\" \n                  strokeWidth={2}\n                  dot={false}\n                  isAnimationActive={true}\n                />\n              </LineChart>\n            </ResponsiveContainer>\n          </Paper>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\pages\\Dashboard\\MobileDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\pages\\Login\\Login.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":60,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1516,1519],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1516,1519],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'err' is defined but never used.","line":70,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":70,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'err' is defined but never used.","line":78,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":78,"endColumn":17}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { useNavigate, Link } from 'react-router-dom';\nimport {\n  Container,\n  Paper,\n  TextField,\n  Button,\n  Typography,\n  Box,\n  Alert,\n  CircularProgress,\n  IconButton,\n  InputAdornment,\n  Divider,\n  Checkbox,\n  FormControlLabel,\n  Grid\n} from '@mui/material';\nimport {\n  Visibility,\n  VisibilityOff,\n  Google as GoogleIcon,\n  YouTube as YouTubeIcon,\n  Email as EmailIcon,\n  Lock as LockIcon\n} from '@mui/icons-material';\nimport { useAuthStore } from '../../stores/authStore';\nimport { authService } from '../../services/authService';\n\nconst Login: React.FC = () => {\n  const navigate = useNavigate();\n  const { login } = useAuthStore();\n  const [formData, setFormData] = useState({\n    email: '',\n    password: '',\n    rememberMe: false\n  });\n  const [showPassword, setShowPassword] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value, checked } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: name === 'rememberMe' ? checked : value\n    }));\n    setError('');\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError('');\n    setIsLoading(true);\n\n    try {\n      const response = await authService.login(formData.email, formData.password);\n      login(response.user, response.token, formData.rememberMe);\n      navigate('/dashboard');\n    } catch (err: any) {\n      setError(err.response?.data?.message || 'Invalid email or password');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleGoogleLogin = async () => {\n    try {\n      window.location.href = '/api/v1/auth/google';\n    } catch (err) {\n      setError('Google login failed. Please try again.');\n    }\n  };\n\n  const handleYouTubeLogin = async () => {\n    try {\n      window.location.href = '/api/v1/auth/youtube';\n    } catch (err) {\n      setError('YouTube login failed. Please try again.');\n    }\n  };\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <Box\n        sx={{\n          marginTop: 8,\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n        }}\n      >\n        <Paper elevation={3} sx={{ padding: 4, width: '100%' }}>\n          {/* Logo and Title */}\n          <Box sx={{ textAlign: 'center', mb: 3 }}>\n            <YouTubeIcon sx={{ fontSize: 48, color: 'error.main', mb: 1 }} />\n            <Typography component=\"h1\" variant=\"h4\" fontWeight=\"bold\">\n              YTEmpire\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\" mt={1}>\n              Sign in to your account\n            </Typography>\n          </Box>\n\n          {/* Error Alert */}\n          {error && (\n            <Alert severity=\"error\" sx={{ mb: 2 }} onClose={() => setError('')}>\n              {error}\n            </Alert>\n          )}\n\n          {/* Login Form */}\n          <Box component=\"form\" onSubmit={handleSubmit} noValidate>\n            <TextField\n              margin=\"normal\"\n              required\n              fullWidth\n              id=\"email\"\n              label=\"Email Address\"\n              name=\"email\"\n              autoComplete=\"email\"\n              autoFocus\n              value={formData.email}\n              onChange={handleChange}\n              InputProps={{\n                startAdornment: (\n                  <InputAdornment position=\"start\">\n                    <EmailIcon color=\"action\" />\n                  </InputAdornment>\n                ),\n              }}\n            />\n            <TextField\n              margin=\"normal\"\n              required\n              fullWidth\n              name=\"password\"\n              label=\"Password\"\n              type={showPassword ? 'text' : 'password'}\n              id=\"password\"\n              autoComplete=\"current-password\"\n              value={formData.password}\n              onChange={handleChange}\n              InputProps={{\n                startAdornment: (\n                  <InputAdornment position=\"start\">\n                    <LockIcon color=\"action\" />\n                  </InputAdornment>\n                ),\n                endAdornment: (\n                  <InputAdornment position=\"end\">\n                    <IconButton\n                      aria-label=\"toggle password visibility\"\n                      onClick={() => setShowPassword(!showPassword)}\n                      edge=\"end\"\n                    >\n                      {showPassword ? <VisibilityOff /> : <Visibility />}\n                    </IconButton>\n                  </InputAdornment>\n                ),\n              }}\n            />\n\n            {/* Remember Me and Forgot Password */}\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mt: 1, mb: 2 }}>\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    name=\"rememberMe\"\n                    color=\"primary\"\n                    checked={formData.rememberMe}\n                    onChange={handleChange}\n                  />\n                }\n                label=\"Remember me\"\n              />\n              <Link to=\"/forgot-password\" style={{ textDecoration: 'none' }}>\n                <Typography variant=\"body2\" color=\"primary\" sx={{ cursor: 'pointer' }}>\n                  Forgot password?\n                </Typography>\n              </Link>\n            </Box>\n\n            {/* Submit Button */}\n            <Button\n              type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              sx={{ mt: 2, mb: 2, py: 1.5 }}\n              disabled={isLoading || !formData.email || !formData.password}\n            >\n              {isLoading ? <CircularProgress size={24} /> : 'Sign In'}\n            </Button>\n\n            {/* Social Login Divider */}\n            <Divider sx={{ my: 3 }}>OR</Divider>\n\n            {/* Social Login Buttons */}\n            <Grid container spacing={2}>\n              <Grid item xs={12}>\n                <Button\n                  fullWidth\n                  variant=\"outlined\"\n                  startIcon={<GoogleIcon />}\n                  onClick={handleGoogleLogin}\n                  sx={{ py: 1.5 }}\n                >\n                  Continue with Google\n                </Button>\n              </Grid>\n              <Grid item xs={12}>\n                <Button\n                  fullWidth\n                  variant=\"outlined\"\n                  startIcon={<YouTubeIcon />}\n                  onClick={handleYouTubeLogin}\n                  sx={{ \n                    py: 1.5,\n                    borderColor: 'error.main',\n                    color: 'error.main',\n                    '&:hover': {\n                      borderColor: 'error.dark',\n                      backgroundColor: 'error.light',\n                      opacity: 0.1\n                    }\n                  }}\n                >\n                  Continue with YouTube\n                </Button>\n              </Grid>\n            </Grid>\n\n            {/* Sign Up Link */}\n            <Box sx={{ textAlign: 'center', mt: 3 }}>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Don't have an account?{' '}\n                <Link to=\"/register\" style={{ textDecoration: 'none' }}>\n                  <Typography component=\"span\" variant=\"body2\" color=\"primary\" sx={{ fontWeight: 'bold' }}>\n                    Sign up\n                  </Typography>\n                </Link>\n              </Typography>\n            </Box>\n          </Box>\n        </Paper>\n\n        {/* Footer */}\n        <Box sx={{ mt: 4, textAlign: 'center' }}>\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            By signing in, you agree to our{' '}\n            <Link to=\"/terms\" style={{ textDecoration: 'none', color: 'inherit' }}>\n              <Typography component=\"span\" variant=\"body2\" sx={{ textDecoration: 'underline' }}>\n                Terms of Service\n              </Typography>\n            </Link>\n            {' and '}\n            <Link to=\"/privacy\" style={{ textDecoration: 'none', color: 'inherit' }}>\n              <Typography component=\"span\" variant=\"body2\" sx={{ textDecoration: 'underline' }}>\n                Privacy Policy\n              </Typography>\n            </Link>\n          </Typography>\n        </Box>\n      </Box>\n    </Container>\n  );\n};\n\nexport default Login;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\pages\\Login\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\pages\\Monitoring\\SystemMonitoring.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\pages\\Profile\\Profile.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":5,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'LinearProgress' is defined but never used.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'IconButton' is defined but never used.","line":31,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Tooltip' is defined but never used.","line":32,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Table' is defined but never used.","line":35,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TableBody' is defined but never used.","line":36,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TableCell' is defined but never used.","line":37,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TableContainer' is defined but never used.","line":38,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TableHead' is defined but never used.","line":39,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TableRow' is defined but never used.","line":40,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FormControlLabel' is defined but never used.","line":42,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":42,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Person' is defined but never used.","line":46,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Star' is defined but never used.","line":52,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":52,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Schedule' is defined but never used.","line":56,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":56,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Notifications' is defined but never used.","line":57,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":57,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Analytics' is defined but never used.","line":61,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":61,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Email' is defined but never used.","line":67,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":67,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Phone' is defined but never used.","line":68,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":68,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'EmojiEvents' is defined but never used.","line":72,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":72,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Favorite' is defined but never used.","line":74,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":74,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Assessment' is defined but never used.","line":78,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":78,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'logout' is assigned a value but never used.","line":202,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":202,"endColumn":23}],"suppressedMessages":[],"errorCount":22,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Profile Screen Component\r\n * Comprehensive user profile management and account overview\r\n */\r\nimport React, { useState, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Grid,\r\n  Paper,\r\n  Typography,\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  Avatar,\r\n  Button,\r\n  TextField,\r\n  Chip,\r\n  LinearProgress,\r\n  Divider,\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  ListItemSecondaryAction,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Alert,\r\n  Badge,\r\n  IconButton,\r\n  Tooltip,\r\n  Tab,\r\n  Tabs,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Switch,\r\n  FormControlLabel,\r\n  useTheme,\r\n} from '@mui/material';\r\nimport {\r\n  Person,\r\n  Edit,\r\n  Save,\r\n  Cancel,\r\n  Upload,\r\n  Download,\r\n  Star,\r\n  TrendingUp,\r\n  VideoLibrary,\r\n  AttachMoney,\r\n  Schedule,\r\n  Notifications,\r\n  Security,\r\n  CreditCard,\r\n  Receipt,\r\n  Analytics,\r\n  YouTube,\r\n  Twitter,\r\n  Instagram,\r\n  LinkedIn,\r\n  Language,\r\n  Email,\r\n  Phone,\r\n  LocationOn,\r\n  CalendarToday,\r\n  Verified,\r\n  EmojiEvents,\r\n  Group,\r\n  Favorite,\r\n  Share,\r\n  Settings,\r\n  History,\r\n  Assessment,\r\n  WorkspacePremium,\r\n} from '@mui/icons-material';\r\nimport { format } from 'date-fns';\r\nimport { useAuthStore } from '../../stores/authStore';\r\n\r\ninterface TabPanelProps {\r\n  children?: React.ReactNode;\r\n  index: number;\r\n  value: number;\r\n}\r\n\r\nfunction TabPanel(props: TabPanelProps) {\r\n  const { children, value, index, ...other } = props;\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      {...other}\r\n    >\r\n      {value === index && <Box sx={{ py: 3 }}>{children}</Box>}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mockUserStats = {\r\n  totalVideos: 156,\r\n  totalViews: 2450000,\r\n  totalSubscribers: 471000,\r\n  totalRevenue: 31300,\r\n  averageEngagement: 8.7,\r\n  channelsManaged: 5,\r\n  joinDate: '2023-03-15',\r\n  lastActive: '2024-01-14T10:30:00Z',\r\n};\r\n\r\nconst mockAchievements = [\r\n  {\r\n    id: 1,\r\n    title: 'First Million Views',\r\n    description: 'Reached 1 million total views',\r\n    icon: <TrendingUp />,\r\n    earned: true,\r\n    dateEarned: '2023-08-15',\r\n    rarity: 'rare',\r\n  },\r\n  {\r\n    id: 2,\r\n    title: 'Content Creator',\r\n    description: 'Published 100+ videos',\r\n    icon: <VideoLibrary />,\r\n    earned: true,\r\n    dateEarned: '2023-12-01',\r\n    rarity: 'common',\r\n  },\r\n  {\r\n    id: 3,\r\n    title: 'Revenue Milestone',\r\n    description: 'Earned $10,000+ in revenue',\r\n    icon: <AttachMoney />,\r\n    earned: true,\r\n    dateEarned: '2023-10-20',\r\n    rarity: 'uncommon',\r\n  },\r\n  {\r\n    id: 4,\r\n    title: 'AI Pioneer',\r\n    description: 'Used AI tools for 6+ months',\r\n    icon: <WorkspacePremium />,\r\n    earned: true,\r\n    dateEarned: '2023-09-15',\r\n    rarity: 'epic',\r\n  },\r\n  {\r\n    id: 5,\r\n    title: 'Multi-Channel Master',\r\n    description: 'Manage 5+ channels simultaneously',\r\n    icon: <Group />,\r\n    earned: false,\r\n    dateEarned: null,\r\n    rarity: 'legendary',\r\n  },\r\n];\r\n\r\nconst mockRecentActivity = [\r\n  {\r\n    id: 1,\r\n    action: 'Published video',\r\n    details: '\"10 AI Tools Every Creator Needs\"',\r\n    timestamp: '2024-01-14T08:30:00Z',\r\n    channel: 'Tech Reviews',\r\n  },\r\n  {\r\n    id: 2,\r\n    action: 'Updated channel settings',\r\n    details: 'Gaming Central - Changed upload schedule',\r\n    timestamp: '2024-01-13T15:45:00Z',\r\n    channel: 'Gaming Central',\r\n  },\r\n  {\r\n    id: 3,\r\n    action: 'Generated AI script',\r\n    details: 'Tutorial on video editing',\r\n    timestamp: '2024-01-13T12:20:00Z',\r\n    channel: 'Educational Hub',\r\n  },\r\n  {\r\n    id: 4,\r\n    action: 'Revenue milestone',\r\n    details: 'Reached $30,000 total earnings',\r\n    timestamp: '2024-01-12T09:15:00Z',\r\n    channel: 'All Channels',\r\n  },\r\n];\r\n\r\nconst mockSocialConnections = [\r\n  { platform: 'YouTube', handle: '@techcreator', followers: '471K', connected: true, verified: true },\r\n  { platform: 'Twitter', handle: '@techcreator', followers: '89K', connected: true, verified: false },\r\n  { platform: 'Instagram', handle: '@techcreator', followers: '145K', connected: true, verified: true },\r\n  { platform: 'LinkedIn', handle: 'Tech Creator', followers: '23K', connected: false, verified: false },\r\n];\r\n\r\nexport const Profile: React.FC = () => {\r\n  const theme = useTheme();\r\n  const { user, logout } = useAuthStore();\r\n  const [activeTab, setActiveTab] = useState(0);\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [showDeleteDialog, setShowDeleteDialog] = useState(false);\r\n\r\n  const [profileData, setProfileData] = useState({\r\n    fullName: user?.full_name || 'Tech Creator',\r\n    email: user?.email || 'tech@creator.com',\r\n    bio: 'YouTube automation enthusiast helping creators scale with AI. Building the future of content creation, one video at a time.',\r\n    location: 'San Francisco, CA',\r\n    website: 'https://techcreator.com',\r\n    phone: '+1 (555) 123-4567',\r\n    timezone: 'America/Los_Angeles',\r\n    language: 'English',\r\n    notifications: {\r\n      email: true,\r\n      push: true,\r\n      marketing: false,\r\n    },\r\n  });\r\n\r\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\r\n    setActiveTab(newValue);\r\n  };\r\n\r\n  const handleSaveProfile = async () => {\r\n    setLoading(true);\r\n    // Simulate API call\r\n    setTimeout(() => {\r\n      setLoading(false);\r\n      setEditMode(false);\r\n    }, 2000);\r\n  };\r\n\r\n  const handleInputChange = (field: string, value: string) => {\r\n    setProfileData(prev => ({\r\n      ...prev,\r\n      [field]: value,\r\n    }));\r\n  };\r\n\r\n  const formatNumber = (value: number) => {\r\n    if (value >= 1000000) {\r\n      return `${(value / 1000000).toFixed(1)}M`;\r\n    } else if (value >= 1000) {\r\n      return `${(value / 1000).toFixed(1)}K`;\r\n    }\r\n    return value.toString();\r\n  };\r\n\r\n  const formatCurrency = (value: number) => {\r\n    return new Intl.NumberFormat('en-US', {\r\n      style: 'currency',\r\n      currency: 'USD',\r\n      minimumFractionDigits: 0,\r\n      maximumFractionDigits: 0,\r\n    }).format(value);\r\n  };\r\n\r\n  const getRarityColor = (rarity: string) => {\r\n    switch (rarity) {\r\n      case 'legendary': return '#FFD700';\r\n      case 'epic': return '#9C27B0';\r\n      case 'rare': return '#2196F3';\r\n      case 'uncommon': return '#4CAF50';\r\n      default: return '#9E9E9E';\r\n    }\r\n  };\r\n\r\n  const getSocialIcon = (platform: string) => {\r\n    switch (platform) {\r\n      case 'YouTube': return <YouTube />;\r\n      case 'Twitter': return <Twitter />;\r\n      case 'Instagram': return <Instagram />;\r\n      case 'LinkedIn': return <LinkedIn />;\r\n      default: return <Share />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ flexGrow: 1, p: 3 }}>\r\n      {/* Header */}\r\n      <Grid container spacing={3} sx={{ mb: 3 }}>\r\n        <Grid item xs={12}>\r\n          <Card>\r\n            <CardContent sx={{ p: 4 }}>\r\n              <Grid container spacing={3} alignItems=\"center\">\r\n                <Grid item>\r\n                  <Badge\r\n                    overlap=\"circular\"\r\n                    anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\r\n                    badgeContent={\r\n                      <Avatar sx={{ width: 24, height: 24, bgcolor: 'success.main' }}>\r\n                        <Verified sx={{ fontSize: 16 }} />\r\n                      </Avatar>\r\n                    }\r\n                  >\r\n                    <Avatar \r\n                      sx={{ \r\n                        width: 120, \r\n                        height: 120, \r\n                        fontSize: '3rem',\r\n                        border: `4px solid ${theme.palette.primary.main}`,\r\n                      }}\r\n                    >\r\n                      {profileData.fullName.charAt(0)}\r\n                    </Avatar>\r\n                  </Badge>\r\n                </Grid>\r\n                \r\n                <Grid item xs>\r\n                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\r\n                    <Typography variant=\"h4\" fontWeight=\"bold\" sx={{ mr: 2 }}>\r\n                      {profileData.fullName}\r\n                    </Typography>\r\n                    <Chip label=\"Pro Member\" color=\"primary\" variant=\"outlined\" />\r\n                    <Chip label=\"Verified\" color=\"success\" variant=\"outlined\" sx={{ ml: 1 }} />\r\n                  </Box>\r\n                  \r\n                  <Typography variant=\"body1\" color=\"text.secondary\" sx={{ mb: 2, maxWidth: 600 }}>\r\n                    {profileData.bio}\r\n                  </Typography>\r\n                  \r\n                  <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 2, mb: 2 }}>\r\n                    <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                      <LocationOn fontSize=\"small\" sx={{ mr: 0.5 }} />\r\n                      <Typography variant=\"body2\">{profileData.location}</Typography>\r\n                    </Box>\r\n                    <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                      <CalendarToday fontSize=\"small\" sx={{ mr: 0.5 }} />\r\n                      <Typography variant=\"body2\">\r\n                        Joined {format(new Date(mockUserStats.joinDate), 'MMMM yyyy')}\r\n                      </Typography>\r\n                    </Box>\r\n                    <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                      <Language fontSize=\"small\" sx={{ mr: 0.5 }} />\r\n                      <Typography variant=\"body2\">{profileData.website}</Typography>\r\n                    </Box>\r\n                  </Box>\r\n\r\n                  {/* Quick Stats */}\r\n                  <Grid container spacing={3} sx={{ mt: 2 }}>\r\n                    {[\r\n                      { label: 'Videos', value: mockUserStats.totalVideos, icon: <VideoLibrary /> },\r\n                      { label: 'Views', value: formatNumber(mockUserStats.totalViews), icon: <TrendingUp /> },\r\n                      { label: 'Subscribers', value: formatNumber(mockUserStats.totalSubscribers), icon: <YouTube /> },\r\n                      { label: 'Revenue', value: formatCurrency(mockUserStats.totalRevenue), icon: <AttachMoney /> },\r\n                    ].map((stat, index) => (\r\n                      <Grid item key={index}>\r\n                        <Box sx={{ textAlign: 'center' }}>\r\n                          <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center', mb: 1 }}>\r\n                            {stat.icon}\r\n                            <Typography variant=\"h6\" sx={{ ml: 1, fontWeight: 'bold' }}>\r\n                              {stat.value}\r\n                            </Typography>\r\n                          </Box>\r\n                          <Typography variant=\"body2\" color=\"text.secondary\">\r\n                            {stat.label}\r\n                          </Typography>\r\n                        </Box>\r\n                      </Grid>\r\n                    ))}\r\n                  </Grid>\r\n                </Grid>\r\n\r\n                <Grid item>\r\n                  <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>\r\n                    <Button \r\n                      variant={editMode ? 'contained' : 'outlined'} \r\n                      startIcon={editMode ? <Save /> : <Edit />}\r\n                      onClick={editMode ? handleSaveProfile : () => setEditMode(true)}\r\n                      disabled={loading}\r\n                    >\r\n                      {loading ? 'Saving...' : editMode ? 'Save' : 'Edit Profile'}\r\n                    </Button>\r\n                    {editMode && (\r\n                      <Button \r\n                        variant=\"outlined\" \r\n                        startIcon={<Cancel />}\r\n                        onClick={() => setEditMode(false)}\r\n                      >\r\n                        Cancel\r\n                      </Button>\r\n                    )}\r\n                    <Button variant=\"outlined\" startIcon={<Settings />}>\r\n                      Settings\r\n                    </Button>\r\n                  </Box>\r\n                </Grid>\r\n              </Grid>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* Profile Tabs */}\r\n      <Paper sx={{ width: '100%' }}>\r\n        <Tabs value={activeTab} onChange={handleTabChange} sx={{ borderBottom: 1, borderColor: 'divider' }}>\r\n          <Tab label=\"Overview\" />\r\n          <Tab label=\"Activity\" />\r\n          <Tab label=\"Achievements\" />\r\n          <Tab label=\"Social\" />\r\n          <Tab label=\"Settings\" />\r\n        </Tabs>\r\n\r\n        {/* Overview Tab */}\r\n        <TabPanel value={activeTab} index={0}>\r\n          <Grid container spacing={3}>\r\n            <Grid item xs={12} md={8}>\r\n              <Card sx={{ mb: 3 }}>\r\n                <CardHeader title=\"Profile Information\" />\r\n                <CardContent>\r\n                  <Grid container spacing={2}>\r\n                    <Grid item xs={12} sm={6}>\r\n                      <TextField\r\n                        fullWidth\r\n                        label=\"Full Name\"\r\n                        value={profileData.fullName}\r\n                        onChange={(e) => handleInputChange('fullName', e.target.value)}\r\n                        disabled={!editMode}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                      <TextField\r\n                        fullWidth\r\n                        label=\"Email\"\r\n                        value={profileData.email}\r\n                        onChange={(e) => handleInputChange('email', e.target.value)}\r\n                        disabled={!editMode}\r\n                        type=\"email\"\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                      <TextField\r\n                        fullWidth\r\n                        label=\"Bio\"\r\n                        value={profileData.bio}\r\n                        onChange={(e) => handleInputChange('bio', e.target.value)}\r\n                        disabled={!editMode}\r\n                        multiline\r\n                        rows={3}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                      <TextField\r\n                        fullWidth\r\n                        label=\"Location\"\r\n                        value={profileData.location}\r\n                        onChange={(e) => handleInputChange('location', e.target.value)}\r\n                        disabled={!editMode}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                      <TextField\r\n                        fullWidth\r\n                        label=\"Website\"\r\n                        value={profileData.website}\r\n                        onChange={(e) => handleInputChange('website', e.target.value)}\r\n                        disabled={!editMode}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                      <TextField\r\n                        fullWidth\r\n                        label=\"Phone\"\r\n                        value={profileData.phone}\r\n                        onChange={(e) => handleInputChange('phone', e.target.value)}\r\n                        disabled={!editMode}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                      <TextField\r\n                        fullWidth\r\n                        label=\"Timezone\"\r\n                        value={profileData.timezone}\r\n                        onChange={(e) => handleInputChange('timezone', e.target.value)}\r\n                        disabled={!editMode}\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n\r\n            <Grid item xs={12} md={4}>\r\n              <Card sx={{ mb: 3 }}>\r\n                <CardHeader title=\"Account Status\" />\r\n                <CardContent>\r\n                  <List>\r\n                    <ListItem>\r\n                      <ListItemIcon>\r\n                        <Verified color=\"success\" />\r\n                      </ListItemIcon>\r\n                      <ListItemText \r\n                        primary=\"Verified Account\" \r\n                        secondary=\"Email and phone verified\"\r\n                      />\r\n                    </ListItem>\r\n                    <ListItem>\r\n                      <ListItemIcon>\r\n                        <WorkspacePremium color=\"primary\" />\r\n                      </ListItemIcon>\r\n                      <ListItemText \r\n                        primary=\"Pro Subscription\" \r\n                        secondary=\"Active until March 2024\"\r\n                      />\r\n                    </ListItem>\r\n                    <ListItem>\r\n                      <ListItemIcon>\r\n                        <Security color=\"success\" />\r\n                      </ListItemIcon>\r\n                      <ListItemText \r\n                        primary=\"Two-Factor Auth\" \r\n                        secondary=\"Enabled\"\r\n                      />\r\n                    </ListItem>\r\n                  </List>\r\n                </CardContent>\r\n              </Card>\r\n\r\n              <Card>\r\n                <CardHeader title=\"Quick Actions\" />\r\n                <CardContent>\r\n                  <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>\r\n                    <Button startIcon={<Download />} variant=\"outlined\" fullWidth>\r\n                      Export Data\r\n                    </Button>\r\n                    <Button startIcon={<Upload />} variant=\"outlined\" fullWidth>\r\n                      Import Settings\r\n                    </Button>\r\n                    <Button startIcon={<Receipt />} variant=\"outlined\" fullWidth>\r\n                      Billing History\r\n                    </Button>\r\n                    <Button startIcon={<CreditCard />} variant=\"outlined\" fullWidth>\r\n                      Payment Methods\r\n                    </Button>\r\n                  </Box>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n          </Grid>\r\n        </TabPanel>\r\n\r\n        {/* Activity Tab */}\r\n        <TabPanel value={activeTab} index={1}>\r\n          <Card>\r\n            <CardHeader title=\"Recent Activity\" />\r\n            <CardContent>\r\n              <List>\r\n                {mockRecentActivity.map((activity) => (\r\n                  <ListItem key={activity.id} divider>\r\n                    <ListItemIcon>\r\n                      <History />\r\n                    </ListItemIcon>\r\n                    <ListItemText\r\n                      primary={\r\n                        <Box>\r\n                          <Typography variant=\"body1\" component=\"span\" fontWeight=\"bold\">\r\n                            {activity.action}\r\n                          </Typography>\r\n                          <Typography variant=\"body1\" component=\"span\" sx={{ ml: 1 }}>\r\n                            {activity.details}\r\n                          </Typography>\r\n                        </Box>\r\n                      }\r\n                      secondary={\r\n                        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mt: 1 }}>\r\n                          <Typography variant=\"body2\" color=\"text.secondary\">\r\n                            {format(new Date(activity.timestamp), 'PPp')}\r\n                          </Typography>\r\n                          <Chip label={activity.channel} size=\"small\" variant=\"outlined\" />\r\n                        </Box>\r\n                      }\r\n                    />\r\n                  </ListItem>\r\n                ))}\r\n              </List>\r\n            </CardContent>\r\n          </Card>\r\n        </TabPanel>\r\n\r\n        {/* Achievements Tab */}\r\n        <TabPanel value={activeTab} index={2}>\r\n          <Card>\r\n            <CardHeader title=\"Achievements & Milestones\" />\r\n            <CardContent>\r\n              <Grid container spacing={2}>\r\n                {mockAchievements.map((achievement) => (\r\n                  <Grid item xs={12} sm={6} md={4} key={achievement.id}>\r\n                    <Card \r\n                      variant=\"outlined\" \r\n                      sx={{ \r\n                        opacity: achievement.earned ? 1 : 0.5,\r\n                        border: achievement.earned ? `2px solid ${getRarityColor(achievement.rarity)}` : undefined,\r\n                      }}\r\n                    >\r\n                      <CardContent sx={{ textAlign: 'center' }}>\r\n                        <Avatar \r\n                          sx={{ \r\n                            bgcolor: getRarityColor(achievement.rarity),\r\n                            width: 64,\r\n                            height: 64,\r\n                            mx: 'auto',\r\n                            mb: 2,\r\n                          }}\r\n                        >\r\n                          {achievement.icon}\r\n                        </Avatar>\r\n                        <Typography variant=\"h6\" gutterBottom>\r\n                          {achievement.title}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\r\n                          {achievement.description}\r\n                        </Typography>\r\n                        <Chip \r\n                          label={achievement.rarity} \r\n                          size=\"small\" \r\n                          sx={{ \r\n                            bgcolor: getRarityColor(achievement.rarity),\r\n                            color: 'white',\r\n                            textTransform: 'capitalize',\r\n                          }}\r\n                        />\r\n                        {achievement.earned && (\r\n                          <Typography variant=\"caption\" display=\"block\" sx={{ mt: 1 }}>\r\n                            Earned: {format(new Date(achievement.dateEarned!), 'PP')}\r\n                          </Typography>\r\n                        )}\r\n                      </CardContent>\r\n                    </Card>\r\n                  </Grid>\r\n                ))}\r\n              </Grid>\r\n            </CardContent>\r\n          </Card>\r\n        </TabPanel>\r\n\r\n        {/* Social Tab */}\r\n        <TabPanel value={activeTab} index={3}>\r\n          <Card>\r\n            <CardHeader title=\"Social Media Connections\" />\r\n            <CardContent>\r\n              <List>\r\n                {mockSocialConnections.map((social, index) => (\r\n                  <ListItem key={index}>\r\n                    <ListItemIcon>\r\n                      {getSocialIcon(social.platform)}\r\n                    </ListItemIcon>\r\n                    <ListItemText\r\n                      primary={\r\n                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                          <Typography variant=\"body1\">{social.platform}</Typography>\r\n                          {social.verified && <Verified color=\"primary\" fontSize=\"small\" />}\r\n                        </Box>\r\n                      }\r\n                      secondary={\r\n                        <Box>\r\n                          <Typography variant=\"body2\">{social.handle}</Typography>\r\n                          <Typography variant=\"caption\">{social.followers} followers</Typography>\r\n                        </Box>\r\n                      }\r\n                    />\r\n                    <ListItemSecondaryAction>\r\n                      <Switch checked={social.connected} />\r\n                    </ListItemSecondaryAction>\r\n                  </ListItem>\r\n                ))}\r\n              </List>\r\n            </CardContent>\r\n          </Card>\r\n        </TabPanel>\r\n\r\n        {/* Settings Tab */}\r\n        <TabPanel value={activeTab} index={4}>\r\n          <Grid container spacing={3}>\r\n            <Grid item xs={12} md={6}>\r\n              <Card>\r\n                <CardHeader title=\"Notification Preferences\" />\r\n                <CardContent>\r\n                  <List>\r\n                    <ListItem>\r\n                      <ListItemText primary=\"Email Notifications\" secondary=\"Receive updates via email\" />\r\n                      <ListItemSecondaryAction>\r\n                        <Switch checked={profileData.notifications.email} />\r\n                      </ListItemSecondaryAction>\r\n                    </ListItem>\r\n                    <ListItem>\r\n                      <ListItemText primary=\"Push Notifications\" secondary=\"Browser and mobile notifications\" />\r\n                      <ListItemSecondaryAction>\r\n                        <Switch checked={profileData.notifications.push} />\r\n                      </ListItemSecondaryAction>\r\n                    </ListItem>\r\n                    <ListItem>\r\n                      <ListItemText primary=\"Marketing Emails\" secondary=\"Product updates and promotions\" />\r\n                      <ListItemSecondaryAction>\r\n                        <Switch checked={profileData.notifications.marketing} />\r\n                      </ListItemSecondaryAction>\r\n                    </ListItem>\r\n                  </List>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n\r\n            <Grid item xs={12} md={6}>\r\n              <Card>\r\n                <CardHeader title=\"Account Management\" />\r\n                <CardContent>\r\n                  <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>\r\n                    <Button startIcon={<Security />} variant=\"outlined\" fullWidth>\r\n                      Change Password\r\n                    </Button>\r\n                    <Button startIcon={<CreditCard />} variant=\"outlined\" fullWidth>\r\n                      Manage Billing\r\n                    </Button>\r\n                    <Button startIcon={<Download />} variant=\"outlined\" fullWidth>\r\n                      Download Data\r\n                    </Button>\r\n                    <Divider />\r\n                    <Button \r\n                      startIcon={<Cancel />} \r\n                      variant=\"outlined\" \r\n                      color=\"error\" \r\n                      fullWidth\r\n                      onClick={() => setShowDeleteDialog(true)}\r\n                    >\r\n                      Delete Account\r\n                    </Button>\r\n                  </Box>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n          </Grid>\r\n        </TabPanel>\r\n      </Paper>\r\n\r\n      {/* Delete Account Dialog */}\r\n      <Dialog open={showDeleteDialog} onClose={() => setShowDeleteDialog(false)}>\r\n        <DialogTitle>Delete Account</DialogTitle>\r\n        <DialogContent>\r\n          <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n            This action cannot be undone. All your data will be permanently deleted.\r\n          </Alert>\r\n          <Typography>\r\n            Are you sure you want to delete your account? This will remove all your videos, \r\n            channels, and associated data.\r\n          </Typography>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setShowDeleteDialog(false)}>Cancel</Button>\r\n          <Button color=\"error\" variant=\"contained\">\r\n            Delete Account\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Profile;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\pages\\Settings\\Settings.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":5,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Language' is defined but never used.","line":50,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":50,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Storage' is defined but never used.","line":51,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":51,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Team' is defined but never used.","line":54,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":54,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Analytics' is defined but never used.","line":55,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":55,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'YouTube' is defined but never used.","line":57,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":57,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Cancel' is defined but never used.","line":62,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":62,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Warning' is defined but never used.","line":63,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":63,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Refresh' is defined but never used.","line":68,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":68,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'VpnKey' is defined but never used.","line":69,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":69,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AccountBalance' is defined but never used.","line":70,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":70,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Schedule' is defined but never used.","line":73,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":73,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Tune' is defined but never used.","line":74,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":74,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'VideoLibrary' is defined but never used.","line":76,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":76,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Mic' is defined but never used.","line":77,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":77,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ImageIcon' is defined but never used.","line":78,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":78,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'theme' is assigned a value but never used.","line":135,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":135,"endColumn":14},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":141,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":141,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3148,3151],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3148,3151],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":193,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":193,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4465,4468],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4465,4468],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":216,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":216,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4937,4940],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4937,4940],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":519,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":519,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18238,18241],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18238,18241],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":21,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Settings Screen Component\r\n * Comprehensive settings management for user preferences and system configuration\r\n */\r\nimport React, { useState, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Grid,\r\n  Paper,\r\n  Typography,\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  Switch,\r\n  FormControlLabel,\r\n  TextField,\r\n  Button,\r\n  Select,\r\n  MenuItem,\r\n  FormControl,\r\n  InputLabel,\r\n  Divider,\r\n  Alert,\r\n  Tab,\r\n  Tabs,\r\n  Avatar,\r\n  IconButton,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  ListItemSecondaryAction,\r\n  Chip,\r\n  LinearProgress,\r\n  useTheme,\r\n  Slider,\r\n  RadioGroup,\r\n  Radio,\r\n  FormLabel,\r\n} from '@mui/material';\r\nimport {\r\n  Person,\r\n  Security,\r\n  Notifications,\r\n  Palette,\r\n  Language,\r\n  Storage,\r\n  Api,\r\n  Billing,\r\n  Team,\r\n  Analytics,\r\n  SmartToy,\r\n  YouTube,\r\n  Edit,\r\n  Delete,\r\n  Add,\r\n  Save,\r\n  Cancel,\r\n  Warning,\r\n  CheckCircle,\r\n  Info,\r\n  Upload,\r\n  Download,\r\n  Refresh,\r\n  VpnKey,\r\n  AccountBalance,\r\n  CreditCard,\r\n  Receipt,\r\n  Schedule,\r\n  Tune,\r\n  Psychology,\r\n  VideoLibrary,\r\n  Mic,\r\n  Image as ImageIcon,\r\n} from '@mui/icons-material';\r\nimport { useAuthStore } from '../../stores/authStore';\r\n\r\ninterface TabPanelProps {\r\n  children?: React.ReactNode;\r\n  index: number;\r\n  value: number;\r\n}\r\n\r\nfunction TabPanel(props: TabPanelProps) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`settings-tabpanel-${index}`}\r\n      aria-labelledby={`settings-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box sx={{ py: 3 }}>\r\n          {children}\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mockAPIKeys = [\r\n  { id: 1, name: 'OpenAI API', service: 'GPT-4', status: 'active', lastUsed: '2 hours ago', usage: 75 },\r\n  { id: 2, name: 'ElevenLabs API', service: 'Voice Synthesis', status: 'active', lastUsed: '5 hours ago', usage: 60 },\r\n  { id: 3, name: 'YouTube API', service: 'Channel Management', status: 'active', lastUsed: '1 hour ago', usage: 45 },\r\n  { id: 4, name: 'Claude API', service: 'Content Generation', status: 'warning', lastUsed: '1 day ago', usage: 90 },\r\n  { id: 5, name: 'DALL-E API', service: 'Image Generation', status: 'inactive', lastUsed: '3 days ago', usage: 0 },\r\n];\r\n\r\nconst mockSubscriptionPlan = {\r\n  name: 'Creator Pro',\r\n  price: '$29/month',\r\n  features: [\r\n    '100 videos per month',\r\n    '5 YouTube channels',\r\n    'Advanced AI models',\r\n    'Priority support',\r\n    'Custom voice training',\r\n    'Advanced analytics'\r\n  ],\r\n  usage: {\r\n    videos: { current: 67, limit: 100 },\r\n    channels: { current: 3, limit: 5 },\r\n    storage: { current: 45, limit: 100 },\r\n  }\r\n};\r\n\r\nexport const Settings: React.FC = () => {\r\n  const theme = useTheme();\r\n  const { user } = useAuthStore();\r\n  const [activeTab, setActiveTab] = useState(0);\r\n  const [loading, setLoading] = useState(false);\r\n  const [showApiDialog, setShowApiDialog] = useState(false);\r\n  const [showDeleteDialog, setShowDeleteDialog] = useState(false);\r\n  const [selectedApi, setSelectedApi] = useState<any>(null);\r\n\r\n  // Settings state\r\n  const [settings, setSettings] = useState({\r\n    profile: {\r\n      displayName: user?.full_name || '',\r\n      email: user?.email || '',\r\n      timezone: 'America/New_York',\r\n      language: 'en',\r\n    },\r\n    notifications: {\r\n      emailNotifications: true,\r\n      pushNotifications: true,\r\n      videoComplete: true,\r\n      costAlerts: true,\r\n      weeklyReports: false,\r\n      marketingEmails: false,\r\n    },\r\n    appearance: {\r\n      theme: 'auto',\r\n      density: 'comfortable',\r\n      sidebar: 'expanded',\r\n    },\r\n    privacy: {\r\n      dataSharing: false,\r\n      analytics: true,\r\n      errorReporting: true,\r\n      usageStatistics: false,\r\n    },\r\n    automation: {\r\n      autoPublish: true,\r\n      smartScheduling: true,\r\n      autoThumbnails: true,\r\n      autoTranscripts: false,\r\n      qualityThreshold: 75,\r\n      costLimit: 500,\r\n    },\r\n    ai: {\r\n      preferredModel: 'gpt-4',\r\n      creativity: 70,\r\n      voiceStyle: 'professional',\r\n      thumbnailStyle: 'modern',\r\n      contentLength: 'medium',\r\n      generateDescription: true,\r\n      generateTags: true,\r\n    },\r\n  });\r\n\r\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\r\n    setActiveTab(newValue);\r\n  };\r\n\r\n  const handleSettingChange = (section: string, key: string, value: any) => {\r\n    setSettings(prev => ({\r\n      ...prev,\r\n      [section]: {\r\n        ...prev[section as keyof typeof prev],\r\n        [key]: value,\r\n      },\r\n    }));\r\n  };\r\n\r\n  const handleSaveSettings = async () => {\r\n    setLoading(true);\r\n    // Simulate API call\r\n    setTimeout(() => {\r\n      setLoading(false);\r\n    }, 2000);\r\n  };\r\n\r\n  const handleAddApiKey = () => {\r\n    setSelectedApi(null);\r\n    setShowApiDialog(true);\r\n  };\r\n\r\n  const handleEditApiKey = (api: any) => {\r\n    setSelectedApi(api);\r\n    setShowApiDialog(true);\r\n  };\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'active': return 'success';\r\n      case 'warning': return 'warning';\r\n      case 'inactive': return 'error';\r\n      default: return 'default';\r\n    }\r\n  };\r\n\r\n  const tabs = [\r\n    { label: 'Profile', icon: <Person /> },\r\n    { label: 'Notifications', icon: <Notifications /> },\r\n    { label: 'Appearance', icon: <Palette /> },\r\n    { label: 'Privacy', icon: <Security /> },\r\n    { label: 'API Keys', icon: <Api /> },\r\n    { label: 'Automation', icon: <SmartToy /> },\r\n    { label: 'AI Settings', icon: <Psychology /> },\r\n    { label: 'Billing', icon: <Billing /> },\r\n  ];\r\n\r\n  return (\r\n    <Box sx={{ flexGrow: 1, p: 3 }}>\r\n      {/* Header */}\r\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\r\n        <Box>\r\n          <Typography variant=\"h4\" fontWeight=\"bold\" gutterBottom>\r\n            Settings\r\n          </Typography>\r\n          <Typography variant=\"body2\" color=\"text.secondary\">\r\n            Manage your account preferences and system configuration\r\n          </Typography>\r\n        </Box>\r\n        \r\n        <Box sx={{ display: 'flex', gap: 2 }}>\r\n          <Button variant=\"outlined\" startIcon={<Download />}>\r\n            Export Settings\r\n          </Button>\r\n          <Button \r\n            variant=\"contained\" \r\n            startIcon={<Save />}\r\n            onClick={handleSaveSettings}\r\n            disabled={loading}\r\n          >\r\n            {loading ? 'Saving...' : 'Save Changes'}\r\n          </Button>\r\n        </Box>\r\n      </Box>\r\n\r\n      <Grid container spacing={3}>\r\n        {/* Settings Tabs */}\r\n        <Grid item xs={12} md={3}>\r\n          <Paper sx={{ p: 1 }}>\r\n            <Tabs\r\n              orientation=\"vertical\"\r\n              variant=\"scrollable\"\r\n              value={activeTab}\r\n              onChange={handleTabChange}\r\n              sx={{\r\n                borderRight: 1,\r\n                borderColor: 'divider',\r\n                '& .MuiTab-root': {\r\n                  minHeight: 48,\r\n                  alignItems: 'flex-start',\r\n                  textAlign: 'left',\r\n                },\r\n              }}\r\n            >\r\n              {tabs.map((tab, index) => (\r\n                <Tab\r\n                  key={index}\r\n                  icon={tab.icon}\r\n                  label={tab.label}\r\n                  iconPosition=\"start\"\r\n                  sx={{ justifyContent: 'flex-start', minHeight: 48 }}\r\n                />\r\n              ))}\r\n            </Tabs>\r\n          </Paper>\r\n        </Grid>\r\n\r\n        {/* Settings Content */}\r\n        <Grid item xs={12} md={9}>\r\n          <Paper sx={{ minHeight: 600 }}>\r\n            {/* Profile Settings */}\r\n            <TabPanel value={activeTab} index={0}>\r\n              <CardHeader title=\"Profile Settings\" />\r\n              <CardContent>\r\n                <Grid container spacing={3}>\r\n                  <Grid item xs={12} md={4}>\r\n                    <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\r\n                      <Avatar sx={{ width: 120, height: 120, mb: 2, fontSize: '3rem' }}>\r\n                        {user?.full_name?.charAt(0) || 'U'}\r\n                      </Avatar>\r\n                      <Button variant=\"outlined\" startIcon={<Upload />}>\r\n                        Change Avatar\r\n                      </Button>\r\n                    </Box>\r\n                  </Grid>\r\n                  <Grid item xs={12} md={8}>\r\n                    <Grid container spacing={2}>\r\n                      <Grid item xs={12}>\r\n                        <TextField\r\n                          fullWidth\r\n                          label=\"Display Name\"\r\n                          value={settings.profile.displayName}\r\n                          onChange={(e) => handleSettingChange('profile', 'displayName', e.target.value)}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item xs={12}>\r\n                        <TextField\r\n                          fullWidth\r\n                          label=\"Email Address\"\r\n                          value={settings.profile.email}\r\n                          onChange={(e) => handleSettingChange('profile', 'email', e.target.value)}\r\n                          type=\"email\"\r\n                        />\r\n                      </Grid>\r\n                      <Grid item xs={12} sm={6}>\r\n                        <FormControl fullWidth>\r\n                          <InputLabel>Timezone</InputLabel>\r\n                          <Select\r\n                            value={settings.profile.timezone}\r\n                            onChange={(e) => handleSettingChange('profile', 'timezone', e.target.value)}\r\n                            label=\"Timezone\"\r\n                          >\r\n                            <MenuItem value=\"America/New_York\">Eastern Time</MenuItem>\r\n                            <MenuItem value=\"America/Chicago\">Central Time</MenuItem>\r\n                            <MenuItem value=\"America/Denver\">Mountain Time</MenuItem>\r\n                            <MenuItem value=\"America/Los_Angeles\">Pacific Time</MenuItem>\r\n                            <MenuItem value=\"Europe/London\">GMT</MenuItem>\r\n                            <MenuItem value=\"Europe/Paris\">CET</MenuItem>\r\n                          </Select>\r\n                        </FormControl>\r\n                      </Grid>\r\n                      <Grid item xs={12} sm={6}>\r\n                        <FormControl fullWidth>\r\n                          <InputLabel>Language</InputLabel>\r\n                          <Select\r\n                            value={settings.profile.language}\r\n                            onChange={(e) => handleSettingChange('profile', 'language', e.target.value)}\r\n                            label=\"Language\"\r\n                          >\r\n                            <MenuItem value=\"en\">English</MenuItem>\r\n                            <MenuItem value=\"es\">Spanish</MenuItem>\r\n                            <MenuItem value=\"fr\">French</MenuItem>\r\n                            <MenuItem value=\"de\">German</MenuItem>\r\n                            <MenuItem value=\"ja\">Japanese</MenuItem>\r\n                          </Select>\r\n                        </FormControl>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n              </CardContent>\r\n            </TabPanel>\r\n\r\n            {/* Notification Settings */}\r\n            <TabPanel value={activeTab} index={1}>\r\n              <CardHeader title=\"Notification Preferences\" />\r\n              <CardContent>\r\n                <List>\r\n                  {Object.entries(settings.notifications).map(([key, value]) => (\r\n                    <ListItem key={key}>\r\n                      <ListItemIcon>\r\n                        <Notifications />\r\n                      </ListItemIcon>\r\n                      <ListItemText\r\n                        primary={key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())}\r\n                        secondary={`Receive notifications for ${key.toLowerCase().replace(/([A-Z])/g, ' $1')}`}\r\n                      />\r\n                      <ListItemSecondaryAction>\r\n                        <Switch\r\n                          checked={value as boolean}\r\n                          onChange={(e) => handleSettingChange('notifications', key, e.target.checked)}\r\n                        />\r\n                      </ListItemSecondaryAction>\r\n                    </ListItem>\r\n                  ))}\r\n                </List>\r\n              </CardContent>\r\n            </TabPanel>\r\n\r\n            {/* Appearance Settings */}\r\n            <TabPanel value={activeTab} index={2}>\r\n              <CardHeader title=\"Appearance\" />\r\n              <CardContent>\r\n                <Grid container spacing={3}>\r\n                  <Grid item xs={12}>\r\n                    <FormControl component=\"fieldset\">\r\n                      <FormLabel component=\"legend\">Theme</FormLabel>\r\n                      <RadioGroup\r\n                        value={settings.appearance.theme}\r\n                        onChange={(e) => handleSettingChange('appearance', 'theme', e.target.value)}\r\n                      >\r\n                        <FormControlLabel value=\"light\" control={<Radio />} label=\"Light\" />\r\n                        <FormControlLabel value=\"dark\" control={<Radio />} label=\"Dark\" />\r\n                        <FormControlLabel value=\"auto\" control={<Radio />} label=\"Auto (System)\" />\r\n                      </RadioGroup>\r\n                    </FormControl>\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                    <FormControl fullWidth>\r\n                      <InputLabel>Interface Density</InputLabel>\r\n                      <Select\r\n                        value={settings.appearance.density}\r\n                        onChange={(e) => handleSettingChange('appearance', 'density', e.target.value)}\r\n                        label=\"Interface Density\"\r\n                      >\r\n                        <MenuItem value=\"compact\">Compact</MenuItem>\r\n                        <MenuItem value=\"comfortable\">Comfortable</MenuItem>\r\n                        <MenuItem value=\"spacious\">Spacious</MenuItem>\r\n                      </Select>\r\n                    </FormControl>\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                    <FormControl fullWidth>\r\n                      <InputLabel>Sidebar Style</InputLabel>\r\n                      <Select\r\n                        value={settings.appearance.sidebar}\r\n                        onChange={(e) => handleSettingChange('appearance', 'sidebar', e.target.value)}\r\n                        label=\"Sidebar Style\"\r\n                      >\r\n                        <MenuItem value=\"collapsed\">Collapsed</MenuItem>\r\n                        <MenuItem value=\"expanded\">Expanded</MenuItem>\r\n                        <MenuItem value=\"auto\">Auto-hide</MenuItem>\r\n                      </Select>\r\n                    </FormControl>\r\n                  </Grid>\r\n                </Grid>\r\n              </CardContent>\r\n            </TabPanel>\r\n\r\n            {/* Privacy Settings */}\r\n            <TabPanel value={activeTab} index={3}>\r\n              <CardHeader title=\"Privacy & Data\" />\r\n              <CardContent>\r\n                <List>\r\n                  {Object.entries(settings.privacy).map(([key, value]) => (\r\n                    <ListItem key={key}>\r\n                      <ListItemIcon>\r\n                        <Security />\r\n                      </ListItemIcon>\r\n                      <ListItemText\r\n                        primary={key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())}\r\n                        secondary={`Allow ${key.toLowerCase().replace(/([A-Z])/g, ' $1')} to improve service quality`}\r\n                      />\r\n                      <ListItemSecondaryAction>\r\n                        <Switch\r\n                          checked={value as boolean}\r\n                          onChange={(e) => handleSettingChange('privacy', key, e.target.checked)}\r\n                        />\r\n                      </ListItemSecondaryAction>\r\n                    </ListItem>\r\n                  ))}\r\n                </List>\r\n                \r\n                <Divider sx={{ my: 3 }} />\r\n                \r\n                <Alert severity=\"info\" icon={<Info />}>\r\n                  We respect your privacy. Your data is encrypted and never shared with third parties \r\n                  without your explicit consent.\r\n                </Alert>\r\n                \r\n                <Box sx={{ mt: 3, display: 'flex', gap: 2 }}>\r\n                  <Button variant=\"outlined\" startIcon={<Download />}>\r\n                    Download My Data\r\n                  </Button>\r\n                  <Button variant=\"outlined\" color=\"error\" startIcon={<Delete />}>\r\n                    Delete Account\r\n                  </Button>\r\n                </Box>\r\n              </CardContent>\r\n            </TabPanel>\r\n\r\n            {/* API Keys */}\r\n            <TabPanel value={activeTab} index={4}>\r\n              <CardHeader \r\n                title=\"API Keys\" \r\n                action={\r\n                  <Button variant=\"contained\" startIcon={<Add />} onClick={handleAddApiKey}>\r\n                    Add API Key\r\n                  </Button>\r\n                }\r\n              />\r\n              <CardContent>\r\n                <List>\r\n                  {mockAPIKeys.map((api) => (\r\n                    <ListItem key={api.id} sx={{ border: 1, borderColor: 'divider', mb: 1, borderRadius: 1 }}>\r\n                      <ListItemIcon>\r\n                        <Api color={api.status === 'active' ? 'primary' : 'disabled'} />\r\n                      </ListItemIcon>\r\n                      <ListItemText\r\n                        primary={\r\n                          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                            <Typography variant=\"subtitle1\">{api.name}</Typography>\r\n                            <Chip \r\n                              label={api.status} \r\n                              size=\"small\" \r\n                              color={getStatusColor(api.status) as any}\r\n                              variant=\"outlined\"\r\n                            />\r\n                          </Box>\r\n                        }\r\n                        secondary={\r\n                          <Box>\r\n                            <Typography variant=\"body2\" color=\"text.secondary\">\r\n                              {api.service} • Last used: {api.lastUsed}\r\n                            </Typography>\r\n                            <LinearProgress \r\n                              variant=\"determinate\" \r\n                              value={api.usage} \r\n                              sx={{ mt: 1, height: 4, borderRadius: 2 }}\r\n                              color={api.usage > 80 ? 'error' : 'primary'}\r\n                            />\r\n                            <Typography variant=\"caption\" color=\"text.secondary\">\r\n                              Usage: {api.usage}%\r\n                            </Typography>\r\n                          </Box>\r\n                        }\r\n                      />\r\n                      <ListItemSecondaryAction>\r\n                        <IconButton onClick={() => handleEditApiKey(api)}>\r\n                          <Edit />\r\n                        </IconButton>\r\n                        <IconButton color=\"error\" onClick={() => setShowDeleteDialog(true)}>\r\n                          <Delete />\r\n                        </IconButton>\r\n                      </ListItemSecondaryAction>\r\n                    </ListItem>\r\n                  ))}\r\n                </List>\r\n              </CardContent>\r\n            </TabPanel>\r\n\r\n            {/* Automation Settings */}\r\n            <TabPanel value={activeTab} index={5}>\r\n              <CardHeader title=\"Automation Settings\" />\r\n              <CardContent>\r\n                <Grid container spacing={3}>\r\n                  <Grid item xs={12}>\r\n                    <List>\r\n                      <ListItem>\r\n                        <ListItemText primary=\"Auto-publish videos\" secondary=\"Automatically publish videos after processing\" />\r\n                        <ListItemSecondaryAction>\r\n                          <Switch\r\n                            checked={settings.automation.autoPublish}\r\n                            onChange={(e) => handleSettingChange('automation', 'autoPublish', e.target.checked)}\r\n                          />\r\n                        </ListItemSecondaryAction>\r\n                      </ListItem>\r\n                      <ListItem>\r\n                        <ListItemText primary=\"Smart scheduling\" secondary=\"Use AI to optimize publish times\" />\r\n                        <ListItemSecondaryAction>\r\n                          <Switch\r\n                            checked={settings.automation.smartScheduling}\r\n                            onChange={(e) => handleSettingChange('automation', 'smartScheduling', e.target.checked)}\r\n                          />\r\n                        </ListItemSecondaryAction>\r\n                      </ListItem>\r\n                      <ListItem>\r\n                        <ListItemText primary=\"Auto-generate thumbnails\" secondary=\"Create thumbnails automatically\" />\r\n                        <ListItemSecondaryAction>\r\n                          <Switch\r\n                            checked={settings.automation.autoThumbnails}\r\n                            onChange={(e) => handleSettingChange('automation', 'autoThumbnails', e.target.checked)}\r\n                          />\r\n                        </ListItemSecondaryAction>\r\n                      </ListItem>\r\n                    </List>\r\n                  </Grid>\r\n                  \r\n                  <Grid item xs={12}>\r\n                    <Typography variant=\"h6\" gutterBottom>Quality Controls</Typography>\r\n                    <Box sx={{ px: 2 }}>\r\n                      <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\r\n                        Quality Threshold: {settings.automation.qualityThreshold}%\r\n                      </Typography>\r\n                      <Slider\r\n                        value={settings.automation.qualityThreshold}\r\n                        onChange={(e, value) => handleSettingChange('automation', 'qualityThreshold', value)}\r\n                        min={0}\r\n                        max={100}\r\n                        marks={[\r\n                          { value: 0, label: '0%' },\r\n                          { value: 50, label: '50%' },\r\n                          { value: 100, label: '100%' },\r\n                        ]}\r\n                      />\r\n                    </Box>\r\n                  </Grid>\r\n\r\n                  <Grid item xs={12}>\r\n                    <TextField\r\n                      fullWidth\r\n                      label=\"Monthly Cost Limit\"\r\n                      type=\"number\"\r\n                      value={settings.automation.costLimit}\r\n                      onChange={(e) => handleSettingChange('automation', 'costLimit', parseInt(e.target.value))}\r\n                      InputProps={{\r\n                        startAdornment: '$',\r\n                        endAdornment: 'USD',\r\n                      }}\r\n                      helperText=\"Videos will be paused when this limit is reached\"\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </CardContent>\r\n            </TabPanel>\r\n\r\n            {/* AI Settings */}\r\n            <TabPanel value={activeTab} index={6}>\r\n              <CardHeader title=\"AI Configuration\" />\r\n              <CardContent>\r\n                <Grid container spacing={3}>\r\n                  <Grid item xs={12} md={6}>\r\n                    <FormControl fullWidth>\r\n                      <InputLabel>Preferred AI Model</InputLabel>\r\n                      <Select\r\n                        value={settings.ai.preferredModel}\r\n                        onChange={(e) => handleSettingChange('ai', 'preferredModel', e.target.value)}\r\n                        label=\"Preferred AI Model\"\r\n                      >\r\n                        <MenuItem value=\"gpt-3.5-turbo\">GPT-3.5 Turbo</MenuItem>\r\n                        <MenuItem value=\"gpt-4\">GPT-4</MenuItem>\r\n                        <MenuItem value=\"claude-3\">Claude 3</MenuItem>\r\n                        <MenuItem value=\"gemini-pro\">Gemini Pro</MenuItem>\r\n                      </Select>\r\n                    </FormControl>\r\n                  </Grid>\r\n                  \r\n                  <Grid item xs={12} md={6}>\r\n                    <FormControl fullWidth>\r\n                      <InputLabel>Voice Style</InputLabel>\r\n                      <Select\r\n                        value={settings.ai.voiceStyle}\r\n                        onChange={(e) => handleSettingChange('ai', 'voiceStyle', e.target.value)}\r\n                        label=\"Voice Style\"\r\n                      >\r\n                        <MenuItem value=\"professional\">Professional</MenuItem>\r\n                        <MenuItem value=\"casual\">Casual</MenuItem>\r\n                        <MenuItem value=\"energetic\">Energetic</MenuItem>\r\n                        <MenuItem value=\"calm\">Calm</MenuItem>\r\n                      </Select>\r\n                    </FormControl>\r\n                  </Grid>\r\n\r\n                  <Grid item xs={12}>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\r\n                      Content Creativity: {settings.ai.creativity}%\r\n                    </Typography>\r\n                    <Slider\r\n                      value={settings.ai.creativity}\r\n                      onChange={(e, value) => handleSettingChange('ai', 'creativity', value)}\r\n                      min={0}\r\n                      max={100}\r\n                      marks={[\r\n                        { value: 0, label: 'Conservative' },\r\n                        { value: 50, label: 'Balanced' },\r\n                        { value: 100, label: 'Creative' },\r\n                      ]}\r\n                    />\r\n                  </Grid>\r\n\r\n                  <Grid item xs={12}>\r\n                    <List>\r\n                      <ListItem>\r\n                        <ListItemText primary=\"Auto-generate descriptions\" />\r\n                        <ListItemSecondaryAction>\r\n                          <Switch\r\n                            checked={settings.ai.generateDescription}\r\n                            onChange={(e) => handleSettingChange('ai', 'generateDescription', e.target.checked)}\r\n                          />\r\n                        </ListItemSecondaryAction>\r\n                      </ListItem>\r\n                      <ListItem>\r\n                        <ListItemText primary=\"Auto-generate tags\" />\r\n                        <ListItemSecondaryAction>\r\n                          <Switch\r\n                            checked={settings.ai.generateTags}\r\n                            onChange={(e) => handleSettingChange('ai', 'generateTags', e.target.checked)}\r\n                          />\r\n                        </ListItemSecondaryAction>\r\n                      </ListItem>\r\n                    </List>\r\n                  </Grid>\r\n                </Grid>\r\n              </CardContent>\r\n            </TabPanel>\r\n\r\n            {/* Billing Settings */}\r\n            <TabPanel value={activeTab} index={7}>\r\n              <CardHeader title=\"Subscription & Billing\" />\r\n              <CardContent>\r\n                <Grid container spacing={3}>\r\n                  <Grid item xs={12} md={6}>\r\n                    <Card variant=\"outlined\">\r\n                      <CardContent>\r\n                        <Typography variant=\"h6\" gutterBottom>\r\n                          Current Plan: {mockSubscriptionPlan.name}\r\n                        </Typography>\r\n                        <Typography variant=\"h4\" color=\"primary\" gutterBottom>\r\n                          {mockSubscriptionPlan.price}\r\n                        </Typography>\r\n                        <List dense>\r\n                          {mockSubscriptionPlan.features.map((feature, index) => (\r\n                            <ListItem key={index}>\r\n                              <ListItemIcon>\r\n                                <CheckCircle color=\"success\" fontSize=\"small\" />\r\n                              </ListItemIcon>\r\n                              <ListItemText primary={feature} />\r\n                            </ListItem>\r\n                          ))}\r\n                        </List>\r\n                        <Box sx={{ mt: 2 }}>\r\n                          <Button variant=\"outlined\" fullWidth>\r\n                            Change Plan\r\n                          </Button>\r\n                        </Box>\r\n                      </CardContent>\r\n                    </Card>\r\n                  </Grid>\r\n\r\n                  <Grid item xs={12} md={6}>\r\n                    <Typography variant=\"h6\" gutterBottom>Usage This Month</Typography>\r\n                    {Object.entries(mockSubscriptionPlan.usage).map(([key, usage]) => (\r\n                      <Box key={key} sx={{ mb: 2 }}>\r\n                        <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>\r\n                          <Typography variant=\"body2\">\r\n                            {key.charAt(0).toUpperCase() + key.slice(1)}\r\n                          </Typography>\r\n                          <Typography variant=\"body2\">\r\n                            {usage.current} / {usage.limit}\r\n                          </Typography>\r\n                        </Box>\r\n                        <LinearProgress\r\n                          variant=\"determinate\"\r\n                          value={(usage.current / usage.limit) * 100}\r\n                          color={usage.current / usage.limit > 0.8 ? 'warning' : 'primary'}\r\n                        />\r\n                      </Box>\r\n                    ))}\r\n                    \r\n                    <Divider sx={{ my: 2 }} />\r\n                    \r\n                    <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>\r\n                      <Button variant=\"outlined\" startIcon={<CreditCard />} size=\"small\">\r\n                        Payment Methods\r\n                      </Button>\r\n                      <Button variant=\"outlined\" startIcon={<Receipt />} size=\"small\">\r\n                        Billing History\r\n                      </Button>\r\n                      <Button variant=\"outlined\" startIcon={<Download />} size=\"small\">\r\n                        Download Invoice\r\n                      </Button>\r\n                    </Box>\r\n                  </Grid>\r\n                </Grid>\r\n              </CardContent>\r\n            </TabPanel>\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* API Key Dialog */}\r\n      <Dialog open={showApiDialog} onClose={() => setShowApiDialog(false)} maxWidth=\"sm\" fullWidth>\r\n        <DialogTitle>\r\n          {selectedApi ? 'Edit API Key' : 'Add New API Key'}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <Grid container spacing={2} sx={{ mt: 1 }}>\r\n            <Grid item xs={12}>\r\n              <TextField fullWidth label=\"Service Name\" defaultValue={selectedApi?.name || ''} />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField fullWidth label=\"API Key\" type=\"password\" defaultValue=\"••••••••••••••••\" />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <FormControl fullWidth>\r\n                <InputLabel>Service Type</InputLabel>\r\n                <Select defaultValue={selectedApi?.service || ''} label=\"Service Type\">\r\n                  <MenuItem value=\"GPT-4\">OpenAI GPT-4</MenuItem>\r\n                  <MenuItem value=\"Voice Synthesis\">ElevenLabs</MenuItem>\r\n                  <MenuItem value=\"Channel Management\">YouTube API</MenuItem>\r\n                  <MenuItem value=\"Content Generation\">Claude API</MenuItem>\r\n                  <MenuItem value=\"Image Generation\">DALL-E</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n          </Grid>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setShowApiDialog(false)}>Cancel</Button>\r\n          <Button variant=\"contained\" onClick={() => setShowApiDialog(false)}>\r\n            {selectedApi ? 'Update' : 'Add'} API Key\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Delete Confirmation Dialog */}\r\n      <Dialog open={showDeleteDialog} onClose={() => setShowDeleteDialog(false)}>\r\n        <DialogTitle>Confirm Deletion</DialogTitle>\r\n        <DialogContent>\r\n          <Typography>\r\n            Are you sure you want to delete this API key? This action cannot be undone.\r\n          </Typography>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setShowDeleteDialog(false)}>Cancel</Button>\r\n          <Button color=\"error\" variant=\"contained\" onClick={() => setShowDeleteDialog(false)}>\r\n            Delete\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Settings;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\pages\\Settings\\UserSettings.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CardActions' is defined but never used.","line":31,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Tooltip' is defined but never used.","line":42,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":42,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'LinearProgress' is defined but never used.","line":43,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":43,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Stack' is defined but never used.","line":44,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":44,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Language' is defined but never used.","line":53,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":53,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Edit' is defined but never used.","line":55,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":55,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ContentCopy' is defined but never used.","line":62,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":62,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Refresh' is defined but never used.","line":63,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":63,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Warning' is defined but never used.","line":64,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":64,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CheckCircle' is defined but never used.","line":65,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":65,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Info' is defined but never used.","line":66,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":66,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Key' is defined but never used.","line":67,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":67,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CreditCard' is defined but never used.","line":68,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":68,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Email' is defined but never used.","line":69,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":69,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Lock' is defined but never used.","line":71,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":71,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TwoFactorAuth' is defined but never used.","line":72,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":72,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'UserProfile' is defined but never used.","line":94,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":94,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'NotificationSettings' is defined but never used.","line":108,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":108,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'showApiKeyDialog' is assigned a value but never used.","line":139,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":139,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'newApiKey' is assigned a value but never used.","line":140,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":140,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'watch' is assigned a value but never used.","line":146,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":146,"endColumn":46},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchUserSettings'. Either include it or remove the dependency array.","line":178,"column":6,"nodeType":"ArrayExpression","endLine":178,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchUserSettings]","fix":{"range":[3812,3814],"text":"[fetchUserSettings]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'err' is defined but never used.","line":185,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":185,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":201,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":201,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4356,4359],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4356,4359],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'err' is defined but never used.","line":214,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":214,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":221,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":221,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4854,4857],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4854,4857],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'err' is defined but never used.","line":235,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":235,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":242,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":242,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5454,5457],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5454,5457],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'err' is defined but never used.","line":247,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":247,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'response' is assigned a value but never used.","line":256,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":256,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'err' is defined but never used.","line":260,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":260,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'err' is defined but never used.","line":270,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":270,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleCreateApiKey' is assigned a value but never used.","line":275,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":275,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'err' is defined but never used.","line":280,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":280,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'err' is defined but never used.","line":290,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":290,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'err' is defined but never used.","line":300,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":300,"endColumn":17}],"suppressedMessages":[],"errorCount":35,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * User Settings Page\n * P2 Task: [FRONTEND] User Settings Pages\n * Comprehensive user preferences and account management\n */\n\nimport React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Container,\n  Grid,\n  Paper,\n  Typography,\n  Tabs,\n  Tab,\n  TextField,\n  Button,\n  Switch,\n  FormGroup,\n  FormControlLabel,\n  Select,\n  MenuItem,\n  FormControl,\n  InputLabel,\n  Avatar,\n  IconButton,\n  Divider,\n  Alert,\n  Card,\n  CardContent,\n  CardActions,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemSecondaryAction,\n  Chip,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  InputAdornment,\n  Tooltip,\n  LinearProgress,\n  Stack,\n} from '@mui/material';\nimport {\n  Person,\n  Security,\n  Notifications,\n  Payment,\n  Api,\n  Palette,\n  Language,\n  CloudUpload,\n  Edit,\n  Save,\n  Cancel,\n  Delete,\n  Add,\n  Visibility,\n  VisibilityOff,\n  ContentCopy,\n  Refresh,\n  Warning,\n  CheckCircle,\n  Info,\n  Key,\n  CreditCard,\n  Email,\n  Phone,\n  Lock,\n  TwoFactorAuth,\n} from '@mui/icons-material';\nimport { useForm, Controller } from 'react-hook-form';\nimport { useNavigate } from 'react-router-dom';\nimport { api } from '../../services/api';\nimport { useAuthStore } from '../../stores/authStore';\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: number;\n  value: number;\n}\n\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n  return (\n    <div hidden={value !== index} {...other}>\n      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}\n    </div>\n  );\n}\n\ninterface UserProfile {\n  id: string;\n  email: string;\n  name: string;\n  phone?: string;\n  avatar?: string;\n  timezone: string;\n  language: string;\n  created_at: string;\n  subscription_tier: string;\n  company?: string;\n  bio?: string;\n}\n\ninterface NotificationSettings {\n  email_enabled: boolean;\n  sms_enabled: boolean;\n  push_enabled: boolean;\n  email_frequency: 'instant' | 'daily' | 'weekly';\n  notification_types: {\n    video_complete: boolean;\n    quota_warning: boolean;\n    cost_alert: boolean;\n    system_updates: boolean;\n    marketing: boolean;\n  };\n}\n\ninterface APIKey {\n  id: string;\n  name: string;\n  key_preview: string;\n  created_at: string;\n  last_used?: string;\n  permissions: string[];\n}\n\nconst UserSettings: React.FC = () => {\n  const [activeTab, setActiveTab] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [success, setSuccess] = useState<string | null>(null);\n  const [error, setError] = useState<string | null>(null);\n  const [showPassword, setShowPassword] = useState(false);\n  const [twoFactorEnabled, setTwoFactorEnabled] = useState(false);\n  const [apiKeys, setApiKeys] = useState<APIKey[]>([]);\n  const [showApiKeyDialog, setShowApiKeyDialog] = useState(false);\n  const [newApiKey, setNewApiKey] = useState<string | null>(null);\n  const [deleteAccountDialog, setDeleteAccountDialog] = useState(false);\n  \n  const { user, updateUser } = useAuthStore();\n  const navigate = useNavigate();\n  \n  const { control, handleSubmit, reset, watch } = useForm({\n    defaultValues: {\n      name: user?.name || '',\n      email: user?.email || '',\n      phone: user?.phone || '',\n      company: user?.company || '',\n      bio: user?.bio || '',\n      timezone: user?.timezone || 'UTC',\n      language: user?.language || 'en',\n      currentPassword: '',\n      newPassword: '',\n      confirmPassword: '',\n      notifications: {\n        email_enabled: true,\n        sms_enabled: false,\n        push_enabled: true,\n        email_frequency: 'instant',\n        video_complete: true,\n        quota_warning: true,\n        cost_alert: true,\n        system_updates: true,\n        marketing: false,\n      },\n      theme: 'light',\n      autoplay: true,\n      quality: 'high',\n    }\n  });\n\n  useEffect(() => {\n    fetchUserSettings();\n    fetchApiKeys();\n  }, []);\n\n  const fetchUserSettings = async () => {\n    try {\n      setLoading(true);\n      const response = await api.get('/user/settings');\n      reset(response.data);\n    } catch (err) {\n      setError('Failed to load settings');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchApiKeys = async () => {\n    try {\n      const response = await api.get('/user/api-keys');\n      setApiKeys(response.data);\n    } catch (err) {\n      console.error('Failed to fetch API keys:', err);\n    }\n  };\n\n  const onSubmitProfile = async (data: any) => {\n    try {\n      setLoading(true);\n      await api.patch('/user/profile', {\n        name: data.name,\n        phone: data.phone,\n        company: data.company,\n        bio: data.bio,\n        timezone: data.timezone,\n        language: data.language,\n      });\n      setSuccess('Profile updated successfully');\n      updateUser(data);\n    } catch (err) {\n      setError('Failed to update profile');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const onSubmitPassword = async (data: any) => {\n    if (data.newPassword !== data.confirmPassword) {\n      setError('Passwords do not match');\n      return;\n    }\n    \n    try {\n      setLoading(true);\n      await api.post('/user/change-password', {\n        current_password: data.currentPassword,\n        new_password: data.newPassword,\n      });\n      setSuccess('Password changed successfully');\n      reset({ currentPassword: '', newPassword: '', confirmPassword: '' });\n    } catch (err) {\n      setError('Failed to change password');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const onSubmitNotifications = async (data: any) => {\n    try {\n      setLoading(true);\n      await api.patch('/user/notifications', data.notifications);\n      setSuccess('Notification preferences updated');\n    } catch (err) {\n      setError('Failed to update notifications');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleEnable2FA = async () => {\n    try {\n      const response = await api.post('/user/2fa/enable');\n      // Show QR code dialog\n      setTwoFactorEnabled(true);\n      setSuccess('Two-factor authentication enabled');\n    } catch (err) {\n      setError('Failed to enable 2FA');\n    }\n  };\n\n  const handleDisable2FA = async () => {\n    try {\n      await api.post('/user/2fa/disable');\n      setTwoFactorEnabled(false);\n      setSuccess('Two-factor authentication disabled');\n    } catch (err) {\n      setError('Failed to disable 2FA');\n    }\n  };\n\n  const handleCreateApiKey = async (name: string, permissions: string[]) => {\n    try {\n      const response = await api.post('/user/api-keys', { name, permissions });\n      setNewApiKey(response.data.key);\n      fetchApiKeys();\n    } catch (err) {\n      setError('Failed to create API key');\n    }\n  };\n\n  const handleDeleteApiKey = async (keyId: string) => {\n    try {\n      await api.delete(`/user/api-keys/${keyId}`);\n      fetchApiKeys();\n      setSuccess('API key deleted');\n    } catch (err) {\n      setError('Failed to delete API key');\n    }\n  };\n\n  const handleDeleteAccount = async () => {\n    try {\n      await api.delete('/user/account');\n      // Logout and redirect\n      navigate('/');\n    } catch (err) {\n      setError('Failed to delete account');\n    }\n  };\n\n  return (\n    <Container maxWidth=\"lg\">\n      <Box sx={{ mt: 4, mb: 4 }}>\n        <Typography variant=\"h4\" gutterBottom>\n          Settings\n        </Typography>\n        \n        {success && (\n          <Alert severity=\"success\" onClose={() => setSuccess(null)} sx={{ mb: 2 }}>\n            {success}\n          </Alert>\n        )}\n        \n        {error && (\n          <Alert severity=\"error\" onClose={() => setError(null)} sx={{ mb: 2 }}>\n            {error}\n          </Alert>\n        )}\n\n        <Paper sx={{ width: '100%' }}>\n          <Tabs\n            value={activeTab}\n            onChange={(_, value) => setActiveTab(value)}\n            variant=\"scrollable\"\n            scrollButtons=\"auto\"\n          >\n            <Tab icon={<Person />} label=\"Profile\" />\n            <Tab icon={<Security />} label=\"Security\" />\n            <Tab icon={<Notifications />} label=\"Notifications\" />\n            <Tab icon={<Payment />} label=\"Billing\" />\n            <Tab icon={<Api />} label=\"API Keys\" />\n            <Tab icon={<Palette />} label=\"Appearance\" />\n          </Tabs>\n\n          <TabPanel value={activeTab} index={0}>\n            {/* Profile Settings */}\n            <form onSubmit={handleSubmit(onSubmitProfile)}>\n              <Grid container spacing={3}>\n                <Grid item xs={12} md={4}>\n                  <Box textAlign=\"center\">\n                    <Avatar\n                      sx={{ width: 120, height: 120, mx: 'auto', mb: 2 }}\n                      src={user?.avatar}\n                    >\n                      {user?.name?.charAt(0)}\n                    </Avatar>\n                    <Button\n                      variant=\"outlined\"\n                      startIcon={<CloudUpload />}\n                      component=\"label\"\n                    >\n                      Upload Avatar\n                      <input type=\"file\" hidden accept=\"image/*\" />\n                    </Button>\n                  </Box>\n                </Grid>\n                \n                <Grid item xs={12} md={8}>\n                  <Grid container spacing={2}>\n                    <Grid item xs={12} sm={6}>\n                      <Controller\n                        name=\"name\"\n                        control={control}\n                        render={({ field }) => (\n                          <TextField\n                            {...field}\n                            fullWidth\n                            label=\"Full Name\"\n                            required\n                          />\n                        )}\n                      />\n                    </Grid>\n                    \n                    <Grid item xs={12} sm={6}>\n                      <Controller\n                        name=\"email\"\n                        control={control}\n                        render={({ field }) => (\n                          <TextField\n                            {...field}\n                            fullWidth\n                            label=\"Email\"\n                            type=\"email\"\n                            disabled\n                          />\n                        )}\n                      />\n                    </Grid>\n                    \n                    <Grid item xs={12} sm={6}>\n                      <Controller\n                        name=\"phone\"\n                        control={control}\n                        render={({ field }) => (\n                          <TextField\n                            {...field}\n                            fullWidth\n                            label=\"Phone\"\n                            InputProps={{\n                              startAdornment: <Phone sx={{ mr: 1, color: 'text.secondary' }} />\n                            }}\n                          />\n                        )}\n                      />\n                    </Grid>\n                    \n                    <Grid item xs={12} sm={6}>\n                      <Controller\n                        name=\"company\"\n                        control={control}\n                        render={({ field }) => (\n                          <TextField\n                            {...field}\n                            fullWidth\n                            label=\"Company\"\n                          />\n                        )}\n                      />\n                    </Grid>\n                    \n                    <Grid item xs={12}>\n                      <Controller\n                        name=\"bio\"\n                        control={control}\n                        render={({ field }) => (\n                          <TextField\n                            {...field}\n                            fullWidth\n                            label=\"Bio\"\n                            multiline\n                            rows={4}\n                          />\n                        )}\n                      />\n                    </Grid>\n                    \n                    <Grid item xs={12} sm={6}>\n                      <Controller\n                        name=\"timezone\"\n                        control={control}\n                        render={({ field }) => (\n                          <FormControl fullWidth>\n                            <InputLabel>Timezone</InputLabel>\n                            <Select {...field} label=\"Timezone\">\n                              <MenuItem value=\"UTC\">UTC</MenuItem>\n                              <MenuItem value=\"America/New_York\">Eastern Time</MenuItem>\n                              <MenuItem value=\"America/Chicago\">Central Time</MenuItem>\n                              <MenuItem value=\"America/Denver\">Mountain Time</MenuItem>\n                              <MenuItem value=\"America/Los_Angeles\">Pacific Time</MenuItem>\n                            </Select>\n                          </FormControl>\n                        )}\n                      />\n                    </Grid>\n                    \n                    <Grid item xs={12} sm={6}>\n                      <Controller\n                        name=\"language\"\n                        control={control}\n                        render={({ field }) => (\n                          <FormControl fullWidth>\n                            <InputLabel>Language</InputLabel>\n                            <Select {...field} label=\"Language\">\n                              <MenuItem value=\"en\">English</MenuItem>\n                              <MenuItem value=\"es\">Spanish</MenuItem>\n                              <MenuItem value=\"fr\">French</MenuItem>\n                              <MenuItem value=\"de\">German</MenuItem>\n                              <MenuItem value=\"zh\">Chinese</MenuItem>\n                            </Select>\n                          </FormControl>\n                        )}\n                      />\n                    </Grid>\n                  </Grid>\n                  \n                  <Box sx={{ mt: 3, display: 'flex', gap: 2 }}>\n                    <Button\n                      type=\"submit\"\n                      variant=\"contained\"\n                      startIcon={<Save />}\n                      disabled={loading}\n                    >\n                      Save Changes\n                    </Button>\n                    <Button\n                      variant=\"outlined\"\n                      startIcon={<Cancel />}\n                      onClick={() => reset()}\n                    >\n                      Cancel\n                    </Button>\n                  </Box>\n                </Grid>\n              </Grid>\n            </form>\n          </TabPanel>\n\n          <TabPanel value={activeTab} index={1}>\n            {/* Security Settings */}\n            <Grid container spacing={3}>\n              <Grid item xs={12}>\n                <Typography variant=\"h6\" gutterBottom>\n                  Password\n                </Typography>\n                <form onSubmit={handleSubmit(onSubmitPassword)}>\n                  <Grid container spacing={2}>\n                    <Grid item xs={12}>\n                      <Controller\n                        name=\"currentPassword\"\n                        control={control}\n                        render={({ field }) => (\n                          <TextField\n                            {...field}\n                            fullWidth\n                            label=\"Current Password\"\n                            type={showPassword ? 'text' : 'password'}\n                            InputProps={{\n                              endAdornment: (\n                                <InputAdornment position=\"end\">\n                                  <IconButton\n                                    onClick={() => setShowPassword(!showPassword)}\n                                    edge=\"end\"\n                                  >\n                                    {showPassword ? <VisibilityOff /> : <Visibility />}\n                                  </IconButton>\n                                </InputAdornment>\n                              ),\n                            }}\n                          />\n                        )}\n                      />\n                    </Grid>\n                    \n                    <Grid item xs={12} sm={6}>\n                      <Controller\n                        name=\"newPassword\"\n                        control={control}\n                        render={({ field }) => (\n                          <TextField\n                            {...field}\n                            fullWidth\n                            label=\"New Password\"\n                            type=\"password\"\n                          />\n                        )}\n                      />\n                    </Grid>\n                    \n                    <Grid item xs={12} sm={6}>\n                      <Controller\n                        name=\"confirmPassword\"\n                        control={control}\n                        render={({ field }) => (\n                          <TextField\n                            {...field}\n                            fullWidth\n                            label=\"Confirm Password\"\n                            type=\"password\"\n                          />\n                        )}\n                      />\n                    </Grid>\n                  </Grid>\n                  \n                  <Button\n                    type=\"submit\"\n                    variant=\"contained\"\n                    sx={{ mt: 2 }}\n                    disabled={loading}\n                  >\n                    Change Password\n                  </Button>\n                </form>\n              </Grid>\n              \n              <Grid item xs={12}>\n                <Divider sx={{ my: 2 }} />\n                <Typography variant=\"h6\" gutterBottom>\n                  Two-Factor Authentication\n                </Typography>\n                <Card variant=\"outlined\">\n                  <CardContent>\n                    <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\n                      <Box>\n                        <Typography variant=\"subtitle1\">\n                          {twoFactorEnabled ? 'Enabled' : 'Disabled'}\n                        </Typography>\n                        <Typography variant=\"body2\" color=\"text.secondary\">\n                          Add an extra layer of security to your account\n                        </Typography>\n                      </Box>\n                      <Button\n                        variant={twoFactorEnabled ? 'outlined' : 'contained'}\n                        onClick={twoFactorEnabled ? handleDisable2FA : handleEnable2FA}\n                      >\n                        {twoFactorEnabled ? 'Disable' : 'Enable'}\n                      </Button>\n                    </Box>\n                  </CardContent>\n                </Card>\n              </Grid>\n              \n              <Grid item xs={12}>\n                <Divider sx={{ my: 2 }} />\n                <Typography variant=\"h6\" gutterBottom color=\"error\">\n                  Danger Zone\n                </Typography>\n                <Card variant=\"outlined\" sx={{ borderColor: 'error.main' }}>\n                  <CardContent>\n                    <Typography variant=\"subtitle1\" gutterBottom>\n                      Delete Account\n                    </Typography>\n                    <Typography variant=\"body2\" color=\"text.secondary\" paragraph>\n                      Once you delete your account, there is no going back. Please be certain.\n                    </Typography>\n                    <Button\n                      variant=\"outlined\"\n                      color=\"error\"\n                      startIcon={<Delete />}\n                      onClick={() => setDeleteAccountDialog(true)}\n                    >\n                      Delete Account\n                    </Button>\n                  </CardContent>\n                </Card>\n              </Grid>\n            </Grid>\n          </TabPanel>\n\n          <TabPanel value={activeTab} index={2}>\n            {/* Notification Settings */}\n            <form onSubmit={handleSubmit(onSubmitNotifications)}>\n              <Grid container spacing={3}>\n                <Grid item xs={12}>\n                  <Typography variant=\"h6\" gutterBottom>\n                    Notification Channels\n                  </Typography>\n                  <FormGroup>\n                    <Controller\n                      name=\"notifications.email_enabled\"\n                      control={control}\n                      render={({ field }) => (\n                        <FormControlLabel\n                          control={<Switch {...field} checked={field.value} />}\n                          label=\"Email Notifications\"\n                        />\n                      )}\n                    />\n                    <Controller\n                      name=\"notifications.sms_enabled\"\n                      control={control}\n                      render={({ field }) => (\n                        <FormControlLabel\n                          control={<Switch {...field} checked={field.value} />}\n                          label=\"SMS Notifications\"\n                        />\n                      )}\n                    />\n                    <Controller\n                      name=\"notifications.push_enabled\"\n                      control={control}\n                      render={({ field }) => (\n                        <FormControlLabel\n                          control={<Switch {...field} checked={field.value} />}\n                          label=\"Push Notifications\"\n                        />\n                      )}\n                    />\n                  </FormGroup>\n                </Grid>\n                \n                <Grid item xs={12}>\n                  <Typography variant=\"h6\" gutterBottom>\n                    Notification Types\n                  </Typography>\n                  <FormGroup>\n                    <Controller\n                      name=\"notifications.video_complete\"\n                      control={control}\n                      render={({ field }) => (\n                        <FormControlLabel\n                          control={<Switch {...field} checked={field.value} />}\n                          label=\"Video Generation Complete\"\n                        />\n                      )}\n                    />\n                    <Controller\n                      name=\"notifications.quota_warning\"\n                      control={control}\n                      render={({ field }) => (\n                        <FormControlLabel\n                          control={<Switch {...field} checked={field.value} />}\n                          label=\"YouTube Quota Warnings\"\n                        />\n                      )}\n                    />\n                    <Controller\n                      name=\"notifications.cost_alert\"\n                      control={control}\n                      render={({ field }) => (\n                        <FormControlLabel\n                          control={<Switch {...field} checked={field.value} />}\n                          label=\"Cost Alerts\"\n                        />\n                      )}\n                    />\n                    <Controller\n                      name=\"notifications.system_updates\"\n                      control={control}\n                      render={({ field }) => (\n                        <FormControlLabel\n                          control={<Switch {...field} checked={field.value} />}\n                          label=\"System Updates\"\n                        />\n                      )}\n                    />\n                    <Controller\n                      name=\"notifications.marketing\"\n                      control={control}\n                      render={({ field }) => (\n                        <FormControlLabel\n                          control={<Switch {...field} checked={field.value} />}\n                          label=\"Marketing & Promotions\"\n                        />\n                      )}\n                    />\n                  </FormGroup>\n                </Grid>\n                \n                <Grid item xs={12}>\n                  <Controller\n                    name=\"notifications.email_frequency\"\n                    control={control}\n                    render={({ field }) => (\n                      <FormControl fullWidth>\n                        <InputLabel>Email Frequency</InputLabel>\n                        <Select {...field} label=\"Email Frequency\">\n                          <MenuItem value=\"instant\">Instant</MenuItem>\n                          <MenuItem value=\"daily\">Daily Digest</MenuItem>\n                          <MenuItem value=\"weekly\">Weekly Summary</MenuItem>\n                        </Select>\n                      </FormControl>\n                    )}\n                  />\n                </Grid>\n                \n                <Grid item xs={12}>\n                  <Button\n                    type=\"submit\"\n                    variant=\"contained\"\n                    disabled={loading}\n                  >\n                    Save Preferences\n                  </Button>\n                </Grid>\n              </Grid>\n            </form>\n          </TabPanel>\n\n          <TabPanel value={activeTab} index={4}>\n            {/* API Keys */}\n            <Box>\n              <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\n                <Typography variant=\"h6\">API Keys</Typography>\n                <Button\n                  variant=\"contained\"\n                  startIcon={<Add />}\n                  onClick={() => setShowApiKeyDialog(true)}\n                >\n                  Create New Key\n                </Button>\n              </Box>\n              \n              <List>\n                {apiKeys.map((key) => (\n                  <ListItem key={key.id} divider>\n                    <ListItemText\n                      primary={key.name}\n                      secondary={\n                        <Box>\n                          <Typography variant=\"body2\" component=\"span\">\n                            {key.key_preview}...\n                          </Typography>\n                          <Box mt={1}>\n                            <Chip\n                              size=\"small\"\n                              label={`Created: ${new Date(key.created_at).toLocaleDateString()}`}\n                              sx={{ mr: 1 }}\n                            />\n                            {key.last_used && (\n                              <Chip\n                                size=\"small\"\n                                label={`Last used: ${new Date(key.last_used).toLocaleDateString()}`}\n                              />\n                            )}\n                          </Box>\n                        </Box>\n                      }\n                    />\n                    <ListItemSecondaryAction>\n                      <IconButton\n                        edge=\"end\"\n                        onClick={() => handleDeleteApiKey(key.id)}\n                      >\n                        <Delete />\n                      </IconButton>\n                    </ListItemSecondaryAction>\n                  </ListItem>\n                ))}\n              </List>\n              \n              {apiKeys.length === 0 && (\n                <Alert severity=\"info\">\n                  No API keys created yet. Create one to start using the API.\n                </Alert>\n              )}\n            </Box>\n          </TabPanel>\n        </Paper>\n      </Box>\n\n      {/* Delete Account Dialog */}\n      <Dialog open={deleteAccountDialog} onClose={() => setDeleteAccountDialog(false)}>\n        <DialogTitle>Delete Account</DialogTitle>\n        <DialogContent>\n          <Alert severity=\"warning\" sx={{ mb: 2 }}>\n            This action cannot be undone. All your data will be permanently deleted.\n          </Alert>\n          <Typography>\n            Type \"DELETE\" to confirm:\n          </Typography>\n          <TextField\n            fullWidth\n            margin=\"normal\"\n            placeholder=\"DELETE\"\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setDeleteAccountDialog(false)}>Cancel</Button>\n          <Button\n            onClick={handleDeleteAccount}\n            color=\"error\"\n            variant=\"contained\"\n          >\n            Delete Account\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Container>\n  );\n};\n\nexport default UserSettings;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\pages\\Videos\\VideoDetail.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Schedule' is defined but never used.","line":32,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Download' is defined but never used.","line":36,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ErrorIcon' is defined but never used.","line":39,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TrendingUp' is defined but never used.","line":41,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AccessTime' is defined but never used.","line":43,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":43,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'formatDistanceToNow' is defined but never used.","line":48,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":29},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":75,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1495,1498],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1495,1498],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchVideoDetails'. Either include it or remove the dependency array.","line":93,"column":6,"nodeType":"ArrayExpression","endLine":93,"endColumn":15,"suggestions":[{"desc":"Update the dependencies array to be: [fetchVideoDetails, videoId]","fix":{"range":[2101,2110],"text":"[fetchVideoDetails, videoId]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":106,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":106,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2452,2455],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2452,2455],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":122,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2866,2869],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2866,2869],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":133,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":133,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3218,3221],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3218,3221],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":142,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":142,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3428,3431],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3428,3431],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":157,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":157,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3769,3772],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3769,3772],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":170,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":170,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4049,4052],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4049,4052],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport {\n  Box,\n  Paper,\n  Grid,\n  Typography,\n  Button,\n  Chip,\n  Divider,\n  Tab,\n  Tabs,\n  CircularProgress,\n  Alert,\n  IconButton,\n  Card,\n  CardContent,\n  List,\n  ListItem,\n  ListItemText,\n  TextField,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n} from '@mui/material';\nimport {\n  ArrowBack,\n  Edit,\n  Delete,\n  Publish,\n  Schedule,\n  PlayArrow,\n  ContentCopy,\n  OpenInNew,\n  Download,\n  Refresh,\n  CheckCircle,\n  Error as ErrorIcon,\n  AttachMoney,\n  TrendingUp,\n  Speed,\n  AccessTime,\n} from '@mui/icons-material';\nimport { api } from '../../services/api';\nimport { VideoPlayer } from '../../components/Videos/VideoPlayer';\nimport { VideoMetrics } from '../../components/Videos/VideoMetrics';\nimport { formatDistanceToNow } from 'date-fns';\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: number;\n  value: number;\n}\n\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`video-tabpanel-${index}`}\n      aria-labelledby={`video-tab-${index}`}\n      {...other}\n    >\n      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}\n    </div>\n  );\n}\n\nexport const VideoDetail: React.FC = () => {\n  const { videoId } = useParams<{ videoId: string }>();\n  const navigate = useNavigate();\n  const [video, setVideo] = useState<any>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [tabValue, setTabValue] = useState(0);\n  const [editDialogOpen, setEditDialogOpen] = useState(false);\n  const [publishDialogOpen, setPublishDialogOpen] = useState(false);\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const [editForm, setEditForm] = useState({\n    title: '',\n    description: '',\n    tags: [],\n  });\n  const [publishSchedule, setPublishSchedule] = useState('');\n\n  useEffect(() => {\n    if (videoId) {\n      fetchVideoDetails();\n    }\n  }, [videoId]);\n\n  const fetchVideoDetails = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await api.videos.get(videoId!);\n      setVideo(response);\n      setEditForm({\n        title: response.title,\n        description: response.description || '',\n        tags: response.tags || [],\n      });\n    } catch (err: any) {\n      setError(err.message || 'Failed to load video details');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\n    setTabValue(newValue);\n  };\n\n  const handleEdit = async () => {\n    try {\n      await api.videos.update(videoId!, editForm);\n      await fetchVideoDetails();\n      setEditDialogOpen(false);\n    } catch (err: any) {\n      setError(err.message || 'Failed to update video');\n    }\n  };\n\n  const handlePublish = async () => {\n    try {\n      const scheduledTime = publishSchedule ? new Date(publishSchedule) : undefined;\n      await api.videos.publish(videoId!, scheduledTime);\n      await fetchVideoDetails();\n      setPublishDialogOpen(false);\n    } catch (err: any) {\n      setError(err.message || 'Failed to publish video');\n    }\n  };\n\n  const handleDelete = async () => {\n    try {\n      await api.videos.delete(videoId!);\n      navigate('/videos');\n    } catch (err: any) {\n      setError(err.message || 'Failed to delete video');\n    }\n  };\n\n  const handleCopyLink = () => {\n    navigator.clipboard.writeText(window.location.href);\n  };\n\n  const handleOpenYouTube = () => {\n    if (video?.youtube_url) {\n      window.open(video.youtube_url, '_blank');\n    }\n  };\n\n  const getStatusColor = (status: string): any => {\n    switch (status) {\n      case 'completed':\n        return 'success';\n      case 'processing':\n        return 'warning';\n      case 'failed':\n        return 'error';\n      default:\n        return 'default';\n    }\n  };\n\n  const getPublishStatusColor = (status: string): any => {\n    switch (status) {\n      case 'published':\n        return 'success';\n      case 'scheduled':\n        return 'info';\n      case 'publishing':\n        return 'warning';\n      default:\n        return 'default';\n    }\n  };\n\n  if (loading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"60vh\">\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  if (error) {\n    return (\n      <Box p={3}>\n        <Alert severity=\"error\">{error}</Alert>\n      </Box>\n    );\n  }\n\n  if (!video) {\n    return (\n      <Box p={3}>\n        <Alert severity=\"warning\">Video not found</Alert>\n      </Box>\n    );\n  }\n\n  return (\n    <Box p={3}>\n      {/* Header */}\n      <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\" mb={3}>\n        <Box display=\"flex\" alignItems=\"center\" gap={2}>\n          <IconButton onClick={() => navigate('/videos')}>\n            <ArrowBack />\n          </IconButton>\n          <Typography variant=\"h4\">{video.title}</Typography>\n        </Box>\n        <Box display=\"flex\" gap={1}>\n          <IconButton onClick={fetchVideoDetails}>\n            <Refresh />\n          </IconButton>\n          <IconButton onClick={handleCopyLink}>\n            <ContentCopy />\n          </IconButton>\n          {video.youtube_url && (\n            <IconButton onClick={handleOpenYouTube}>\n              <OpenInNew />\n            </IconButton>\n          )}\n        </Box>\n      </Box>\n\n      {/* Status and Actions */}\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\n        <Box display=\"flex\" gap={2}>\n          <Chip\n            label={video.generation_status}\n            color={getStatusColor(video.generation_status)}\n            icon={video.generation_status === 'completed' ? <CheckCircle /> : undefined}\n          />\n          <Chip\n            label={video.publish_status}\n            color={getPublishStatusColor(video.publish_status)}\n          />\n          {video.quality_score && (\n            <Chip\n              label={`Quality: ${video.quality_score.toFixed(0)}%`}\n              color=\"primary\"\n              variant=\"outlined\"\n            />\n          )}\n        </Box>\n        <Box display=\"flex\" gap={1}>\n          {video.generation_status === 'completed' && (\n            <>\n              <Button\n                variant=\"contained\"\n                startIcon={<PlayArrow />}\n                onClick={() => setTabValue(1)}\n              >\n                Preview\n              </Button>\n              {video.publish_status === 'draft' && (\n                <Button\n                  variant=\"contained\"\n                  color=\"success\"\n                  startIcon={<Publish />}\n                  onClick={() => setPublishDialogOpen(true)}\n                >\n                  Publish\n                </Button>\n              )}\n            </>\n          )}\n          <Button\n            variant=\"outlined\"\n            startIcon={<Edit />}\n            onClick={() => setEditDialogOpen(true)}\n          >\n            Edit\n          </Button>\n          <Button\n            variant=\"outlined\"\n            color=\"error\"\n            startIcon={<Delete />}\n            onClick={() => setDeleteDialogOpen(true)}\n          >\n            Delete\n          </Button>\n        </Box>\n      </Box>\n\n      {/* Main Content */}\n      <Grid container spacing={3}>\n        <Grid item xs={12} md={8}>\n          <Paper>\n            <Tabs value={tabValue} onChange={handleTabChange}>\n              <Tab label=\"Details\" />\n              <Tab label=\"Preview\" disabled={video.generation_status !== 'completed'} />\n              <Tab label=\"Analytics\" disabled={!video.published_at} />\n              <Tab label=\"History\" />\n            </Tabs>\n\n            <TabPanel value={tabValue} index={0}>\n              {/* Video Details */}\n              <Grid container spacing={3}>\n                <Grid item xs={12}>\n                  <Typography variant=\"h6\" gutterBottom>\n                    Description\n                  </Typography>\n                  <Typography variant=\"body1\" color=\"text.secondary\">\n                    {video.description || 'No description available'}\n                  </Typography>\n                </Grid>\n\n                <Grid item xs={12}>\n                  <Typography variant=\"h6\" gutterBottom>\n                    Tags\n                  </Typography>\n                  <Box display=\"flex\" gap={1} flexWrap=\"wrap\">\n                    {video.tags?.length > 0 ? (\n                      video.tags.map((tag: string, index: number) => (\n                        <Chip key={index} label={tag} size=\"small\" />\n                      ))\n                    ) : (\n                      <Typography variant=\"body2\" color=\"text.secondary\">\n                        No tags\n                      </Typography>\n                    )}\n                  </Box>\n                </Grid>\n\n                <Grid item xs={12}>\n                  <Typography variant=\"h6\" gutterBottom>\n                    Script\n                  </Typography>\n                  <Paper variant=\"outlined\" sx={{ p: 2, bgcolor: 'grey.50' }}>\n                    <Typography\n                      variant=\"body2\"\n                      sx={{ whiteSpace: 'pre-wrap', fontFamily: 'monospace' }}\n                    >\n                      {video.script || 'Script not available'}\n                    </Typography>\n                  </Paper>\n                </Grid>\n              </Grid>\n            </TabPanel>\n\n            <TabPanel value={tabValue} index={1}>\n              {/* Video Preview */}\n              {video.video_url ? (\n                <VideoPlayer videoUrl={video.video_url} thumbnail={video.thumbnail_url} />\n              ) : (\n                <Alert severity=\"info\">Video preview not available</Alert>\n              )}\n            </TabPanel>\n\n            <TabPanel value={tabValue} index={2}>\n              {/* Analytics */}\n              <VideoMetrics videoId={video.id} />\n            </TabPanel>\n\n            <TabPanel value={tabValue} index={3}>\n              {/* History */}\n              <List>\n                <ListItem>\n                  <ListItemText\n                    primary=\"Created\"\n                    secondary={new Date(video.created_at).toLocaleString()}\n                  />\n                </ListItem>\n                {video.generation_started_at && (\n                  <ListItem>\n                    <ListItemText\n                      primary=\"Generation Started\"\n                      secondary={new Date(video.generation_started_at).toLocaleString()}\n                    />\n                  </ListItem>\n                )}\n                {video.generation_completed_at && (\n                  <ListItem>\n                    <ListItemText\n                      primary=\"Generation Completed\"\n                      secondary={new Date(video.generation_completed_at).toLocaleString()}\n                    />\n                  </ListItem>\n                )}\n                {video.published_at && (\n                  <ListItem>\n                    <ListItemText\n                      primary=\"Published\"\n                      secondary={new Date(video.published_at).toLocaleString()}\n                    />\n                  </ListItem>\n                )}\n              </List>\n            </TabPanel>\n          </Paper>\n        </Grid>\n\n        {/* Sidebar */}\n        <Grid item xs={12} md={4}>\n          <Grid container spacing={2}>\n            {/* Cost Breakdown */}\n            <Grid item xs={12}>\n              <Card>\n                <CardContent>\n                  <Typography variant=\"h6\" gutterBottom>\n                    <AttachMoney /> Cost Breakdown\n                  </Typography>\n                  <List dense>\n                    <ListItem>\n                      <ListItemText primary=\"Script Generation\" />\n                      <Typography variant=\"body2\">\n                        ${video.script_cost?.toFixed(2) || '0.00'}\n                      </Typography>\n                    </ListItem>\n                    <ListItem>\n                      <ListItemText primary=\"Voice Synthesis\" />\n                      <Typography variant=\"body2\">\n                        ${video.voice_cost?.toFixed(2) || '0.00'}\n                      </Typography>\n                    </ListItem>\n                    <ListItem>\n                      <ListItemText primary=\"Video Processing\" />\n                      <Typography variant=\"body2\">\n                        ${video.video_cost?.toFixed(2) || '0.00'}\n                      </Typography>\n                    </ListItem>\n                    <ListItem>\n                      <ListItemText primary=\"Thumbnail\" />\n                      <Typography variant=\"body2\">\n                        ${video.thumbnail_cost?.toFixed(2) || '0.00'}\n                      </Typography>\n                    </ListItem>\n                    <Divider />\n                    <ListItem>\n                      <ListItemText primary={<strong>Total</strong>} />\n                      <Typography variant=\"h6\" color=\"primary\">\n                        ${video.total_cost?.toFixed(2) || '0.00'}\n                      </Typography>\n                    </ListItem>\n                  </List>\n                </CardContent>\n              </Card>\n            </Grid>\n\n            {/* Performance Metrics */}\n            <Grid item xs={12}>\n              <Card>\n                <CardContent>\n                  <Typography variant=\"h6\" gutterBottom>\n                    <Speed /> Performance\n                  </Typography>\n                  <List dense>\n                    <ListItem>\n                      <ListItemText primary=\"Quality Score\" />\n                      <Typography variant=\"body2\" color=\"primary\">\n                        {video.quality_score?.toFixed(0) || 'N/A'}%\n                      </Typography>\n                    </ListItem>\n                    <ListItem>\n                      <ListItemText primary=\"Trend Score\" />\n                      <Typography variant=\"body2\" color=\"primary\">\n                        {video.trend_score?.toFixed(0) || 'N/A'}%\n                      </Typography>\n                    </ListItem>\n                    <ListItem>\n                      <ListItemText primary=\"Engagement Prediction\" />\n                      <Typography variant=\"body2\" color=\"primary\">\n                        {video.engagement_prediction?.toFixed(0) || 'N/A'}%\n                      </Typography>\n                    </ListItem>\n                    <ListItem>\n                      <ListItemText primary=\"Generation Time\" />\n                      <Typography variant=\"body2\">\n                        {video.generation_time_seconds\n                          ? `${Math.round(video.generation_time_seconds / 60)} min`\n                          : 'N/A'}\n                      </Typography>\n                    </ListItem>\n                  </List>\n                </CardContent>\n              </Card>\n            </Grid>\n\n            {/* Technical Details */}\n            <Grid item xs={12}>\n              <Card>\n                <CardContent>\n                  <Typography variant=\"h6\" gutterBottom>\n                    Technical Details\n                  </Typography>\n                  <List dense>\n                    <ListItem>\n                      <ListItemText primary=\"Video ID\" />\n                      <Typography variant=\"caption\">{video.id}</Typography>\n                    </ListItem>\n                    <ListItem>\n                      <ListItemText primary=\"Channel ID\" />\n                      <Typography variant=\"caption\">{video.channel_id}</Typography>\n                    </ListItem>\n                    {video.youtube_video_id && (\n                      <ListItem>\n                        <ListItemText primary=\"YouTube ID\" />\n                        <Typography variant=\"caption\">{video.youtube_video_id}</Typography>\n                      </ListItem>\n                    )}\n                    <ListItem>\n                      <ListItemText primary=\"Duration\" />\n                      <Typography variant=\"body2\">\n                        {video.duration_seconds\n                          ? `${Math.floor(video.duration_seconds / 60)}:${(\n                              video.duration_seconds % 60\n                            )\n                              .toString()\n                              .padStart(2, '0')}`\n                          : 'N/A'}\n                      </Typography>\n                    </ListItem>\n                    <ListItem>\n                      <ListItemText primary=\"Category\" />\n                      <Typography variant=\"body2\">{video.category}</Typography>\n                    </ListItem>\n                  </List>\n                </CardContent>\n              </Card>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n\n      {/* Edit Dialog */}\n      <Dialog open={editDialogOpen} onClose={() => setEditDialogOpen(false)} maxWidth=\"sm\" fullWidth>\n        <DialogTitle>Edit Video</DialogTitle>\n        <DialogContent>\n          <TextField\n            fullWidth\n            label=\"Title\"\n            value={editForm.title}\n            onChange={(e) => setEditForm({ ...editForm, title: e.target.value })}\n            margin=\"normal\"\n          />\n          <TextField\n            fullWidth\n            label=\"Description\"\n            value={editForm.description}\n            onChange={(e) => setEditForm({ ...editForm, description: e.target.value })}\n            multiline\n            rows={4}\n            margin=\"normal\"\n          />\n          <TextField\n            fullWidth\n            label=\"Tags (comma separated)\"\n            value={editForm.tags.join(', ')}\n            onChange={(e) =>\n              setEditForm({ ...editForm, tags: e.target.value.split(',').map((t) => t.trim()) })\n            }\n            margin=\"normal\"\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setEditDialogOpen(false)}>Cancel</Button>\n          <Button onClick={handleEdit} variant=\"contained\">\n            Save Changes\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      {/* Publish Dialog */}\n      <Dialog open={publishDialogOpen} onClose={() => setPublishDialogOpen(false)} maxWidth=\"sm\" fullWidth>\n        <DialogTitle>Publish Video</DialogTitle>\n        <DialogContent>\n          <Typography variant=\"body1\" gutterBottom>\n            Choose when to publish this video:\n          </Typography>\n          <Box mt={2}>\n            <Button\n              fullWidth\n              variant=\"contained\"\n              onClick={() => {\n                setPublishSchedule('');\n                handlePublish();\n              }}\n              sx={{ mb: 2 }}\n            >\n              Publish Now\n            </Button>\n            <Typography variant=\"body2\" align=\"center\" sx={{ my: 2 }}>\n              OR\n            </Typography>\n            <TextField\n              fullWidth\n              label=\"Schedule for later\"\n              type=\"datetime-local\"\n              value={publishSchedule}\n              onChange={(e) => setPublishSchedule(e.target.value)}\n              InputLabelProps={{ shrink: true }}\n            />\n          </Box>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setPublishDialogOpen(false)}>Cancel</Button>\n          <Button\n            onClick={handlePublish}\n            variant=\"contained\"\n            disabled={!publishSchedule && publishSchedule !== ''}\n          >\n            Schedule\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      {/* Delete Dialog */}\n      <Dialog open={deleteDialogOpen} onClose={() => setDeleteDialogOpen(false)}>\n        <DialogTitle>Delete Video</DialogTitle>\n        <DialogContent>\n          <Typography>\n            Are you sure you want to delete this video? This action cannot be undone.\n          </Typography>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setDeleteDialogOpen(false)}>Cancel</Button>\n          <Button onClick={handleDelete} color=\"error\" variant=\"contained\">\n            Delete\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\pages\\Videos\\VideoEditor.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":11,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[432,435],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[432,435],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { Box, Container, Button } from '@mui/material';\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\nimport { VideoEditor } from '../../components/VideoEditor/VideoEditor';\n\nconst VideoEditorPage: React.FC = () => {\n  const { id } = useParams<{ id: string }>();\n  const navigate = useNavigate();\n\n  const handleSave = (editedVideo: any) => {\n    console.log('Saving edited video:', editedVideo);\n    // TODO: Implement API call to save edited video\n    navigate(`/videos/${id}`);\n  };\n\n  const handleExport = (format: string) => {\n    console.log('Exporting video in format:', format);\n    // TODO: Implement export functionality\n  };\n\n  return (\n    <Container maxWidth={false} sx={{ py: 3 }}>\n      <Box sx={{ mb: 2 }}>\n        <Button\n          startIcon={<ArrowBackIcon />}\n          onClick={() => navigate(-1)}\n          sx={{ mb: 2 }}\n        >\n          Back to Videos\n        </Button>\n      </Box>\n      \n      <VideoEditor\n        videoId={id}\n        videoUrl={`/api/v1/videos/${id}/stream`} // TODO: Get actual video URL\n        onSave={handleSave}\n        onExport={handleExport}\n      />\n    </Container>\n  );\n};\n\nexport default VideoEditorPage;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\pages\\Videos\\VideoGeneration.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\pages\\Videos\\VideoGenerator.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Paper' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Slider' is defined but never used.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'RadioGroup' is defined but never used.","line":23,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Radio' is defined but never used.","line":24,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":8},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":84,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":84,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1841,1844],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1841,1844],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchChannels'. Either include it or remove the dependency array.","line":108,"column":6,"nodeType":"ArrayExpression","endLine":108,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchChannels]","fix":{"range":[2411,2413],"text":"[fetchChannels]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'calculateEstimatedCost'. Either include it or remove the dependency array.","line":112,"column":6,"nodeType":"ArrayExpression","endLine":112,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [calculateEstimatedCost, config]","fix":{"range":[2472,2480],"text":"[calculateEstimatedCost, config]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":166,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":166,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3982,3985],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3982,3985],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":172,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":172,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4139,4142],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4139,4142],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Stepper,\n  Step,\n  StepLabel,\n  Button,\n  Typography,\n  Paper,\n  TextField,\n  Select,\n  MenuItem,\n  FormControl,\n  InputLabel,\n  Chip,\n  Alert,\n  Card,\n  CardContent,\n  Grid,\n  Slider,\n  Switch,\n  FormControlLabel,\n  RadioGroup,\n  Radio,\n  Autocomplete,\n  CircularProgress,\n  Divider,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemIcon,\n  Collapse,\n  IconButton,\n} from '@mui/material';\nimport {\n  VideoLibrary,\n  Settings,\n  Preview,\n  Publish,\n  AttachMoney,\n  TrendingUp,\n  Speed,\n  ExpandMore,\n  ExpandLess,\n  Info,\n  AutoAwesome,\n  Psychology,\n  RecordVoiceOver,\n  Image,\n} from '@mui/icons-material';\nimport { useNavigate } from 'react-router-dom';\nimport { useChannelStore } from '../../stores/channelStore';\nimport { api } from '../../services/api';\nimport { GenerationProgress } from '../../components/Videos/GenerationProgress';\n\nconst steps = ['Select Channel & Topic', 'Configure Settings', 'Review & Generate'];\n\ninterface GenerationConfig {\n  channel_id: string;\n  title: string;\n  topic: string;\n  style: string;\n  duration: string;\n  voice_style: string;\n  language: string;\n  use_trending: boolean;\n  quality_preset: string;\n  thumbnail_style: string;\n  music_style: string;\n  target_audience: string;\n  keywords: string[];\n  tone: string;\n  pacing: string;\n}\n\nexport const VideoGenerator: React.FC = () => {\n  const navigate = useNavigate();\n  const { channels, fetchChannels } = useChannelStore();\n  const [activeStep, setActiveStep] = useState(0);\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [generationId, setGenerationId] = useState<string | null>(null);\n  const [error, setError] = useState<string | null>(null);\n  const [estimatedCost, setEstimatedCost] = useState(0);\n  const [trendingTopics, setTrendingTopics] = useState<any[]>([]);\n  const [showAdvanced, setShowAdvanced] = useState(false);\n  \n  const [config, setConfig] = useState<GenerationConfig>({\n    channel_id: '',\n    title: '',\n    topic: '',\n    style: 'informative',\n    duration: 'short',\n    voice_style: 'natural',\n    language: 'en',\n    use_trending: true,\n    quality_preset: 'balanced',\n    thumbnail_style: 'modern',\n    music_style: 'none',\n    target_audience: 'general',\n    keywords: [],\n    tone: 'professional',\n    pacing: 'medium',\n  });\n\n  useEffect(() => {\n    fetchChannels();\n    fetchTrendingTopics();\n  }, []);\n\n  useEffect(() => {\n    calculateEstimatedCost();\n  }, [config]);\n\n  const fetchTrendingTopics = async () => {\n    try {\n      const response = await api.ai.getTrendingTopics();\n      setTrendingTopics(response.topics);\n    } catch (error) {\n      console.error('Failed to fetch trending topics:', error);\n    }\n  };\n\n  const calculateEstimatedCost = () => {\n    let cost = 0.1; // Base cost\n    \n    // Duration cost\n    if (config.duration === 'short') cost += 0.5;\n    else if (config.duration === 'medium') cost += 1.0;\n    else if (config.duration === 'long') cost += 2.0;\n    \n    // Quality cost\n    if (config.quality_preset === 'fast') cost += 0.2;\n    else if (config.quality_preset === 'balanced') cost += 0.5;\n    else if (config.quality_preset === 'quality') cost += 1.0;\n    \n    // Voice cost\n    if (config.voice_style !== 'none') cost += 0.3;\n    \n    // Thumbnail cost\n    if (config.thumbnail_style !== 'none') cost += 0.1;\n    \n    setEstimatedCost(cost);\n  };\n\n  const handleNext = () => {\n    if (activeStep === steps.length - 1) {\n      handleGenerate();\n    } else {\n      setActiveStep((prevActiveStep) => prevActiveStep + 1);\n    }\n  };\n\n  const handleBack = () => {\n    setActiveStep((prevActiveStep) => prevActiveStep - 1);\n  };\n\n  const handleGenerate = async () => {\n    setIsGenerating(true);\n    setError(null);\n    \n    try {\n      const response = await api.videos.generate(config);\n      setGenerationId(response.id);\n      // Navigate to generation progress\n      navigate(`/videos/generation/${response.id}`);\n    } catch (err: any) {\n      setError(err.message || 'Failed to start video generation');\n      setIsGenerating(false);\n    }\n  };\n\n  const handleUseTrendingTopic = (topic: any) => {\n    setConfig({\n      ...config,\n      topic: topic.title,\n      keywords: topic.keywords || [],\n      use_trending: true,\n    });\n  };\n\n  const renderStepContent = (step: number) => {\n    switch (step) {\n      case 0:\n        return (\n          <Grid container spacing={3}>\n            <Grid item xs={12} md={6}>\n              <Card>\n                <CardContent>\n                  <Typography variant=\"h6\" gutterBottom>\n                    <VideoLibrary /> Select Channel\n                  </Typography>\n                  <FormControl fullWidth margin=\"normal\">\n                    <InputLabel>Channel</InputLabel>\n                    <Select\n                      value={config.channel_id}\n                      onChange={(e) => setConfig({ ...config, channel_id: e.target.value })}\n                      label=\"Channel\"\n                    >\n                      {channels.map((channel) => (\n                        <MenuItem key={channel.id} value={channel.id}>\n                          <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                            <Typography>{channel.name}</Typography>\n                            <Chip\n                              label={channel.category}\n                              size=\"small\"\n                              color=\"primary\"\n                              variant=\"outlined\"\n                            />\n                          </Box>\n                        </MenuItem>\n                      ))}\n                    </Select>\n                  </FormControl>\n\n                  <TextField\n                    fullWidth\n                    label=\"Video Title (Optional)\"\n                    value={config.title}\n                    onChange={(e) => setConfig({ ...config, title: e.target.value })}\n                    margin=\"normal\"\n                    helperText=\"Leave empty to auto-generate based on topic\"\n                  />\n\n                  <TextField\n                    fullWidth\n                    label=\"Topic\"\n                    value={config.topic}\n                    onChange={(e) => setConfig({ ...config, topic: e.target.value })}\n                    margin=\"normal\"\n                    required\n                    multiline\n                    rows={2}\n                    helperText=\"What should the video be about?\"\n                  />\n\n                  <Autocomplete\n                    multiple\n                    options={[]}\n                    freeSolo\n                    value={config.keywords}\n                    onChange={(_, newValue) => setConfig({ ...config, keywords: newValue })}\n                    renderInput={(params) => (\n                      <TextField\n                        {...params}\n                        label=\"Keywords\"\n                        margin=\"normal\"\n                        helperText=\"Press Enter to add keywords\"\n                      />\n                    )}\n                    renderTags={(value, getTagProps) =>\n                      value.map((option, index) => (\n                        <Chip\n                          variant=\"outlined\"\n                          label={option}\n                          size=\"small\"\n                          {...getTagProps({ index })}\n                        />\n                      ))\n                    }\n                  />\n                </CardContent>\n              </Card>\n            </Grid>\n\n            <Grid item xs={12} md={6}>\n              <Card>\n                <CardContent>\n                  <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\" mb={2}>\n                    <Typography variant=\"h6\">\n                      <TrendingUp /> Trending Topics\n                    </Typography>\n                    <IconButton onClick={fetchTrendingTopics} size=\"small\">\n                      <AutoAwesome />\n                    </IconButton>\n                  </Box>\n                  \n                  <FormControlLabel\n                    control={\n                      <Switch\n                        checked={config.use_trending}\n                        onChange={(e) => setConfig({ ...config, use_trending: e.target.checked })}\n                      />\n                    }\n                    label=\"Use trending topics\"\n                  />\n\n                  <List dense>\n                    {trendingTopics.slice(0, 5).map((topic, index) => (\n                      <ListItem\n                        key={index}\n                        button\n                        onClick={() => handleUseTrendingTopic(topic)}\n                        sx={{\n                          border: 1,\n                          borderColor: 'divider',\n                          borderRadius: 1,\n                          mb: 1,\n                          '&:hover': { bgcolor: 'action.hover' },\n                        }}\n                      >\n                        <ListItemIcon>\n                          <TrendingUp color=\"primary\" />\n                        </ListItemIcon>\n                        <ListItemText\n                          primary={topic.title}\n                          secondary={\n                            <Box>\n                              <Typography variant=\"caption\">\n                                Score: {topic.score}% • Views: {topic.potential_views}\n                              </Typography>\n                              <Box display=\"flex\" gap={0.5} mt={0.5}>\n                                {topic.keywords?.slice(0, 3).map((keyword: string, i: number) => (\n                                  <Chip key={i} label={keyword} size=\"small\" />\n                                ))}\n                              </Box>\n                            </Box>\n                          }\n                        />\n                      </ListItem>\n                    ))}\n                  </List>\n                </CardContent>\n              </Card>\n            </Grid>\n          </Grid>\n        );\n\n      case 1:\n        return (\n          <Grid container spacing={3}>\n            <Grid item xs={12} md={8}>\n              <Card>\n                <CardContent>\n                  <Typography variant=\"h6\" gutterBottom>\n                    <Settings /> Video Settings\n                  </Typography>\n\n                  <Grid container spacing={2}>\n                    <Grid item xs={12} sm={6}>\n                      <FormControl fullWidth margin=\"normal\">\n                        <InputLabel>Style</InputLabel>\n                        <Select\n                          value={config.style}\n                          onChange={(e) => setConfig({ ...config, style: e.target.value })}\n                          label=\"Style\"\n                        >\n                          <MenuItem value=\"informative\">Informative</MenuItem>\n                          <MenuItem value=\"entertaining\">Entertaining</MenuItem>\n                          <MenuItem value=\"tutorial\">Tutorial</MenuItem>\n                          <MenuItem value=\"review\">Review</MenuItem>\n                          <MenuItem value=\"news\">News</MenuItem>\n                          <MenuItem value=\"story\">Story</MenuItem>\n                        </Select>\n                      </FormControl>\n                    </Grid>\n\n                    <Grid item xs={12} sm={6}>\n                      <FormControl fullWidth margin=\"normal\">\n                        <InputLabel>Duration</InputLabel>\n                        <Select\n                          value={config.duration}\n                          onChange={(e) => setConfig({ ...config, duration: e.target.value })}\n                          label=\"Duration\"\n                        >\n                          <MenuItem value=\"short\">Short (1-3 min)</MenuItem>\n                          <MenuItem value=\"medium\">Medium (5-10 min)</MenuItem>\n                          <MenuItem value=\"long\">Long (10+ min)</MenuItem>\n                        </Select>\n                      </FormControl>\n                    </Grid>\n\n                    <Grid item xs={12} sm={6}>\n                      <FormControl fullWidth margin=\"normal\">\n                        <InputLabel>Voice Style</InputLabel>\n                        <Select\n                          value={config.voice_style}\n                          onChange={(e) => setConfig({ ...config, voice_style: e.target.value })}\n                          label=\"Voice Style\"\n                        >\n                          <MenuItem value=\"natural\">Natural</MenuItem>\n                          <MenuItem value=\"energetic\">Energetic</MenuItem>\n                          <MenuItem value=\"calm\">Calm</MenuItem>\n                          <MenuItem value=\"professional\">Professional</MenuItem>\n                          <MenuItem value=\"conversational\">Conversational</MenuItem>\n                          <MenuItem value=\"none\">No Voice</MenuItem>\n                        </Select>\n                      </FormControl>\n                    </Grid>\n\n                    <Grid item xs={12} sm={6}>\n                      <FormControl fullWidth margin=\"normal\">\n                        <InputLabel>Quality Preset</InputLabel>\n                        <Select\n                          value={config.quality_preset}\n                          onChange={(e) => setConfig({ ...config, quality_preset: e.target.value })}\n                          label=\"Quality Preset\"\n                        >\n                          <MenuItem value=\"fast\">Fast (Lower Quality)</MenuItem>\n                          <MenuItem value=\"balanced\">Balanced</MenuItem>\n                          <MenuItem value=\"quality\">High Quality</MenuItem>\n                        </Select>\n                      </FormControl>\n                    </Grid>\n\n                    <Grid item xs={12} sm={6}>\n                      <FormControl fullWidth margin=\"normal\">\n                        <InputLabel>Thumbnail Style</InputLabel>\n                        <Select\n                          value={config.thumbnail_style}\n                          onChange={(e) => setConfig({ ...config, thumbnail_style: e.target.value })}\n                          label=\"Thumbnail Style\"\n                        >\n                          <MenuItem value=\"modern\">Modern</MenuItem>\n                          <MenuItem value=\"minimalist\">Minimalist</MenuItem>\n                          <MenuItem value=\"bold\">Bold</MenuItem>\n                          <MenuItem value=\"professional\">Professional</MenuItem>\n                          <MenuItem value=\"custom\">Custom</MenuItem>\n                          <MenuItem value=\"none\">No Thumbnail</MenuItem>\n                        </Select>\n                      </FormControl>\n                    </Grid>\n\n                    <Grid item xs={12} sm={6}>\n                      <FormControl fullWidth margin=\"normal\">\n                        <InputLabel>Target Audience</InputLabel>\n                        <Select\n                          value={config.target_audience}\n                          onChange={(e) => setConfig({ ...config, target_audience: e.target.value })}\n                          label=\"Target Audience\"\n                        >\n                          <MenuItem value=\"general\">General</MenuItem>\n                          <MenuItem value=\"young\">Young Adults (18-24)</MenuItem>\n                          <MenuItem value=\"adults\">Adults (25-44)</MenuItem>\n                          <MenuItem value=\"professionals\">Professionals</MenuItem>\n                          <MenuItem value=\"students\">Students</MenuItem>\n                          <MenuItem value=\"tech\">Tech Enthusiasts</MenuItem>\n                        </Select>\n                      </FormControl>\n                    </Grid>\n                  </Grid>\n\n                  <Box mt={2}>\n                    <Button\n                      onClick={() => setShowAdvanced(!showAdvanced)}\n                      endIcon={showAdvanced ? <ExpandLess /> : <ExpandMore />}\n                    >\n                      Advanced Settings\n                    </Button>\n                    <Collapse in={showAdvanced}>\n                      <Grid container spacing={2} mt={1}>\n                        <Grid item xs={12} sm={6}>\n                          <FormControl fullWidth margin=\"normal\">\n                            <InputLabel>Tone</InputLabel>\n                            <Select\n                              value={config.tone}\n                              onChange={(e) => setConfig({ ...config, tone: e.target.value })}\n                              label=\"Tone\"\n                            >\n                              <MenuItem value=\"professional\">Professional</MenuItem>\n                              <MenuItem value=\"casual\">Casual</MenuItem>\n                              <MenuItem value=\"humorous\">Humorous</MenuItem>\n                              <MenuItem value=\"serious\">Serious</MenuItem>\n                              <MenuItem value=\"inspirational\">Inspirational</MenuItem>\n                            </Select>\n                          </FormControl>\n                        </Grid>\n\n                        <Grid item xs={12} sm={6}>\n                          <FormControl fullWidth margin=\"normal\">\n                            <InputLabel>Pacing</InputLabel>\n                            <Select\n                              value={config.pacing}\n                              onChange={(e) => setConfig({ ...config, pacing: e.target.value })}\n                              label=\"Pacing\"\n                            >\n                              <MenuItem value=\"slow\">Slow</MenuItem>\n                              <MenuItem value=\"medium\">Medium</MenuItem>\n                              <MenuItem value=\"fast\">Fast</MenuItem>\n                              <MenuItem value=\"dynamic\">Dynamic</MenuItem>\n                            </Select>\n                          </FormControl>\n                        </Grid>\n\n                        <Grid item xs={12} sm={6}>\n                          <FormControl fullWidth margin=\"normal\">\n                            <InputLabel>Music Style</InputLabel>\n                            <Select\n                              value={config.music_style}\n                              onChange={(e) => setConfig({ ...config, music_style: e.target.value })}\n                              label=\"Music Style\"\n                            >\n                              <MenuItem value=\"none\">No Music</MenuItem>\n                              <MenuItem value=\"upbeat\">Upbeat</MenuItem>\n                              <MenuItem value=\"calm\">Calm</MenuItem>\n                              <MenuItem value=\"corporate\">Corporate</MenuItem>\n                              <MenuItem value=\"cinematic\">Cinematic</MenuItem>\n                              <MenuItem value=\"electronic\">Electronic</MenuItem>\n                            </Select>\n                          </FormControl>\n                        </Grid>\n\n                        <Grid item xs={12} sm={6}>\n                          <FormControl fullWidth margin=\"normal\">\n                            <InputLabel>Language</InputLabel>\n                            <Select\n                              value={config.language}\n                              onChange={(e) => setConfig({ ...config, language: e.target.value })}\n                              label=\"Language\"\n                            >\n                              <MenuItem value=\"en\">English</MenuItem>\n                              <MenuItem value=\"es\">Spanish</MenuItem>\n                              <MenuItem value=\"fr\">French</MenuItem>\n                              <MenuItem value=\"de\">German</MenuItem>\n                              <MenuItem value=\"ja\">Japanese</MenuItem>\n                              <MenuItem value=\"zh\">Chinese</MenuItem>\n                            </Select>\n                          </FormControl>\n                        </Grid>\n                      </Grid>\n                    </Collapse>\n                  </Box>\n                </CardContent>\n              </Card>\n            </Grid>\n\n            <Grid item xs={12} md={4}>\n              <Card>\n                <CardContent>\n                  <Typography variant=\"h6\" gutterBottom>\n                    <Info /> Generation Info\n                  </Typography>\n                  \n                  <List dense>\n                    <ListItem>\n                      <ListItemIcon>\n                        <AttachMoney />\n                      </ListItemIcon>\n                      <ListItemText\n                        primary=\"Estimated Cost\"\n                        secondary={`$${estimatedCost.toFixed(2)}`}\n                      />\n                    </ListItem>\n                    <ListItem>\n                      <ListItemIcon>\n                        <Speed />\n                      </ListItemIcon>\n                      <ListItemText\n                        primary=\"Generation Time\"\n                        secondary={\n                          config.quality_preset === 'fast'\n                            ? '3-5 minutes'\n                            : config.quality_preset === 'balanced'\n                            ? '5-10 minutes'\n                            : '10-15 minutes'\n                        }\n                      />\n                    </ListItem>\n                    <ListItem>\n                      <ListItemIcon>\n                        <Psychology />\n                      </ListItemIcon>\n                      <ListItemText\n                        primary=\"AI Model\"\n                        secondary={config.quality_preset === 'quality' ? 'GPT-4' : 'GPT-3.5'}\n                      />\n                    </ListItem>\n                    <ListItem>\n                      <ListItemIcon>\n                        <RecordVoiceOver />\n                      </ListItemIcon>\n                      <ListItemText\n                        primary=\"Voice Synthesis\"\n                        secondary={config.voice_style !== 'none' ? 'ElevenLabs' : 'Disabled'}\n                      />\n                    </ListItem>\n                    <ListItem>\n                      <ListItemIcon>\n                        <Image />\n                      </ListItemIcon>\n                      <ListItemText\n                        primary=\"Thumbnail\"\n                        secondary={config.thumbnail_style !== 'none' ? 'DALL-E 3' : 'Disabled'}\n                      />\n                    </ListItem>\n                  </List>\n\n                  <Alert severity=\"info\" sx={{ mt: 2 }}>\n                    <Typography variant=\"caption\">\n                      Higher quality settings will increase generation time and cost but produce better results.\n                    </Typography>\n                  </Alert>\n                </CardContent>\n              </Card>\n            </Grid>\n          </Grid>\n        );\n\n      case 2:\n        return (\n          <Grid container spacing={3}>\n            <Grid item xs={12} md={8}>\n              <Card>\n                <CardContent>\n                  <Typography variant=\"h6\" gutterBottom>\n                    <Preview /> Review Configuration\n                  </Typography>\n\n                  <Grid container spacing={2}>\n                    <Grid item xs={12}>\n                      <Typography variant=\"subtitle2\" color=\"text.secondary\">\n                        Channel\n                      </Typography>\n                      <Typography variant=\"body1\" gutterBottom>\n                        {channels.find((c) => c.id === config.channel_id)?.name || 'Not selected'}\n                      </Typography>\n                    </Grid>\n\n                    <Grid item xs={12}>\n                      <Typography variant=\"subtitle2\" color=\"text.secondary\">\n                        Topic\n                      </Typography>\n                      <Typography variant=\"body1\" gutterBottom>\n                        {config.topic || 'Not specified'}\n                      </Typography>\n                    </Grid>\n\n                    {config.title && (\n                      <Grid item xs={12}>\n                        <Typography variant=\"subtitle2\" color=\"text.secondary\">\n                          Title\n                        </Typography>\n                        <Typography variant=\"body1\" gutterBottom>\n                          {config.title}\n                        </Typography>\n                      </Grid>\n                    )}\n\n                    <Grid item xs={12}>\n                      <Typography variant=\"subtitle2\" color=\"text.secondary\">\n                        Keywords\n                      </Typography>\n                      <Box display=\"flex\" gap={1} flexWrap=\"wrap\" mt={1}>\n                        {config.keywords.length > 0 ? (\n                          config.keywords.map((keyword, index) => (\n                            <Chip key={index} label={keyword} size=\"small\" />\n                          ))\n                        ) : (\n                          <Typography variant=\"body2\" color=\"text.secondary\">\n                            No keywords specified\n                          </Typography>\n                        )}\n                      </Box>\n                    </Grid>\n\n                    <Grid item xs={6}>\n                      <Typography variant=\"subtitle2\" color=\"text.secondary\">\n                        Style\n                      </Typography>\n                      <Typography variant=\"body1\">{config.style}</Typography>\n                    </Grid>\n\n                    <Grid item xs={6}>\n                      <Typography variant=\"subtitle2\" color=\"text.secondary\">\n                        Duration\n                      </Typography>\n                      <Typography variant=\"body1\">{config.duration}</Typography>\n                    </Grid>\n\n                    <Grid item xs={6}>\n                      <Typography variant=\"subtitle2\" color=\"text.secondary\">\n                        Voice Style\n                      </Typography>\n                      <Typography variant=\"body1\">{config.voice_style}</Typography>\n                    </Grid>\n\n                    <Grid item xs={6}>\n                      <Typography variant=\"subtitle2\" color=\"text.secondary\">\n                        Quality\n                      </Typography>\n                      <Typography variant=\"body1\">{config.quality_preset}</Typography>\n                    </Grid>\n\n                    <Grid item xs={6}>\n                      <Typography variant=\"subtitle2\" color=\"text.secondary\">\n                        Target Audience\n                      </Typography>\n                      <Typography variant=\"body1\">{config.target_audience}</Typography>\n                    </Grid>\n\n                    <Grid item xs={6}>\n                      <Typography variant=\"subtitle2\" color=\"text.secondary\">\n                        Language\n                      </Typography>\n                      <Typography variant=\"body1\">{config.language.toUpperCase()}</Typography>\n                    </Grid>\n                  </Grid>\n\n                  <Divider sx={{ my: 3 }} />\n\n                  <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n                    <Box>\n                      <Typography variant=\"h6\">\n                        Total Estimated Cost: ${estimatedCost.toFixed(2)}\n                      </Typography>\n                      <Typography variant=\"body2\" color=\"text.secondary\">\n                        Estimated time: {\n                          config.quality_preset === 'fast'\n                            ? '3-5 minutes'\n                            : config.quality_preset === 'balanced'\n                            ? '5-10 minutes'\n                            : '10-15 minutes'\n                        }\n                      </Typography>\n                    </Box>\n                    <Chip\n                      label={config.use_trending ? 'Using Trending Topics' : 'Custom Topic'}\n                      color={config.use_trending ? 'success' : 'default'}\n                    />\n                  </Box>\n\n                  {error && (\n                    <Alert severity=\"error\" sx={{ mt: 2 }}>\n                      {error}\n                    </Alert>\n                  )}\n                </CardContent>\n              </Card>\n            </Grid>\n\n            <Grid item xs={12} md={4}>\n              <Card>\n                <CardContent>\n                  <Typography variant=\"h6\" gutterBottom>\n                    <Info /> What happens next?\n                  </Typography>\n                  <List dense>\n                    <ListItem>\n                      <ListItemText\n                        primary=\"1. Script Generation\"\n                        secondary=\"AI creates an engaging script based on your topic\"\n                      />\n                    </ListItem>\n                    <ListItem>\n                      <ListItemText\n                        primary=\"2. Voice Synthesis\"\n                        secondary=\"Convert script to natural-sounding speech\"\n                      />\n                    </ListItem>\n                    <ListItem>\n                      <ListItemText\n                        primary=\"3. Visual Creation\"\n                        secondary=\"Generate relevant visuals and animations\"\n                      />\n                    </ListItem>\n                    <ListItem>\n                      <ListItemText\n                        primary=\"4. Video Assembly\"\n                        secondary=\"Combine all elements into final video\"\n                      />\n                    </ListItem>\n                    <ListItem>\n                      <ListItemText\n                        primary=\"5. Thumbnail Generation\"\n                        secondary=\"Create eye-catching thumbnail\"\n                      />\n                    </ListItem>\n                    <ListItem>\n                      <ListItemText\n                        primary=\"6. Quality Check\"\n                        secondary=\"Automated quality assessment\"\n                      />\n                    </ListItem>\n                  </List>\n\n                  <Alert severity=\"success\" sx={{ mt: 2 }}>\n                    You'll be notified when your video is ready!\n                  </Alert>\n                </CardContent>\n              </Card>\n            </Grid>\n          </Grid>\n        );\n\n      default:\n        return 'Unknown step';\n    }\n  };\n\n  if (generationId) {\n    return <GenerationProgress generationId={generationId} />;\n  }\n\n  return (\n    <Box p={3}>\n      <Typography variant=\"h4\" gutterBottom>\n        Generate New Video\n      </Typography>\n\n      <Stepper activeStep={activeStep} sx={{ mb: 4 }}>\n        {steps.map((label) => (\n          <Step key={label}>\n            <StepLabel>{label}</StepLabel>\n          </Step>\n        ))}\n      </Stepper>\n\n      {renderStepContent(activeStep)}\n\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 4 }}>\n        <Button\n          disabled={activeStep === 0}\n          onClick={handleBack}\n        >\n          Back\n        </Button>\n        <Box>\n          {activeStep === steps.length - 1 ? (\n            <Button\n              variant=\"contained\"\n              onClick={handleGenerate}\n              disabled={isGenerating || !config.channel_id || !config.topic}\n              startIcon={isGenerating ? <CircularProgress size={20} /> : <Publish />}\n            >\n              {isGenerating ? 'Generating...' : 'Generate Video'}\n            </Button>\n          ) : (\n            <Button\n              variant=\"contained\"\n              onClick={handleNext}\n              disabled={\n                (activeStep === 0 && (!config.channel_id || !config.topic))\n              }\n            >\n              Next\n            </Button>\n          )}\n        </Box>\n      </Box>\n    </Box>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\pages\\Videos\\VideoQueue.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":5,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TextField' is defined but never used.","line":28,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Select' is defined but never used.","line":29,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FormControl' is defined but never used.","line":30,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'InputLabel' is defined but never used.","line":31,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Tooltip' is defined but never used.","line":35,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Collapse' is defined but never used.","line":37,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FormControlLabel' is defined but never used.","line":43,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":43,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Stop' is defined but never used.","line":50,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":50,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MoreVert' is defined but never used.","line":53,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":53,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Warning' is defined but never used.","line":57,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":57,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Info' is defined but never used.","line":58,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":58,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Timer' is defined but never used.","line":59,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":59,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ThumbUp' is defined but never used.","line":62,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":62,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CloudUpload' is defined but never used.","line":63,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":63,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ContentCopy' is defined but never used.","line":68,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":68,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SkipNext' is defined but never used.","line":70,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":70,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FastForward' is defined but never used.","line":71,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":71,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setSortBy' is assigned a value but never used.","line":183,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":183,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":191,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":191,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4449,4452],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4449,4452],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":341,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":341,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9235,9238],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9235,9238],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":347,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":347,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9467,9470],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9467,9470],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":22,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Video Queue Interface Component\r\n * MVP Screen Design - Video queue management\r\n */\r\nimport React, { useState, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Paper,\r\n  Typography,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  IconButton,\r\n  Chip,\r\n  Avatar,\r\n  List,\r\n  ListItem,\r\n  ListItemAvatar,\r\n  ListItemText,\r\n  ListItemSecondaryAction,\r\n  LinearProgress,\r\n  Menu,\r\n  MenuItem,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  TextField,\r\n  Select,\r\n  FormControl,\r\n  InputLabel,\r\n  Tabs,\r\n  Tab,\r\n  Badge,\r\n  Tooltip,\r\n  Alert,\r\n  Collapse,\r\n  Grid,\r\n  Divider,\r\n  ToggleButton,\r\n  ToggleButtonGroup,\r\n  Checkbox,\r\n  FormControlLabel,\r\n  Stack,\r\n} from '@mui/material';\r\nimport {\r\n  Queue,\r\n  PlayArrow,\r\n  Pause,\r\n  Stop,\r\n  Delete,\r\n  Edit,\r\n  MoreVert,\r\n  Schedule,\r\n  CheckCircle,\r\n  Error as ErrorIcon,\r\n  Warning,\r\n  Info,\r\n  Timer,\r\n  AttachMoney,\r\n  Visibility,\r\n  ThumbUp,\r\n  CloudUpload,\r\n  Refresh,\r\n  FilterList,\r\n  Sort,\r\n  DragIndicator,\r\n  ContentCopy,\r\n  AutorenewOutlined,\r\n  SkipNext,\r\n  FastForward,\r\n  ViewList,\r\n  ViewModule,\r\n} from '@mui/icons-material';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\n\r\ninterface Video {\r\n  id: string;\r\n  title: string;\r\n  channel: string;\r\n  channelId: string;\r\n  status: 'queued' | 'processing' | 'completed' | 'failed' | 'scheduled';\r\n  progress: number;\r\n  thumbnail: string;\r\n  duration: string;\r\n  scheduledDate?: Date;\r\n  priority: 'low' | 'normal' | 'high' | 'urgent';\r\n  cost: number;\r\n  estimatedViews: number;\r\n  tags: string[];\r\n  createdAt: Date;\r\n  processingStage?: string;\r\n  error?: string;\r\n}\r\n\r\nconst mockVideos: Video[] = [\r\n  {\r\n    id: '1',\r\n    title: 'Top 10 JavaScript Frameworks in 2024',\r\n    channel: 'Tech Reviews Pro',\r\n    channelId: '1',\r\n    status: 'processing',\r\n    progress: 65,\r\n    thumbnail: '/api/placeholder/160/90',\r\n    duration: '12:34',\r\n    priority: 'high',\r\n    cost: 2.85,\r\n    estimatedViews: 25000,\r\n    tags: ['JavaScript', 'Programming', 'Tutorial'],\r\n    createdAt: new Date(),\r\n    processingStage: 'Generating voice narration',\r\n  },\r\n  {\r\n    id: '2',\r\n    title: 'Ultimate Gaming PC Build Guide',\r\n    channel: 'Gaming Highlights',\r\n    channelId: '2',\r\n    status: 'queued',\r\n    progress: 0,\r\n    thumbnail: '/api/placeholder/160/90',\r\n    duration: '15:20',\r\n    priority: 'normal',\r\n    cost: 3.20,\r\n    estimatedViews: 18000,\r\n    tags: ['Gaming', 'PC Build', 'Hardware'],\r\n    createdAt: new Date(),\r\n  },\r\n  {\r\n    id: '3',\r\n    title: '5 Easy Pasta Recipes for Beginners',\r\n    channel: 'Cooking Adventures',\r\n    channelId: '3',\r\n    status: 'scheduled',\r\n    progress: 100,\r\n    thumbnail: '/api/placeholder/160/90',\r\n    duration: '8:45',\r\n    scheduledDate: new Date(Date.now() + 3600000),\r\n    priority: 'normal',\r\n    cost: 1.95,\r\n    estimatedViews: 12000,\r\n    tags: ['Cooking', 'Recipe', 'Food'],\r\n    createdAt: new Date(),\r\n  },\r\n  {\r\n    id: '4',\r\n    title: 'React vs Vue.js - Performance Comparison',\r\n    channel: 'Tech Reviews Pro',\r\n    channelId: '1',\r\n    status: 'completed',\r\n    progress: 100,\r\n    thumbnail: '/api/placeholder/160/90',\r\n    duration: '10:15',\r\n    priority: 'normal',\r\n    cost: 2.45,\r\n    estimatedViews: 22000,\r\n    tags: ['React', 'Vue', 'Comparison'],\r\n    createdAt: new Date(),\r\n  },\r\n  {\r\n    id: '5',\r\n    title: 'Best RPG Games of 2024',\r\n    channel: 'Gaming Highlights',\r\n    channelId: '2',\r\n    status: 'failed',\r\n    progress: 35,\r\n    thumbnail: '/api/placeholder/160/90',\r\n    duration: '18:00',\r\n    priority: 'low',\r\n    cost: 0.85,\r\n    estimatedViews: 30000,\r\n    tags: ['Gaming', 'RPG', 'Review'],\r\n    createdAt: new Date(),\r\n    error: 'Voice synthesis failed: API quota exceeded',\r\n  },\r\n];\r\n\r\nexport const VideoQueue: React.FC = () => {\r\n  const [videos, setVideos] = useState<Video[]>(mockVideos);\r\n  const [tabValue, setTabValue] = useState(0);\r\n  const [viewMode, setViewMode] = useState<'list' | 'grid'>('list');\r\n  const [selectedVideos, setSelectedVideos] = useState<string[]>([]);\r\n  const [filterMenu, setFilterMenu] = useState<null | HTMLElement>(null);\r\n  const [sortBy, setSortBy] = useState('priority');\r\n  const [filterStatus, setFilterStatus] = useState('all');\r\n  const [detailDialog, setDetailDialog] = useState<Video | null>(null);\r\n\r\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\r\n    setTabValue(newValue);\r\n  };\r\n\r\n  const handleDragEnd = (result: any) => {\r\n    if (!result.destination) return;\r\n    \r\n    const items = Array.from(videos);\r\n    const [reorderedItem] = items.splice(result.source.index, 1);\r\n    items.splice(result.destination.index, 0, reorderedItem);\r\n    \r\n    setVideos(items);\r\n  };\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'completed': return 'success';\r\n      case 'processing': return 'info';\r\n      case 'queued': return 'default';\r\n      case 'scheduled': return 'warning';\r\n      case 'failed': return 'error';\r\n      default: return 'default';\r\n    }\r\n  };\r\n\r\n  const getStatusIcon = (status: string) => {\r\n    switch (status) {\r\n      case 'completed': return <CheckCircle />;\r\n      case 'processing': return <AutorenewOutlined />;\r\n      case 'queued': return <Queue />;\r\n      case 'scheduled': return <Schedule />;\r\n      case 'failed': return <ErrorIcon />;\r\n      default: return null;\r\n    }\r\n  };\r\n\r\n  const getPriorityColor = (priority: string) => {\r\n    switch (priority) {\r\n      case 'urgent': return 'error';\r\n      case 'high': return 'warning';\r\n      case 'normal': return 'info';\r\n      case 'low': return 'default';\r\n      default: return 'default';\r\n    }\r\n  };\r\n\r\n  const getFilteredVideos = () => {\r\n    let filtered = [...videos];\r\n    \r\n    if (filterStatus !== 'all') {\r\n      filtered = filtered.filter(v => v.status === filterStatus);\r\n    }\r\n    \r\n    if (tabValue === 1) filtered = filtered.filter(v => v.status === 'queued');\r\n    if (tabValue === 2) filtered = filtered.filter(v => v.status === 'processing');\r\n    if (tabValue === 3) filtered = filtered.filter(v => v.status === 'completed');\r\n    if (tabValue === 4) filtered = filtered.filter(v => v.status === 'failed');\r\n    \r\n    // Sort\r\n    filtered.sort((a, b) => {\r\n      if (sortBy === 'priority') {\r\n        const priorityOrder = { urgent: 0, high: 1, normal: 2, low: 3 };\r\n        return priorityOrder[a.priority] - priorityOrder[b.priority];\r\n      }\r\n      if (sortBy === 'date') {\r\n        return b.createdAt.getTime() - a.createdAt.getTime();\r\n      }\r\n      if (sortBy === 'cost') {\r\n        return b.cost - a.cost;\r\n      }\r\n      return 0;\r\n    });\r\n    \r\n    return filtered;\r\n  };\r\n\r\n  const handleBulkAction = (action: string) => {\r\n    switch (action) {\r\n      case 'pause':\r\n        // Pause selected videos\r\n        break;\r\n      case 'resume':\r\n        // Resume selected videos\r\n        break;\r\n      case 'delete':\r\n        // Delete selected videos\r\n        setVideos(videos.filter(v => !selectedVideos.includes(v.id)));\r\n        setSelectedVideos([]);\r\n        break;\r\n    }\r\n  };\r\n\r\n  const VideoListItem = ({ video, index }: { video: Video; index: number }) => (\r\n    <Draggable draggableId={video.id} index={index}>\r\n      {(provided) => (\r\n        <ListItem\r\n          ref={provided.innerRef}\r\n          {...provided.draggableProps}\r\n          sx={{\r\n            mb: 2,\r\n            bgcolor: 'background.paper',\r\n            borderRadius: 2,\r\n            border: '1px solid',\r\n            borderColor: 'divider',\r\n            '&:hover': { bgcolor: 'action.hover' },\r\n          }}\r\n        >\r\n          <IconButton {...provided.dragHandleProps} size=\"small\" sx={{ mr: 1 }}>\r\n            <DragIndicator />\r\n          </IconButton>\r\n          \r\n          <Checkbox\r\n            checked={selectedVideos.includes(video.id)}\r\n            onChange={(e) => {\r\n              if (e.target.checked) {\r\n                setSelectedVideos([...selectedVideos, video.id]);\r\n              } else {\r\n                setSelectedVideos(selectedVideos.filter(id => id !== video.id));\r\n              }\r\n            }}\r\n            sx={{ mr: 1 }}\r\n          />\r\n          \r\n          <ListItemAvatar>\r\n            <Box sx={{ position: 'relative' }}>\r\n              <Avatar\r\n                variant=\"rounded\"\r\n                src={video.thumbnail}\r\n                sx={{ width: 120, height: 68 }}\r\n              />\r\n              <Typography\r\n                variant=\"caption\"\r\n                sx={{\r\n                  position: 'absolute',\r\n                  bottom: 4,\r\n                  right: 4,\r\n                  bgcolor: 'rgba(0,0,0,0.7)',\r\n                  color: 'white',\r\n                  px: 0.5,\r\n                  borderRadius: 0.5,\r\n                }}\r\n              >\r\n                {video.duration}\r\n              </Typography>\r\n            </Box>\r\n          </ListItemAvatar>\r\n          \r\n          <ListItemText\r\n            primary={\r\n              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                <Typography variant=\"subtitle1\">{video.title}</Typography>\r\n                <Chip\r\n                  size=\"small\"\r\n                  label={video.priority}\r\n                  color={getPriorityColor(video.priority) as any}\r\n                />\r\n                <Chip\r\n                  size=\"small\"\r\n                  icon={getStatusIcon(video.status)}\r\n                  label={video.status}\r\n                  color={getStatusColor(video.status) as any}\r\n                />\r\n              </Box>\r\n            }\r\n            secondary={\r\n              <Box>\r\n                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                  {video.channel} • Created {video.createdAt.toLocaleDateString()}\r\n                </Typography>\r\n                {video.status === 'processing' && (\r\n                  <Box sx={{ mt: 1 }}>\r\n                    <Typography variant=\"caption\" color=\"primary\">\r\n                      {video.processingStage}\r\n                    </Typography>\r\n                    <LinearProgress\r\n                      variant=\"determinate\"\r\n                      value={video.progress}\r\n                      sx={{ mt: 0.5 }}\r\n                    />\r\n                  </Box>\r\n                )}\r\n                {video.status === 'failed' && (\r\n                  <Alert severity=\"error\" sx={{ mt: 1, py: 0 }}>\r\n                    {video.error}\r\n                  </Alert>\r\n                )}\r\n                <Box sx={{ display: 'flex', gap: 2, mt: 1 }}>\r\n                  <Typography variant=\"caption\" sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\r\n                    <AttachMoney fontSize=\"small\" /> ${video.cost}\r\n                  </Typography>\r\n                  <Typography variant=\"caption\" sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\r\n                    <Visibility fontSize=\"small\" /> {video.estimatedViews.toLocaleString()} est. views\r\n                  </Typography>\r\n                  {video.scheduledDate && (\r\n                    <Typography variant=\"caption\" sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\r\n                      <Schedule fontSize=\"small\" /> {video.scheduledDate.toLocaleString()}\r\n                    </Typography>\r\n                  )}\r\n                </Box>\r\n                <Box sx={{ mt: 1 }}>\r\n                  {video.tags.map((tag) => (\r\n                    <Chip key={tag} label={tag} size=\"small\" sx={{ mr: 0.5 }} />\r\n                  ))}\r\n                </Box>\r\n              </Box>\r\n            }\r\n          />\r\n          \r\n          <ListItemSecondaryAction>\r\n            <Stack direction=\"row\" spacing={1}>\r\n              {video.status === 'queued' && (\r\n                <IconButton size=\"small\" color=\"primary\">\r\n                  <PlayArrow />\r\n                </IconButton>\r\n              )}\r\n              {video.status === 'processing' && (\r\n                <IconButton size=\"small\" color=\"warning\">\r\n                  <Pause />\r\n                </IconButton>\r\n              )}\r\n              {video.status === 'failed' && (\r\n                <IconButton size=\"small\" color=\"info\">\r\n                  <Refresh />\r\n                </IconButton>\r\n              )}\r\n              <IconButton size=\"small\" onClick={() => setDetailDialog(video)}>\r\n                <Edit />\r\n              </IconButton>\r\n              <IconButton size=\"small\" color=\"error\">\r\n                <Delete />\r\n              </IconButton>\r\n            </Stack>\r\n          </ListItemSecondaryAction>\r\n        </ListItem>\r\n      )}\r\n    </Draggable>\r\n  );\r\n\r\n  return (\r\n    <Box sx={{ flexGrow: 1, p: 3 }}>\r\n      {/* Header */}\r\n      <Box sx={{ mb: 3, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n        <Box>\r\n          <Typography variant=\"h4\" gutterBottom>\r\n            Video Queue\r\n          </Typography>\r\n          <Typography variant=\"body2\" color=\"text.secondary\">\r\n            Manage and monitor your video generation pipeline\r\n          </Typography>\r\n        </Box>\r\n        <Stack direction=\"row\" spacing={2}>\r\n          <Button variant=\"outlined\" startIcon={<Refresh />}>\r\n            Refresh\r\n          </Button>\r\n          <Button variant=\"contained\" startIcon={<PlayArrow />}>\r\n            Process All\r\n          </Button>\r\n        </Stack>\r\n      </Box>\r\n\r\n      {/* Stats Cards */}\r\n      <Grid container spacing={2} sx={{ mb: 3 }}>\r\n        <Grid item xs={6} sm={3}>\r\n          <Card>\r\n            <CardContent>\r\n              <Typography color=\"text.secondary\" gutterBottom>\r\n                Queued\r\n              </Typography>\r\n              <Typography variant=\"h5\">\r\n                {videos.filter(v => v.status === 'queued').length}\r\n              </Typography>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n        <Grid item xs={6} sm={3}>\r\n          <Card>\r\n            <CardContent>\r\n              <Typography color=\"text.secondary\" gutterBottom>\r\n                Processing\r\n              </Typography>\r\n              <Typography variant=\"h5\">\r\n                {videos.filter(v => v.status === 'processing').length}\r\n              </Typography>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n        <Grid item xs={6} sm={3}>\r\n          <Card>\r\n            <CardContent>\r\n              <Typography color=\"text.secondary\" gutterBottom>\r\n                Completed Today\r\n              </Typography>\r\n              <Typography variant=\"h5\">\r\n                {videos.filter(v => v.status === 'completed').length}\r\n              </Typography>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n        <Grid item xs={6} sm={3}>\r\n          <Card>\r\n            <CardContent>\r\n              <Typography color=\"text.secondary\" gutterBottom>\r\n                Failed\r\n              </Typography>\r\n              <Typography variant=\"h5\" color=\"error\">\r\n                {videos.filter(v => v.status === 'failed').length}\r\n              </Typography>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* Toolbar */}\r\n      <Paper sx={{ p: 2, mb: 2 }}>\r\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n          <Tabs value={tabValue} onChange={handleTabChange}>\r\n            <Tab label=\"All\" />\r\n            <Tab \r\n              label={\r\n                <Badge badgeContent={videos.filter(v => v.status === 'queued').length} color=\"default\">\r\n                  Queued\r\n                </Badge>\r\n              }\r\n            />\r\n            <Tab\r\n              label={\r\n                <Badge badgeContent={videos.filter(v => v.status === 'processing').length} color=\"info\">\r\n                  Processing\r\n                </Badge>\r\n              }\r\n            />\r\n            <Tab label=\"Completed\" />\r\n            <Tab\r\n              label={\r\n                <Badge badgeContent={videos.filter(v => v.status === 'failed').length} color=\"error\">\r\n                  Failed\r\n                </Badge>\r\n              }\r\n            />\r\n          </Tabs>\r\n          \r\n          <Stack direction=\"row\" spacing={1}>\r\n            {selectedVideos.length > 0 && (\r\n              <>\r\n                <Button size=\"small\" onClick={() => handleBulkAction('pause')}>\r\n                  Pause Selected\r\n                </Button>\r\n                <Button size=\"small\" color=\"error\" onClick={() => handleBulkAction('delete')}>\r\n                  Delete Selected\r\n                </Button>\r\n                <Divider orientation=\"vertical\" flexItem />\r\n              </>\r\n            )}\r\n            <ToggleButtonGroup\r\n              value={viewMode}\r\n              exclusive\r\n              onChange={(e, newMode) => newMode && setViewMode(newMode)}\r\n              size=\"small\"\r\n            >\r\n              <ToggleButton value=\"list\">\r\n                <ViewList />\r\n              </ToggleButton>\r\n              <ToggleButton value=\"grid\">\r\n                <ViewModule />\r\n              </ToggleButton>\r\n            </ToggleButtonGroup>\r\n            <IconButton size=\"small\" onClick={(e) => setFilterMenu(e.currentTarget)}>\r\n              <FilterList />\r\n            </IconButton>\r\n            <IconButton size=\"small\">\r\n              <Sort />\r\n            </IconButton>\r\n          </Stack>\r\n        </Box>\r\n      </Paper>\r\n\r\n      {/* Video List */}\r\n      <DragDropContext onDragEnd={handleDragEnd}>\r\n        <Droppable droppableId=\"videos\">\r\n          {(provided) => (\r\n            <List {...provided.droppableProps} ref={provided.innerRef}>\r\n              {getFilteredVideos().map((video, index) => (\r\n                <VideoListItem key={video.id} video={video} index={index} />\r\n              ))}\r\n              {provided.placeholder}\r\n            </List>\r\n          )}\r\n        </Droppable>\r\n      </DragDropContext>\r\n\r\n      {/* Filter Menu */}\r\n      <Menu\r\n        anchorEl={filterMenu}\r\n        open={Boolean(filterMenu)}\r\n        onClose={() => setFilterMenu(null)}\r\n      >\r\n        <MenuItem onClick={() => { setFilterStatus('all'); setFilterMenu(null); }}>\r\n          All Status\r\n        </MenuItem>\r\n        <MenuItem onClick={() => { setFilterStatus('queued'); setFilterMenu(null); }}>\r\n          Queued Only\r\n        </MenuItem>\r\n        <MenuItem onClick={() => { setFilterStatus('processing'); setFilterMenu(null); }}>\r\n          Processing Only\r\n        </MenuItem>\r\n        <MenuItem onClick={() => { setFilterStatus('completed'); setFilterMenu(null); }}>\r\n          Completed Only\r\n        </MenuItem>\r\n        <MenuItem onClick={() => { setFilterStatus('failed'); setFilterMenu(null); }}>\r\n          Failed Only\r\n        </MenuItem>\r\n      </Menu>\r\n\r\n      {/* Detail Dialog */}\r\n      <Dialog open={Boolean(detailDialog)} onClose={() => setDetailDialog(null)} maxWidth=\"md\" fullWidth>\r\n        {detailDialog && (\r\n          <>\r\n            <DialogTitle>{detailDialog.title}</DialogTitle>\r\n            <DialogContent>\r\n              {/* Video details form */}\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <Button onClick={() => setDetailDialog(null)}>Close</Button>\r\n              <Button variant=\"contained\">Save Changes</Button>\r\n            </DialogActions>\r\n          </>\r\n        )}\r\n      </Dialog>\r\n    </Box>\r\n  );\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\router\\index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\router\\optimizedRouter.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":2,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":69,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":69,"endColumn":29}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Optimized Router with Enhanced Code Splitting\n * Implements lazy loading with retry logic and predictive preloading\n */\n\nimport React, { Suspense, useEffect } from 'react';\nimport { createBrowserRouter, RouterProvider, Outlet } from 'react-router-dom';\nimport { lazyWithRetry, setupPredictivePreloading } from '../utils/lazyWithRetry';\nimport { LoadingSkeleton } from '../components/Loading';\nimport { ErrorBoundary } from '../components/ErrorBoundary';\n\n// Lazy load all route components with retry logic\nconst Login = lazyWithRetry(() => import('../pages/Auth/Login'), 'Login');\nconst Register = lazyWithRetry(() => import('../pages/Auth/Register'), 'Register');\nconst DashboardLayout = lazyWithRetry(() => import('../layouts/DashboardLayout'), 'DashboardLayout');\nconst Dashboard = lazyWithRetry(() => import('../pages/Dashboard/Dashboard'), 'Dashboard');\nconst ChannelManagement = lazyWithRetry(() => import('../pages/Channels/ChannelManagement'), 'ChannelManagement');\nconst VideoQueue = lazyWithRetry(() => import('../pages/Videos/VideoQueue'), 'VideoQueue');\nconst VideoDetail = lazyWithRetry(() => import('../pages/Videos/VideoDetail'), 'VideoDetail');\nconst VideoGenerator = lazyWithRetry(() => import('../pages/Videos/VideoGenerator'), 'VideoGenerator');\nconst Analytics = lazyWithRetry(() => import('../pages/Analytics/Analytics'), 'Analytics');\nconst AnalyticsDashboard = lazyWithRetry(() => import('../pages/Analytics/AnalyticsDashboard'), 'AnalyticsDashboard');\nconst CostTracking = lazyWithRetry(() => import('../pages/Costs/CostTracking'), 'CostTracking');\nconst AITools = lazyWithRetry(() => import('../pages/AI/AITools'), 'AITools');\nconst Profile = lazyWithRetry(() => import('../pages/Profile/Profile'), 'Profile');\nconst Settings = lazyWithRetry(() => import('../pages/Settings/Settings'), 'Settings');\nconst BetaSignup = lazyWithRetry(() => import('../pages/BetaSignup'), 'BetaSignup');\n\n// Create preload map for predictive loading\nconst preloadMap = new Map([\n  ['/dashboard', () => import('../pages/Dashboard/Dashboard')],\n  ['/channels', () => import('../pages/Channels/ChannelManagement')],\n  ['/videos', () => import('../pages/Videos/VideoQueue')],\n  ['/analytics', () => import('../pages/Analytics/Analytics')],\n  ['/costs', () => import('../pages/Costs/CostTracking')],\n  ['/ai-tools', () => import('../pages/AI/AITools')],\n  ['/settings', () => import('../pages/Settings/Settings')],\n  ['/profile', () => import('../pages/Profile/Profile')]\n]);\n\n// Route wrapper with error boundary and suspense\nconst RouteWrapper: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  useEffect(() => {\n    // Setup predictive preloading for visible links\n    setupPredictivePreloading('a[href^=\"/\"]', preloadMap);\n  }, []);\n\n  return (\n    <ErrorBoundary>\n      <Suspense fallback={<LoadingSkeleton />}>\n        {children}\n      </Suspense>\n    </ErrorBoundary>\n  );\n};\n\n// Protected route wrapper\nconst ProtectedRoute: React.FC = () => {\n  return (\n    <RouteWrapper>\n      <DashboardLayout>\n        <Outlet />\n      </DashboardLayout>\n    </RouteWrapper>\n  );\n};\n\n// Create router with optimized lazy loading\nexport const optimizedRouter = createBrowserRouter([\n  {\n    path: '/login',\n    element: (\n      <RouteWrapper>\n        <Login />\n      </RouteWrapper>\n    )\n  },\n  {\n    path: '/register',\n    element: (\n      <RouteWrapper>\n        <Register />\n      </RouteWrapper>\n    )\n  },\n  {\n    path: '/beta-signup',\n    element: (\n      <RouteWrapper>\n        <BetaSignup />\n      </RouteWrapper>\n    )\n  },\n  {\n    path: '/',\n    element: <ProtectedRoute />,\n    children: [\n      {\n        index: true,\n        element: (\n          <RouteWrapper>\n            <Dashboard />\n          </RouteWrapper>\n        )\n      },\n      {\n        path: 'dashboard',\n        element: (\n          <RouteWrapper>\n            <Dashboard />\n          </RouteWrapper>\n        )\n      },\n      {\n        path: 'channels',\n        element: (\n          <RouteWrapper>\n            <ChannelManagement />\n          </RouteWrapper>\n        )\n      },\n      {\n        path: 'videos',\n        children: [\n          {\n            index: true,\n            element: (\n              <RouteWrapper>\n                <VideoQueue />\n              </RouteWrapper>\n            )\n          },\n          {\n            path: 'create',\n            element: (\n              <RouteWrapper>\n                <VideoGenerator />\n              </RouteWrapper>\n            )\n          },\n          {\n            path: ':id',\n            element: (\n              <RouteWrapper>\n                <VideoDetail />\n              </RouteWrapper>\n            )\n          }\n        ]\n      },\n      {\n        path: 'analytics',\n        children: [\n          {\n            index: true,\n            element: (\n              <RouteWrapper>\n                <Analytics />\n              </RouteWrapper>\n            )\n          },\n          {\n            path: 'dashboard',\n            element: (\n              <RouteWrapper>\n                <AnalyticsDashboard />\n              </RouteWrapper>\n            )\n          }\n        ]\n      },\n      {\n        path: 'costs',\n        element: (\n          <RouteWrapper>\n            <CostTracking />\n          </RouteWrapper>\n        )\n      },\n      {\n        path: 'ai-tools',\n        element: (\n          <RouteWrapper>\n            <AITools />\n          </RouteWrapper>\n        )\n      },\n      {\n        path: 'profile',\n        element: (\n          <RouteWrapper>\n            <Profile />\n          </RouteWrapper>\n        )\n      },\n      {\n        path: 'settings',\n        element: (\n          <RouteWrapper>\n            <Settings />\n          </RouteWrapper>\n        )\n      }\n    ]\n  }\n]);\n\nexport const OptimizedRouter: React.FC = () => {\n  return <RouterProvider router={optimizedRouter} />;\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\services\\analytics_tracker.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":9,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[206,209],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[206,209],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":360,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":360,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9475,9478],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9475,9478],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":369,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":369,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9853,9856],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9853,9856],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":377,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":377,"endColumn":19}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Analytics Tracking Service\n * Tracks user behavior and sends events to the backend\n */\nimport { apiClient } from './api';\nimport { v4 as uuidv4 } from 'uuid';\n\ninterface EventData {\n  [key: string]: any;\n}\n\ninterface TrackingEvent {\n  event_type: string;\n  event_data: EventData;\n  session_id?: string;\n  client_timestamp?: string;\n  page_url?: string;\n  referrer?: string;\n}\n\nclass AnalyticsTracker {\n  private sessionId: string;\n  private userId: number | null = null;\n  private eventQueue: TrackingEvent[] = [];\n  private batchTimer: NodeJS.Timeout | null = null;\n  private isEnabled: boolean = true;\n  private debug: boolean = false;\n  private batchSize: number = 10;\n  private batchDelay: number = 5000; // 5 seconds\n  private sessionTimeout: number = 30 * 60 * 1000; // 30 minutes\n  private lastActivityTime: number = Date.now();\n  private pageStartTime: number = Date.now();\n\n  constructor() {\n    this.sessionId = this.getOrCreateSessionId();\n    this.initializeTracking();\n  }\n\n  /**\n   * Initialize tracking listeners\n   */\n  private initializeTracking(): void {\n    if (typeof window === 'undefined') return;\n\n    // Track page views\n    this.trackPageView();\n\n    // Track page unload\n    window.addEventListener('beforeunload', () => {\n      this.flush(); // Send any pending events\n      this.trackEvent('session_end', {\n        duration: Date.now() - this.pageStartTime,\n      });\n    });\n\n    // Track clicks\n    document.addEventListener('click', (e) => {\n      const target = e.target as HTMLElement;\n      if (target.dataset.track) {\n        this.trackEvent('click', {\n          element: target.dataset.track,\n          text: target.textContent?.substring(0, 100),\n          class: target.className,\n          id: target.id,\n        });\n      }\n    });\n\n    // Track form submissions\n    document.addEventListener('submit', (e) => {\n      const form = e.target as HTMLFormElement;\n      if (form.dataset.track) {\n        this.trackEvent('form_submit', {\n          form_name: form.dataset.track,\n          form_id: form.id,\n          action: form.action,\n        });\n      }\n    });\n\n    // Track errors\n    window.addEventListener('error', (e) => {\n      this.trackEvent('error', {\n        message: e.message,\n        filename: e.filename,\n        line: e.lineno,\n        column: e.colno,\n        stack: e.error?.stack?.substring(0, 500),\n      });\n    });\n\n    // Track session activity\n    ['mousedown', 'keydown', 'scroll', 'touchstart'].forEach((eventType) => {\n      document.addEventListener(eventType, () => {\n        this.updateActivity();\n      }, { passive: true });\n    });\n\n    // Check session timeout\n    setInterval(() => {\n      if (Date.now() - this.lastActivityTime > this.sessionTimeout) {\n        this.startNewSession();\n      }\n    }, 60000); // Check every minute\n  }\n\n  /**\n   * Get or create session ID\n   */\n  private getOrCreateSessionId(): string {\n    const stored = localStorage.getItem('analytics_session_id');\n    const sessionExpiry = localStorage.getItem('analytics_session_expiry');\n\n    if (stored && sessionExpiry && Date.now() < parseInt(sessionExpiry)) {\n      return stored;\n    }\n\n    const newSessionId = uuidv4();\n    localStorage.setItem('analytics_session_id', newSessionId);\n    localStorage.setItem('analytics_session_expiry', (Date.now() + this.sessionTimeout).toString());\n    \n    return newSessionId;\n  }\n\n  /**\n   * Start a new session\n   */\n  private startNewSession(): void {\n    this.trackEvent('session_end', {\n      duration: Date.now() - this.pageStartTime,\n    });\n    \n    this.sessionId = uuidv4();\n    localStorage.setItem('analytics_session_id', this.sessionId);\n    localStorage.setItem('analytics_session_expiry', (Date.now() + this.sessionTimeout).toString());\n    \n    this.trackEvent('session_start', {\n      previous_session_duration: Date.now() - this.pageStartTime,\n    });\n    \n    this.pageStartTime = Date.now();\n  }\n\n  /**\n   * Update activity timestamp\n   */\n  private updateActivity(): void {\n    this.lastActivityTime = Date.now();\n    localStorage.setItem('analytics_session_expiry', (Date.now() + this.sessionTimeout).toString());\n  }\n\n  /**\n   * Set user ID for tracking\n   */\n  public setUserId(userId: number | null): void {\n    this.userId = userId;\n    if (userId) {\n      this.trackEvent('identify', { user_id: userId });\n    }\n  }\n\n  /**\n   * Enable/disable tracking\n   */\n  public setEnabled(enabled: boolean): void {\n    this.isEnabled = enabled;\n    if (!enabled) {\n      this.flush(); // Send any pending events before disabling\n    }\n  }\n\n  /**\n   * Set debug mode\n   */\n  public setDebug(debug: boolean): void {\n    this.debug = debug;\n  }\n\n  /**\n   * Track a page view\n   */\n  public trackPageView(customData?: EventData): void {\n    if (!this.isEnabled) return;\n\n    const data = {\n      url: window.location.href,\n      path: window.location.pathname,\n      search: window.location.search,\n      hash: window.location.hash,\n      title: document.title,\n      referrer: document.referrer,\n      screen_width: window.screen.width,\n      screen_height: window.screen.height,\n      viewport_width: window.innerWidth,\n      viewport_height: window.innerHeight,\n      ...customData,\n    };\n\n    this.trackEvent('page_view', data);\n  }\n\n  /**\n   * Track a custom event\n   */\n  public trackEvent(eventType: string, eventData: EventData = {}): void {\n    if (!this.isEnabled) return;\n\n    const event: TrackingEvent = {\n      event_type: eventType,\n      event_data: {\n        ...eventData,\n        timestamp: new Date().toISOString(),\n        session_duration: Date.now() - this.pageStartTime,\n      },\n      session_id: this.sessionId,\n      client_timestamp: new Date().toISOString(),\n      page_url: window.location.href,\n      referrer: document.referrer,\n    };\n\n    if (this.debug) {\n      console.log('[Analytics]', event);\n    }\n\n    this.addToQueue(event);\n  }\n\n  /**\n   * Track feature usage\n   */\n  public trackFeature(featureName: string, metadata?: EventData): void {\n    this.trackEvent('feature_use', {\n      feature_name: featureName,\n      ...metadata,\n    });\n  }\n\n  /**\n   * Track timing (performance)\n   */\n  public trackTiming(category: string, variable: string, timeMs: number, label?: string): void {\n    this.trackEvent('timing', {\n      category,\n      variable,\n      time_ms: timeMs,\n      label,\n    });\n  }\n\n  /**\n   * Track user journey step\n   */\n  public trackJourneyStep(step: string, metadata?: EventData): void {\n    this.trackEvent('journey_step', {\n      step,\n      ...metadata,\n    });\n  }\n\n  /**\n   * Track conversion\n   */\n  public trackConversion(conversionType: string, value?: number, metadata?: EventData): void {\n    this.trackEvent('conversion', {\n      conversion_type: conversionType,\n      value,\n      ...metadata,\n    });\n  }\n\n  /**\n   * Add event to queue\n   */\n  private addToQueue(event: TrackingEvent): void {\n    this.eventQueue.push(event);\n\n    // Send immediately if queue is full\n    if (this.eventQueue.length >= this.batchSize) {\n      this.flush();\n    } else {\n      // Schedule batch send\n      this.scheduleBatch();\n    }\n  }\n\n  /**\n   * Schedule batch sending\n   */\n  private scheduleBatch(): void {\n    if (this.batchTimer) return;\n\n    this.batchTimer = setTimeout(() => {\n      this.flush();\n    }, this.batchDelay);\n  }\n\n  /**\n   * Flush event queue\n   */\n  public async flush(): Promise<void> {\n    if (this.eventQueue.length === 0) return;\n\n    const events = [...this.eventQueue];\n    this.eventQueue = [];\n\n    if (this.batchTimer) {\n      clearTimeout(this.batchTimer);\n      this.batchTimer = null;\n    }\n\n    try {\n      if (events.length === 1) {\n        // Send single event\n        await apiClient.post('/api/v1/analytics/events', events[0]);\n      } else {\n        // Send batch\n        await apiClient.post('/api/v1/analytics/events/batch', events);\n      }\n    } catch (error) {\n      // Re-add events to queue on failure\n      this.eventQueue = [...events, ...this.eventQueue];\n      \n      if (this.debug) {\n        console.error('[Analytics] Failed to send events:', error);\n      }\n    }\n  }\n\n  /**\n   * Track performance metrics\n   */\n  public trackPerformance(): void {\n    if (!this.isEnabled || typeof window === 'undefined') return;\n\n    // Use Performance API if available\n    if (window.performance && window.performance.timing) {\n      const timing = window.performance.timing;\n      const loadTime = timing.loadEventEnd - timing.navigationStart;\n      const domReadyTime = timing.domContentLoadedEventEnd - timing.navigationStart;\n      const firstPaintTime = timing.responseStart - timing.navigationStart;\n\n      this.trackTiming('performance', 'page_load', loadTime);\n      this.trackTiming('performance', 'dom_ready', domReadyTime);\n      this.trackTiming('performance', 'first_paint', firstPaintTime);\n\n      // Track Core Web Vitals if available\n      if ('PerformanceObserver' in window) {\n        try {\n          // Largest Contentful Paint\n          const lcpObserver = new PerformanceObserver((list) => {\n            const entries = list.getEntries();\n            const lastEntry = entries[entries.length - 1];\n            this.trackTiming('web_vitals', 'lcp', lastEntry.startTime);\n          });\n          lcpObserver.observe({ entryTypes: ['largest-contentful-paint'] });\n\n          // First Input Delay\n          const fidObserver = new PerformanceObserver((list) => {\n            const entries = list.getEntries();\n            entries.forEach((entry: any) => {\n              this.trackTiming('web_vitals', 'fid', entry.processingStart - entry.startTime);\n            });\n          });\n          fidObserver.observe({ entryTypes: ['first-input'] });\n\n          // Cumulative Layout Shift\n          const clsObserver = new PerformanceObserver((list) => {\n            let clsScore = 0;\n            list.getEntries().forEach((entry: any) => {\n              if (!entry.hadRecentInput) {\n                clsScore += entry.value;\n              }\n            });\n            this.trackTiming('web_vitals', 'cls', clsScore * 1000); // Convert to ms\n          });\n          clsObserver.observe({ entryTypes: ['layout-shift'] });\n        } catch (e) {\n          // Silently fail if observers are not supported\n        }\n      }\n    }\n  }\n\n  /**\n   * Get current session ID\n   */\n  public getSessionId(): string {\n    return this.sessionId;\n  }\n\n  /**\n   * Get tracking status\n   */\n  public isTrackingEnabled(): boolean {\n    return this.isEnabled;\n  }\n}\n\n// Create singleton instance\nexport const analyticsTracker = new AnalyticsTracker();\n\n// Export convenience functions\nexport const trackEvent = (eventType: string, eventData?: EventData) => \n  analyticsTracker.trackEvent(eventType, eventData);\n\nexport const trackFeature = (featureName: string, metadata?: EventData) => \n  analyticsTracker.trackFeature(featureName, metadata);\n\nexport const trackPageView = (customData?: EventData) => \n  analyticsTracker.trackPageView(customData);\n\nexport const trackTiming = (category: string, variable: string, timeMs: number, label?: string) => \n  analyticsTracker.trackTiming(category, variable, timeMs, label);\n\nexport const trackConversion = (conversionType: string, value?: number, metadata?: EventData) => \n  analyticsTracker.trackConversion(conversionType, value, metadata);","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\services\\api.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":62,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":62,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1620,1623],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1620,1623],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":80,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":80,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2063,2066],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2063,2066],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":85,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":85,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2221,2224],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2221,2224],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":109,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":109,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2889,2892],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2889,2892],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":133,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":133,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3639,3642],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3639,3642],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":147,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":147,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4042,4045],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4042,4045],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import axios, { AxiosInstance } from 'axios'\r\n\r\nconst API_BASE_URL = import.meta.env.VITE_API_URL || 'http://localhost:8000/api/v1'\r\n\r\n// Create axios instance\r\nconst apiClient: AxiosInstance = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n})\r\n\r\n// Request interceptor to add auth token\r\napiClient.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token')\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`\r\n    }\r\n    return config\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\n// Response interceptor for error handling\r\napiClient.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.response?.status === 401) {\r\n      localStorage.removeItem('token')\r\n      window.location.href = '/login'\r\n    }\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\n// Auth API\r\nexport const authApi = {\r\n  login: async (email: string, password: string) => {\r\n    const response = await apiClient.post('/auth/login', { email, password })\r\n    return response.data\r\n  },\r\n  \r\n  register: async (userData: {\r\n    email: string\r\n    username: string\r\n    password: string\r\n    full_name?: string\r\n  }) => {\r\n    const response = await apiClient.post('/auth/register', userData)\r\n    return response.data\r\n  },\r\n  \r\n  getCurrentUser: async (token?: string) => {\r\n    const config = token ? { headers: { Authorization: `Bearer ${token}` } } : {}\r\n    const response = await apiClient.get('/auth/me', config)\r\n    return response.data\r\n  },\r\n  \r\n  updateProfile: async (userData: any) => {\r\n    const response = await apiClient.put('/auth/profile', userData)\r\n    return response.data\r\n  },\r\n}\r\n\r\n// Channels API\r\nexport const channelsApi = {\r\n  getAll: async () => {\r\n    const response = await apiClient.get('/channels')\r\n    return response.data\r\n  },\r\n  \r\n  getById: async (id: string) => {\r\n    const response = await apiClient.get(`/channels/${id}`)\r\n    return response.data\r\n  },\r\n  \r\n  create: async (channelData: any) => {\r\n    const response = await apiClient.post('/channels', channelData)\r\n    return response.data\r\n  },\r\n  \r\n  update: async (id: string, channelData: any) => {\r\n    const response = await apiClient.put(`/channels/${id}`, channelData)\r\n    return response.data\r\n  },\r\n  \r\n  delete: async (id: string) => {\r\n    const response = await apiClient.delete(`/channels/${id}`)\r\n    return response.data\r\n  },\r\n}\r\n\r\n// Videos API\r\nexport const videosApi = {\r\n  getAll: async (channelId?: string) => {\r\n    const params = channelId ? { channel_id: channelId } : {}\r\n    const response = await apiClient.get('/videos', { params })\r\n    return response.data\r\n  },\r\n  \r\n  getById: async (id: string) => {\r\n    const response = await apiClient.get(`/videos/${id}`)\r\n    return response.data\r\n  },\r\n  \r\n  generate: async (videoData: any) => {\r\n    const response = await apiClient.post('/videos/generate', videoData)\r\n    return response.data\r\n  },\r\n  \r\n  getQueue: async () => {\r\n    const response = await apiClient.get('/videos/queue')\r\n    return response.data\r\n  },\r\n  \r\n  updateStatus: async (id: string, status: string) => {\r\n    const response = await apiClient.patch(`/videos/${id}/status`, { status })\r\n    return response.data\r\n  },\r\n}\r\n\r\n// Analytics API\r\nexport const analyticsApi = {\r\n  getDashboard: async (dateRange?: { start: string; end: string }) => {\r\n    const params = dateRange || {}\r\n    const response = await apiClient.get('/analytics/dashboard', { params })\r\n    return response.data\r\n  },\r\n  \r\n  getChannelAnalytics: async (channelId: string, dateRange?: any) => {\r\n    const params = dateRange || {}\r\n    const response = await apiClient.get(`/analytics/channels/${channelId}`, { params })\r\n    return response.data\r\n  },\r\n  \r\n  getVideoAnalytics: async (videoId: string) => {\r\n    const response = await apiClient.get(`/analytics/videos/${videoId}`)\r\n    return response.data\r\n  },\r\n}\r\n\r\n// Costs API\r\nexport const costsApi = {\r\n  getAll: async (filters?: any) => {\r\n    const response = await apiClient.get('/costs', { params: filters })\r\n    return response.data\r\n  },\r\n  \r\n  getSummary: async (period: string = 'month') => {\r\n    const response = await apiClient.get('/costs/summary', { params: { period } })\r\n    return response.data\r\n  },\r\n  \r\n  getByVideo: async (videoId: string) => {\r\n    const response = await apiClient.get(`/costs/videos/${videoId}`)\r\n    return response.data\r\n  },\r\n}\r\n\r\n// AI Tools API\r\nexport const aiToolsApi = {\r\n  generateScript: async (params: {\r\n    topic: string\r\n    style: string\r\n    length: string\r\n    keywords?: string[]\r\n  }) => {\r\n    const response = await apiClient.post('/ai/generate-script', params)\r\n    return response.data\r\n  },\r\n  \r\n  generateThumbnail: async (params: {\r\n    title: string\r\n    style: string\r\n  }) => {\r\n    const response = await apiClient.post('/ai/generate-thumbnail', params)\r\n    return response.data\r\n  },\r\n  \r\n  analyzeTrends: async (niche: string) => {\r\n    const response = await apiClient.get('/ai/trends', { params: { niche } })\r\n    return response.data\r\n  },\r\n  \r\n  optimizeTitle: async (title: string) => {\r\n    const response = await apiClient.post('/ai/optimize-title', { title })\r\n    return response.data\r\n  },\r\n}\r\n\r\nexport default apiClient","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\services\\offlineStorage.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":34,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[632,635],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[632,635],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":45,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[820,823],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[820,823],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { openDB, DBSchema, IDBPDatabase } from 'idb';\n\ninterface YTEmpireDB extends DBSchema {\n  videos: {\n    key: string;\n    value: {\n      id: string;\n      title: string;\n      channel: string;\n      status: string;\n      thumbnail?: string;\n      createdAt: Date;\n      syncedAt?: Date;\n      offline?: boolean;\n    };\n  };\n  channels: {\n    key: string;\n    value: {\n      id: string;\n      name: string;\n      subscribers: number;\n      videos: number;\n      revenue: number;\n      lastSync?: Date;\n    };\n  };\n  analytics: {\n    key: string;\n    value: {\n      id: string;\n      date: Date;\n      type: string;\n      data: any;\n      synced: boolean;\n    };\n  };\n  pendingActions: {\n    key: string;\n    value: {\n      id: string;\n      action: string;\n      endpoint: string;\n      method: string;\n      data: any;\n      timestamp: Date;\n      retries: number;\n    };\n  };\n}\n\nclass OfflineStorage {\n  private db: IDBPDatabase<YTEmpireDB> | null = null;\n  private dbName = 'ytempire-offline';\n  private version = 1;\n\n  async init() {\n    if (this.db) return;\n\n    this.db = await openDB<YTEmpireDB>(this.dbName, this.version, {\n      upgrade(db) {\n        // Videos store\n        if (!db.objectStoreNames.contains('videos')) {\n          const videoStore = db.createObjectStore('videos', { keyPath: 'id' });\n          videoStore.createIndex('channel', 'channel');\n          videoStore.createIndex('status', 'status');\n          videoStore.createIndex('createdAt', 'createdAt');\n        }\n\n        // Channels store\n        if (!db.objectStoreNames.contains('channels')) {\n          const channelStore = db.createObjectStore('channels', { keyPath: 'id' });\n          channelStore.createIndex('name', 'name');\n        }\n\n        // Analytics store\n        if (!db.objectStoreNames.contains('analytics')) {\n          const analyticsStore = db.createObjectStore('analytics', { keyPath: 'id' });\n          analyticsStore.createIndex('date', 'date');\n          analyticsStore.createIndex('type', 'type');\n          analyticsStore.createIndex('synced', 'synced');\n        }\n\n        // Pending actions store\n        if (!db.objectStoreNames.contains('pendingActions')) {\n          const actionsStore = db.createObjectStore('pendingActions', { keyPath: 'id' });\n          actionsStore.createIndex('timestamp', 'timestamp');\n          actionsStore.createIndex('action', 'action');\n        }\n      },\n    });\n  }\n\n  // Videos operations\n  async saveVideo(video: YTEmpireDB['videos']['value']) {\n    await this.init();\n    if (!this.db) throw new Error('Database not initialized');\n    \n    return this.db.put('videos', {\n      ...video,\n      syncedAt: new Date(),\n      offline: !navigator.onLine,\n    });\n  }\n\n  async getVideos(limit = 50) {\n    await this.init();\n    if (!this.db) throw new Error('Database not initialized');\n    \n    const videos = await this.db.getAllFromIndex('videos', 'createdAt');\n    return videos.slice(-limit).reverse();\n  }\n\n  async getVideosByChannel(channelId: string) {\n    await this.init();\n    if (!this.db) throw new Error('Database not initialized');\n    \n    return this.db.getAllFromIndex('videos', 'channel', channelId);\n  }\n\n  // Channels operations\n  async saveChannel(channel: YTEmpireDB['channels']['value']) {\n    await this.init();\n    if (!this.db) throw new Error('Database not initialized');\n    \n    return this.db.put('channels', {\n      ...channel,\n      lastSync: new Date(),\n    });\n  }\n\n  async getChannels() {\n    await this.init();\n    if (!this.db) throw new Error('Database not initialized');\n    \n    return this.db.getAll('channels');\n  }\n\n  // Analytics operations\n  async saveAnalytics(analytics: Omit<YTEmpireDB['analytics']['value'], 'id'>) {\n    await this.init();\n    if (!this.db) throw new Error('Database not initialized');\n    \n    const id = `${analytics.type}-${Date.now()}`;\n    return this.db.put('analytics', {\n      ...analytics,\n      id,\n      synced: navigator.onLine,\n    });\n  }\n\n  async getAnalytics(type?: string, startDate?: Date, endDate?: Date) {\n    await this.init();\n    if (!this.db) throw new Error('Database not initialized');\n    \n    let analytics = await this.db.getAll('analytics');\n    \n    if (type) {\n      analytics = analytics.filter((a) => a.type === type);\n    }\n    \n    if (startDate && endDate) {\n      analytics = analytics.filter(\n        (a) => a.date >= startDate && a.date <= endDate\n      );\n    }\n    \n    return analytics;\n  }\n\n  // Pending actions for offline sync\n  async queueAction(action: Omit<YTEmpireDB['pendingActions']['value'], 'id' | 'timestamp' | 'retries'>) {\n    await this.init();\n    if (!this.db) throw new Error('Database not initialized');\n    \n    const id = `${action.action}-${Date.now()}`;\n    return this.db.put('pendingActions', {\n      ...action,\n      id,\n      timestamp: new Date(),\n      retries: 0,\n    });\n  }\n\n  async getPendingActions() {\n    await this.init();\n    if (!this.db) throw new Error('Database not initialized');\n    \n    return this.db.getAllFromIndex('pendingActions', 'timestamp');\n  }\n\n  async removePendingAction(id: string) {\n    await this.init();\n    if (!this.db) throw new Error('Database not initialized');\n    \n    return this.db.delete('pendingActions', id);\n  }\n\n  async incrementRetries(id: string) {\n    await this.init();\n    if (!this.db) throw new Error('Database not initialized');\n    \n    const action = await this.db.get('pendingActions', id);\n    if (action) {\n      action.retries += 1;\n      await this.db.put('pendingActions', action);\n    }\n  }\n\n  // Sync operations\n  async syncPendingActions() {\n    if (!navigator.onLine) return;\n    \n    const actions = await this.getPendingActions();\n    \n    for (const action of actions) {\n      if (action.retries >= 3) {\n        console.error('Max retries reached for action:', action);\n        await this.removePendingAction(action.id);\n        continue;\n      }\n      \n      try {\n        const response = await fetch(action.endpoint, {\n          method: action.method,\n          headers: {\n            'Content-Type': 'application/json',\n            // Add auth headers here\n          },\n          body: JSON.stringify(action.data),\n        });\n        \n        if (response.ok) {\n          await this.removePendingAction(action.id);\n        } else {\n          await this.incrementRetries(action.id);\n        }\n      } catch (error) {\n        console.error('Sync error:', error);\n        await this.incrementRetries(action.id);\n      }\n    }\n  }\n\n  async markAnalyticsAsSynced(ids: string[]) {\n    await this.init();\n    if (!this.db) throw new Error('Database not initialized');\n    \n    for (const id of ids) {\n      const analytics = await this.db.get('analytics', id);\n      if (analytics) {\n        analytics.synced = true;\n        await this.db.put('analytics', analytics);\n      }\n    }\n  }\n\n  // Clear operations\n  async clearAll() {\n    await this.init();\n    if (!this.db) throw new Error('Database not initialized');\n    \n    await this.db.clear('videos');\n    await this.db.clear('channels');\n    await this.db.clear('analytics');\n    await this.db.clear('pendingActions');\n  }\n\n  async clearOldData(daysToKeep = 7) {\n    await this.init();\n    if (!this.db) throw new Error('Database not initialized');\n    \n    const cutoffDate = new Date();\n    cutoffDate.setDate(cutoffDate.getDate() - daysToKeep);\n    \n    // Clear old videos\n    const videos = await this.db.getAll('videos');\n    for (const video of videos) {\n      if (video.createdAt < cutoffDate) {\n        await this.db.delete('videos', video.id);\n      }\n    }\n    \n    // Clear old analytics\n    const analytics = await this.db.getAll('analytics');\n    for (const item of analytics) {\n      if (item.date < cutoffDate && item.synced) {\n        await this.db.delete('analytics', item.id);\n      }\n    }\n  }\n\n  // Storage size estimation\n  async getStorageEstimate() {\n    if ('storage' in navigator && 'estimate' in navigator.storage) {\n      const estimate = await navigator.storage.estimate();\n      return {\n        usage: estimate.usage || 0,\n        quota: estimate.quota || 0,\n        percentage: ((estimate.usage || 0) / (estimate.quota || 1)) * 100,\n      };\n    }\n    return null;\n  }\n}\n\nexport const offlineStorage = new OfflineStorage();\n\n// Auto-sync when coming back online\nif (typeof window !== 'undefined') {\n  window.addEventListener('online', () => {\n    offlineStorage.syncPendingActions();\n  });\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\services\\websocket.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":41,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1278,1281],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1278,1281],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":45,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1362,1365],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1362,1365],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":56,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":56,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1635,1638],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1635,1638],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-function-type","severity":2,"message":"The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.","line":87,"column":42,"nodeType":"Identifier","messageId":"bannedFunctionType","endLine":87,"endColumn":50},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":156,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":156,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4379,4382],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4379,4382],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-function-type","severity":2,"message":"The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.","line":176,"column":43,"nodeType":"Identifier","messageId":"bannedFunctionType","endLine":176,"endColumn":51},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":189,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":189,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5291,5294],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5291,5294],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-function-type","severity":2,"message":"The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.","line":260,"column":64,"nodeType":"Identifier","messageId":"bannedFunctionType","endLine":260,"endColumn":72},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":264,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":264,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7299,7302],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7299,7302],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":371,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":371,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10126,10129],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10126,10129],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":375,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":375,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10273,10276],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10273,10276],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { io, Socket } from 'socket.io-client';\nimport { EventEmitter } from '../utils/EventEmitter';\n\nexport enum WSEventType {\n  // Video events\n  VIDEO_GENERATION_STARTED = 'video.generation.started',\n  VIDEO_GENERATION_PROGRESS = 'video.generation.progress',\n  VIDEO_GENERATION_COMPLETED = 'video.generation.completed',\n  VIDEO_GENERATION_FAILED = 'video.generation.failed',\n  VIDEO_PUBLISHED = 'video.published',\n  VIDEO_ANALYTICS_UPDATE = 'video.analytics.update',\n  \n  // Channel events\n  CHANNEL_STATUS_CHANGED = 'channel.status.changed',\n  CHANNEL_METRICS_UPDATE = 'channel.metrics.update',\n  CHANNEL_QUOTA_WARNING = 'channel.quota.warning',\n  CHANNEL_HEALTH_UPDATE = 'channel.health.update',\n  \n  // System events\n  SYSTEM_ALERT = 'system.alert',\n  SYSTEM_METRICS = 'system.metrics',\n  COST_ALERT = 'cost.alert',\n  PERFORMANCE_WARNING = 'performance.warning',\n  \n  // User events\n  USER_NOTIFICATION = 'user.notification',\n  USER_ACTION_REQUIRED = 'user.action.required',\n  \n  // AI/ML events\n  MODEL_UPDATE = 'model.update',\n  TREND_DETECTED = 'trend.detected',\n  QUALITY_SCORE_UPDATE = 'quality.score.update',\n  \n  // Connection events\n  CONNECT = 'connect',\n  DISCONNECT = 'disconnect',\n  RECONNECT = 'reconnect',\n  ERROR = 'error'\n}\n\nexport interface WSMessage<T = any> {\n  event: string;\n  timestamp: string;\n  data: T;\n  metadata?: Record<string, any>;\n}\n\nexport interface VideoGenerationUpdate {\n  videoId: string;\n  channelId: string;\n  status: 'started' | 'processing' | 'completed' | 'failed';\n  progress: number;\n  currentStep?: string;\n  estimatedCompletion?: string;\n  error?: string;\n  metadata?: Record<string, any>;\n}\n\nexport interface ChannelMetricsUpdate {\n  channelId: string;\n  subscribers: number;\n  viewsToday: number;\n  revenueToday: number;\n  videosPublished: number;\n  healthScore: number;\n  quotaUsed: number;\n  quotaLimit: number;\n}\n\nexport interface SystemMetrics {\n  activeGenerations: number;\n  queueDepth: number;\n  avgGenerationTime: number;\n  successRate: number;\n  costToday: number;\n  apiHealth: Record<string, string>;\n  performanceMetrics: Record<string, number>;\n}\n\nclass WebSocketClient extends EventEmitter {\n  private socket: Socket | null = null;\n  private url: string;\n  private reconnectAttempts = 0;\n  private maxReconnectAttempts = 5;\n  private reconnectDelay = 1000;\n  private isConnected = false;\n  private subscriptions: Map<string, Set<Function>> = new Map();\n  private messageQueue: WSMessage[] = [];\n  private clientId: string;\n  \n  constructor(url: string) {\n    super();\n    this.url = url;\n    this.clientId = this.generateClientId();\n  }\n  \n  connect(token?: string): void {\n    if (this.socket?.connected) {\n      console.log('WebSocket already connected');\n      return;\n    }\n    \n    const socketUrl = `${this.url}/ws/${this.clientId}`;\n    \n    this.socket = io(socketUrl, {\n      transports: ['websocket'],\n      auth: token ? { token } : undefined,\n      reconnection: true,\n      reconnectionAttempts: this.maxReconnectAttempts,\n      reconnectionDelay: this.reconnectDelay,\n      reconnectionDelayMax: 10000,\n    });\n    \n    this.setupEventListeners();\n  }\n  \n  disconnect(): void {\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n      this.isConnected = false;\n      this.emit(WSEventType.DISCONNECT);\n    }\n  }\n  \n  private setupEventListeners(): void {\n    if (!this.socket) return;\n    \n    this.socket.on('connect', () => {\n      console.log('WebSocket connected');\n      this.isConnected = true;\n      this.reconnectAttempts = 0;\n      this.emit(WSEventType.CONNECT);\n      this.flushMessageQueue();\n    });\n    \n    this.socket.on('disconnect', (reason) => {\n      console.log('WebSocket disconnected:', reason);\n      this.isConnected = false;\n      this.emit(WSEventType.DISCONNECT, reason);\n    });\n    \n    this.socket.on('error', (error) => {\n      console.error('WebSocket error:', error);\n      this.emit(WSEventType.ERROR, error);\n    });\n    \n    this.socket.on('reconnect', (attemptNumber) => {\n      console.log(`WebSocket reconnected after ${attemptNumber} attempts`);\n      this.emit(WSEventType.RECONNECT, attemptNumber);\n    });\n    \n    // Listen for all custom events\n    Object.values(WSEventType).forEach(eventType => {\n      if (!['connect', 'disconnect', 'error', 'reconnect'].includes(eventType)) {\n        this.socket?.on(eventType, (data: any) => {\n          this.handleMessage({ event: eventType, data, timestamp: new Date().toISOString() });\n        });\n      }\n    });\n  }\n  \n  private handleMessage(message: WSMessage): void {\n    console.log('WebSocket message received:', message.event);\n    \n    // Emit to global listeners\n    this.emit(message.event, message.data);\n    \n    // Emit to specific subscribers\n    const subscribers = this.subscriptions.get(message.event);\n    if (subscribers) {\n      subscribers.forEach(callback => callback(message.data));\n    }\n  }\n  \n  subscribe(event: WSEventType, callback: Function): () => void {\n    if (!this.subscriptions.has(event)) {\n      this.subscriptions.set(event, new Set());\n    }\n    \n    this.subscriptions.get(event)?.add(callback);\n    \n    // Return unsubscribe function\n    return () => {\n      this.subscriptions.get(event)?.delete(callback);\n    };\n  }\n  \n  send(event: string, data: any): void {\n    const message: WSMessage = {\n      event,\n      data,\n      timestamp: new Date().toISOString()\n    };\n    \n    if (this.isConnected && this.socket) {\n      this.socket.emit(event, message);\n    } else {\n      // Queue message for later\n      this.messageQueue.push(message);\n    }\n  }\n  \n  joinRoom(roomId: string): void {\n    this.send('subscribe', { roomId });\n  }\n  \n  leaveRoom(roomId: string): void {\n    this.send('unsubscribe', { roomId });\n  }\n  \n  private flushMessageQueue(): void {\n    while (this.messageQueue.length > 0 && this.isConnected) {\n      const message = this.messageQueue.shift();\n      if (message) {\n        this.socket?.emit(message.event, message);\n      }\n    }\n  }\n  \n  private generateClientId(): string {\n    return `client_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n  \n  getConnectionStatus(): boolean {\n    return this.isConnected;\n  }\n  \n  getSocket(): Socket | null {\n    return this.socket;\n  }\n}\n\n// Create singleton instance\nconst wsClient = new WebSocketClient(import.meta.env.VITE_API_URL || 'http://localhost:8000');\n\n// Hook for React components\nimport { useEffect, useState, useCallback } from 'react';\n\nexport function useWebSocket() {\n  const [connected, setConnected] = useState(false);\n  const [lastMessage] = useState<WSMessage | null>(null);\n  \n  useEffect(() => {\n    const handleConnect = () => setConnected(true);\n    const handleDisconnect = () => setConnected(false);\n    \n    wsClient.on(WSEventType.CONNECT, handleConnect);\n    wsClient.on(WSEventType.DISCONNECT, handleDisconnect);\n    \n    // Set initial state\n    setConnected(wsClient.getConnectionStatus());\n    \n    return () => {\n      wsClient.off(WSEventType.CONNECT, handleConnect);\n      wsClient.off(WSEventType.DISCONNECT, handleDisconnect);\n    };\n  }, []);\n  \n  const subscribe = useCallback((event: WSEventType, callback: Function) => {\n    return wsClient.subscribe(event, callback);\n  }, []);\n  \n  const send = useCallback((event: string, data: any) => {\n    wsClient.send(event, data);\n  }, []);\n  \n  const connect = useCallback((token?: string) => {\n    wsClient.connect(token);\n  }, []);\n  \n  const disconnect = useCallback(() => {\n    wsClient.disconnect();\n  }, []);\n  \n  const joinRoom = useCallback((roomId: string) => {\n    wsClient.joinRoom(roomId);\n  }, []);\n  \n  const leaveRoom = useCallback((roomId: string) => {\n    wsClient.leaveRoom(roomId);\n  }, []);\n  \n  return {\n    connected,\n    lastMessage,\n    subscribe,\n    send,\n    connect,\n    disconnect,\n    joinRoom,\n    leaveRoom\n  };\n}\n\n// Hook for video generation updates\nexport function useVideoGenerationUpdates(videoId?: string) {\n  const [status, setStatus] = useState<VideoGenerationUpdate | null>(null);\n  const { subscribe } = useWebSocket();\n  \n  useEffect(() => {\n    if (!videoId) return;\n    \n    const unsubscribes = [\n      subscribe(WSEventType.VIDEO_GENERATION_STARTED, (data: VideoGenerationUpdate) => {\n        if (data.videoId === videoId) setStatus(data);\n      }),\n      subscribe(WSEventType.VIDEO_GENERATION_PROGRESS, (data: VideoGenerationUpdate) => {\n        if (data.videoId === videoId) setStatus(data);\n      }),\n      subscribe(WSEventType.VIDEO_GENERATION_COMPLETED, (data: VideoGenerationUpdate) => {\n        if (data.videoId === videoId) setStatus(data);\n      }),\n      subscribe(WSEventType.VIDEO_GENERATION_FAILED, (data: VideoGenerationUpdate) => {\n        if (data.videoId === videoId) setStatus(data);\n      })\n    ];\n    \n    return () => {\n      unsubscribes.forEach(unsubscribe => unsubscribe());\n    };\n  }, [videoId, subscribe]);\n  \n  return status;\n}\n\n// Hook for channel metrics\nexport function useChannelMetrics(channelId?: string) {\n  const [metrics, setMetrics] = useState<ChannelMetricsUpdate | null>(null);\n  const { subscribe, joinRoom, leaveRoom } = useWebSocket();\n  \n  useEffect(() => {\n    if (!channelId) return;\n    \n    // Join channel room\n    joinRoom(`channel:${channelId}`);\n    \n    const unsubscribe = subscribe(WSEventType.CHANNEL_METRICS_UPDATE, (data: ChannelMetricsUpdate) => {\n      if (data.channelId === channelId) {\n        setMetrics(data);\n      }\n    });\n    \n    return () => {\n      leaveRoom(`channel:${channelId}`);\n      unsubscribe();\n    };\n  }, [channelId, subscribe, joinRoom, leaveRoom]);\n  \n  return metrics;\n}\n\n// Hook for system metrics\nexport function useSystemMetrics() {\n  const [metrics, setMetrics] = useState<SystemMetrics | null>(null);\n  const { subscribe } = useWebSocket();\n  \n  useEffect(() => {\n    const unsubscribe = subscribe(WSEventType.SYSTEM_METRICS, (data: SystemMetrics) => {\n      setMetrics(data);\n    });\n    \n    return unsubscribe;\n  }, [subscribe]);\n  \n  return metrics;\n}\n\n// Hook for notifications\nexport function useNotifications() {\n  const [notifications, setNotifications] = useState<any[]>([]);\n  const { subscribe } = useWebSocket();\n  \n  useEffect(() => {\n    const unsubscribe = subscribe(WSEventType.USER_NOTIFICATION, (data: any) => {\n      setNotifications(prev => [...prev, { ...data, id: Date.now(), timestamp: new Date() }]);\n    });\n    \n    return unsubscribe;\n  }, [subscribe]);\n  \n  const clearNotification = useCallback((id: number) => {\n    setNotifications(prev => prev.filter(n => n.id !== id));\n  }, []);\n  \n  const clearAll = useCallback(() => {\n    setNotifications([]);\n  }, []);\n  \n  return {\n    notifications,\n    clearNotification,\n    clearAll\n  };\n}\n\nexport default wsClient;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\services\\websocketService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":19,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[461,464],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[461,464],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":99,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2490,2493],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2490,2493],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":120,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":120,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3067,3070],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3067,3070],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":204,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":204,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4979,4982],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4979,4982],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_message' is defined but never used.","line":289,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":289,"endColumn":30},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":333,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":333,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8266,8269],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8266,8269],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * WebSocket Service for Real-time Updates\r\n * Handles WebSocket connections with automatic reconnection and message handling\r\n */\r\n\r\nimport { EventEmitter } from '../utils/EventEmitter';\r\n\r\nexport interface WebSocketConfig {\r\n  url: string;\r\n  reconnectInterval?: number;\r\n  maxReconnectAttempts?: number;\r\n  heartbeatInterval?: number;\r\n  enableHeartbeat?: boolean;\r\n  debug?: boolean;\r\n}\r\n\r\nexport interface WebSocketMessage {\r\n  type: string;\r\n  data: any;\r\n  timestamp: number;\r\n  id?: string;\r\n}\r\n\r\nexport enum WebSocketStatus {\r\n  CONNECTING = 'CONNECTING',\r\n  CONNECTED = 'CONNECTED',\r\n  DISCONNECTED = 'DISCONNECTED',\r\n  RECONNECTING = 'RECONNECTING',\r\n  ERROR = 'ERROR',\r\n}\r\n\r\nexport class WebSocketService extends EventEmitter {\r\n  private ws: WebSocket | null = null;\r\n  private config: Required<WebSocketConfig>;\r\n  private reconnectAttempts = 0;\r\n  private reconnectTimer: ReturnType<typeof setTimeout> | null = null;\r\n  private heartbeatTimer: ReturnType<typeof setTimeout> | null = null;\r\n  private messageQueue: WebSocketMessage[] = [];\r\n  private status: WebSocketStatus = WebSocketStatus.DISCONNECTED;\r\n  private lastPing: number = 0;\r\n  private latency: number = 0;\r\n\r\n  constructor(config: WebSocketConfig) {\r\n    super();\r\n    this.config = {\r\n      reconnectInterval: 5000,\r\n      maxReconnectAttempts: 10,\r\n      heartbeatInterval: 30000,\r\n      enableHeartbeat: true,\r\n      debug: false,\r\n      ...config,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Connect to WebSocket server\r\n   */\r\n  public connect(): void {\r\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) {\r\n      this.log('Already connected');\r\n      return;\r\n    }\r\n\r\n    this.status = WebSocketStatus.CONNECTING;\r\n    this.emit('status', this.status);\r\n\r\n    try {\r\n      // Add authentication token if available\r\n      const token = localStorage.getItem('token');\r\n      const url = token \r\n        ? `${this.config.url}?token=${token}`\r\n        : this.config.url;\r\n\r\n      this.ws = new WebSocket(url);\r\n      this.setupEventHandlers();\r\n    } catch (error) {\r\n      this.handleError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Disconnect from WebSocket server\r\n   */\r\n  public disconnect(): void {\r\n    this.clearTimers();\r\n    \r\n    if (this.ws) {\r\n      this.ws.close(1000, 'Client disconnect');\r\n      this.ws = null;\r\n    }\r\n\r\n    this.status = WebSocketStatus.DISCONNECTED;\r\n    this.emit('status', this.status);\r\n  }\r\n\r\n  /**\r\n   * Send message through WebSocket\r\n   */\r\n  public send(type: string, data: any): void {\r\n    const message: WebSocketMessage = {\r\n      type,\r\n      data,\r\n      timestamp: Date.now(),\r\n      id: this.generateMessageId(),\r\n    };\r\n\r\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) {\r\n      this.ws.send(JSON.stringify(message));\r\n      this.emit('sent', message);\r\n    } else {\r\n      // Queue message for later sending\r\n      this.messageQueue.push(message);\r\n      this.log('Message queued (not connected):', message);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Subscribe to specific message types\r\n   */\r\n  public subscribe(type: string, callback: (data: any) => void): () => void {\r\n    const handler = (message: WebSocketMessage) => {\r\n      if (message.type === type) {\r\n        callback(message.data);\r\n      }\r\n    };\r\n\r\n    this.on('message', handler);\r\n\r\n    // Return unsubscribe function\r\n    return () => {\r\n      this.off('message', handler);\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get current connection status\r\n   */\r\n  public getStatus(): WebSocketStatus {\r\n    return this.status;\r\n  }\r\n\r\n  /**\r\n   * Get connection latency\r\n   */\r\n  public getLatency(): number {\r\n    return this.latency;\r\n  }\r\n\r\n  /**\r\n   * Setup WebSocket event handlers\r\n   */\r\n  private setupEventHandlers(): void {\r\n    if (!this.ws) return;\r\n\r\n    this.ws.onopen = this.handleOpen.bind(this);\r\n    this.ws.onclose = this.handleClose.bind(this);\r\n    this.ws.onerror = this.handleError.bind(this);\r\n    this.ws.onmessage = this.handleMessage.bind(this);\r\n  }\r\n\r\n  /**\r\n   * Handle WebSocket open event\r\n   */\r\n  private handleOpen(): void {\r\n    this.log('WebSocket connected');\r\n    \r\n    this.status = WebSocketStatus.CONNECTED;\r\n    this.reconnectAttempts = 0;\r\n    this.emit('status', this.status);\r\n    this.emit('connected');\r\n\r\n    // Start heartbeat\r\n    if (this.config.enableHeartbeat) {\r\n      this.startHeartbeat();\r\n    }\r\n\r\n    // Send queued messages\r\n    this.flushMessageQueue();\r\n  }\r\n\r\n  /**\r\n   * Handle WebSocket close event\r\n   */\r\n  private handleClose(event: CloseEvent): void {\r\n    this.log('WebSocket closed:', event.code, event.reason);\r\n    \r\n    this.ws = null;\r\n    this.clearTimers();\r\n\r\n    if (event.code === 1000) {\r\n      // Normal closure\r\n      this.status = WebSocketStatus.DISCONNECTED;\r\n      this.emit('status', this.status);\r\n      this.emit('disconnected');\r\n    } else {\r\n      // Unexpected closure - attempt reconnect\r\n      this.attemptReconnect();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle WebSocket error event\r\n   */\r\n  private handleError(error: any): void {\r\n    this.log('WebSocket error:', error);\r\n    \r\n    this.status = WebSocketStatus.ERROR;\r\n    this.emit('status', this.status);\r\n    this.emit('error', error);\r\n  }\r\n\r\n  /**\r\n   * Handle incoming WebSocket message\r\n   */\r\n  private handleMessage(event: MessageEvent): void {\r\n    try {\r\n      const message = JSON.parse(event.data) as WebSocketMessage;\r\n      \r\n      // Handle different message types\r\n      switch (message.type) {\r\n        case 'pong':\r\n          this.handlePong(message);\r\n          break;\r\n        \r\n        case 'error':\r\n          this.emit('error', message.data);\r\n          break;\r\n        \r\n        default:\r\n          this.emit('message', message);\r\n          this.emit(`message:${message.type}`, message.data);\r\n          break;\r\n      }\r\n\r\n      this.log('Received message:', message);\r\n    } catch (error) {\r\n      this.log('Failed to parse message:', event.data, error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Attempt to reconnect\r\n   */\r\n  private attemptReconnect(): void {\r\n    if (this.reconnectAttempts >= this.config.maxReconnectAttempts) {\r\n      this.log('Max reconnection attempts reached');\r\n      this.status = WebSocketStatus.DISCONNECTED;\r\n      this.emit('status', this.status);\r\n      this.emit('reconnectFailed');\r\n      return;\r\n    }\r\n\r\n    this.status = WebSocketStatus.RECONNECTING;\r\n    this.emit('status', this.status);\r\n    this.reconnectAttempts++;\r\n\r\n    const delay = this.getReconnectDelay();\r\n    this.log(`Reconnecting in ${delay}ms (attempt ${this.reconnectAttempts})`);\r\n\r\n    this.reconnectTimer = setTimeout(() => {\r\n      this.connect();\r\n    }, delay);\r\n  }\r\n\r\n  /**\r\n   * Get reconnection delay with exponential backoff\r\n   */\r\n  private getReconnectDelay(): number {\r\n    const baseDelay = this.config.reconnectInterval;\r\n    const factor = Math.min(this.reconnectAttempts, 5);\r\n    return baseDelay * Math.pow(1.5, factor);\r\n  }\r\n\r\n  /**\r\n   * Start heartbeat mechanism\r\n   */\r\n  private startHeartbeat(): void {\r\n    this.heartbeatTimer = setInterval(() => {\r\n      if (this.ws && this.ws.readyState === WebSocket.OPEN) {\r\n        this.lastPing = Date.now();\r\n        this.send('ping', { timestamp: this.lastPing });\r\n      }\r\n    }, this.config.heartbeatInterval);\r\n  }\r\n\r\n  /**\r\n   * Handle pong response\r\n   */\r\n  private handlePong(_message: WebSocketMessage): void {\r\n    if (this.lastPing) {\r\n      this.latency = Date.now() - this.lastPing;\r\n      this.emit('latency', this.latency);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear all timers\r\n   */\r\n  private clearTimers(): void {\r\n    if (this.reconnectTimer) {\r\n      clearTimeout(this.reconnectTimer);\r\n      this.reconnectTimer = null;\r\n    }\r\n\r\n    if (this.heartbeatTimer) {\r\n      clearInterval(this.heartbeatTimer);\r\n      this.heartbeatTimer = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Flush queued messages\r\n   */\r\n  private flushMessageQueue(): void {\r\n    while (this.messageQueue.length > 0) {\r\n      const message = this.messageQueue.shift();\r\n      if (message) {\r\n        this.send(message.type, message.data);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate unique message ID\r\n   */\r\n  private generateMessageId(): string {\r\n    return `${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n\r\n  /**\r\n   * Log debug messages\r\n   */\r\n  private log(...args: any[]): void {\r\n    if (this.config.debug) {\r\n      console.log('[WebSocket]', ...args);\r\n    }\r\n  }\r\n}\r\n\r\n// Singleton instance\r\nlet wsInstance: WebSocketService | null = null;\r\n\r\n/**\r\n * Get or create WebSocket service instance\r\n */\r\nexport function getWebSocketService(config?: WebSocketConfig): WebSocketService {\r\n  if (!wsInstance && config) {\r\n    wsInstance = new WebSocketService(config);\r\n  }\r\n  \r\n  if (!wsInstance) {\r\n    throw new Error('WebSocket service not initialized');\r\n  }\r\n  \r\n  return wsInstance;\r\n}\r\n\r\n/**\r\n * Initialize WebSocket service\r\n */\r\nexport function initializeWebSocket(config: WebSocketConfig): WebSocketService {\r\n  if (wsInstance) {\r\n    wsInstance.disconnect();\r\n  }\r\n  \r\n  wsInstance = new WebSocketService(config);\r\n  return wsInstance;\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\stores\\authStore.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":61,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1662,1665],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1662,1665],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":93,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":93,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2567,2570],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2567,2570],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":116,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":116,"endColumn":23}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { create } from 'zustand';\r\nimport { persist, createJSONStorage } from 'zustand/middleware';\r\nimport axios from 'axios';\r\n\r\ninterface User {\r\n  id: number;\r\n  email: string;\r\n  full_name: string;\r\n  is_admin: boolean;\r\n  is_active: boolean;\r\n  created_at: string;\r\n}\r\n\r\ninterface AuthState {\r\n  user: User | null;\r\n  token: string | null;\r\n  isAuthenticated: boolean;\r\n  isLoading: boolean;\r\n  error: string | null;\r\n  \r\n  // Actions\r\n  login: (email: string, password: string) => Promise<void>;\r\n  logout: () => void;\r\n  register: (email: string, password: string, fullName: string) => Promise<void>;\r\n  refreshToken: () => Promise<void>;\r\n  clearError: () => void;\r\n}\r\n\r\nconst API_URL = import.meta.env.VITE_API_URL || 'http://localhost:8000';\r\n\r\nexport const useAuthStore = create<AuthState>()(\r\n  persist(\r\n    (set, get) => ({\r\n      user: null,\r\n      token: null,\r\n      isAuthenticated: false,\r\n      isLoading: false,\r\n      error: null,\r\n      \r\n      login: async (email: string, password: string) => {\r\n        set({ isLoading: true, error: null });\r\n        \r\n        try {\r\n          const response = await axios.post(`${API_URL}/api/v1/auth/login`, {\r\n            username: email,\r\n            password,\r\n          });\r\n          \r\n          const { access_token, user } = response.data;\r\n          \r\n          // Set axios default header\r\n          axios.defaults.headers.common['Authorization'] = `Bearer ${access_token}`;\r\n          \r\n          set({\r\n            user,\r\n            token: access_token,\r\n            isAuthenticated: true,\r\n            isLoading: false,\r\n            error: null,\r\n          });\r\n        } catch (error: any) {\r\n          set({\r\n            isLoading: false,\r\n            error: error.response?.data?.detail || 'Login failed',\r\n            isAuthenticated: false,\r\n          });\r\n          throw error;\r\n        }\r\n      },\r\n      \r\n      logout: () => {\r\n        delete axios.defaults.headers.common['Authorization'];\r\n        set({\r\n          user: null,\r\n          token: null,\r\n          isAuthenticated: false,\r\n          error: null,\r\n        });\r\n      },\r\n      \r\n      register: async (email: string, password: string, fullName: string) => {\r\n        set({ isLoading: true, error: null });\r\n        \r\n        try {\r\n          await axios.post(`${API_URL}/api/v1/auth/register`, {\r\n            email,\r\n            password,\r\n            full_name: fullName,\r\n          });\r\n          \r\n          // Auto-login after registration\r\n          await get().login(email, password);\r\n        } catch (error: any) {\r\n          set({\r\n            isLoading: false,\r\n            error: error.response?.data?.detail || 'Registration failed',\r\n          });\r\n          throw error;\r\n        }\r\n      },\r\n      \r\n      refreshToken: async () => {\r\n        const token = get().token;\r\n        if (!token) return;\r\n        \r\n        try {\r\n          const response = await axios.post(`${API_URL}/api/v1/auth/refresh`, {\r\n            token,\r\n          });\r\n          \r\n          const { access_token } = response.data;\r\n          \r\n          axios.defaults.headers.common['Authorization'] = `Bearer ${access_token}`;\r\n          \r\n          set({ token: access_token });\r\n        } catch (error) {\r\n          get().logout();\r\n        }\r\n      },\r\n      \r\n      clearError: () => set({ error: null }),\r\n    }),\r\n    {\r\n      name: 'auth-storage',\r\n      storage: createJSONStorage(() => localStorage),\r\n      partialize: (state) => ({\r\n        user: state.user,\r\n        token: state.token,\r\n        isAuthenticated: state.isAuthenticated,\r\n      }),\r\n    }\r\n  )\r\n);\r\n\r\n// Initialize axios interceptor for token refresh\r\naxios.interceptors.response.use(\r\n  (response) => response,\r\n  async (error) => {\r\n    const originalRequest = error.config;\r\n    \r\n    if (error.response?.status === 401 && !originalRequest._retry) {\r\n      originalRequest._retry = true;\r\n      \r\n      try {\r\n        await useAuthStore.getState().refreshToken();\r\n        return axios(originalRequest);\r\n      } catch (refreshError) {\r\n        useAuthStore.getState().logout();\r\n        window.location.href = '/login';\r\n        return Promise.reject(refreshError);\r\n      }\r\n    }\r\n    \r\n    return Promise.reject(error);\r\n  }\r\n);","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\stores\\optimizedStore.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":56,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":56,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1356,1359],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1356,1359],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":71,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":71,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1630,1633],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1630,1633],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":153,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":153,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3678,3681],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3678,3681],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":154,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":154,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3732,3735],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3732,3735],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":168,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":168,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4237,4240],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4237,4240],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Optimized State Management Store\r\n * Implements performance optimizations with selective subscriptions and memoization\r\n */\r\n\r\nimport { create } from 'zustand';\r\nimport { devtools, persist, subscribeWithSelector } from 'zustand/middleware';\r\nimport { immer } from 'zustand/middleware/immer';\r\nimport { shallow } from 'zustand/shallow';\r\n\r\n// Types\r\nexport interface AppState {\r\n  // User State\r\n  user: {\r\n    id: string | null;\r\n    email: string | null;\r\n    name: string | null;\r\n    subscription: {\r\n      plan: 'free' | 'starter' | 'pro' | 'enterprise';\r\n      status: 'active' | 'inactive' | 'cancelled';\r\n      expiresAt: Date | null;\r\n    };\r\n    preferences: {\r\n      theme: 'light' | 'dark' | 'system';\r\n      notifications: boolean;\r\n      autoSave: boolean;\r\n    };\r\n  };\r\n\r\n  // Channels State\r\n  channels: {\r\n    list: Channel[];\r\n    selected: string | null;\r\n    loading: boolean;\r\n    error: string | null;\r\n    lastFetch: number;\r\n  };\r\n\r\n  // Videos State\r\n  videos: {\r\n    queue: VideoQueueItem[];\r\n    processing: string[];\r\n    completed: CompletedVideo[];\r\n    stats: {\r\n      totalGenerated: number;\r\n      totalViews: number;\r\n      totalRevenue: number;\r\n    };\r\n  };\r\n\r\n  // Analytics State\r\n  analytics: {\r\n    realtime: RealtimeMetrics | null;\r\n    daily: DailyMetrics[];\r\n    loading: boolean;\r\n    cache: Map<string, any>;\r\n  };\r\n\r\n  // UI State\r\n  ui: {\r\n    sidebarOpen: boolean;\r\n    activeModal: string | null;\r\n    notifications: Notification[];\r\n    theme: 'light' | 'dark';\r\n  };\r\n\r\n  // WebSocket State\r\n  ws: {\r\n    connected: boolean;\r\n    reconnecting: boolean;\r\n    lastMessage: any;\r\n  };\r\n}\r\n\r\nexport interface Channel {\r\n  id: string;\r\n  name: string;\r\n  youtubeId: string;\r\n  status: 'active' | 'paused' | 'error';\r\n  metrics: {\r\n    subscribers: number;\r\n    videos: number;\r\n    views: number;\r\n  };\r\n}\r\n\r\nexport interface VideoQueueItem {\r\n  id: string;\r\n  channelId: string;\r\n  title: string;\r\n  status: 'pending' | 'processing' | 'completed' | 'failed';\r\n  progress: number;\r\n  scheduledAt: Date;\r\n  priority: 'low' | 'normal' | 'high' | 'urgent';\r\n}\r\n\r\nexport interface CompletedVideo {\r\n  id: string;\r\n  title: string;\r\n  youtubeId: string;\r\n  views: number;\r\n  likes: number;\r\n  revenue: number;\r\n  publishedAt: Date;\r\n}\r\n\r\nexport interface RealtimeMetrics {\r\n  activeViewers: number;\r\n  videosProcessing: number;\r\n  apiCallsPerMinute: number;\r\n  errorRate: number;\r\n}\r\n\r\nexport interface DailyMetrics {\r\n  date: string;\r\n  views: number;\r\n  revenue: number;\r\n  newSubscribers: number;\r\n  videosPublished: number;\r\n}\r\n\r\nexport interface Notification {\r\n  id: string;\r\n  type: 'info' | 'success' | 'warning' | 'error';\r\n  message: string;\r\n  timestamp: Date;\r\n  read: boolean;\r\n}\r\n\r\n// Actions\r\nexport interface AppActions {\r\n  // User Actions\r\n  setUser: (user: Partial<AppState['user']>) => void;\r\n  updatePreferences: (prefs: Partial<AppState['user']['preferences']>) => void;\r\n  logout: () => void;\r\n\r\n  // Channel Actions\r\n  fetchChannels: () => Promise<void>;\r\n  selectChannel: (channelId: string) => void;\r\n  updateChannel: (channelId: string, updates: Partial<Channel>) => void;\r\n  addChannel: (channel: Channel) => void;\r\n\r\n  // Video Actions\r\n  addToQueue: (video: Omit<VideoQueueItem, 'id'>) => void;\r\n  updateQueueItem: (id: string, updates: Partial<VideoQueueItem>) => void;\r\n  removeFromQueue: (id: string) => void;\r\n  moveToProcessing: (id: string) => void;\r\n  markCompleted: (id: string, video: CompletedVideo) => void;\r\n\r\n  // Analytics Actions\r\n  updateRealtimeMetrics: (metrics: RealtimeMetrics) => void;\r\n  addDailyMetrics: (metrics: DailyMetrics) => void;\r\n  cacheAnalytics: (key: string, data: any) => void;\r\n  getCachedAnalytics: (key: string) => any;\r\n\r\n  // UI Actions\r\n  toggleSidebar: () => void;\r\n  openModal: (modalId: string) => void;\r\n  closeModal: () => void;\r\n  addNotification: (notification: Omit<Notification, 'id' | 'timestamp' | 'read'>) => void;\r\n  markNotificationRead: (id: string) => void;\r\n  clearNotifications: () => void;\r\n  setTheme: (theme: 'light' | 'dark') => void;\r\n\r\n  // WebSocket Actions\r\n  setWsConnected: (connected: boolean) => void;\r\n  setWsReconnecting: (reconnecting: boolean) => void;\r\n  handleWsMessage: (message: any) => void;\r\n\r\n  // Utility Actions\r\n  reset: () => void;\r\n  hydrate: () => void;\r\n}\r\n\r\n// Initial State\r\nconst initialState: AppState = {\r\n  user: {\r\n    id: null,\r\n    email: null,\r\n    name: null,\r\n    subscription: {\r\n      plan: 'free',\r\n      status: 'inactive',\r\n      expiresAt: null,\r\n    },\r\n    preferences: {\r\n      theme: 'system',\r\n      notifications: true,\r\n      autoSave: true,\r\n    },\r\n  },\r\n  channels: {\r\n    list: [],\r\n    selected: null,\r\n    loading: false,\r\n    error: null,\r\n    lastFetch: 0,\r\n  },\r\n  videos: {\r\n    queue: [],\r\n    processing: [],\r\n    completed: [],\r\n    stats: {\r\n      totalGenerated: 0,\r\n      totalViews: 0,\r\n      totalRevenue: 0,\r\n    },\r\n  },\r\n  analytics: {\r\n    realtime: null,\r\n    daily: [],\r\n    loading: false,\r\n    cache: new Map(),\r\n  },\r\n  ui: {\r\n    sidebarOpen: true,\r\n    activeModal: null,\r\n    notifications: [],\r\n    theme: 'light',\r\n  },\r\n  ws: {\r\n    connected: false,\r\n    reconnecting: false,\r\n    lastMessage: null,\r\n  },\r\n};\r\n\r\n// Create Store with Middleware\r\nexport const useOptimizedStore = create<AppState & AppActions>()(\r\n  devtools(\r\n    persist(\r\n      subscribeWithSelector(\r\n        immer((set, get) => ({\r\n          ...initialState,\r\n\r\n          // User Actions\r\n          setUser: (user) =>\r\n            set((state) => {\r\n              Object.assign(state.user, user);\r\n            }),\r\n\r\n          updatePreferences: (prefs) =>\r\n            set((state) => {\r\n              Object.assign(state.user.preferences, prefs);\r\n            }),\r\n\r\n          logout: () =>\r\n            set((state) => {\r\n              state.user = initialState.user;\r\n              state.channels = initialState.channels;\r\n              state.videos = initialState.videos;\r\n            }),\r\n\r\n          // Channel Actions\r\n          fetchChannels: async () => {\r\n            const now = Date.now();\r\n            const { channels } = get();\r\n            \r\n            // Cache for 5 minutes\r\n            if (now - channels.lastFetch < 5 * 60 * 1000) {\r\n              return;\r\n            }\r\n\r\n            set((state) => {\r\n              state.channels.loading = true;\r\n              state.channels.error = null;\r\n            });\r\n\r\n            try {\r\n              const response = await fetch('/api/v1/channels', {\r\n                headers: {\r\n                  Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n                },\r\n              });\r\n\r\n              if (!response.ok) throw new Error('Failed to fetch channels');\r\n\r\n              const data = await response.json();\r\n\r\n              set((state) => {\r\n                state.channels.list = data;\r\n                state.channels.loading = false;\r\n                state.channels.lastFetch = now;\r\n              });\r\n            } catch (error) {\r\n              set((state) => {\r\n                state.channels.loading = false;\r\n                state.channels.error = error instanceof Error ? error.message : 'An error occurred';\r\n              });\r\n            }\r\n          },\r\n\r\n          selectChannel: (channelId) =>\r\n            set((state) => {\r\n              state.channels.selected = channelId;\r\n            }),\r\n\r\n          updateChannel: (channelId, updates) =>\r\n            set((state) => {\r\n              const channel = state.channels.list.find((c) => c.id === channelId);\r\n              if (channel) {\r\n                Object.assign(channel, updates);\r\n              }\r\n            }),\r\n\r\n          addChannel: (channel) =>\r\n            set((state) => {\r\n              state.channels.list.push(channel);\r\n            }),\r\n\r\n          // Video Actions\r\n          addToQueue: (video) =>\r\n            set((state) => {\r\n              const id = `video_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n              state.videos.queue.push({ ...video, id });\r\n            }),\r\n\r\n          updateQueueItem: (id, updates) =>\r\n            set((state) => {\r\n              const item = state.videos.queue.find((v) => v.id === id);\r\n              if (item) {\r\n                Object.assign(item, updates);\r\n              }\r\n            }),\r\n\r\n          removeFromQueue: (id) =>\r\n            set((state) => {\r\n              state.videos.queue = state.videos.queue.filter((v) => v.id !== id);\r\n            }),\r\n\r\n          moveToProcessing: (id) =>\r\n            set((state) => {\r\n              const item = state.videos.queue.find((v) => v.id === id);\r\n              if (item) {\r\n                item.status = 'processing';\r\n                state.videos.processing.push(id);\r\n              }\r\n            }),\r\n\r\n          markCompleted: (id, video) =>\r\n            set((state) => {\r\n              state.videos.queue = state.videos.queue.filter((v) => v.id !== id);\r\n              state.videos.processing = state.videos.processing.filter((pid) => pid !== id);\r\n              state.videos.completed.push(video);\r\n              state.videos.stats.totalGenerated++;\r\n            }),\r\n\r\n          // Analytics Actions\r\n          updateRealtimeMetrics: (metrics) =>\r\n            set((state) => {\r\n              state.analytics.realtime = metrics;\r\n            }),\r\n\r\n          addDailyMetrics: (metrics) =>\r\n            set((state) => {\r\n              const existing = state.analytics.daily.findIndex((m) => m.date === metrics.date);\r\n              if (existing >= 0) {\r\n                state.analytics.daily[existing] = metrics;\r\n              } else {\r\n                state.analytics.daily.push(metrics);\r\n                // Keep only last 30 days\r\n                if (state.analytics.daily.length > 30) {\r\n                  state.analytics.daily.shift();\r\n                }\r\n              }\r\n            }),\r\n\r\n          cacheAnalytics: (key, data) =>\r\n            set((state) => {\r\n              state.analytics.cache.set(key, {\r\n                data,\r\n                timestamp: Date.now(),\r\n              });\r\n            }),\r\n\r\n          getCachedAnalytics: (key) => {\r\n            const cached = get().analytics.cache.get(key);\r\n            if (cached && Date.now() - cached.timestamp < 5 * 60 * 1000) {\r\n              return cached.data;\r\n            }\r\n            return null;\r\n          },\r\n\r\n          // UI Actions\r\n          toggleSidebar: () =>\r\n            set((state) => {\r\n              state.ui.sidebarOpen = !state.ui.sidebarOpen;\r\n            }),\r\n\r\n          openModal: (modalId) =>\r\n            set((state) => {\r\n              state.ui.activeModal = modalId;\r\n            }),\r\n\r\n          closeModal: () =>\r\n            set((state) => {\r\n              state.ui.activeModal = null;\r\n            }),\r\n\r\n          addNotification: (notification) =>\r\n            set((state) => {\r\n              const id = `notif_${Date.now()}`;\r\n              state.ui.notifications.unshift({\r\n                ...notification,\r\n                id,\r\n                timestamp: new Date(),\r\n                read: false,\r\n              });\r\n              // Keep max 50 notifications\r\n              if (state.ui.notifications.length > 50) {\r\n                state.ui.notifications.pop();\r\n              }\r\n            }),\r\n\r\n          markNotificationRead: (id) =>\r\n            set((state) => {\r\n              const notif = state.ui.notifications.find((n) => n.id === id);\r\n              if (notif) {\r\n                notif.read = true;\r\n              }\r\n            }),\r\n\r\n          clearNotifications: () =>\r\n            set((state) => {\r\n              state.ui.notifications = [];\r\n            }),\r\n\r\n          setTheme: (theme) =>\r\n            set((state) => {\r\n              state.ui.theme = theme;\r\n              document.documentElement.setAttribute('data-theme', theme);\r\n            }),\r\n\r\n          // WebSocket Actions\r\n          setWsConnected: (connected) =>\r\n            set((state) => {\r\n              state.ws.connected = connected;\r\n            }),\r\n\r\n          setWsReconnecting: (reconnecting) =>\r\n            set((state) => {\r\n              state.ws.reconnecting = reconnecting;\r\n            }),\r\n\r\n          handleWsMessage: (message) =>\r\n            set((state) => {\r\n              state.ws.lastMessage = message;\r\n              \r\n              // Handle different message types\r\n              if (message.type === 'video_update') {\r\n                const { updateQueueItem } = get();\r\n                updateQueueItem(message.videoId, message.data);\r\n              } else if (message.type === 'metrics_update') {\r\n                const { updateRealtimeMetrics } = get();\r\n                updateRealtimeMetrics(message.data);\r\n              } else if (message.type === 'notification') {\r\n                const { addNotification } = get();\r\n                addNotification({\r\n                  type: message.level || 'info',\r\n                  message: message.text,\r\n                });\r\n              }\r\n            }),\r\n\r\n          // Utility Actions\r\n          reset: () => set(initialState),\r\n\r\n          hydrate: () => {\r\n            // Hydrate from localStorage or API\r\n            const savedState = localStorage.getItem('app-state');\r\n            if (savedState) {\r\n              try {\r\n                const parsed = JSON.parse(savedState);\r\n                set((state) => {\r\n                  Object.assign(state, parsed);\r\n                });\r\n              } catch (error) {\r\n                console.error('Failed to hydrate state:', error);\r\n              }\r\n            }\r\n          },\r\n        }))\r\n      ),\r\n      {\r\n        name: 'ytempire-app-state',\r\n        partialize: (state) => ({\r\n          user: state.user,\r\n          ui: {\r\n            theme: state.ui.theme,\r\n            sidebarOpen: state.ui.sidebarOpen,\r\n          },\r\n        }),\r\n      }\r\n    )\r\n  )\r\n);\r\n\r\n// Selectors for optimized re-renders\r\nexport const useUser = () => useOptimizedStore((state) => state.user);\r\nexport const useChannels = () => useOptimizedStore((state) => state.channels, shallow);\r\nexport const useSelectedChannel = () =>\r\n  useOptimizedStore((state) => {\r\n    const { channels } = state;\r\n    return channels.list.find((c) => c.id === channels.selected);\r\n  });\r\nexport const useVideoQueue = () => useOptimizedStore((state) => state.videos.queue, shallow);\r\nexport const useRealtimeMetrics = () => useOptimizedStore((state) => state.analytics.realtime);\r\nexport const useNotifications = () =>\r\n  useOptimizedStore((state) => state.ui.notifications.filter((n) => !n.read), shallow);\r\nexport const useTheme = () => useOptimizedStore((state) => state.ui.theme);\r\nexport const useWsStatus = () => useOptimizedStore((state) => state.ws);","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\stores\\useAuthStore.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\stores\\useChannelStore.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\stores\\useVideoStore.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\stores\\videoStore.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":38,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[959,962],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[959,962],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":51,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1313,1316],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1313,1316],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { create } from 'zustand'\r\nimport { videosApi } from '../services/api'\r\n\r\ninterface Video {\r\n  id: string\r\n  title: string\r\n  description: string\r\n  status: 'pending' | 'processing' | 'completed' | 'failed'\r\n  channelId: string\r\n  createdAt: Date\r\n  publishedAt?: Date\r\n  views?: number\r\n  likes?: number\r\n  comments?: number\r\n  generationCost?: number\r\n}\r\n\r\ninterface VideoStore {\r\n  videos: Video[]\r\n  loading: boolean\r\n  error: string | null\r\n  fetchVideos: () => Promise<void>\r\n  createVideo: (videoData: Partial<Video>) => Promise<void>\r\n  updateVideo: (id: string, updates: Partial<Video>) => void\r\n  deleteVideo: (id: string) => void\r\n}\r\n\r\nexport const useVideoStore = create<VideoStore>((set) => ({\r\n  videos: [],\r\n  loading: false,\r\n  error: null,\r\n\r\n  fetchVideos: async () => {\r\n    set({ loading: true, error: null })\r\n    try {\r\n      const data = await videosApi.getAll()\r\n      set({ videos: data, loading: false })\r\n    } catch (error: any) {\r\n      set({ error: error.message, loading: false })\r\n    }\r\n  },\r\n\r\n  createVideo: async (videoData) => {\r\n    set({ loading: true, error: null })\r\n    try {\r\n      const newVideo = await videosApi.generate(videoData)\r\n      set((state) => ({\r\n        videos: [...state.videos, newVideo],\r\n        loading: false,\r\n      }))\r\n    } catch (error: any) {\r\n      set({ error: error.message, loading: false })\r\n    }\r\n  },\r\n\r\n  updateVideo: (id, updates) => {\r\n    set((state) => ({\r\n      videos: state.videos.map((video) =>\r\n        video.id === id ? { ...video, ...updates } : video\r\n      ),\r\n    }))\r\n  },\r\n\r\n  deleteVideo: (id) => {\r\n    set((state) => ({\r\n      videos: state.videos.filter((video) => video.id !== id),\r\n    }))\r\n  },\r\n}))","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\theme\\accessibleTheme.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\theme\\darkMode.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\theme\\materialTheme.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\utils\\EventEmitter.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":6,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[144,147],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[144,147],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":20,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[542,545],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[542,545],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":38,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[958,961],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[958,961],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Browser-compatible EventEmitter\n * Simple implementation for WebSocket and other event-based systems\n */\n\ntype EventListener = (...args: any[]) => void;\n\nexport class EventEmitter {\n  private events: Map<string, Set<EventListener>> = new Map();\n\n  on(event: string, listener: EventListener): this {\n    if (!this.events.has(event)) {\n      this.events.set(event, new Set());\n    }\n    this.events.get(event)!.add(listener);\n    return this;\n  }\n\n  once(event: string, listener: EventListener): this {\n    const onceWrapper = (...args: any[]) => {\n      listener(...args);\n      this.off(event, onceWrapper);\n    };\n    return this.on(event, onceWrapper);\n  }\n\n  off(event: string, listener: EventListener): this {\n    const listeners = this.events.get(event);\n    if (listeners) {\n      listeners.delete(listener);\n      if (listeners.size === 0) {\n        this.events.delete(event);\n      }\n    }\n    return this;\n  }\n\n  emit(event: string, ...args: any[]): boolean {\n    const listeners = this.events.get(event);\n    if (!listeners || listeners.size === 0) {\n      return false;\n    }\n    listeners.forEach(listener => {\n      try {\n        listener(...args);\n      } catch (error) {\n        console.error(`Error in event listener for \"${event}\":`, error);\n      }\n    });\n    return true;\n  }\n\n  removeAllListeners(event?: string): this {\n    if (event) {\n      this.events.delete(event);\n    } else {\n      this.events.clear();\n    }\n    return this;\n  }\n\n  listenerCount(event: string): number {\n    const listeners = this.events.get(event);\n    return listeners ? listeners.size : 0;\n  }\n\n  eventNames(): string[] {\n    return Array.from(this.events.keys());\n  }\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\utils\\accessibility.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":157,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":157,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4228,4231],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4228,4231],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// WCAG 2.1 AA Compliance Utilities\n\n// Color contrast checking\nexport const getContrastRatio = (color1: string, color2: string): number => {\n  const getLuminance = (color: string): number => {\n    const rgb = color.match(/\\d+/g);\n    if (!rgb || rgb.length < 3) return 0;\n    \n    const [r, g, b] = rgb.map((x) => {\n      const val = parseInt(x) / 255;\n      return val <= 0.03928 ? val / 12.92 : Math.pow((val + 0.055) / 1.055, 2.4);\n    });\n    \n    return 0.2126 * r + 0.7152 * g + 0.0722 * b;\n  };\n\n  const lum1 = getLuminance(color1);\n  const lum2 = getLuminance(color2);\n  const brightest = Math.max(lum1, lum2);\n  const darkest = Math.min(lum1, lum2);\n  \n  return (brightest + 0.05) / (darkest + 0.05);\n};\n\n// Check if color combination meets WCAG AA standards\nexport const meetsWCAGAA = (\n  foreground: string,\n  background: string,\n  largeText = false\n): boolean => {\n  const ratio = getContrastRatio(foreground, background);\n  return largeText ? ratio >= 3 : ratio >= 4.5;\n};\n\n// Check if color combination meets WCAG AAA standards\nexport const meetsWCAGAAA = (\n  foreground: string,\n  background: string,\n  largeText = false\n): boolean => {\n  const ratio = getContrastRatio(foreground, background);\n  return largeText ? ratio >= 4.5 : ratio >= 7;\n};\n\n// Keyboard navigation utilities\nexport const FOCUSABLE_ELEMENTS = [\n  'a[href]',\n  'button:not([disabled])',\n  'textarea:not([disabled])',\n  'input:not([disabled])',\n  'select:not([disabled])',\n  '[tabindex]:not([tabindex=\"-1\"])',\n];\n\nexport const getFocusableElements = (container: HTMLElement): HTMLElement[] => {\n  const elements = container.querySelectorAll<HTMLElement>(\n    FOCUSABLE_ELEMENTS.join(',')\n  );\n  return Array.from(elements);\n};\n\nexport const trapFocus = (container: HTMLElement) => {\n  const focusableElements = getFocusableElements(container);\n  const firstElement = focusableElements[0];\n  const lastElement = focusableElements[focusableElements.length - 1];\n\n  const handleKeyDown = (e: KeyboardEvent) => {\n    if (e.key !== 'Tab') return;\n\n    if (e.shiftKey) {\n      if (document.activeElement === firstElement) {\n        e.preventDefault();\n        lastElement?.focus();\n      }\n    } else {\n      if (document.activeElement === lastElement) {\n        e.preventDefault();\n        firstElement?.focus();\n      }\n    }\n  };\n\n  container.addEventListener('keydown', handleKeyDown);\n  \n  // Focus first element\n  firstElement?.focus();\n\n  // Return cleanup function\n  return () => {\n    container.removeEventListener('keydown', handleKeyDown);\n  };\n};\n\n// Screen reader announcements\nexport const announce = (\n  message: string,\n  priority: 'polite' | 'assertive' = 'polite'\n) => {\n  const announcement = document.createElement('div');\n  announcement.setAttribute('role', 'status');\n  announcement.setAttribute('aria-live', priority);\n  announcement.setAttribute('aria-atomic', 'true');\n  announcement.style.position = 'absolute';\n  announcement.style.left = '-10000px';\n  announcement.style.width = '1px';\n  announcement.style.height = '1px';\n  announcement.style.overflow = 'hidden';\n  \n  announcement.textContent = message;\n  document.body.appendChild(announcement);\n  \n  // Remove after announcement\n  setTimeout(() => {\n    document.body.removeChild(announcement);\n  }, 1000);\n};\n\n// Skip navigation link management\nexport const createSkipLink = (targetId: string, text = 'Skip to main content') => {\n  const link = document.createElement('a');\n  link.href = `#${targetId}`;\n  link.className = 'skip-link';\n  link.textContent = text;\n  \n  link.style.position = 'absolute';\n  link.style.left = '-9999px';\n  link.style.zIndex = '999';\n  \n  link.addEventListener('focus', () => {\n    link.style.left = '0';\n    link.style.top = '0';\n  });\n  \n  link.addEventListener('blur', () => {\n    link.style.left = '-9999px';\n  });\n  \n  return link;\n};\n\n// ARIA attributes helper\nexport const getAriaProps = (props: {\n  label?: string;\n  labelledBy?: string;\n  describedBy?: string;\n  required?: boolean;\n  invalid?: boolean;\n  expanded?: boolean;\n  selected?: boolean;\n  checked?: boolean;\n  disabled?: boolean;\n  hidden?: boolean;\n  busy?: boolean;\n  live?: 'polite' | 'assertive' | 'off';\n  role?: string;\n}) => {\n  const ariaProps: Record<string, any> = {};\n  \n  if (props.label) ariaProps['aria-label'] = props.label;\n  if (props.labelledBy) ariaProps['aria-labelledby'] = props.labelledBy;\n  if (props.describedBy) ariaProps['aria-describedby'] = props.describedBy;\n  if (props.required !== undefined) ariaProps['aria-required'] = props.required;\n  if (props.invalid !== undefined) ariaProps['aria-invalid'] = props.invalid;\n  if (props.expanded !== undefined) ariaProps['aria-expanded'] = props.expanded;\n  if (props.selected !== undefined) ariaProps['aria-selected'] = props.selected;\n  if (props.checked !== undefined) ariaProps['aria-checked'] = props.checked;\n  if (props.disabled !== undefined) ariaProps['aria-disabled'] = props.disabled;\n  if (props.hidden !== undefined) ariaProps['aria-hidden'] = props.hidden;\n  if (props.busy !== undefined) ariaProps['aria-busy'] = props.busy;\n  if (props.live) ariaProps['aria-live'] = props.live;\n  if (props.role) ariaProps['role'] = props.role;\n  \n  return ariaProps;\n};\n\n// Heading hierarchy validation\nexport const validateHeadingHierarchy = (container: HTMLElement): boolean => {\n  const headings = container.querySelectorAll('h1, h2, h3, h4, h5, h6');\n  let lastLevel = 0;\n  let isValid = true;\n  \n  headings.forEach((heading) => {\n    const level = parseInt(heading.tagName.substring(1));\n    if (lastLevel > 0 && level > lastLevel + 1) {\n      console.warn(`Heading hierarchy issue: h${lastLevel} followed by h${level}`);\n      isValid = false;\n    }\n    lastLevel = level;\n  });\n  \n  return isValid;\n};\n\n// Focus visible management\nexport const manageFocusVisible = () => {\n  let hadKeyboardEvent = false;\n  \n  const onPointerDown = () => {\n    hadKeyboardEvent = false;\n  };\n  \n  const onKeyDown = (e: KeyboardEvent) => {\n    if (e.key === 'Tab') {\n      hadKeyboardEvent = true;\n    }\n  };\n  \n  const onFocus = (e: FocusEvent) => {\n    if (hadKeyboardEvent || (e.target as HTMLElement).matches(':focus-visible')) {\n      document.body.classList.add('keyboard-focused');\n    }\n  };\n  \n  const onBlur = () => {\n    document.body.classList.remove('keyboard-focused');\n  };\n  \n  document.addEventListener('keydown', onKeyDown);\n  document.addEventListener('pointerdown', onPointerDown);\n  document.addEventListener('focus', onFocus, true);\n  document.addEventListener('blur', onBlur, true);\n  \n  return () => {\n    document.removeEventListener('keydown', onKeyDown);\n    document.removeEventListener('pointerdown', onPointerDown);\n    document.removeEventListener('focus', onFocus, true);\n    document.removeEventListener('blur', onBlur, true);\n  };\n};\n\n// Reduced motion preference\nexport const prefersReducedMotion = (): boolean => {\n  return window.matchMedia('(prefers-reduced-motion: reduce)').matches;\n};\n\n// High contrast mode detection\nexport const prefersHighContrast = (): boolean => {\n  return window.matchMedia('(prefers-contrast: high)').matches;\n};\n\n// Dark mode preference\nexport const prefersDarkMode = (): boolean => {\n  return window.matchMedia('(prefers-color-scheme: dark)').matches;\n};\n\n// Text spacing utilities for readability\nexport const getReadableTextStyles = () => ({\n  lineHeight: 1.5,\n  letterSpacing: '0.12em',\n  wordSpacing: '0.16em',\n  paragraphSpacing: '2em',\n});\n\n// Alternative text validation\nexport const validateAltText = (img: HTMLImageElement): boolean => {\n  const alt = img.getAttribute('alt');\n  if (alt === null) {\n    console.warn('Image missing alt attribute:', img.src);\n    return false;\n  }\n  if (alt === '' && !img.getAttribute('role')) {\n    console.warn('Decorative image should have role=\"presentation\":', img.src);\n    return false;\n  }\n  return true;\n};\n\n// Form label association validation\nexport const validateFormLabels = (form: HTMLFormElement): boolean => {\n  const inputs = form.querySelectorAll('input, select, textarea');\n  let isValid = true;\n  \n  inputs.forEach((input) => {\n    const id = input.getAttribute('id');\n    const ariaLabel = input.getAttribute('aria-label');\n    const ariaLabelledBy = input.getAttribute('aria-labelledby');\n    \n    if (!id || (!document.querySelector(`label[for=\"${id}\"]`) && !ariaLabel && !ariaLabelledBy)) {\n      console.warn('Form input missing label:', input);\n      isValid = false;\n    }\n  });\n  \n  return isValid;\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\utils\\accessibilityTesting.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\utils\\formatters.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\utils\\lazyWithRetry.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[321,324],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[321,324],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":28,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[639,642],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[639,642],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Enhanced lazy loading with retry logic for code splitting\n * Handles network failures and chunk loading errors gracefully\n */\n\nimport { lazy } from 'react';\nimport type { ComponentType } from 'react';\n\nconst MAX_RETRY_COUNT = 3;\nconst RETRY_DELAY = 1000;\n\ninterface ImportCallbackModule {\n  default: ComponentType<any>;\n}\n\ntype ImportCallback = () => Promise<ImportCallbackModule>;\n\ninterface RetryState {\n  count: number;\n  lastError?: Error;\n}\n\nconst retryStates = new Map<string, RetryState>();\n\nexport function lazyWithRetry(\n  importCallback: ImportCallback,\n  componentName?: string\n): React.LazyExoticComponent<ComponentType<any>> {\n  const key = componentName || importCallback.toString();\n  \n  return lazy(async () => {\n    const state = retryStates.get(key) || { count: 0 };\n    \n    const retry = async (error: Error): Promise<ImportCallbackModule> => {\n      state.count += 1;\n      state.lastError = error;\n      retryStates.set(key, state);\n      \n      if (state.count > MAX_RETRY_COUNT) {\n        // If we've exceeded max retries, try to reload the page once\n        if (!sessionStorage.getItem(`reload_attempted_${key}`)) {\n          sessionStorage.setItem(`reload_attempted_${key}`, 'true');\n          window.location.reload();\n          // This won't be reached, but TypeScript needs it\n          return Promise.reject(error);\n        }\n        \n        console.error(`Failed to load component after ${MAX_RETRY_COUNT} retries:`, error);\n        throw new Error(`Unable to load component. Please refresh the page or contact support.`);\n      }\n      \n      // Wait before retrying\n      await new Promise(resolve => setTimeout(resolve, RETRY_DELAY * state.count));\n      \n      try {\n        const module = await importCallback();\n        // Reset state on success\n        retryStates.delete(key);\n        sessionStorage.removeItem(`reload_attempted_${key}`);\n        return module;\n      } catch (retryError) {\n        return retry(retryError as Error);\n      }\n    };\n    \n    try {\n      const module = await importCallback();\n      // Reset state on success\n      retryStates.delete(key);\n      sessionStorage.removeItem(`reload_attempted_${key}`);\n      return module;\n    } catch (error) {\n      console.warn(`Failed to load component, attempting retry:`, error);\n      return retry(error as Error);\n    }\n  });\n}\n\n// Preload function for critical routes\nexport function preloadComponent(\n  importCallback: ImportCallback\n): Promise<void> {\n  return importCallback().then(() => undefined).catch(() => undefined);\n}\n\n// Intersection Observer for predictive preloading\nexport function setupPredictivePreloading(\n  linkSelector: string = 'a[href^=\"/\"]',\n  preloadMap: Map<string, ImportCallback>\n): void {\n  if (!('IntersectionObserver' in window)) return;\n  \n  const observer = new IntersectionObserver(\n    (entries) => {\n      entries.forEach((entry) => {\n        if (entry.isIntersecting) {\n          const link = entry.target as HTMLAnchorElement;\n          const path = link.getAttribute('href');\n          if (path && preloadMap.has(path)) {\n            const importCallback = preloadMap.get(path);\n            if (importCallback) {\n              preloadComponent(importCallback);\n            }\n          }\n        }\n      });\n    },\n    {\n      rootMargin: '50px'\n    }\n  );\n  \n  // Observe all internal links\n  document.querySelectorAll(linkSelector).forEach((link) => {\n    observer.observe(link);\n  });\n  \n  // Handle dynamically added links\n  const mutationObserver = new MutationObserver((mutations) => {\n    mutations.forEach((mutation) => {\n      mutation.addedNodes.forEach((node) => {\n        if (node.nodeType === 1) {\n          const element = node as Element;\n          if (element.matches(linkSelector)) {\n            observer.observe(element);\n          }\n          element.querySelectorAll(linkSelector).forEach((link) => {\n            observer.observe(link);\n          });\n        }\n      });\n    });\n  });\n  \n  mutationObserver.observe(document.body, {\n    childList: true,\n    subtree: true\n  });\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\src\\vite-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\tailwind.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\tests\\accessibility\\test-accessibility.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Unterminated string literal.","line":35,"column":33}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Accessibility Testing Script\n * Run this script to validate WCAG 2.1 AA compliance\n */\n\nimport { AccessibilityAuditor } from '../frontend/src/utils/accessibilityTesting';\n\n// Test configuration\nconst TEST_PAGES = [\n  '/dashboard',\n  '/channels',\n  '/videos',\n  '/analytics',\n  '/settings',\n];\n\ninterface TestResult {\n  page: string;\n  errors: number;\n  warnings: number;\n  info: number;\n  details: any[];\n}\n\nclass AccessibilityTester {\n  private auditor: AccessibilityAuditor;\n  private results: TestResult[] = [];\n\n  constructor() {\n    this.auditor = new AccessibilityAuditor();\n  }\n\n  async runFullTest(): Promise<void> {\n    console.log('🔍 Starting WCAG 2.1 AA Compliance Test Suite');\n    console.log('=''.repeat(50));\n\n    for (const page of TEST_PAGES) {\n      await this.testPage(page);\n    }\n\n    this.printSummary();\n    this.generateReport();\n  }\n\n  private async testPage(path: string): Promise<void> {\n    console.log(`\\nTesting: ${path}`);\n    \n    // Navigate to page (in a real test, this would use Puppeteer or Playwright)\n    // For now, we'll simulate by checking if we're on the right page\n    if (window.location.pathname !== path) {\n      console.log(`  ⏭️  Skipping (not on page)`);\n      return;\n    }\n\n    // Run audit\n    const issues = await this.auditor.runAudit();\n    \n    // Categorize issues\n    const errors = issues.filter(i => i.severity === 'error');\n    const warnings = issues.filter(i => i.severity === 'warning');\n    const info = issues.filter(i => i.severity === 'info');\n\n    // Store results\n    const result: TestResult = {\n      page: path,\n      errors: errors.length,\n      warnings: warnings.length,\n      info: info.length,\n      details: issues,\n    };\n    this.results.push(result);\n\n    // Print page results\n    if (errors.length === 0 && warnings.length === 0) {\n      console.log('  ✅ PASSED - No accessibility issues found');\n    } else {\n      if (errors.length > 0) {\n        console.log(`  ❌ FAILED - ${errors.length} error(s) found`);\n        errors.forEach(e => {\n          console.log(`     - ${e.message}`);\n          if (e.wcagCriteria) {\n            console.log(`       WCAG: ${e.wcagCriteria}`);\n          }\n        });\n      }\n      if (warnings.length > 0) {\n        console.log(`  ⚠️  ${warnings.length} warning(s) found`);\n      }\n    }\n  }\n\n  private printSummary(): void {\n    console.log('\\n' + '='.repeat(50));\n    console.log('📊 Test Summary');\n    console.log('='.repeat(50));\n\n    const totalErrors = this.results.reduce((sum, r) => sum + r.errors, 0);\n    const totalWarnings = this.results.reduce((sum, r) => sum + r.warnings, 0);\n    const totalInfo = this.results.reduce((sum, r) => sum + r.info, 0);\n    const passedPages = this.results.filter(r => r.errors === 0).length;\n\n    console.log(`\\nPages Tested: ${this.results.length}`);\n    console.log(`Pages Passed: ${passedPages}/${this.results.length}`);\n    console.log(`\\nTotal Issues:`);\n    console.log(`  ❌ Errors: ${totalErrors}`);\n    console.log(`  ⚠️  Warnings: ${totalWarnings}`);\n    console.log(`  ℹ️  Info: ${totalInfo}`);\n\n    // WCAG Compliance Status\n    console.log('\\n📋 WCAG 2.1 AA Compliance Status:');\n    if (totalErrors === 0) {\n      console.log('  ✅ COMPLIANT - All critical requirements met');\n    } else {\n      console.log('  ❌ NON-COMPLIANT - Critical issues must be resolved');\n    }\n\n    // Recommendations\n    if (totalErrors > 0 || totalWarnings > 0) {\n      console.log('\\n💡 Recommendations:');\n      const issueTypes = new Set<string>();\n      this.results.forEach(r => {\n        r.details.forEach(d => issueTypes.add(d.type));\n      });\n\n      const recommendations: Record<string, string> = {\n        'color-contrast': 'Review and adjust color combinations to meet contrast ratios',\n        'alt-text': 'Add descriptive alt text to all informative images',\n        'heading-hierarchy': 'Ensure headings follow proper sequential order',\n        'form-labels': 'Associate all form inputs with descriptive labels',\n        'keyboard-access': 'Make all interactive elements keyboard accessible',\n        'focus-indicator': 'Add visible focus indicators to all focusable elements',\n        'touch-target': 'Increase size of interactive elements to 44x44 pixels minimum',\n        'aria-reference': 'Fix broken ARIA attribute references',\n      };\n\n      issueTypes.forEach(type => {\n        if (recommendations[type]) {\n          console.log(`  • ${recommendations[type]}`);\n        }\n      });\n    }\n  }\n\n  private generateReport(): void {\n    const report = {\n      timestamp: new Date().toISOString(),\n      summary: {\n        pagesTestedred: this.results.length,\n        pagesPassed: this.results.filter(r => r.errors === 0).length,\n        totalErrors: this.results.reduce((sum, r) => sum + r.errors, 0),\n        totalWarnings: this.results.reduce((sum, r) => sum + r.warnings, 0),\n        totalInfo: this.results.reduce((sum, r) => sum + r.info, 0),\n      },\n      wcagCompliance: {\n        level: 'AA',\n        status: this.results.every(r => r.errors === 0) ? 'COMPLIANT' : 'NON-COMPLIANT',\n        criteria: {\n          '1.1.1': 'Non-text Content',\n          '1.3.1': 'Info and Relationships',\n          '1.4.3': 'Contrast (Minimum)',\n          '2.1.1': 'Keyboard',\n          '2.4.3': 'Focus Order',\n          '2.4.6': 'Headings and Labels',\n          '2.4.7': 'Focus Visible',\n          '3.3.2': 'Labels or Instructions',\n          '4.1.2': 'Name, Role, Value',\n        },\n      },\n      details: this.results,\n    };\n\n    // Save report\n    const reportJson = JSON.stringify(report, null, 2);\n    console.log('\\n📄 Full report available in console (copy below):');\n    console.log(reportJson);\n\n    // In a real implementation, save to file\n    // fs.writeFileSync('accessibility-report.json', reportJson);\n  }\n}\n\n// Auto-run test if this is the main module\nif (typeof window !== 'undefined') {\n  // Browser environment\n  const tester = new AccessibilityTester();\n  \n  // Add to window for manual testing\n  (window as any).accessibilityTest = () => tester.runFullTest();\n  \n  console.log('Accessibility testing ready!');\n  console.log('Run: window.accessibilityTest() to start testing');\n  \n  // Auto-run in development\n  if (process.env.NODE_ENV === 'development') {\n    console.log('Auto-running accessibility test in 3 seconds...');\n    setTimeout(() => {\n      tester.runFullTest();\n    }, 3000);\n  }\n}\n\nexport { AccessibilityTester };","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Hp\\projects\\ytempire-mvp\\frontend\\vite.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]
