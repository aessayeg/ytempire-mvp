# Docker Compose for Development Environment
# Owner: DevOps Engineer

version: '3.9'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: ytempire_postgres_dev
    environment:
      POSTGRES_USER: ytempire_dev
      POSTGRES_PASSWORD: dev_password_123
      POSTGRES_DB: ytempire_dev
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ytempire_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ytempire_dev

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ytempire_redis_dev
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data_dev:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ytempire_dev

  # Backend API (with hot reload)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: ytempire_backend_dev
    environment:
      DATABASE_URL: postgresql://ytempire_dev:dev_password_123@postgres:5432/ytempire_dev
      REDIS_URL: redis://redis:6379/0
      SECRET_KEY: dev-secret-key-change-in-production
      DEBUG: "true"
      RELOAD: "true"
      LOG_LEVEL: debug
      CORS_ORIGINS: "http://localhost:3000,http://localhost:5173"
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - backend_venv:/app/.venv
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload --log-level debug
    networks:
      - ytempire_dev

  # Frontend (with hot reload)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: ytempire_frontend_dev
    environment:
      NODE_ENV: development
      VITE_API_URL: http://localhost:8000
      CHOKIDAR_USEPOLLING: "true"
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: npm run dev -- --host 0.0.0.0 --port 3000
    networks:
      - ytempire_dev

  # Celery Worker (with hot reload)
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: ytempire_celery_worker_dev
    environment:
      DATABASE_URL: postgresql://ytempire_dev:dev_password_123@postgres:5432/ytempire_dev
      REDIS_URL: redis://redis:6379/0
      SECRET_KEY: dev-secret-key-change-in-production
      LOG_LEVEL: debug
    volumes:
      - ./backend:/app
      - ./data/uploads:/app/uploads
      - ./data/temp:/app/temp
    depends_on:
      - postgres
      - redis
    command: watchmedo auto-restart --directory=/app --pattern='*.py' --recursive -- celery -A app.core.celery_app worker --loglevel=debug
    networks:
      - ytempire_dev

  # Celery Beat Scheduler
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: ytempire_celery_beat_dev
    environment:
      DATABASE_URL: postgresql://ytempire_dev:dev_password_123@postgres:5432/ytempire_dev
      REDIS_URL: redis://redis:6379/0
      SECRET_KEY: dev-secret-key-change-in-production
    volumes:
      - ./backend:/app
    depends_on:
      - postgres
      - redis
    command: celery -A app.core.celery_app beat --loglevel=debug
    networks:
      - ytempire_dev

  # Flower - Celery Monitoring
  flower:
    image: mher/flower:2.0
    container_name: ytempire_flower_dev
    environment:
      CELERY_BROKER_URL: redis://redis:6379/0
      FLOWER_PORT: 5555
      FLOWER_BASIC_AUTH: admin:dev_password
    ports:
      - "5555:5555"
    depends_on:
      - redis
    networks:
      - ytempire_dev

  # MailHog - Email Testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: ytempire_mailhog_dev
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - ytempire_dev

  # pgAdmin - Database Management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: ytempire_pgadmin_dev
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@ytempire.local
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: "False"
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: "False"
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data_dev:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - ytempire_dev

volumes:
  postgres_data_dev:
  redis_data_dev:
  pgadmin_data_dev:
  backend_venv:

networks:
  ytempire_dev:
    driver: bridge